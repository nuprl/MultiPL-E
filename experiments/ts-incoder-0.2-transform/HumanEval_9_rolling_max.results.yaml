language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max_numbers: number[] = [];\n    let rolling_max_numbers_length:\
    \ number = 0;\n    let rolling_max_numbers_sum: number = 0;\n    let rolling_max_numbers_index:\
    \ number = 0;\n    let rolling_max_numbers_index_sum: number = 0;\n    let rolling_max_numbers_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index: number = 0;\n \
    \   let rolling_max_numbers_index_length_index_sum: number = 0;\n    let rolling_max_numbers_index_length_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length: number =\
    \ 0;\n    let rolling_max_numbers_index_length_index_length_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp32mivbv2.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max[max.length - 1]) {\n            max.push(numbers[i]);\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp9aqsqsd4.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9aqsqsd4.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp1f4nz2uq.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_arr: number[] = [];\n  let rolling_max_num:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_num) {\n      rolling_max_num = numbers[i];\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    rolling_max_arr.push(rolling_max_num);\n\
    \  }\n  return rolling_max_arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp2x8vytc7.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x8vytc7.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    const rolling_max_number:\
    \ number[] = [];\n    let rolling_max_number_index: number[] = [];\n    let rolling_max_number_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphw45azn7.ts(47,9): error TS1005: '','' expected.

    ../../../../tmp/tmphw45azn7.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let current: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    current.push(numbers[i]);\n    if\
    \ (i > 0) {\n      let maxElement = current[current.length - 1];\n      for (let\
    \ j = 0; j < current.length - 1; j++) {\n        if (current[j] > maxElement)\
    \ {\n          maxElement = current[j];\n        }\n      }\n      max.push(maxElement);\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpsetfweml.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsetfweml.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp77_8fol6.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp77_8fol6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let\
    \ index: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n            index =\
    \ i;\n        }\n    }\n    for (let i = index; i < numbers.length; i++) {\n \
    \       result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfq9lzgh8.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq9lzgh8.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max[maxIndexIndex]) {\n      maxIndex.push(i);\n      maxIndexIndex.push(maxIndex.length\
    \ - 1);\n      max.push(numbers[i]);\n    } else {\n      maxIndex[maxIndexIndex.pop()]\
    \ = i;\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphe9glhp5.ts(10,26): error TS2538: Type ''number[]''
    cannot be used as an index type.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9yzwwpze.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9yzwwpze.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_number) {\n            rolling_max_number\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n\
    \    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] <\
    \ rolling_max_number) {\n            rolling_max_number = numbers[i];\n      \
    \      rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpt836hgt1.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt836hgt1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = numbers[0];\n\
    \    let currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[currentIndex];\n        } else {\n         \
    \   currentMax = numbers[currentIndex];\n        }\n        currentIndex++;\n\
    \    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpid52_r7n.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpid52_r7n.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_list: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_number) {\n      rolling_max_number = numbers[i];\n    }\n   \
    \ rolling_max_list.push(rolling_max_number);\n  }\n  return rolling_max_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let max_element:\
    \ number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = max_index; i <\
    \ numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n    }\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1l6lr2rr.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1l6lr2rr.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentMaxIndex: number[] = [];\n  let currentMaxIndexIndex: number[] = [];\n\
    \  let currentMaxIndexIndexIndex: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    currentMax.push(numbers[i]);\n    currentMaxIndex.push(i);\n   \
    \ currentMaxIndexIndex.push(i);\n    currentMaxIndexIndexIndex.push(i);\n  }\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n\
    \        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpmnh6r_r5.ts(75,1): error TS1005: '';'' expected.

    ../../../../tmp/tmpmnh6r_r5.ts(75,9): error TS1005: '')'' expected.

    ../../../../tmp/tmpmnh6r_r5.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp61rek9b6.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp61rek9b6.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ let index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        index++;\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            result.push(max);\n            max = numbers[i];\n   \
    \     }\n    }\n    result.push(max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpndya9hb5.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpndya9hb5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let currentMax: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax[0])\
    \ {\n            currentMax[0] = numbers[i];\n            currentMax[1] = i;\n\
    \        }\n        if (numbers[i] > currentMax[0]) {\n            currentMax[0]\
    \ = numbers[i];\n            currentMax[1] = i;\n        }\n    }\n    max = currentMax;\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpxio53_0g.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxio53_0g.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max_array: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    let rolling_max_element = numbers[i];\n    let rolling_max_index\
    \ = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j]\
    \ > rolling_max_element) {\n        rolling_max_element = numbers[j];\n      \
    \  rolling_max_index = j;\n      }\n    }\n    rolling_max_array.push(rolling_max_element);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpd58yp_on.js:24:12)\n    at Object.<anonymous> (/tmp/tmpd58yp_on.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppbg52r9e.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmppbg52r9e.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7gaawuc0.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334357
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index1:\
    \ number[] = [];\n    let rolling_max_value1: number[] = [];\n    let rolling_max_index2:\
    \ number[] = [];\n    let rolling_max_value2: number[] = [];\n    let rolling_max_index3:\
    \ number[] = [];\n    let rolling_max_value3: number[] = [];\n    let rolling_max_index4:\
    \ number[] = [];\n    let rolling_max_value4: number[] = [];\n    let rolling_max_index5:\
    \ number[] = [];\n    let rolling_max_value5: number[] = [];\n    let rolling_max_index6:\
    \ number[] = [];\n    let rolling_max_value6: number[] = [];\n    let rolling_max_index7:\
    \ number[] = [];\n    let rolling_max_value7: number[] = [];\n    let rolling_max_index8:\
    \ number[] = [];\n    let rolling_max_value8: number[] = [];\n    let rolling_max_index9:\
    \ number[] = [];\n    let rolling_max_value9: number[] = [];\n    let rolling_max_index10:\
    \ number[] = [];\n    let rolling_max_value10: number[] = [];\n    let rolling_max_index11:\
    \ number[] = [];\n    let rolling_max_value11: number[] = [];\n    let rolling_max_index12:\
    \ number[] = [];\n    let rolling_max_value12: number[] = [];\n    let rolling_max_index13:\
    \ number[] = [];\n    let rolling_max_value13: number[] = [];\n    let rolling_max_index14:\
    \ number[] = [];\n    let rolling_max_value14: number[] = [];\n    let rolling_max_index15:\
    \ number[] = [];\n    let rolling_max_value15: number[] = [];\n    let rolling_max_index16:\
    \ number[] = [];\n    let rolling_max_value16: number[] = [];\n    let rolling_max_index17:\
    \ number[] = [];\n    let rolling_max_value17: number[] = [];\n    let rolling_max_index18:\
    \ number[] = [];\n    let rolling_max_value18: number[] = [];\n    let rolling_max_index19:\
    \ number[] = [];\n    let rolling_max_value19: number[] = [];\n    let rolling_max_index20:\
    \ number[] = [];\n    let rolling_max_value20: number[] = [];\n    let rolling_max_index21:\
    \ number[] = [];\n    let rolling_max_value21: number[] = [];\n    let rolling_max_index22:\
    \ number[] = [];\n    let rolling_max_value22: number[] = [];\n    let rolling_max_index23:\
    \ number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6gxhwt_p.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpcz1pyei8.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcz1pyei8.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbitn5vcz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbitn5vcz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n        else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpvwgnbrof.js:29:12)\n    at Object.<anonymous> (/tmp/tmpvwgnbrof.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max[max.length - 1]) {\n      max.push(numbers[i]);\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpu1o_h329.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu1o_h329.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_element: number[] = [];\n  let max_index: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element[max_index[0]])\
    \ {\n      max_element[max_index[0]] = numbers[i];\n      max_index[0] = i;\n\
    \    }\n  }\n  for (let i = 1; i < max_index.length; i++) {\n    if (numbers[max_index[i\
    \ - 1]] > max_element[max_index[i]]) {\n      max_element[max_index[i]] = numbers[max_index[i\
    \ - 1]];\n      max_index[i] = max_index[i - 1];\n    }\n  }\n  return max_element;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpiefe47pv.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiefe47pv.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpl64yvs6h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl64yvs6h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnjjggtjv.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnjjggtjv.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpiu9egmmf.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiu9egmmf.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpr1plyksm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1plyksm.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334364
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let rolling_max: number[] = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max[rolling_max.length\
    \ - 1] < numbers[i]) {\n      rolling_max.push(numbers[i]);\n    } else {\n  \
    \    rolling_max = rolling_max.slice(0, rolling_max.length - 1);\n      rolling_max.push(numbers[i]);\n\
    \    }\n  }\n  max = rolling_max;\n  return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpnfihq9pn.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnfihq9pn.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334409
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_length:\
    \ number = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpwbpmgksi.ts(67,9): error TS1005: '','' expected.

    ../../../../tmp/tmpwbpmgksi.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334409
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max.push(Math.max(...rolling_max));\n  }\n  return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  -Infinity,\n  -Infinity,\n  -Infinity\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_u3cg32b.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_u3cg32b.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ -Infinity, -Infinity, -Infinity ],\n  expected: [ 1, 2, 3, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpx5zjcwhs.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334353
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_maxes: number[] = [];\n    let rolling_max: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rolling_max.push(numbers[i]);\n\
    \        if (rolling_maxes.length === 0) {\n            rolling_maxes.push(rolling_max);\n\
    \            rolling_max = [];\n        } else {\n            let rolling_max_found\
    \ = false;\n            for (let j = 0; j < rolling_maxes.length; j++) {\n   \
    \             if (rolling_maxes[j].length > rolling_max[i].length) {\n       \
    \             rolling_max_found = true;\n                    rolling_maxes.splice(j,\
    \ 1);\n                    rolling_max.splice(j, 1);\n                    break;\n\
    \                }\n            }\n            if (!rolling_max_found) {\n   \
    \             rolling_maxes.push(rolling_max);\n                rolling_max =\
    \ [];\n            }\n        }\n    }\n    return rolling_maxes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4mso7154.ts(11,32): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../tmp/tmp4mso7154.ts(16,38): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../tmp/tmp4mso7154.ts(16,62): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../tmp/tmp4mso7154.ts(24,36): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpiqe05hf_.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiqe05hf_.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_element: number[] = [];\n  let current_max = numbers[0];\n\
    \  let current_index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > current_max) {\n      max_element[current_index] = current_max;\n\
    \      current_max = numbers[i];\n      current_index = i;\n    } else {\n   \
    \   current_max = numbers[i];\n    }\n  }\n  max_element[current_index] = current_max;\n\
    \  return max_element;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmphz4o17_g.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmphz4o17_g.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    let currentMaxIndex: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \            currentMaxIndex = i;\n        }\n    }\n    for (let i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (numbers[i] > currentMax) {\n            result.push(numbers[i]);\n\
    \            numbers[i] = numbers[currentMaxIndex];\n            numbers[currentMaxIndex]\
    \ = numbers[i];\n            currentMax = numbers[i];\n            currentMaxIndex\
    \ = i;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpq_59hrxv.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq_59hrxv.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp82smcz0u.js:29:12)\n    at Object.<anonymous> (/tmp/tmp82smcz0u.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpl64yvs6h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl64yvs6h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[0])\
    \ {\n      currentMax[0] = numbers[i];\n    }\n    if (numbers[i] > currentMax[1])\
    \ {\n      currentMax[1] = numbers[i];\n    }\n    if (numbers[i] > currentMax[2])\
    \ {\n      currentMax[2] = numbers[i];\n    }\n    if (numbers[i] > currentMax[3])\
    \ {\n      currentMax[3] = numbers[i];\n    }\n    if (numbers[i] > currentMax[4])\
    \ {\n      currentMax[4] = numbers[i];\n    }\n    if (numbers[i] > currentMax[5])\
    \ {\n      currentMax[5] = numbers[i];\n    }\n    if (numbers[i] > currentMax[6])\
    \ {\n      currentMax[6] = numbers[i];\n    }\n    if (numbers[i] > currentMax[7])\
    \ {\n      currentMax[7] = numbers[i];\n    }\n  }\n  max = currentMax;\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp8ut4mo6k.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8ut4mo6k.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ let index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        result.push(numbers[index]);\n\
    \        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy39wxn40.js:23:12)\n    at Object.<anonymous> (/tmp/tmpy39wxn40.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp2_ujb91o.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2_ujb91o.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnjjggtjv.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnjjggtjv.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n  }\n  while (currentMax.length\
    \ > 0) {\n    max = currentMax;\n    currentMax = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n      if (currentIndex[i] < numbers.length - 1) {\n\
    \        if (numbers[currentIndex[i]] > max[currentIndex[i + 1]]) {\n        \
    \  max[currentIndex[i + 1]] = numbers[currentIndex[i]];\n        }\n      }\n\
    \    }\n    currentIndex = currentIndex.slice();\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpiuo15604.js:32:12)\n    at Object.<anonymous> (/tmp/tmpiuo15604.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 3,\
    \ 2 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let currentMax: number = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax)\
    \ {\n      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpfy5_4vq5.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfy5_4vq5.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp4gldofl9.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4gldofl9.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpr1plyksm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1plyksm.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334364
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max_numbers: number[] = [];\n  let rolling_max_numbers_length:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_numbers_length\
    \ < numbers[i]) {\n      rolling_max_numbers_length = numbers[i];\n      rolling_max_numbers\
    \ = numbers;\n    }\n  }\n  return rolling_max_numbers;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpbk_zrgjf.js:21:12)\n    at Object.<anonymous> (/tmp/tmpbk_zrgjf.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_number: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max_number.push(numbers[i]);\n    if (max_number.length >= i) {\n\
    \      max_number[i] = Math.max(max_number[i], numbers[i]);\n    }\n  }\n  return\
    \ max_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp383sjbmr.js:20:12)\n    at Object.<anonymous> (/tmp/tmp383sjbmr.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max[maxIndex[0]])\
    \ {\n            maxIndex[0] = i;\n            max = numbers.slice(0);\n     \
    \   }\n        if (numbers[i] > max[maxIndex[1]]) {\n            maxIndex[1] =\
    \ i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i] >\
    \ max[maxIndex[2]]) {\n            maxIndex[2] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[3]]) {\n            maxIndex[3]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[4]]) {\n            maxIndex[4] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[5]]) {\n            maxIndex[5]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[6]]) {\n            maxIndex[6] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[7]]) {\n            maxIndex[7]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[8]]) {\n            maxIndex[8] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[9]]) {\n            maxIndex[9]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[10]]) {\n            maxIndex[10] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[11]]) {\n            maxIndex[11]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[12]]) {\n            maxIndex[12] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[13]]) {\n            maxIndex[13]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[14]]) {\n            maxIndex[14] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[15]]) {\n            maxIndex[15]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[16]]) {\n            maxIndex[16] = i;\n            max = numbers.slice(0);\n\
    \        }\n        if (numbers[i] > max[maxIndex[17]]) {\n            maxIndex[17]\
    \ = i;\n            max = numbers.slice(0);\n        }\n        if (numbers[i]\
    \ > max[maxIndex[18]]) {\n            maxIndex[18] = \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpfqe2u48w.ts(83,9): error TS1005: '';'' expected.

    ../../../../tmp/tmpfqe2u48w.ts(95,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max[maxIndex[0]])\
    \ {\n      maxIndex[0] = i;\n      max[0] = numbers[i];\n    } else {\n      maxIndex[1]\
    \ = i;\n      max[1] = numbers[i];\n    }\n  }\n  return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpd075_ube.js:24:12)\n    at Object.<anonymous> (/tmp/tmpd075_ube.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            result.push(max);\n        \
    \    max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpie1ckirk.js:29:12)\n    at Object.<anonymous> (/tmp/tmpie1ckirk.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_list: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > rolling_max_value) {\n            rolling_max_value = numbers[i];\n      \
    \      rolling_max_list.push(rolling_max_value);\n        }\n    }\n    return\
    \ rolling_max_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpqmwj_8et.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqmwj_8et.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    currentMax.push(numbers[i]);\n \
    \   if (currentMax.length > 0) {\n      max = currentMax;\n      currentMax =\
    \ [];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpqxx7_qsx.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqxx7_qsx.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpr1plyksm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1plyksm.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334364
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  const rolling_max_max_value:\
    \ number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_max_value) {\n      rolling_max_max_value = numbers[i];\n    }\n\
    \    rolling_max_result.push(rolling_max_max_value);\n  }\n  return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6bq3y_ae.ts(10,7): error TS2588: Cannot assign to ''rolling_max_max_value''
    because it is a constant.

    '
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let max_element:\
    \ number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = max_index; i <\
    \ numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n    }\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1l6lr2rr.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1l6lr2rr.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max_element: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    let rolling_max_element = rolling_max_element.concat(\n\
    \      rolling_max(\n        numbers.slice(i + 1, numbers.length)\n      )\n \
    \   );\n    rolling_max_element = rolling_max_element.concat(numbers[i]);\n  }\n\
    \  return rolling_max_element;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprjluoazw.ts(8,31): error TS2448: Block-scoped variable
    ''rolling_max_element'' used before its declaration.

    '
  timestamp: 1660334410
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpx5zjcwhs.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max[max.length - 1]) {\n      max.push(numbers[i]);\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpu1o_h329.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu1o_h329.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334407
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        result.push(max);\n\
    \        index++;\n    }\n    return result;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_number = numbers[0];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max_rolling_number) {\n      max_rolling_number\
    \ = numbers[i];\n    }\n  }\n  return max_rolling_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpvotffupm.ts(9,7): error TS2588: Cannot assign to ''max_rolling_number''
    because it is a constant.

    ../../../../tmp/tmpvotffupm.ts(12,3): error TS2322: Type ''number'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppbg52r9e.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmppbg52r9e.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_number < numbers[i]) {\n   \
    \         rolling_max_number = numbers[i];\n            rolling_max_index = i;\n\
    \        }\n    }\n    rolling_max_result.push(rolling_max_number);\n    for (let\
    \ i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (rolling_max_number\
    \ < numbers[i]) {\n            rolling_max_number = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n        rolling_max_result.push(rolling_max_number);\n    }\n\
    \    return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmplr48fme7.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmplr48fme7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            result.push(numbers[i]);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmplxm2n_pn.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmplxm2n_pn.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let currentMax = numbers[0];\n    let\
    \ currentMaxIndex = -1;\n    for (let i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n  \
    \          currentMaxIndex = i;\n        }\n    }\n    result.push(currentMax);\n\
    \    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] >\
    \ currentMax) {\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpc7xb_ale.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc7xb_ale.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334412
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index1:\
    \ number[] = [];\n    let rolling_max_value1: number[] = [];\n    let rolling_max_index2:\
    \ number[] = [];\n    let rolling_max_value2: number[] = [];\n    let rolling_max_index3:\
    \ number[] = [];\n    let rolling_max_value3: number[] = [];\n    let rolling_max_index4:\
    \ number[] = [];\n    let rolling_max_value4: number[] = [];\n    let rolling_max_index5:\
    \ number[] = [];\n    let rolling_max_value5: number[] = [];\n    let rolling_max_index6:\
    \ number[] = [];\n    let rolling_max_value6: number[] = [];\n    let rolling_max_index7:\
    \ number[] = [];\n    let rolling_max_value7: number[] = [];\n    let rolling_max_index8:\
    \ number[] = [];\n    let rolling_max_value8: number[] = [];\n    let rolling_max_index9:\
    \ number[] = [];\n    let rolling_max_value9: number[] = [];\n    let rolling_max_index10:\
    \ number[] = [];\n    let rolling_max_value10: number[] = [];\n    let rolling_max_index11:\
    \ number[] = [];\n    let rolling_max_value11: number[] = [];\n    let rolling_max_index12:\
    \ number[] = [];\n    let rolling_max_value12: number[] = [];\n    let rolling_max_index13:\
    \ number[] = [];\n    let rolling_max_value13: number[] = [];\n    let rolling_max_index14:\
    \ number[] = [];\n    let rolling_max_value14: number[] = [];\n    let rolling_max_index15:\
    \ number[] = [];\n    let rolling_max_value15: number[] = [];\n    let rolling_max_index16:\
    \ number[] = [];\n    let rolling_max_value16: number[] = [];\n    let rolling_max_index17:\
    \ number[] = [];\n    let rolling_max_value17: number[] = [];\n    let rolling_max_index18:\
    \ number[] = [];\n    let rolling_max_value18: number[] = [];\n    let rolling_max_index19:\
    \ number[] = [];\n    let rolling_max_value19: number[] = [];\n    let rolling_max_index20:\
    \ number[] = [];\n    let rolling_max_value20: number[] = [];\n    let rolling_max_index21:\
    \ number[] = [];\n    let rolling_max_value21: number[] = [];\n    let rolling_max_index22:\
    \ number[] = [];\n    let rolling_max_value22: number[] = [];\n    let rolling_max_index23:\
    \ number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6gxhwt_p.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp99u2ykex.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99u2ykex.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334368
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let max_element: number\
    \ = 0;\n    let current_max: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n        if (numbers[i] > current_max) {\n            current_max =\
    \ numbers[i];\n        }\n    }\n    rolling_max = [max_element];\n    for (let\
    \ i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > current_max)\
    \ {\n            rolling_max.push(numbers[i]);\n        }\n    }\n    return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp9g2rc2ib.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9g2rc2ib.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334413
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexIndex: number[] = [];\n    let maxIndexIndexIndex: number[] =\
    \ [];\n    let maxIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp26zycom1.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334413
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_index\
    \ = 0;\n  let rolling_max_value = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] >= rolling_max_value) {\n      rolling_max_value\
    \ = numbers[i];\n      rolling_max_index = i;\n    }\n  }\n  rolling_max_array.push(rolling_max_value);\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpl6yk6mmm.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl6yk6mmm.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334413
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let max_rolling_number\
    \ = numbers[i];\n    let max_rolling_number_index = i;\n    for (let j = i + 1;\
    \ j < numbers.length; j++) {\n      if (numbers[j] > max_rolling_number) {\n \
    \       max_rolling_number = numbers[j];\n        max_rolling_number_index = j;\n\
    \      }\n    }\n    max_rolling_number_index.push(max_rolling_number_index.length);\n\
    \    max_rolling_number.push(max_rolling_number_index);\n  }\n  return max_rolling_number;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp32gqxxeq.ts(17,30): error TS2339: Property ''push''
    does not exist on type ''number''.

    ../../../../tmp/tmp32gqxxeq.ts(17,60): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../tmp/tmp32gqxxeq.ts(18,24): error TS2339: Property ''push'' does not
    exist on type ''number''.

    '
  timestamp: 1660334413
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_arr: number[] = [];\n  let rolling_max_num:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_num\
    \ < numbers[i]) {\n      rolling_max_num = numbers[i];\n    }\n    rolling_max_arr.push(rolling_max_num);\n\
    \  }\n  return rolling_max_arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334413
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n  }\n  while (currentMax.length\
    \ > 0) {\n    let maxIndex = currentMax.indexOf(Math.max.apply(null, currentMax));\n\
    \    if (maxIndex > -1) {\n      max = max.concat(currentMax.slice(0, maxIndex));\n\
    \      currentMax = currentMax.slice(maxIndex + 1);\n      currentIndex = currentIndex.slice(0,\
    \ maxIndex + 1);\n    } else {\n      max = max.concat(currentMax);\n      currentMax\
    \ = [];\n      currentIndex = [];\n    }\n  }\n  return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmp9czpu56w.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9czpu56w.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334413
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let max_element: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element)\
    \ {\n      max_element = numbers[i];\n    }\n    rolling_max_result.push(max_element);\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (rolling_max_number\
    \ < numbers[i]) {\n            rolling_max_number = numbers[i];\n        }\n \
    \       rolling_max_result.push(rolling_max_number);\n    }\n    return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_numbers: number[] = [];\n  let rolling_max_numbers_length\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_numbers[rolling_max_numbers_length])\
    \ {\n      rolling_max_numbers[rolling_max_numbers_length] = numbers[i];\n   \
    \   rolling_max_numbers_length++;\n    }\n  }\n  return rolling_max_numbers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp3acfmu12.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3acfmu12.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ let index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        index++;\n \
    \   }\n    for (let i = index; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    result.push(max);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpflv6b8q2.js:24:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpflv6b8q2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number;\n  let rolling_max_index: number;\n  let rolling_max_length: number;\n\
    \n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value = numbers[i];\n\
    \    rolling_max_index = 0;\n    rolling_max_length = numbers.length;\n    while\
    \ (rolling_max_index < rolling_max_length) {\n      if (rolling_max_value > numbers[rolling_max_index])\
    \ {\n        rolling_max_value = numbers[rolling_max_index];\n      }\n      rolling_max_index++;\n\
    \    }\n    rolling_max_array.push(rolling_max_value);\n  }\n  return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpk4n2naet.js:28:12)\n    at Object.<anonymous> (/tmp/tmpk4n2naet.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpcvur2kuj.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcvur2kuj.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_index = 0;\n    let max_value = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    let result = [];\n    for (let i = max_index; i < numbers.length;\
    \ i++) {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1y_5by0p.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1y_5by0p.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       } else {\n            result.push(numbers[i]);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpkldcxwez.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkldcxwez.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp77_8fol6.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp77_8fol6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_numbers: number[] = [];\n    let rolling_max_numbers_index\
    \ = 0;\n    let rolling_max_numbers_length = 0;\n    let rolling_max_numbers_sum\
    \ = 0;\n    let rolling_max_numbers_max = 0;\n    let rolling_max_numbers_min\
    \ = 0;\n    let rolling_max_numbers_average = 0;\n    let rolling_max_numbers_average_index\
    \ = 0;\n    let rolling_max_numbers_average_length = 0;\n    let rolling_max_numbers_average_sum\
    \ = 0;\n    let rolling_max_numbers_average_max = 0;\n    let rolling_max_numbers_average_min\
    \ = 0;\n    let rolling_max_numbers_average_average = 0;\n    let rolling_max_numbers_average_average_index\
    \ = 0;\n    let rolling_max_numbers_average_average_length = 0;\n    let rolling_max_numbers_average_average_sum\
    \ = 0;\n    let rolling_max_numbers_average_average_max = 0;\n    let rolling_max_numbers_average_average_min\
    \ = 0;\n    let rolling_max_numbers_average_average_average = 0;\n    let rolling_max_numbers_average_average_average_index\
    \ = 0;\n    let rolling_max_numbers_average_average_average_length = 0;\n    let\
    \ rolling_max_numbers_average_average_average_sum = 0;\n    let rolling_max_numbers_average_average_average_max\
    \ = 0;\n    let rolling_max_numbers_average_average_average_min = 0;\n    let\
    \ rolling_max_numbers_average_average_average_average = 0;\n    let rolling_max_numbers_average_average_average_average_index\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_length = 0;\n\
    \    let rolling_max_numbers_average_average_average_average_sum = 0;\n    let\
    \ rolling_max_numbers_average_average_average_average_max = 0;\n    let rolling_max_numbers_average_average_average_average_min\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_average =\
    \ 0;\n    let rolling_max_numbers_average_average_average_average_average_index\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_average_length\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_sum = 0;\n\
    \    let rolling_max_numbers_average_average_average_average_max = 0;\n    let\
    \ rolling_max_numbers_average_average_average_average_min = 0;\n    let rolling_max_numbers_average_average_average_average_average\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_average_index\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_average_length\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_sum = 0;\n\
    \    let rolling_max_numbers_average_average_average_average_max = 0;\n    let\
    \ rolling_max_numbers_average_average_average_min = 0;\n    let rolling_max_numbers_average_average_average_average_average\
    \ = 0;\n    let rolling_max_numbers_average_average_average_average_average_index\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp2zbkfoy3.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334414
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprhg6rm14.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_value = numbers[0];\n  let max_index = 0;\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n     \
    \ max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpjzsfmdpj.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjzsfmdpj.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: -5
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    let index = 0;\n \
    \   while (numbers.length > 0) {\n        if (numbers[index] > max) {\n      \
    \      max = numbers[index];\n        }\n        result.push(max);\n        index++;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdff438590\n 1: 0x2b10f6e80727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b10f7a1528e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b10f734ff8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b10f74e1760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b10f74e90cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b10f76d37db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b10f70327f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max = [];\n  let rolling_max_index = 0;\n  let rolling_max_value\
    \ = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= rolling_max_value) {\n      rolling_max[rolling_max_index] = rolling_max_value;\n\
    \      rolling_max_value = numbers[i];\n      rolling_max_index++;\n    } else\
    \ {\n      rolling_max[rolling_max_index] = numbers[i];\n    }\n  }\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value;\n  return rolling_max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1x22qwrk.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1x22qwrk.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp82smcz0u.js:29:12)\n    at Object.<anonymous> (/tmp/tmp82smcz0u.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_element: number\
    \ = 0;\n  let current_max_element: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max_element) {\n      max_element = numbers[i];\n\
    \    }\n    if (numbers[i] > current_max_element) {\n      current_max_element\
    \ = numbers[i];\n    }\n  }\n  rolling_max_array.push(current_max_element);\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp34_qzqtd.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp34_qzqtd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_maxes: number[] = [];\n    let max_value = numbers[0];\n\
    \    let max_index = 0;\n    for (let i = 1; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_index = i;\n        }\n    }\n    rolling_maxes.push(max_value);\n\
    \    for (let i = max_index + 1; i < numbers.length; i++) {\n        rolling_maxes.push(numbers[i]);\n\
    \    }\n    return rolling_maxes;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpith2k2br.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpith2k2br.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpr1plyksm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1plyksm.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334364
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max = [];\n    let rolling_max_index = 0;\n    let\
    \ rolling_max_value = numbers[0];\n    let rolling_max_found = false;\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_value)\
    \ {\n            rolling_max_value = numbers[i];\n            rolling_max_found\
    \ = true;\n        }\n        if (rolling_max_found) {\n            rolling_max[rolling_max_index]\
    \ = rolling_max_value;\n            rolling_max_index++;\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_found = false;\n        }\n    }\n  \
    \  if (rolling_max_found) {\n        rolling_max[rolling_max_index] = rolling_max_value;\n\
    \    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpw2et2jil.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw2et2jil.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    rolling_max_array.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpcu3y0w92.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcu3y0w92.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnjjggtjv.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnjjggtjv.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334406
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_value = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value)\
    \ {\n      rolling_max_array.push(max_value);\n      max_value = numbers[i];\n\
    \    } else {\n      max_value = numbers[i];\n    }\n  }\n  rolling_max_array.push(max_value);\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpir827vp9.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpir827vp9.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  let max_rolling_number_index_index: number[] = [];\n  let\
    \ max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp_ft605ie.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_number\
    \ = Math.max(rolling_max_number, numbers[i]);\n    rolling_max_result.push(rolling_max_number);\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpdsdy33i0.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdsdy33i0.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334360
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexIndex: number[] = [];\n    let maxIndexIndexIndex: number[] =\
    \ [];\n    let maxIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpv9xj1atz.ts(35,9): error TS1005: '','' expected.

    ../../../../tmp/tmpv9xj1atz.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334414
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax = numbers[0];\n\
    \    let currentMaxIndex = 0;\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \            currentMaxIndex = i;\n        }\n    }\n    for (let i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (numbers[i] === currentMax) {\n            result.push(numbers[i]);\n\
    \            numbers.splice(i, 1);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmplt47qgub.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmplt47qgub.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334414
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index2: number[]\
    \ = [];\n  let rolling_max_value2: number[] = [];\n  let rolling_max_index3: number[]\
    \ = [];\n  let rolling_max_value3: number[] = [];\n  let rolling_max_index4: number[]\
    \ = [];\n  let rolling_max_value4: number[] = [];\n  let rolling_max_index5: number[]\
    \ = [];\n  let rolling_max_value5: number[] = [];\n  let rolling_max_index6: number[]\
    \ = [];\n  let rolling_max_value6: number[] = [];\n  let rolling_max_index7: number[]\
    \ = [];\n  let rolling_max_value7: number[] = [];\n  let rolling_max_index8: number[]\
    \ = [];\n  let rolling_max_value8: number[] = [];\n  let rolling_max_index9: number[]\
    \ = [];\n  let rolling_max_value9: number[] = [];\n  let rolling_max_index10:\
    \ number[] = [];\n  let rolling_max_value10: number[] = [];\n  let rolling_max_index11:\
    \ number[] = [];\n  let rolling_max_value11: number[] = [];\n  let rolling_max_index12:\
    \ number[] = [];\n  let rolling_max_value12: number[] = [];\n  let rolling_max_index13:\
    \ number[] = [];\n  let rolling_max_value13: number[] = [];\n  let rolling_max_index14:\
    \ number[] = [];\n  let rolling_max_value14: number[] = [];\n  let rolling_max_index15:\
    \ number[] = [];\n  let rolling_max_value15: number[] = [];\n  let rolling_max_index16:\
    \ number[] = [];\n  let rolling_max_value16: number[] = [];\n  let rolling_max_index17:\
    \ number[] = [];\n  let rolling_max_value17: number[] = [];\n  let rolling_max_index18:\
    \ number[] = [];\n  let rolling_max_value18: number[] = [];\n  let rolling_max_index19:\
    \ number[] = [];\n  let rolling_max_value19: number[] = [];\n  let rolling_max_index20:\
    \ number[] = [];\n  let rolling_max_value20: number[] = [];\n  let rolling_max_index21:\
    \ number[] = [];\n  let rolling_max_value21: number[] = [];\n  let rolling_max_index22:\
    \ number[] = [];\n  let rolling_max_value22: number[] = [];\n  let rolling_max_index23:\
    \ number[] = [];\n  let rolling_max_value23: number[] = [];\n  let rolling_max_index24:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpegjsj6yn.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334416
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var currentMax: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var currentMaxIndex: number = 0;\n    var currentMaxValue: number = 0;\n\
    \    var current\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbk1ngf0d.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334416
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] === max) {\n            result.push(max);\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp0588s6mg.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0588s6mg.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334416
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let currentMax: number[] = [];\n\
    \    let currentMaxIndex: number[] = [];\n    let currentMaxIndexIndex: number[]\
    \ = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let currentMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndex\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpgz9anchf.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334416
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = 0;\n    var current: number = 0;\n    while (index < numbers.length)\
    \ {\n        current = numbers[index];\n        if (current > max) {\n       \
    \     max = current;\n        }\n        result.push(current);\n        index++;\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpcglvfg95.js:25:12)\n    at Object.<anonymous> (/tmp/tmpcglvfg95.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334416
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy9xxgr_7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy9xxgr_7.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbitn5vcz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbitn5vcz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const max_element = numbers[i];\n    let max_index\
    \ = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j]\
    \ > max_element) {\n        max_element = numbers[j];\n        max_index = j;\n\
    \      }\n    }\n    rolling_max_array.push(max_element);\n    numbers[max_index]\
    \ = numbers[i];\n    numbers.splice(i, 1);\n  }\n  return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp1ekbri9i.ts(12,9): error TS2588: Cannot assign to ''max_element''
    because it is a constant.

    '
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number[] = [];\n  let rolling_max_index = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (rolling_max_number[rolling_max_index] === undefined) {\n   \
    \   rolling_max_number[rolling_max_index] = numbers[i];\n      rolling_max_result.push(rolling_max_number[rolling_max_index]);\n\
    \    } else {\n      if (numbers[i] > rolling_max_number[rolling_max_index]) {\n\
    \        rolling_max_number[rolling_max_index] = numbers[i];\n        rolling_max_result.push(rolling_max_number[rolling_max_index]);\n\
    \      }\n    }\n    rolling_max_index++;\n  }\n  return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp2s63w5f5.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2s63w5f5.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max_array: number[] = [];\n  let rolling_max_index\
    \ = 0;\n  let rolling_max_value = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] >= rolling_max_value) {\n      rolling_max_value\
    \ = numbers[i];\n      rolling_max_index = i;\n    }\n  }\n  rolling_max_array.push(rolling_max_value);\n\
    \  for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(numbers[i - 1], numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpk4_wmk39.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk4_wmk39.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_maxes: number[] = [];\n    let rolling_max: number[]\
    \ = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpr8nazgv1.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334356
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max_numbers: number[] = [];\n    let rolling_max_numbers_length:\
    \ number = 0;\n    let rolling_max_numbers_max: number = 0;\n    let rolling_max_numbers_max_index:\
    \ number = 0;\n    let rolling_max_numbers_max_value: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_numbers_max)\
    \ {\n            rolling_max_numbers_max = numbers[i];\n            rolling_max_numbers_max_index\
    \ = i;\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n   \
    \     if (numbers[i] === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_numbers_max) {\n            rolling_max_numbers_max\
    \ = numbers[i];\n            rolling_max_numbers_max_index = i;\n        }\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_numbers_max) {\n            rolling_max_numbers_max\
    \ = numbers[i];\n            rolling_max_numbers_max_index = i;\n        }\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_numbers_max) {\n            rolling_max_numbers_max\
    \ = numbers[i];\n            rolling_max_numbers_max_index = i;\n        }\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_numbers_max) {\n            rolling_max_numbers_max\
    \ = numbers[i];\n            rolling_max_numbers_max_index = i;\n        }\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > rolling_max_numbers_max) {\n            rolling_max_numbers_max\
    \ = numbers[i];\n            rolling_max_numbers_max_index = i;\n        }\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === rolling_max_numbers_max) {\n            rolling_max_numbers_numbers.push(numbers[i]);\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpyda113xi.ts(79,1): error TS1005: '')'' expected.

    ../../../../tmp/tmpyda113xi.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334417
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let rolling_max: number[] = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max.length === 0)\
    \ {\n      rolling_max.push(numbers[i]);\n      continue;\n    }\n    if (rolling_max[rolling_max.length\
    \ - 1] < numbers[i]) {\n      rolling_max.push(numbers[i]);\n    } else {\n  \
    \    rolling_max = rolling_max.slice(0, rolling_max.length - 1);\n      rolling_max.push(numbers[i]);\n\
    \    }\n  }\n  max = rolling_max;\n  return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpurm2wy0x.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpurm2wy0x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let\
    \ index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        index++;\n \
    \   }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            result.push(max);\n            max = numbers[i];\n   \
    \     }\n    }\n    result.push(max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_d2fjd0d.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp_d2fjd0d.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_index_index: number[] = [];\n   \
    \ let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[]\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpokwpbe0u.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334369
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334370
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpiqe05hf_.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiqe05hf_.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334410
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpieskb1x4.js:29:12)\n    at Object.<anonymous> (/tmp/tmpieskb1x4.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_index.push(i);\n    rolling_max_value.push(numbers[i]);\n\
    \  }\n  for (let i = 0; i < numbers.length; i++) {\n    let current_max = rolling_max_value[i];\n\
    \    let current_max_index = rolling_max_index[i];\n    for (let j = i + 1; j\
    \ < numbers.length; j++) {\n      if (numbers[j] > current_max) {\n        rolling_max_value[j]\
    \ = numbers[j];\n        rolling_max_index[j] = i;\n        current_max = numbers[j];\n\
    \      }\n    }\n    rolling_max.push(current_max);\n  }\n  return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpo9je2k3y.js:31:12)\n    at Object.<anonymous> (/tmp/tmpo9je2k3y.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprhg6rm14.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334414
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexCount: number[] = [];\n    let maxIndexCountIndex: number[] =\
    \ [];\n    let maxIndexCountIndex2: number[] = [];\n    let maxIndexCountIndex3:\
    \ number[] = [];\n    let maxIndexCountIndex4: number[] = [];\n    let maxIndexCountIndex5:\
    \ number[] = [];\n    let maxIndexCountIndex6: number[] = [];\n    let maxIndexCountIndex7:\
    \ number[] = [];\n    let maxIndexCountIndex8: number[] = [];\n    let maxIndexCountIndex9:\
    \ number[] = [];\n    let maxIndexCountIndex10: number[] = [];\n    let maxIndexCountIndex11:\
    \ number[] = [];\n    let maxIndexCountIndex12: number[] = [];\n    let maxIndexCountIndex13:\
    \ number[] = [];\n    let maxIndexCountIndex14: number[] = [];\n    let maxIndexCountIndex15:\
    \ number[] = [];\n    let maxIndexCountIndex16: number[] = [];\n    let maxIndexCountIndex17:\
    \ number[] = [];\n    let maxIndexCountIndex18: number[] = [];\n    let maxIndexCountIndex19:\
    \ number[] = [];\n    let maxIndexCountIndex20: number[] = [];\n    let maxIndexCountIndex21:\
    \ number[] = [];\n    let maxIndexCountIndex22: number[] = [];\n    let maxIndexCountIndex23:\
    \ number[] = [];\n    let maxIndexCountIndex24: number[] = [];\n    let maxIndexCountIndex25:\
    \ number[] = [];\n    let maxIndexCountIndex26: number[] = [];\n    let maxIndexCountIndex27:\
    \ number[] = [];\n    let maxIndexCountIndex28: number[] = [];\n    let maxIndexCountIndex29:\
    \ number[] = [];\n    let maxIndexCountIndex30: number[] = [];\n    let maxIndexCountIndex31:\
    \ number[] = [];\n    let maxIndexCountIndex32: number[] = [];\n    let maxIndexCountIndex33:\
    \ number[] = [];\n    let maxIndexCountIndex34: number[] = [];\n    let maxIndexCountIndex35:\
    \ number[] = [];\n    let maxIndexCountIndex36: number[] = [];\n    let maxIndexCountIndex37:\
    \ number[] = [];\n    let maxIndexCountIndex38: number[] = [];\n    let maxIndexCountIndex39:\
    \ number[] = [];\n    let maxIndexCountIndex40: number[] = [];\n    let maxIndexCountIndex41:\
    \ number[] = [];\n    let maxIndexCountIndex42: number[] = [];\n    let maxIndexCountIndex43:\
    \ number[] = [];\n    let maxIndexCountIndex44: number[] = [];\n    let maxIndexCountIndex45:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpvx3svf0i.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334417
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let rolling_max: number[] = [];\n \
    \ let rolling_max_index: number[] = [];\n  let rolling_max_value: number[] = [];\n\
    \  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[] =\
    \ [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let rolling_max_value: number[]\
    \ = [];\n  let rolling_max_index: number[] = [];\n  let \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpuojh5_wy.ts(64,9): error TS1005: '','' expected.

    ../../../../tmp/tmpuojh5_wy.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max.push(numbers[i]);\n\
    \    rolling_max_index.push(i);\n  }\n  while (rolling_max_index.length > 0) {\n\
    \    let index = rolling_max_index.shift();\n    rolling_max[index] = Math.max(rolling_max[index],\
    \ numbers[index]);\n    for (let i = index + 1; i < numbers.length; i++) {\n \
    \     rolling_max[index] = Math.max(rolling_max[index], numbers[i]);\n    }\n\
    \  }\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpidtd85oj.js:25:12)\n    at Object.<anonymous> (/tmp/tmpidtd85oj.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334417
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_maxes: number[] = [];\n  let max_element: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element)\
    \ {\n      rolling_maxes = [max_element];\n      max_element = numbers[i];\n \
    \   } else {\n      rolling_maxes.push(numbers[i]);\n    }\n  }\n  return rolling_maxes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpainky1sm.ts(10,7): error TS2588: Cannot assign to ''rolling_maxes''
    because it is a constant.

    '
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[0])\
    \ {\n      currentMax[0] = numbers[i];\n      currentMax[1] = i;\n    } else {\n\
    \      currentMax[0] = numbers[i];\n      currentMax[1] = i;\n    }\n  }\n  for\
    \ (let i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] > currentMax[0])\
    \ {\n      currentMax[0] = numbers[i];\n      currentMax[1] = i;\n    } else {\n\
    \      currentMax[0] = numbers[i];\n      currentMax[1] = i;\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    numbers[i] = currentMax[0];\n  }\n\
    \  return numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpnysjehct.js:37:12)\n    at Object.<anonymous> (/tmp/tmpnysjehct.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxauzwoxf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxauzwoxf.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    rolling_max_result.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpkzkigkil.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkzkigkil.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexCount: number[] = [];\n    let maxIndexCountIndex: number[] =\
    \ [];\n    let maxIndexCountIndexCount: number[] = [];\n    let maxIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCount: number[] = [];\n\
    \    let maxIndexCountIndexCountIndexCountIndex: number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndex: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCount: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCount\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpd7xo9khe.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334417
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let maxElement = numbers[i];\n        let index = i;\n     \
    \   while (index > 0) {\n            if (numbers[index - 1] > maxElement) {\n\
    \                maxElement = numbers[index - 1];\n            }\n           \
    \ index--;\n        }\n        max.push(maxElement);\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbitn5vcz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbitn5vcz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        result.push(numbers[index]);\n\
    \        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpdnbb9maa.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdnbb9maa.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334368
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    let currentMax = 0;\n\
    \    let currentIndex = 0;\n    for (let i = 0; i < numbers.length; i++) {\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n            currentMax\
    \ = max;\n            currentIndex = i;\n        }\n    }\n    for (let i = currentIndex;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n       \
    \     result.push(currentMax);\n            currentMax = numbers[i];\n       \
    \ }\n    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmph_4p07m_.js:29:12)\n   \
    \ at Object.<anonymous> (/tmp/tmph_4p07m_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    rolling_max_array.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpcu3y0w92.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcu3y0w92.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334370
- exit_code: -5
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var currentMax: number = 0;\n\
    \    var currentIndex: number = 0;\n    var currentSum: number = 0;\n    while\
    \ (currentIndex < numbers.length) {\n        currentSum = numbers[currentIndex];\n\
    \        while (currentIndex < numbers.length && currentSum > numbers[currentIndex])\
    \ {\n            currentSum += numbers[currentIndex++];\n        }\n        if\
    \ (currentSum > currentMax) {\n            currentMax = currentSum;\n        }\n\
    \        result.push(currentMax);\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffea4fc81a0\n 1: 0x2ace7e3dc727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ace7ef7128e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ace7e8abf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ace7ea3d760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ace7ea450cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ace7ec2f7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ace7e58e7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660334420
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number;\n    let rolling_max_index: number;\n    let rolling_max_index2: number;\n\
    \    let rolling_max_index3: number;\n    let rolling_max_index4: number;\n  \
    \  let rolling_max_index5: number;\n    let rolling_max_index6: number;\n    let\
    \ rolling_max_index7: number;\n    let rolling_max_index8: number;\n    let rolling_max_index9:\
    \ number;\n    let rolling_max_index10: number;\n    let rolling_max_index11:\
    \ number;\n    let rolling_max_index12: number;\n    let rolling_max_index13:\
    \ number;\n    let rolling_max_index14: number;\n    let rolling_max_index15:\
    \ number;\n    let rolling_max_index16: number;\n    let rolling_max_index17:\
    \ number;\n    let rolling_max_index18: number;\n    let rolling_max_index19:\
    \ number;\n    let rolling_max_index20: number;\n    let rolling_max_index21:\
    \ number;\n    let rolling_max_index22: number;\n    let rolling_max_index23:\
    \ number;\n    let rolling_max_index24: number;\n    let rolling_max_index25:\
    \ number;\n    let rolling_max_index26: number;\n    let rolling_max_index27:\
    \ number;\n    let rolling_max_index28: number;\n    let rolling_max_index29:\
    \ number;\n    let rolling_max_index30: number;\n    let rolling_max_index31:\
    \ number;\n    let rolling_max_index32: number;\n    let rolling_max_index33:\
    \ number;\n    let rolling_max_index34: number;\n    let rolling_max_index35:\
    \ number;\n    let rolling_max_index36: number;\n    let rolling_max_index37:\
    \ number;\n    let rolling_max_index38: number;\n    let rolling_max_index39:\
    \ number;\n    let rolling_max_index40: number;\n    let rolling_max_index41:\
    \ number;\n    let rolling_max_index42: number;\n    let rolling_max_index43:\
    \ number;\n    let rolling_max_index44: number;\n    let rolling_max_index45:\
    \ number;\n    let rolling_max_index46: number;\n    let rolling_max_index47:\
    \ number;\n    let rolling_max_index48: number;\n    let rolling_max_index49:\
    \ number;\n    let rolling_max_index50: number;\n    let rolling_max_index51:\
    \ number;\n    let rolling_max_index52: number;\n    let rolling_max_index53:\
    \ number;\n    let rolling_max_index54: number;\n    let rolling_max_index55:\
    \ number;\n    let rolling_max_index56: number;\n    let rolling_max_index57:\
    \ number;\n    let rolling_max_index58: number;\n    let rolling_max_index59:\
    \ number;\n    let rolling_max_index60: number;\n    let rolling_max_index61:\
    \ number;\n    let rolling_max_index62\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0tv0stey.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334418
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_maxes: number[] = [];\n  let max_value = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value)\
    \ {\n      max_value = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_maxes.push(max_value);\n  }\n  return rolling_maxes;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpiqrozrbr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpiqrozrbr.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334419
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmptco1ti0h.js:29:12)\n    at Object.<anonymous> (/tmp/tmptco1ti0h.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp77_8fol6.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp77_8fol6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334361
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    let currentMaxIndex: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \            currentMaxIndex = i;\n        }\n    }\n    for (let i = currentMaxIndex;\
    \ i < numbers.length; i++) {\n        result.push(numbers[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpl27qgv82.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl27qgv82.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334419
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbitn5vcz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbitn5vcz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334353
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_52xnxgs.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_52xnxgs.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334357
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp99u2ykex.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99u2ykex.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334368
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334155
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_number = numbers[0];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max_rolling_number) {\n      max_rolling_number\
    \ = numbers[i];\n    }\n  }\n  return max_rolling_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpvotffupm.ts(9,7): error TS2588: Cannot assign to ''max_rolling_number''
    because it is a constant.

    ../../../../tmp/tmpvotffupm.ts(12,3): error TS2322: Type ''number'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1660334357
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  while\
    \ (index < numbers.length) {\n    if (numbers[index] > max) {\n      max = numbers[index];\n\
    \    }\n    result.push(max);\n    index++;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334419
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyl4w607h.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4w607h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334354
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpr1plyksm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1plyksm.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334364
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_number) {\n      rolling_max_number = numbers[i];\n    }\n   \
    \ rolling_max_array.push(rolling_max_number);\n  }\n  return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334419
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  let max_rolling_number_index2: number[] = [];\n  let max_rolling_number_index3:\
    \ number[] = [];\n  let max_rolling_number_index4: number[] = [];\n  let max_rolling_number_index5:\
    \ number[] = [];\n  let max_rolling_number_index6: number[] = [];\n  let max_rolling_number_index7:\
    \ number[] = [];\n  let max_rolling_number_index8: number[] = [];\n  let max_rolling_number_index9:\
    \ number[] = [];\n  let max_rolling_number_index10: number[] = [];\n  let max_rolling_number_index11:\
    \ number[] = [];\n  let max_rolling_number_index12: number[] = [];\n  let max_rolling_number_index13:\
    \ number[] = [];\n  let max_rolling_number_index14: number[] = [];\n  let max_rolling_number_index15:\
    \ number[] = [];\n  let max_rolling_number_index16: number[] = [];\n  let max_rolling_number_index17:\
    \ number[] = [];\n  let max_rolling_number_index18: number[] = [];\n  let max_rolling_number_index19:\
    \ number[] = [];\n  let max_rolling_number_index20: number[] = [];\n  let max_rolling_number_index21:\
    \ number[] = [];\n  let max_rolling_number_index22: number[] = [];\n  let max_rolling_number_index23:\
    \ number[] = [];\n  let max_rolling_number_index24: number[] = [];\n  let max_rolling_number_index25:\
    \ number[] = [];\n  let max_rolling_number_index26: number[] = [];\n  let max_rolling_number_index27:\
    \ number[] = [];\n  let max_rolling_number_index28: number[] = [];\n  let max_rolling_number_index29:\
    \ number[] = [];\n  let max_rolling_number_index30: number[] = [];\n  let max_rolling_number_index31:\
    \ number[] = [];\n  let max_rolling_number_index32: number[] = [];\n  let max_rolling_number_index33:\
    \ number[] = [];\n  let max_rolling_number_index34: number[] = [];\n  let max_rolling_number_index35:\
    \ number[] = [];\n  let max_rolling_number_index36: number[] = [];\n  let max_rolling_number_index37:\
    \ number[] = [];\n  let max_rolling_number_index38: number[] = [];\n  let max_rolling_number_index39:\
    \ number[] = [];\n  let max_rolling_number_index40: number[] = [];\n  let max_rolling_number_index41:\
    \ number[] = [];\n  let max_rolling_number_index42: number[] = [];\n  let max_roll\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdusuxqt9.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660334419
