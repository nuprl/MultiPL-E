language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max_numbers: number[] = [];\n    let rolling_max_numbers_length:\
    \ number = 0;\n    let rolling_max_numbers_sum: number = 0;\n    let rolling_max_numbers_index:\
    \ number = 0;\n    let rolling_max_numbers_index_sum: number = 0;\n    let rolling_max_numbers_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index: number = 0;\n \
    \   let rolling_max_numbers_index_length_index_sum: number = 0;\n    let rolling_max_numbers_index_length_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length: number =\
    \ 0;\n    let rolling_max_numbers_index_length_index_length_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpptf8x64k.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max[max.length - 1]) {\n            max.push(numbers[i]);\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpy7ommhc3.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy7ommhc3.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4pu6yb3u.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_arr: number[] = [];\n  let rolling_max_num:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_num) {\n      rolling_max_num = numbers[i];\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    rolling_max_arr.push(rolling_max_num);\n\
    \  }\n  return rolling_max_arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpy3lguoe6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpy3lguoe6.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    const rolling_max_number:\
    \ number[] = [];\n    let rolling_max_number_index: number[] = [];\n    let rolling_max_number_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9hv8cb1.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpf9hv8cb1.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let current: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    current.push(numbers[i]);\n    if\
    \ (i > 0) {\n      let maxElement = current[current.length - 1];\n      for (let\
    \ j = 0; j < current.length - 1; j++) {\n        if (current[j] > maxElement)\
    \ {\n          maxElement = current[j];\n        }\n      }\n      max.push(maxElement);\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpxn6op68w.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxn6op68w.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp179zr5kh.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp179zr5kh.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let\
    \ index: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n            index =\
    \ i;\n        }\n    }\n    for (let i = index; i < numbers.length; i++) {\n \
    \       result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpxexkuyh5.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxexkuyh5.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max[maxIndexIndex]) {\n      maxIndex.push(i);\n      maxIndexIndex.push(maxIndex.length\
    \ - 1);\n      max.push(numbers[i]);\n    } else {\n      maxIndex[maxIndexIndex.pop()]\
    \ = i;\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprwf_wrkc.ts(10,26): error TS2538: Type ''number[]''
    cannot be used as an index type.

    '
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpw0ji0tg7.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw0ji0tg7.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_number) {\n            rolling_max_number\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n\
    \    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] <\
    \ rolling_max_number) {\n            rolling_max_number = numbers[i];\n      \
    \      rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpefhemg70.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpefhemg70.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = numbers[0];\n\
    \    let currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[currentIndex];\n        } else {\n         \
    \   currentMax = numbers[currentIndex];\n        }\n        currentIndex++;\n\
    \    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpvriwq25c.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvriwq25c.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpd330z1ni.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd330z1ni.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_list: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_number) {\n      rolling_max_number = numbers[i];\n    }\n   \
    \ rolling_max_list.push(rolling_max_number);\n  }\n  return rolling_max_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let max_element:\
    \ number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = max_index; i <\
    \ numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n    }\n\
    \    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpaz3icr2a.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaz3icr2a.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentMaxIndex: number[] = [];\n  let currentMaxIndexIndex: number[] = [];\n\
    \  let currentMaxIndexIndexIndex: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    currentMax.push(numbers[i]);\n    currentMaxIndex.push(i);\n   \
    \ currentMaxIndexIndex.push(i);\n    currentMaxIndexIndexIndex.push(i);\n  }\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n\
    \        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitForStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:72139:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71152:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738568
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp61o301g4.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp61o301g4.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738569
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
