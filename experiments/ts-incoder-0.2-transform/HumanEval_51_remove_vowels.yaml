name: HumanEval_51_remove_vowels
language: ts
prompt: "//remove_vowels is a function that takes string and returns string without\
  \ vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\"\
  )\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"\
  aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n\
  \  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"\
  eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"\
  EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"
completions: ["  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n", "  return text.replace(/[aeiou]/g, \"\");\n}\n", "  return text.replace(/[aeiou]/g,\
    \ \"\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
