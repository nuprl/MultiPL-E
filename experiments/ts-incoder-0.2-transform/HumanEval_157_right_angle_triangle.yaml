name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    if (a < 0 || b < 0 || c < 0) {\n        return false;\n    }\n\
    \    const ab: number = Math.abs(b);\n    const ac: number = Math.abs(c);\n  \
    \  const bc: number = Math.abs(a);\n    const ab_c: number = ab + ac;\n    const\
    \ bc_a: number = bc + ab;\n    const ab_b: number = ab + bc;\n    const ac_b:\
    \ number = ac + ab;\n    const ab_a: number = ab + ac;\n    const bc_c: number\
    \ = bc + ac;\n    const ab_cb: number = ab_c * bc_c;\n    const ac_bc: number\
    \ = ac_b * ab_c;\n    const ab_ac: number = ab_a * ac_b;\n    const bc_ab: number\
    \ = bc_a * ab_b;\n    const ab_bc: number = ab_b * ac_b;\n    const ab_acb: number\
    \ = ab_ac * ac_bc;\n    const bc_aba: number = bc_ab * ab_a;\n    const ab_acb:\
    \ number = ab_ac * ab_cb;\n    const bc_abac: number = bc_aba * ab_ac;\n    const\
    \ ab_acbc: number = ab_acb * ab_cb;\n    const bc_abacb: number = bc_abac * ab_acb;\n\
    \    const ab_acbcb: number = ab_acbc * ab_cb;\n    const bc_abacbc: number =\
    \ bc_abacb * ab_acb;\n    const ab_acbcbc: number = ab_acbcb * ab_cb;\n    const\
    \ bc_abacbcb: number = bc_abacbc * ab_acb;\n    const ab_acbcbc: number = ab_acbcbc\
    \ * ab_cb;\n    const bc_abacbcbc: number = bc_abacbcb * ab_acb;\n    const ab_acbcbc:\
    \ number = ab_acbcbc * ab_cb;\n    const bc_abacbcbc: number = bc_abacbcb * ab_acb;\n\
    \    const ab_acbcbc: number = ab_acbcbc * ab_cb;\n    const bc_abacbcbc: number\
    \ = bc_abacbcb * ab_acb;\n    const ab_acbcbc: number = ab_acbcbc * ab_cb;\n \
    \   const bc_abacbcbc: number = bc_abacbcb * ab_acb;\n    const ab_acbcbc: number\
    \ = ab_acbcbc * ab_cb;\n    const bc_abacbcbc: number = ", "\treturn (Math.abs(b\
    \ * b - a * c) >= Math.sqrt(Math.pow(b * b - a * c, 2) + Math.pow(a * c, 2)));\n\
    }\n", "\treturn (\n\t\t((b - a) * (c - b)) === 0 &&\n\t\t((c - a) * (b - a)) ===\
    \ 0 &&\n\t\t((b - a) * (a - b)) === 0\n\t);\n}\n", "\treturn (Math.abs(b * b -\
    \ a * c) >= Math.sqrt(Math.pow(b, b) - 4 * a * c))\n}\n", "  return ((Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)) && (a != 0 || b != 0 || c != 0));\n\
    }\n", "  return (((b - a) * (c - b)) <= 0);\n}\n", "  return ((Math.sqrt(a * a\
    \ + b * b - c * c) >= 0) && (a != 0 && b != 0 && c != 0));\n}\n", "    if (a ===\
    \ 0 || b === 0 || c === 0) {\n        return false;\n    }\n    const ab: number\
    \ = Math.abs(b);\n    const ac: number = Math.abs(c);\n    const bc: number =\
    \ Math.abs(a);\n    const abc = Math.sqrt(ab * ac + bc * bc);\n    return abc\
    \ >= (b + c);\n}\n", "  return ((Math.sqrt(a * a + b * b - c * c) >= 0) && (a\
    \ != 0 && b != 0 && c != 0));\n}\n", "    let ab: number = b - a\n    let ac:\
    \ number = c - a\n    let bc: number = b - c\n    let ad: number = a - c\n   \
    \ let acd: number = ac - ad\n    let bcd: number = bc - bd\n    let bda: number\
    \ = bd - a\n    let cda: number = ad - c\n    let acdb: number = acd - bcd\n \
    \   let abdc: number = ab - cd\n    let acbd: number = acd - bda\n    let abad:\
    \ number = ab - ad\n    let acad: number = acd - a\n    let bcda: number = bcd\
    \ - a\n    let bcdc: number = bcd - c\n    let abbd: number = ab - bd\n    let\
    \ abadc: number = ab - adc\n    let abbdc: number = ab - bdc\n    let acbdc: number\
    \ = acd - bdc\n    let acdbd: number = acd - bda\n    let acadb: number = acd\
    \ - abad\n    let acadc: number = acd - abbc\n    let acbdc: number = acd - abbdc\n\
    \    let abbdc: number = ab - bdc\n    let abbda: number = ab - bda\n    let abadc:\
    \ number = ab - adc\n    let abbdc: number = ab - bdc\n    let abbda: number =\
    \ ab - bda\n    let abadc: number = ab - adc\n    let abbdc: number = ab - bdc\n\
    \    let abbda: number = ab - bda\n    let abadc: number = ab - adc\n    let abbdc:\
    \ number = ab - bdc\n    let abbda: number = ab - bda\n    let abadc: number =\
    \ ab - adc\n    let abbdc: number = ab - bdc\n    let abbda: number = ab - bda\n\
    \    let abadc: number = ab - adc\n    let abbdc: number = ab - bdc\n    let abbda:\
    \ number = ab - bda\n    let abadc: number = ab - adc\n    let abbdc: number =\
    \ ab - bdc\n    let abbda: number = ab - bda\n    let abadc: number = ab - adc\n\
    \    let abbdc: number = ab - bdc\n    let abbda: number = ab - bda\n    let abadc:\
    \ number = ab - adc\n    let abbdc: number = ab - bdc\n    let abbda: number =\
    \ ab - bda\n    let abadc: number = ab - adc\n    let abbdc: number = ab - bdc\n\
    \    let ", "\tlet ab: number = Math.abs(a - b);\n\tlet ac: number = Math.abs(a\
    \ - c);\n\tlet bc: number = Math.abs(b - c);\n\treturn (ab >= ac && ab >= bc);\n\
    }\n", "  return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == Math.pow(c, 2))\
    \ || (Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2)) == Math.pow(a, 2)));\n}\n", " \
    \ return ((Math.sqrt(a * a + b * b - c * c) >= 0) && (a != 0 && b != 0 && c !=\
    \ 0));\n}\n", "    return ((b - a) * (c - b) <= 0);\n}\n", "    return ((b - a)\
    \ * (c - b) <= 0);\n}\n", "\treturn (\n\t\tMath.abs(Math.atan2(b, a) - Math.atan2(c,\
    \ b)) <\n\t\tMath.PI / 2\n\t);\n}\n", "  return ((Math.sqrt(a * a + b * b - c\
    \ * c) === 1) || ((a > b) && (b > c) && (c > a)));\n}\n", "    if (a < b + c ||\
    \ a > b - c) {\n        return false;\n    }\n    if (b < a + c || b > a - c)\
    \ {\n        return false;\n    }\n    if (c < a + b || c > a - b) {\n       \
    \ return false;\n    }\n    return true;\n}\n", "    return (((b - a) * (c - b))\
    \ - ((c - a) * (b - a))) >= 0;\n}\n", "  return ((b - a) * (c - b) <= 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
