name: HumanEval_24_largest_divisor
language: ts
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n\
  \  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n      \
    \  max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return\
    \ max_divisor;\n}\n", "  let max_divisor = n;\n  let max_divisor_p = 0;\n  for\
    \ (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n\
    \      if (max_divisor < i) {\n        max_divisor = i;\n      }\n    }\n  }\n\
    \  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor\
    \ = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      max_divisor = i;\n      max_divisor_p = i;\n\
    \    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor = n;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ % i == 0) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n\
    \    }\n  }\n  return max_divisor;\n}\n", "  let divisor = 1;\n  let max_divisor\
    \ = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisor\
    \ = i;\n      if (max_divisor < divisor) {\n        max_divisor = divisor;\n \
    \     }\n    }\n  }\n  return max_divisor;\n}\n", "  let divisor = 1;\n  let i\
    \ = 1;\n  while (i <= n) {\n    if (n % i == 0) {\n      divisor = i;\n    }\n\
    \    i++;\n  }\n  return divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = n;\n  let max_divisor_p\
    \ = 0;\n  let max_divisor_pp = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n\
    \ % i == 0) {\n      if (max_divisor % i == 0) {\n        max_divisor = i;\n \
    \       max_divisor_p = max_divisor / i;\n        max_divisor_pp = max_divisor\
    \ / i;\n      }\n    }\n  }\n  return max_divisor_p;\n}\n", "  let max_divisor\
    \ = n;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n\
    \ % i === 0) {\n      max_divisor_p = i;\n      if (max_divisor < i) {\n     \
    \   max_divisor = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let\
    \ max_divisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n\
    \      max_divisor = i;\n    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor\
    \ = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n\
    \ % i === 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n     \
    \   max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let\
    \ max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    if (n % i == 0) {\n      let divisor_p = i / n;\n      if (divisor_p > max_divisor_p)\
    \ {\n        max_divisor_p = divisor_p;\n        max_divisor = i;\n      }\n \
    \   }\n  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let divisor = 1;\n  let divisor2 = 2;\n\
    \  let divisor3 = 1;\n  let divisor4 = 2;\n  let divisor5 = 3;\n  let divisor6\
    \ = 6;\n  let divisor7 = 3;\n  let divisor8 = 4;\n  let divisor9 = 5;\n  let divisor10\
    \ = 6;\n  let divisor11 = 7;\n  let divisor12 = 7;\n  let divisor13 = 8;\n  let\
    \ divisor14 = 8;\n  let divisor15 = 9;\n  let divisor16 = 9;\n  let divisor17\
    \ = 10;\n  let divisor18 = 10;\n  let divisor19 = 11;\n  let divisor20 = 11;\n\
    \  let divisor21 = 12;\n  let divisor22 = 12;\n  let divisor23 = 13;\n  let divisor24\
    \ = 13;\n  let divisor25 = 14;\n  let divisor26 = 14;\n  let divisor27 = 15;\n\
    \  let divisor28 = 15;\n  let divisor29 = 16;\n  let divisor30 = 16;\n  let divisor31\
    \ = 17;\n  let divisor32 = 17;\n  let divisor33 = 18;\n  let divisor34 = 18;\n\
    \  let divisor35 = 19;\n  let divisor36 = 19;\n  let divisor37 = 20;\n  let divisor38\
    \ = 20;\n  let divisor39 = 21;\n  let divisor40 = 21;\n  let divisor41 = 22;\n\
    \  let divisor42 = 22;\n  let divisor43 = 23;\n  let divisor44 = 23;\n  let divisor45\
    \ = 24;\n  let divisor46 = 24;\n  let divisor47 = 25;\n  let divisor48 = 25;\n\
    \  let divisor49 = 26;\n  let divisor50 = 26;\n  let divisor51 = 27;\n  let divisor52\
    \ = 27;\n  let divisor53 = 28;\n  let divisor54 = 28;\n  let divisor55 = 29;\n\
    \  let divisor56 = 30;\n  let divisor57 = 30;\n  let divisor58 = 31;\n  let divisor59\
    \ = 31;\n  let divisor60 = 32;\n  let divisor61 = 32;\n  let divisor62 = 33;\n\
    \  let divisor63 = 33;\n  let divisor64 = 34;\n  let divisor65 = 34;\n  let divisor66\
    \ = 35;\n  let divisor67 = 35;\n  let divisor68 = 36;\n  let divisor69 = 36;\n\
    \  let divisor70 = 37;\n  let divisor71 = 37;\n  let divisor72 = 38;\n  let divisor73\
    \ = 38;\n  let divisor74 = 39;\n  let divisor75 = 39;\n  let divisor76 = 40;\n\
    \  let divisor77 = 41;\n  let divisor78 = 41;\n  let divisor79 = 42;\n  let divisor80\
    \ = 42;\n  let divisor81 = 43;\n  let divisor82 = 43;\n  let divisor83 = 44;\n\
    \  let divisor84 = 44;\n  let divisor85 = 45;\n  let divisor86 = 45;\n  let divisor87",
  "  let max_divisor = n;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      if (max_divisor % i == 0) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (n % i == 0) {\n      max_divisor = i;\n      max_divisor_p\
    \ = i;\n    }\n  }\n  return max_divisor;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
