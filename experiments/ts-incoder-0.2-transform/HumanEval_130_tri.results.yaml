language: ts
name: HumanEval_130_tri
results:
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6mssfsoc.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp6mssfsoc.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz5qt07b1.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpz5qt07b1.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n\
    \    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0)\
    \ {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  arr.push(tri(n\
    \ - 2) + tri(n + 1));\n  return arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2h6_68df.ts(30,14): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2h6_68df.ts(33,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2h6_68df.ts(34,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [n, n, n];\n  }\n  const result: number[] = [];\n  const first:\
    \ number = tri(n - 1);\n  const second: number = tri(n - 2);\n  const third: number\
    \ = tri(n - 3) + tri(n - 2) + tri(n - 1);\n  result.push(first);\n  result.push(second);\n\
    \  result.push(third);\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxxj_hsjz.ts(22,9): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpxxj_hsjz.ts(23,9): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpxxj_hsjz.ts(24,25): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  for (let i = 2;\
    \ i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n \
    \ return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpapj4bfdm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpapj4bfdm.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first = 1;\n    let second = 1;\n    let third = 1;\n    for\
    \ (let i = 1; i <= n; i++) {\n        result.push(first);\n        first++;\n\
    \        second++;\n        third++;\n    }\n    result.push(third);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpeaqvaujn.js:34:12)\n    at Object.<anonymous> (/tmp/tmpeaqvaujn.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyef8zqnd.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    for (let i = 1; i <= n; i++) {\n        result.push(first);\n\
    \        third = first + second;\n        first = second;\n        second = third;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpuboz0aa2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuboz0aa2.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n === 3)\
    \ {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return [1, 1, 1];\n\
    \  }\n  return [1, 1, 2] + tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2rrwvl4w.ts(30,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n + 1)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n + 1)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwsw77eea.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpwsw77eea.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpwsw77eea.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyliku8q3.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyliku8q3.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1)\
    \ + tri(n - 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ataodq0.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(27,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpak02ovbk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpak02ovbk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojjfz1z0.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sn37kkk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp8sn37kkk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp18dd8la0.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp18dd8la0.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c_kme0l.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4c_kme0l.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    return [];\n  }\n  if (n === 2) {\n    return [1];\n\
    \  }\n  if (n % 2 === 0) {\n    let temp: number = tri(n - 1) + tri(n - 2);\n\
    \    for (let i = 0; i < temp.length; i++) {\n      result.push(temp[i]);\n  \
    \  }\n  } else {\n    let temp: number = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \    for (let i = 0; i < temp.length; i++) {\n      result.push(temp[i]);\n  \
    \  }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo5aws4hz.ts(26,24): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpo5aws4hz.ts(27,30): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpo5aws4hz.ts(31,24): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpo5aws4hz.ts(32,30): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 1, 2];\n    if\
    \ (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n \
    \   return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbqjzan2.ts(21,30): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqbqjzan2.ts(21,55): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqbqjzan2.ts(22,13): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqbqjzan2.ts(22,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1)\
    \ + tri(n - 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi9ot_j7o.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi9ot_j7o.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi9ot_j7o.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi9ot_j7o.ts(27,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first = 1;\n    let second = 2;\n    let third = 3;\n    let\
    \ fourth = 4;\n    let fifth = 5;\n    let sixth = 6;\n    let seventh = 7;\n\
    \    let eighth = 8;\n    let ninth = 9;\n    let tenth = 10;\n    let eleventh\
    \ = 11;\n    let twelfth = 12;\n    let thirteenth = 13;\n    let fourteenth =\
    \ 14;\n    let fifteenth = 15;\n    let sixteenth = 16;\n    let seventeenth =\
    \ 17;\n    let eighteenth = 18;\n    let nineteenth = 19;\n    let twentieth =\
    \ 20;\n    let twentyfirst = 21; // The first twenty numbers of the Tribonacci\
    \ sequence.\n    let thirtyfirst = 22; // The first thirty numbers of the Tribonacci\
    \ sequence.\n    let fourtyfirst = 23; // The first forty numbers of the Tribonacci\
    \ sequence.\n    let fiftyfirst = 24; // The first fifty numbers of the Tribonacci\
    \ sequence.\n    let sixtyfirst = 25; // The first sixty numbers of the Tribonacci\
    \ sequence.\n    let seventyfirst = 26; // The first seventy numbers of the Tribonacci\
    \ sequence.\n    let eightyfirst = 27; // The first eighty numbers of the Tribonacci\
    \ sequence.\n    let ninetyfirst = 28; // The first ninety numbers of the Tribonacci\
    \ sequence.\n    let twentysecond = 29; // The second twenty numbers of the Tribonacci\
    \ sequence.\n    let thirtysecond = 30; // The second thirty numbers of the Tribonacci\
    \ sequence.\n    let fourtysecond = 31; // The second forty numbers of the Tribonacci\
    \ sequence.\n    let fiftysecond = 32; // The second fifty numbers of the Tribonacci\
    \ sequence.\n    let sixtysecond = 33; // The second sixty numbers of the Tribonacci\
    \ sequence.\n    let seventysecond = 34; // The second seventy numbers of the\
    \ Tribonacci sequence.\n    let eightysecond = 35; // The second eighty numbers\
    \ of the Tribonacci sequence.\n    let ninetysecond = 36; // The second ninety\
    \ numbers of the Tribonacci sequence.\n    let twentythird = 37; // The third\
    \ twenty numbers of the Tribonacci sequence.\n    let thirtythird = 38; // The\
    \ third thirty numbers of the Tribonacci sequence.\n    let fourtythird = 39;\
    \ // The third forty number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_y_d7kj.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794348
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n\
    \ - 1) + tri(n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphy0w_o4s.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphy0w_o4s.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ - 4)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7faqnlz4.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(22,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf0ns02jo.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n   \
    \ return [1, 3, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5algjehi.ts(28,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5algjehi.ts(30,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyy3xuqkk.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyy3xuqkk.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 1] + tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpap95hxst.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794348
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkul1z6me.ts(21,27): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpkul1z6me.ts(22,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794348
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sn37kkk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp8sn37kkk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 3] + tri(n - 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkb2vxt8.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpirl30uo6.ts(21,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpirl30uo6.ts(21,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c_kme0l.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4c_kme0l.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n), tri(n), tri(n - 1) + tri(n + 1)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjy21e7ya.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjy21e7ya.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjy21e7ya.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjy21e7ya.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjy21e7ya.ts(22,65): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ + 1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw3_hmxm5.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpw3_hmxm5.ts(20,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let arr: number[] =\
    \ [];\n    let first: number = 1;\n    let second: number = 2;\n    let third:\
    \ number = 3;\n    for (let i: number = 0; i < n; i++) {\n        arr.push(first);\n\
    \        arr.push(second);\n        arr.push(third);\n        first = second +\
    \ third;\n        second = third + first;\n        third = first + second;\n \
    \   }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  5,\n  8,\n  13,\n  21,\n  34,\n  55\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpwak_p1_y.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwak_p1_y.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,\
    \  2,  3,  5, 8,\n    13, 21, 34, 55\n  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let arr: number[] =\
    \ [];\n    let temp: number = 0;\n    let temp2: number = 0;\n    let temp3: number\
    \ = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6:\
    \ number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let\
    \ temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n\
    \    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number\
    \ = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17:\
    \ number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let\
    \ temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n\
    \    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number\
    \ = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28:\
    \ number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let\
    \ temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n\
    \    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number\
    \ = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39:\
    \ number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let\
    \ temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n\
    \    let temp45: number = 0;\n    let temp46: number = 0;\n    let temp47: number\
    \ = 0;\n    let temp48: number = 0;\n    let temp49: number = 0;\n    let temp50:\
    \ number = 0;\n    let temp51: number = 0;\n    let temp52: number = 0;\n    let\
    \ temp53: number = 0;\n    let temp54: number = 0;\n    let temp55: number = 0;\n\
    \    let temp56: number = 0;\n    let temp57: number = 0;\n    let temp58: number\
    \ = 0;\n    let temp59: number = 0;\n    let temp60: number = 0;\n    let temp61:\
    \ number = 0;\n    let temp62: number = 0;\n    let temp63: number = 0;\n    let\
    \ temp64: number = 0;\n    let temp65: number = 0;\n    let temp66: number = 0;\n\
    \    let temp67: number = 0;\n    let temp68: number = 0;\n    let temp69: number\
    \ = 0;\n    let temp70: number = 0;\n    let temp71: number = 0;\n    let temp72:\
    \ number = 0;\n    let temp73: number = 0;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_7xnmmel.ts(110,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  } else {\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6h7lv44s.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp6h7lv44s.ts(27,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [n, n, n];\n  }\n  const result: number[] = [];\n  result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  if (n % 2 === 0) {\n    result.push(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfcm3tyo.ts(22,15): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfcm3tyo.ts(24,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  result.push(1);\n\
    \  result.push(2);\n  if (n % 2 === 0) {\n    result.push(3);\n  }\n  else {\n\
    \    let last: number = result.pop();\n    let next: number = result.pop();\n\
    \    result.push(last + next + last);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpxesai2s9.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxesai2s9.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [n, n, n];\n  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1)\
    \ + tri(n - 2), n];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptom5sawz.ts(21,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmptom5sawz.ts(21,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyef8zqnd.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 1) {\n   \
    \     return [1, 1, 1];\n    }\n    if (n === 2) {\n        return [1, 2, 1];\n\
    \    }\n    if (n % 2 === 0) {\n        return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)];\n    }\n    return [tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7urexf9w.ts(25,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7urexf9w.ts(25,42): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7urexf9w.ts(27,13): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7urexf9w.ts(27,51): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    let fourth: number = 1;\n    for (let i = 1; i <= n; i++) {\n\
    \        result.push(first);\n        first = second + third;\n        second\
    \ = third + fourth;\n        third = fourth;\n        fourth = first;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpo3tnbf3i.js:35:12)\n    at Object.<anonymous> (/tmp/tmpo3tnbf3i.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe2s_8dls.ts(21,27): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpe2s_8dls.ts(22,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n -\
    \ 2)];\n  }\n  return [tri(n - 1) + tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe6ecoaox.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpe6ecoaox.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpe6ecoaox.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpe6ecoaox.ts(27,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  let result: number[]\
    \ = [];\n  let first = 1;\n  let second = 1;\n  let third = 1;\n  for (let i =\
    \ 3; i <= n; i++) {\n    result.push(first);\n    result.push(second);\n    result.push(third);\n\
    \    first = (first + second);\n    second = (second + third);\n    third = (first\
    \ + second);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp7eet0cgr.js:41:12)\n    at Object.<anonymous> (/tmp/tmp7eet0cgr.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf0ns02jo.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpf0ns02jo.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj79b3blk.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  arr.push(3);\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  arr.push(8);\n\
    \  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n\
    \  2,\n  3,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpdorkm17v.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdorkm17v.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 2,\
    \ 3, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2) + tri(n - 1)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivqo_v6x.ts(21,40): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpivqo_v6x.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpivqo_v6x.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [];\n  }\n  const result: number[] = [];\n  result.push(3);\n\
    \  result.push(1 + n / 2);\n  if (n % 2 === 1) {\n    result.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmjr8rfnx.ts(25,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp18dd8la0.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp18dd8la0.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjhvq990n.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjhvq990n.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  result.push(1);\n\
    \  result.push(2);\n  if (n % 2 === 0) {\n    result.push(3);\n  }\n  else {\n\
    \    let temp: number[] = [];\n    let temp2: number[] = [];\n    for (let i =\
    \ 2; i <= n; i++) {\n      temp.push(i);\n      temp2.push(i - 1);\n    }\n  \
    \  for (let i = 0; i < temp.length; i++) {\n      result.push(temp[i] + temp2[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpawk_a7gh.js:44:12)\n    at Object.<anonymous> (/tmp/tmpawk_a7gh.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2), tri(n + 1)];\n  return [tri(n - 1), tri(n\
    \ - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdaj5ez_n.ts(21,28): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpdaj5ez_n.ts(21,40): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpdaj5ez_n.ts(21,52): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpdaj5ez_n.ts(22,23): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmcbo2e5w.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpmcbo2e5w.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 3) + tri(n - 2)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbe7ipn7m.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpbe7ipn7m.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpbe7ipn7m.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sn37kkk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp8sn37kkk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9hvpuj6z.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9hvpuj6z.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fzq5qi0.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7fzq5qi0.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first = 1;\n    let second = 1;\n    let third = 1;\n    for\
    \ (let i = 1; i <= n; i++) {\n        result.push(first);\n        third = first\
    \ + second + third;\n        first = second;\n        second = third;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpu3klzpjw.js:33:12)\n    at Object.<anonymous> (/tmp/tmpu3klzpjw.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 3\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3u60e44.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpd3u60e44.ts(20,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    if (n === 1) {\n        result.push(1);\n        return result;\n\
    \    }\n    if (n === 2) {\n        result.push(3);\n        return result;\n\
    \    }\n    let first = 1;\n    let second = 1;\n    let third = 1;\n    for (let\
    \ i = 2; i <= n; i++) {\n        third = first + second + third;\n        first\
    \ = second;\n        second = third;\n        result.push(third);\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  7\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpvrprvdwh.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvrprvdwh.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 7 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first: number = 1;\n  let second: number = 1;\n  let third: number\
    \ = 1;\n  let fourth: number = 1;\n  for (let i = 1; i <= n; i++) {\n    result.push(first);\n\
    \    result.push(second);\n    result.push(third);\n    result.push(fourth);\n\
    \    first++;\n    second++;\n    third++;\n    fourth++;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1,\n  2,\n  2,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmps0ln54iz.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmps0ln54iz.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 1, 1, 2,\n    2, 2, 2, 3, 3,\n    3, 3\n  ],\n  expected: [ 1, 3, 2, 8 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppx1kcsxq.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppx1kcsxq.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphyo4le0n.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    for (let i: number = 2; i <= n; i++) {\n        third = first\
    \ + second;\n        first = second;\n        second = third;\n        result.push(third);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp4f015mnm.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4f015mnm.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo_7c4i90.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpo_7c4i90.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  result.push(1);\n\
    \  result.push(n / 2);\n  if (n % 2 === 0) {\n    result.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg8xjok3_.ts(26,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    return [];\n  }\n  if (n === 2) {\n    return [1];\n\
    \  }\n  if (n % 2 === 0) {\n    let temp: number = tri(n - 1) + tri(n - 2);\n\
    \    for (let i = 0; i < temp.length; i++) {\n      result.push(temp[i]);\n  \
    \  }\n  } else {\n    let temp: number = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \    for (let i = 0; i < temp.length; i++) {\n      result.push(temp[i]);\n  \
    \  }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo5aws4hz.ts(26,24): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpo5aws4hz.ts(27,30): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpo5aws4hz.ts(31,24): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpo5aws4hz.ts(32,30): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n  return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpog9xtpub.ts(20,27): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpog9xtpub.ts(21,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  }\n  return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5kl60yzf.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5kl60yzf.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5kl60yzf.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5kl60yzf.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    for (let i = 1; i <= n; i++) {\n        result.push(first);\n\
    \        third = first + second;\n        first = second;\n        second = third;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpuboz0aa2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuboz0aa2.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [tri(n - 1) +\
    \ tri(n - 2)];\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptspcqb6d.ts(20,30): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmptspcqb6d.ts(21,13): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmparzk6mrl.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmparzk6mrl.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmparzk6mrl.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmparzk6mrl.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  result.push(3);\n  if (n % 2 === 0) {\n    result.push(1);\n  }\n  for\
    \ (let i = 2; i <= n; i++) {\n    result.push(result[i - 1] + result[i - 2] +\
    \ result[i + 1])\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmprz9slejz.js:31:12)\n    at Object.<anonymous> (/tmp/tmprz9slejz.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794354
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first: number = 1;\n  let second: number = 2;\n  let third: number\
    \ = 3;\n  \n  if (n === 1) {\n    result.push(first);\n    return result;\n  }\n\
    \  \n  if (n === 2) {\n    result.push(second);\n    return result;\n  }\n  \n\
    \  if (n % 2 === 0) {\n    third = first + second;\n    first = second;\n    second\
    \ = third;\n  }\n  \n  third = first + second;\n  first = second;\n  second =\
    \ third;\n  \n  for (let i = 3; i <= n; i++) {\n    third = first + second;\n\
    \    first = second;\n    second = third;\n    result.push(third);\n  }\n  \n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmper4pw46h.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmper4pw46h.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [tri(n - 1), tri(n - 2), tri(n - 1) + tri(n - 2)];\n  }\n \
    \ return [tri(n - 1), tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 3)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgdp8reva.ts(25,37): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpgdp8reva.ts(27,35): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ - 4)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7faqnlz4.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7faqnlz4.ts(22,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 1) {\n   \
    \     return [1];\n    }\n    if (n === 2) {\n        return [1, 1, 2];\n    }\n\
    \    if (n % 2 === 0) {\n        return [tri(n - 1) + tri(n - 2), tri(n - 1) +\
    \ tri(n - 1) + tri(n - 2)];\n    }\n    return [tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpff0enfub.ts(25,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpff0enfub.ts(25,42): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpff0enfub.ts(27,13): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpff0enfub.ts(27,51): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  result.push(3);\n  result.push(1);\n  if (n % 2 === 0) {\n    result.push(n\
    \ / 2);\n  } else {\n    let temp: number = tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3);\n    result.push(temp);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpebtkcm5e.ts(24,24): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2) + tri(n - 1)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivqo_v6x.ts(21,40): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpivqo_v6x.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpivqo_v6x.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm52vcipq.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpm52vcipq.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfpiasrtq.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sn37kkk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp8sn37kkk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 0) return result;\n  if (n === 1) return [3, 1];\n  if (n %\
    \ 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj27e86wm.ts(21,27): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj27e86wm.ts(22,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c_kme0l.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4c_kme0l.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n\
    \    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0)\
    \ {\n    arr.push(1);\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \ } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    arr.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmped2kp_8b.ts(30,14): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmped2kp_8b.ts(32,14): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmped2kp_8b.ts(33,14): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first = 1;\n  let second = 2;\n  let third = 3;\n  let fourth = first;\n\
    \  let fifth = second;\n  let sixth = third;\n  let seventh = fourth;\n  let eighth\
    \ = fifth;\n  let ninth = sixth;\n  let tenth = seventh;\n  let eleventh = eighth;\n\
    \  let twelfth = ninth;\n  let thirteenth = tenth;\n  let fourteenth = eleventh;\n\
    \  let fifteenth = twelfth;\n  let sixteenth = thirteenth;\n  let seventeenth\
    \ = fourteenth;\n  let eighteenth = fifteenth;\n  let nineteenth = sixteenth;\n\
    \  let twentyfirstth = seventeenth;\n  let twentysecondth = eighteenth;\n  let\
    \ twentythirdth = nineteenth;\n  let twentyfourth = twentythirdth;\n  let twentyfifth\
    \ = twentyfourth;\n  let twentysixth = twentyfifth;\n  let twentyseventh = twentysixth;\n\
    \  let twentyeighth = twentyseventh;\n  let twentyninth = twentyeighth;\n  let\
    \ thirtieth = twentyninth;\n  let thirtyfirstth = thirtieth;\n  let thirtysecondth\
    \ = thirtyfirstth;\n  let thirtythirdth = thirtysecondth;\n  let thirtyfourth\
    \ = thirtythirdth;\n  let thirtyfifth = thirtyfourth;\n  let thirtysixth = thirtyfifth;\n\
    \  let thirtyseventh = thirtysixth;\n  let thirtyeighth = thirtyseventh;\n  let\
    \ thirtyninth = thirtyeighth;\n  let fortyfirstth = thirtyninth;\n  let fortysecondth\
    \ = fortyfirstth;\n  let fortythirdth = fortysecondth;\n  let fortyfourth = fortythirdth;\n\
    \  let fortyfifth = fortyfourth;\n  let fortysixth = fortyfifth;\n  let fortyseventh\
    \ = fortysixth;\n  let for\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcrtr1jdr.ts(64,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmpcrtr1jdr.ts(65,1): error TS1005: ''('' expected.

    ../../../../../tmp/tmpcrtr1jdr.ts(65,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpcrtr1jdr.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794354
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 1, 2];\n    let\
    \ result: number[] = [];\n    let first = 1;\n    let second = 1;\n    let third\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        third = first + second + third;\n\
    \        result.push(third);\n        first = second;\n        second = third;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  7\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp05xudksu.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp05xudksu.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 7 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2), tri(n + 1)];\n  return [tri(n - 1), tri(n\
    \ - 2), tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkdsnj_cb.ts(21,28): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpkdsnj_cb.ts(21,40): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpkdsnj_cb.ts(21,52): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpkdsnj_cb.ts(22,47): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    for (let i = 1; i <= n; i++) {\n        result.push(first);\n\
    \        third = first + second;\n        first = second;\n        second = third;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpuboz0aa2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuboz0aa2.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4));\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7dwmgu1v.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp7dwmgu1v.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv_0vf3fw.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpv_0vf3fw.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first: number = 1;\n  let second: number = 1;\n  let third: number\
    \ = 1;\n  let fourth: number = 1;\n  let fifth: number = 1;\n  if (n === 1) {\n\
    \    result = [first];\n  } else {\n    while (n > 0) {\n      fifth = fourth;\n\
    \      fourth = third;\n      third = second;\n      second = first;\n      first\
    \ = fifth + fourth + third + second;\n      result.unshift(first);\n      n--;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  13,\n  7,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp9t4hpztf.js:43:12)\n    at Object.<anonymous> (/tmp/tmp9t4hpztf.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 13, 7, 4\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 3] + tri(n - 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkb2vxt8.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  arr.push(3);\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n\
    \  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n\
    \  arr.push(1);\n  arr.push(3);\n  arr.push(8);\n  arr.push(1);\n  arr.push(3);\n\
    \  arr.push(8);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpky8awoyi.ts(139,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794355
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfpiasrtq.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794354
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 3] + tri(n - 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkb2vxt8.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 3) + tri(n - 2)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbe7ipn7m.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpbe7ipn7m.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpbe7ipn7m.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [n, n, n];\n  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppemjnc41.ts(21,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppemjnc41.ts(21,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794355
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5n438l0r.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5n438l0r.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 0) return result;\n  if (n === 1) return [3, 1];\n  let first:\
    \ number = tri(n - 1) + tri(n - 2) + tri(n - 3);\n  result.push(first);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb5xw3893.ts(21,23): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 3] + tri(n - 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkb2vxt8.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [];\n  }\n  const result: number[] = [];\n  result.push(3);\n\
    \  result.push(1 + n / 2);\n  if (n % 2 === 0) {\n    result.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpplpvwx0q.ts(25,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyef8zqnd.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 ===\
    \ 0) {\n    return [1, 1, 2, 1];\n  }\n  return [1, 1, 2, 3] + tri(n - 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkb2vxt8.ts(27,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpck0ov1o0.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpck0ov1o0.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxm9np14.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpoxm9np14.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpoxm9np14.ts(21,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n === 3)\
    \ {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ + tri(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3tlpe2yd.ts(28,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp3tlpe2yd.ts(30,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let arr: number[] = [];\n\
    \  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n\
    \    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1));\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprbfk9t8a.ts(28,14): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmprbfk9t8a.ts(30,14): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4c_kme0l.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4c_kme0l.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 1) {\n   \
    \     return [1, 1, 1];\n    }\n    if (n === 2) {\n        return [1, 2, 1];\n\
    \    }\n    if (n === 3) {\n        return [1, 1, 2, 1];\n    }\n    if (n % 2\
    \ === 0) {\n        return [tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3)];\n    }\n    else {\n        return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpymcnw72i.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpymcnw72i.ts(28,55): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpymcnw72i.ts(31,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpymcnw72i.ts(31,42): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpymcnw72i.ts(31,80): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphyo4le0n.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphyo4le0n.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2), tri(n + 1)];\n  return [tri(n - 1), tri(n),\
    \ tri(n - 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5235qjv4.ts(21,28): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp5235qjv4.ts(21,40): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp5235qjv4.ts(21,52): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp5235qjv4.ts(22,11): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp5235qjv4.ts(22,23): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp5235qjv4.ts(22,31): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprcgxgeoa.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmprcgxgeoa.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiqb4oy14.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpiqb4oy14.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojjfz1z0.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first = 1;\n  let second = 1;\n  let third = 1;\n  let fourth = 1;\n\
    \  let fifth = 1;\n  let sixth = 1;\n  let seventh = 1;\n  let eighth = 1;\n \
    \ let nineth = 1;\n  let tenth = 1;\n  let eleventh = 1;\n  let twelfth = 1;\n\
    \  let thirteenth = 1;\n  let fourteenth = 1;\n  let fifteenth = 1;\n  let sixteenth\
    \ = 1;\n  let seventeenth = 1;\n  let eighteenth = 1;\n  let nineteenth = 1;\n\
    \  let twentieth = 1;\n  let twentyfirst = 1;\n  let twentysecond = 1;\n  let\
    \ twentythird = 1;\n  let twentyfourth = 1;\n  let twentyfifth = 1;\n  let twentysixth\
    \ = 1;\n  let twentyseventh = 1;\n  let twentyeighth = 1;\n  let twentynineth\
    \ = 1;\n  let thirtieth = 1;\n  let thirtyfirst = 1;\n  let thirtysecond = 1;\n\
    \  let thirtythird = 1;\n  let thirtyfourth = 1;\n  let thirtyfifth = 1;\n  let\
    \ thirtysixth = 1;\n  let thirtyseventh = 1;\n  let thirtyeighth = 1;\n  let thirtynineth\
    \ = 1;\n  let fortieth = 1;\n  let fortyfirst = 1;\n  let fortysecond = 1;\n \
    \ let fortythird = 1;\n  let fortyfourth = 1;\n  let fortyfifth = 1;\n  let fortysixth\
    \ = 1;\n  let fortyseventh = 1;\n  let fortyeighth = 1;\n  let fortynineth = 1;\n\
    \  let fiftieth = 1;\n  let fiftyfirst = 1;\n  let fiftysecond = 1;\n  let fiftythird\
    \ = 1;\n  let fiftyfourth = 1;\n  let fiftyfifth = 1;\n  let fiftysixth = 1;\n\
    \  let fiftyseventh = 1;\n  let fiftyeighth = 1;\n  let fiftynineth = 1;\n  let\
    \ sixtieth = 1;\n  let sixtyfirst = 1;\n  let sixtysecond = 1;\n  let sixtythird\
    \ = 1;\n  let sixtyfourth = 1;\n  let sixtyfifth = 1;\n  let sixtysixth = 1;\n\
    \  let sixtyseventh = 1;\n  let sixtyeighth = 1;\n  let sixtynineth = 1;\n  let\
    \ seventieth = 1;\n  let seventyfirst = 1;\n  let seventysecond = 1;\n  let seventythird\
    \ = 1;\n  let seventyfourth = 1;\n  let se\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2mgajlq7.ts(112,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794356
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1,\
    \ 3];\n  }\n  if (n % 2 === 0) {\n    let a = tri(n - 1);\n    let b = tri(n -\
    \ 2);\n    let c = tri(n + 1);\n    result = a.concat(b, c);\n  } else {\n   \
    \ let a = tri(n - 1);\n    let b = tri(n - 2);\n    let c = tri(n + 1);\n    result\
    \ = a.concat(b, c);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfodf457z.js:23\n        return [1, 3];\n        ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpfodf457z.js:23:9)\n  \
    \  at tri (/tmp/tmpfodf457z.js:32:17)\n    at tri (/tmp/tmpfodf457z.js:26:17)\n\
    \    at tri (/tmp/tmpfodf457z.js:34:17)\n    at tri (/tmp/tmpfodf457z.js:26:17)\n\
    \    at tri (/tmp/tmpfodf457z.js:34:17)\n    at tri (/tmp/tmpfodf457z.js:26:17)\n\
    \    at tri (/tmp/tmpfodf457z.js:34:17)\n    at tri (/tmp/tmpfodf457z.js:26:17)\n\
    \    at tri (/tmp/tmpfodf457z.js:34:17)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp13krwgel.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp13krwgel.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp13krwgel.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp13krwgel.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [];\n  }\n  const result: number[] = [];\n  const tri1 = tri(n\
    \ - 1);\n  const tri2 = tri(n - 2);\n  const tri3 = tri(n - 3);\n  result.push(tri1);\n\
    \  result.push(tri2);\n  result.push(tri3);\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy7tbqiq3.ts(25,15): error TS2345: Argument of type
    ''number[]'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpy7tbqiq3.ts(26,15): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpy7tbqiq3.ts(27,15): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjhvq990n.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpjhvq990n.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 1) {\n   \
    \     return [1];\n    }\n    if (n === 2) {\n        return [1, 1];\n    }\n\
    \    if (n % 2 === 0) {\n        return [tri(n - 1) + tri(n - 2), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)];\n    }\n    return [tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqcpl_tzd.ts(25,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqcpl_tzd.ts(25,42): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqcpl_tzd.ts(27,13): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpqcpl_tzd.ts(27,51): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeuqchwia.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeuqchwia.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeuqchwia.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeuqchwia.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n % 2 === 0) {\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx8bt1u4b.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpx8bt1u4b.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpx8bt1u4b.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpx8bt1u4b.ts(27,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyef8zqnd.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyef8zqnd.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0 || n === 1)\
    \ {\n    return [];\n  }\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyngbmgb_.ts(21,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpyngbmgb_.ts(21,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi526ha_d.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi526ha_d.ts(21,66): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi526ha_d.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpi526ha_d.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n === 3)\
    \ {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 2)];\n  }\n  return [tri(n -\
    \ 1) + tri(n + 1), tri(n - 2) + tri(n + 2)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeem39n9e.ts(28,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeem39n9e.ts(28,51): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeem39n9e.ts(30,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpeem39n9e.ts(30,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20gbm_11.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp20gbm_11.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1)\
    \ + tri(n - 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ataodq0.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4ataodq0.ts(27,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n === 3)\
    \ {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ + tri(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3tlpe2yd.ts(28,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp3tlpe2yd.ts(30,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9b9h8gv0.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9b9h8gv0.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794357
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n - 1) + tri(n - 2), tri(n -\
    \ 1) + tri(n - 1) + tri(n - 2)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppsm_kj5w.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppsm_kj5w.ts(20,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppsm_kj5w.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppsm_kj5w.ts(21,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n\
    \  }\n  return [tri(n - 1) + tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpil356h44.ts(25,13): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpil356h44.ts(25,38): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpil356h44.ts(27,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpil356h44.ts(27,49): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpljtkz276.ts(24,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpljtkz276.ts(24,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794357
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result = [3];\n  } else {\n    let first: number\
    \ = 1;\n    let second: number = 2;\n    let third: number = 3;\n    let fourth:\
    \ number = 4;\n    let fifth: number = 5;\n    let sixth: number = 6;\n    let\
    \ seventh: number = 7;\n    let eighth: number = 8;\n    let nineth: number =\
    \ 9;\n    let tenth: number = 10;\n    let eleventh: number = 11;\n    let twelfth:\
    \ number = 12;\n    let thirteenth: number = 13;\n    let fourteenth: number =\
    \ 14;\n    let fifteenth: number = 15;\n    let sixteenth: number = 16;\n    let\
    \ seventeenth: number = 17;\n    let eighteenth: number = 18;\n    let nineteenth:\
    \ number = 19;\n    let twentieth: number = 20;\n    let twentyfirst: number =\
    \ 21;\n    let twentysecond: number = 22;\n    let twentythird: number = 23;\n\
    \    let twentyfourth: number = 24;\n    let twentyfifth: number = 25;\n    let\
    \ twentysixth: number = 26;\n    let twentyseventh: number = 27;\n    let twentyeighth:\
    \ number = 28;\n    let twentyninth: number = 29;\n    let thirtieth: number =\
    \ 30;\n    let thirtyfirst: number = 31;\n    let thirtysecond: number = 32;\n\
    \    let thirtythird: number = 33;\n    let thirtyfourth: number = 34;\n    let\
    \ thirtyfifth: number = 35;\n    let thirtysixth: number = 36;\n    let thirtyseventh:\
    \ number = 37;\n    let thirtyeighth: number = 38;\n    let thirtyninth: number\
    \ = 39;\n    let fourtieth: number = 40;\n    let fourtyfirst: number = 41;\n\
    \    let fourtysecond: number = 42;\n    let fourtythird: number = 43;\n    let\
    \ fourtyfourth: number = 44;\n    let fourtyfifth: number = 45;\n    let fourtysixth:\
    \ number = 46;\n    let fourtyseventh: number = 47;\n    let fourtyeighth: number\
    \ = 48;\n    let fourtyninth: number = 49;\n    let fiftieth: number = 50;\n \
    \   let fiftyfirst: number = 51;\n    let fiftysecond: number = 52;\n    let fiftythird:\
    \ number = 53;\n    let fiftyfourth: \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps5rpqu33.ts(76,9): error TS1005: '','' expected.

    ../../../../../tmp/tmps5rpqu33.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj79b3blk.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpj79b3blk.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794351
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 1, 2];\n    if\
    \ (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplr5oyzfm.ts(21,30): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmplr5oyzfm.ts(21,55): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmplr5oyzfm.ts(22,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first: number = 1;\n  let second: number = 2;\n  let third: number\
    \ = 3;\n  if (n === 1) {\n    result.push(first);\n    return result;\n  }\n \
    \ if (n === 2) {\n    result.push(second);\n    return result;\n  }\n  if (n ===\
    \ 3) {\n    result.push(third);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    third = first + second;\n    first = second;\n    second = third;\n  } else\
    \ {\n    third = first + second + third;\n    first = second + third;\n    second\
    \ = third;\n  }\n  for (let i = 4; i <= n; i++) {\n    result.push(third);\n \
    \   third = first + second + third;\n    first = second + third;\n    second =\
    \ third;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp4b7d4hhn.js:55:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4b7d4hhn.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvfbztie4.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvfbztie4.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5n438l0r.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp5n438l0r.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794356
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let first: number = 1;\n    let second: number = 1;\n    let third:\
    \ number = 1;\n    for (let i = 1; i <= n; i++) {\n        result.push(first);\n\
    \        first = second + third;\n        second = third;\n        third = first\
    \ + second;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpw5ef4yca.js:33:12)\n    at Object.<anonymous> (/tmp/tmpw5ef4yca.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8sn37kkk.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp8sn37kkk.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9qnhywrb.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9qnhywrb.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n % 2 === 0) {\n\
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    result.push(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppx1kcsxq.ts(28,17): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmppx1kcsxq.ts(30,17): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794353
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ki1qusg.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp2ki1qusg.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 1, 2];\n    if\
    \ (n % 2 === 0) return [tri(n - 1), tri(n - 2), tri(n - 1) + tri(n - 2)];\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n - 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4pd5itsl.ts(21,54): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4pd5itsl.ts(22,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0)\
    \ {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb6bx09s9.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpb6bx09s9.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 1, 2];\n    if\
    \ (n % 2 === 0) return [tri(n - 1), tri(n - 2), tri(n - 1) + tri(n - 2)];\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n - 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4pd5itsl.ts(21,54): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp4pd5itsl.ts(22,12): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojjfz1z0.ts(21,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(21,53): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpojjfz1z0.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhtht6nf.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpwhtht6nf.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    let result: number[]\
    \ = [];\n    let temp: number = 1;\n    let temp2: number = 1;\n    let temp3:\
    \ number = 1;\n    let temp4: number = 1;\n    let temp5: number = 1;\n    let\
    \ temp6: number = 1;\n    let temp7: number = 1;\n    let temp8: number = 1;\n\
    \    let temp9: number = 1;\n    let temp10: number = 1;\n    let temp11: number\
    \ = 1;\n    let temp12: number = 1;\n    let temp13: number = 1;\n    let temp14:\
    \ number = 1;\n    let temp15: number = 1;\n    let temp16: number = 1;\n    let\
    \ temp17: number = 1;\n    let temp18: number = 1;\n    let temp19: number = 1;\n\
    \    let temp20: number = 1;\n    let temp21: number = 1;\n    let temp22: number\
    \ = 1;\n    let temp23: number = 1;\n    let temp24: number = 1;\n    let temp25:\
    \ number = 1;\n    let temp26: number = 1;\n    let temp27: number = 1;\n    let\
    \ temp28: number = 1;\n    let temp29: number = 1;\n    let temp30: number = 1;\n\
    \    let temp31: number = 1;\n    let temp32: number = 1;\n    let temp33: number\
    \ = 1;\n    let temp34: number = 1;\n    let temp35: number = 1;\n    let temp36:\
    \ number = 1;\n    let temp37: number = 1;\n    let temp38: number = 1;\n    let\
    \ temp39: number = 1;\n    let temp40: number = 1;\n    let temp41: number = 1;\n\
    \    let temp42: number = 1;\n    let temp43: number = 1;\n    let temp44: number\
    \ = 1;\n    let temp45: number = 1;\n    let temp46: number = 1;\n    let temp47:\
    \ number = 1;\n    let temp48: number = 1;\n    let temp49: number = 1;\n    let\
    \ temp50: number = 1;\n    let temp51: number = 1;\n    let temp52: number = 1;\n\
    \    let temp53: number = 1;\n    let temp54: number = 1;\n    let temp55: number\
    \ = 1;\n    let temp56: number = 1;\n    let temp57: number = 1;\n    let temp58:\
    \ number = 1;\n    let temp59: number = 1;\n    let temp60: number = 1;\n    let\
    \ temp61: number = 1;\n    let temp62: number = 1;\n    let temp63: number = 1;\n\
    \    let temp64: number = 1;\n    let temp65: number = 1;\n    let temp66: number\
    \ = 1;\n    let temp67: number = 1;\n    let temp68: number = 1;\n    let temp69:\
    \ number = 1;\n    let temp70: number = 1;\n    let temp71: number = 1;\n    let\
    \ temp72: number = 1;\n    let temp73: number = 1;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_e4aahp3.ts(110,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 1) {\n    return\
    \ [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvj4u3y3m.ts(25,12): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmpvj4u3y3m.ts(27,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  let result: number[] =\
    \ [];\n  let first: number = 1;\n  let second: number = 1;\n  let third: number\
    \ = 1;\n  let fourth: number = 1;\n  let fifth: number = 1;\n  let sixth: number\
    \ = 1;\n  if (n === 1) {\n    result.push(1);\n    return result;\n  }\n  if (n\
    \ === 2) {\n    result.push(1);\n    result.push(2);\n    return result;\n  }\n\
    \  if (n % 2 === 0) {\n    third = first;\n    first = second;\n    second = third;\n\
    \    third = fourth;\n    fourth = fifth;\n    fifth = sixth;\n    sixth = first\
    \ + second + third + fourth + fifth;\n  }\n  else {\n    third = second;\n   \
    \ second = first;\n    first = third;\n    third = fourth;\n    fourth = fifth;\n\
    \    fifth = sixth;\n    sixth = second + third + fourth + fifth;\n  }\n  result.push(first);\n\
    \  result.push(third);\n  result.push(fifth);\n  result.push(sixth);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpkf3was31.js:61:12)\n    at Object.<anonymous> (/tmp/tmpkf3was31.js:72:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1), tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2), tri(n\
    \ + 1) + tri(n + 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjzb143g.ts(21,28): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmphjzb143g.ts(21,40): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmphjzb143g.ts(22,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmphjzb143g.ts(22,36): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794358
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7waqbk_.ts(20,11): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659794349
- exit_code: 2
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n\
    // [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n\
    \  if (n === 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pkwmctn.ts(20,28): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    ../../../../../tmp/tmp9pkwmctn.ts(21,11): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738598
