name: HumanEval_86_anti_shuffle
language: ts
prompt: "//Write a function that takes a string and returns an ordered version of\
  \ it.\n// Ordered version of string, is a string where all words (separated by space)\n\
  // are replaced by a new word where all the characters arranged in\n// ascending\
  \ order based on ascii value.\n// Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\
  \n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\"\
  )\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
  ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
  number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
  Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
  );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\"\
  .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
completions: ["  return s.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/([A-Z])([a-z])/g,\
    \ ' $1 $2').replace(/\\s+/g, ' ').trim();\n}\n", "  const words = s.split(\" \"\
    );\n  const new_words = [];\n  for (let i = 0; i < words.length; i++) {\n    const\
    \ word = words[i];\n    const new_word = word;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      const char = word.charAt(j);\n      const ascii = char.charCodeAt(0);\n\
    \      if (ascii < 65 || ascii > 90) {\n        new_word += char;\n      }\n \
    \   }\n    new_words.push(new_word);\n  }\n  return new_words.join(\" \");\n}\n",
  "  let words = s.split(\" \");\n  let new_word = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let char = words[i].charCodeAt(0);\n    if (char > 96 && char <\
    \ 123) {\n      new_word += words[i].toUpperCase();\n    } else if (char > 64\
    \ && char < 91) {\n      new_word += words[i].toLowerCase();\n    } else {\n \
    \     new_word += words[i];\n    }\n  }\n  return new_word;\n}\n", "  const words\
    \ = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    const word = words[i];\n    const chars = word.split('');\n    chars.sort((a,\
    \ b) => {\n      const aCode = a.charCodeAt(0);\n      const bCode = b.charCodeAt(0);\n\
    \      if (aCode > bCode) {\n        return 1;\n      } else if (aCode < bCode)\
    \ {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n\
    \    result.push(chars.join(''));\n  }\n  return result.join(' ');\n}\n", "  return\
    \ s.split(' ').sort().join(' ');\n}\n", "  return s.replace(/\\s+/g, ' ').split('\
    \ ').sort().join(' ');\n}\n", "  return s.replace(/([A-Z])/g, function ($1) {\n\
    \    return $1.toUpperCase();\n  }).replace(/\\s+/g, ' ').split(' ').sort().join('\
    \ ');\n}\n", "  let new_s = \"\";\n  for (let i = 0; i < s.length; i++) {\n  \
    \  let char = s.charAt(i);\n    if (char === \" \") {\n      new_s += \"!\";\n\
    \    } else {\n      new_s += char;\n    }\n  }\n  return new_s;\n}\n", "  return\
    \ s.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/([A-Z])([a-z])/g, ' $1 $2')\n\
    }\n", "  const words = s.split(\" \");\n  const result: string = words.reduce((acc,\
    \ word) => {\n    const newWord = word;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      const char = word.charCodeAt(i);\n      if (char > 96 && char\
    \ < 123) {\n        newWord += String.fromCharCode(char - 32);\n      } else {\n\
    \        newWord += word[i];\n      }\n    }\n    return acc + newWord;\n  },\
    \ \"\");\n  return result;\n}\n", "  return s.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/([A-Z])([a-z])/g,\
    \ ' $1 $2').replace(/\\s+/g, ' ').trim();\n}\n", "  return s.replace(/([A-Z])/g,\
    \ function ($1) {\n    return $1.toLowerCase();\n  }).replace(/\\s+/g, ' ').split('\
    \ ').sort().join(' ');\n}\n", "  let new_s = \"\";\n  for (let i = 0; i < s.length;\
    \ i++) {\n    let char = s[i];\n    let ascii = char.charCodeAt(0);\n    if (ascii\
    \ < 65 || ascii > 90) {\n      new_s += char;\n    } else {\n      let index =\
    \ Math.floor(Math.random() * 26);\n      let new_char = String.fromCharCode(index\
    \ + 65);\n      new_s += new_char;\n    }\n  }\n  return new_s;\n}\n", "  const\
    \ words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const index = word.length - 1;\n   \
    \ for (let j = 0; j < index; j++) {\n      result.push(word.substring(0, j) +\
    \ word.substring(j + 1, word.length));\n    }\n  }\n  return result.join(' ');\n\
    }\n", "  const words = s.split(' ');\n  const result: string = words[0];\n  for\
    \ (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ index = result.length - 1;\n    const char = result[index];\n    const nextChar\
    \ = word[index];\n    if (char > nextChar) {\n      result += word;\n    } else\
    \ {\n      result = result.slice(0, index) + nextChar + result.slice(index + 1);\n\
    \    }\n  }\n  return result;\n}\n", "  return s.replace(/[a-z]+/g, function (m)\
    \ {\n    return m.split('').sort().join('');\n  });\n}\n", "  return s.replace(/([a-z])([A-Z])/g,\
    \ '$1 $2').replace(/([A-Z])([A-Z][a-z])/g, '$1 $2').replace(/\\s+/g, ' ').split('\
    \ ').sort().join(' ');\n}\n", "  let words: string[] = s.split(\" \");\n  let\
    \ new_words: string[] = [];\n  for (let i = 0; i < words.length; i++) {\n    let\
    \ char = words[i].charCodeAt(0);\n    if (char >= 65 && char <= 90) {\n      new_words.push(words[i].toUpperCase());\n\
    \    } else if (char >= 97 && char <= 122) {\n      new_words.push(words[i].toLowerCase());\n\
    \    } else {\n      new_words.push(words[i]);\n    }\n  }\n  return new_words.join(\"\
    \ \");\n}\n", "  let new_s = \"\";\n  for (let i = 0; i < s.length; i++) {\n \
    \   let c = s.charAt(i);\n    if (c === \" \") {\n      new_s += \"!\";\n    }\
    \ else {\n      new_s += c;\n    }\n  }\n  return new_s;\n}\n", "  let words =\
    \ s.split(' ');\n  let result = '';\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let ascii = word.charCodeAt(0);\n    if (ascii\
    \ >= 65 && ascii <= 90) {\n      result += word.slice(0, 1) + 'a' + word.slice(1)\
    \ + ' ';\n    } else if (ascii >= 97 && ascii <= 122) {\n      result += word.slice(0,\
    \ 1) + 'A' + word.slice(1) + ' ';\n    } else {\n      result += word + ' ';\n\
    \    }\n  }\n  return result.trim();\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
