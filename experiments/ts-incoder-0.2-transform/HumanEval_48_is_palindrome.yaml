name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "    return text === text.toLowerCase().split('').reverse().join('');\n}\n", " \
    \   if (text === \"\") {\n        return true;\n    }\n\n    for (let i = 0; i\
    \ < text.length / 2; i++) {\n        if (text[i] !== text[text.length - i - 1])\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n", " \
    \   if (text === \"\") {\n        return true;\n    }\n    let reversed = \"\"\
    ;\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed += text[i];\n\
    \    }\n    return text === reversed;\n}\n", "  if (text === \"\") {\n    return\
    \ true;\n  }\n\n  const reversed = text.split(\"\").reverse().join(\"\");\n  return\
    \ text === reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  let reversed = text\n    .toLowerCase()\n    .reverse()\n    .toString();\n\
    \  return text === reversed;\n}\n", "  let reversed = text\n    .toLowerCase()\n\
    \    .reverse()\n    .toString();\n  return text === reversed;\n}\n", "  let reversed\
    \ = text\n    .toLowerCase()\n    .reverse()\n    .toString();\n  return text\
    \ === reversed;\n}\n", "    if (text === \"\") {\n        return true;\n    }\n\
    \n    let reversed = \"\";\n\n    for (let i = 0; i < text.length; i++) {\n  \
    \      reversed += text[i];\n    }\n\n    return reversed === text;\n}\n", " \
    \ return text === text.toLowerCase().split('').reverse().join('');\n}\n", "  return\
    \ text === text.toLowerCase().split('').reverse().join('');\n}\n", "  return text\
    \ === text.toLowerCase().split('').reverse().join('');\n}\n", "  return text ===\
    \ text.toLowerCase().split('').reverse().join('');\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  if (text === '') {\n    return true;\n  }\n\n  const textArr = text.split('');\n\
    \  const textArrLength = textArr.length;\n\n  for (let i = 0; i < textArrLength\
    \ / 2; i++) {\n    if (textArr[i] !== textArr[textArrLength - i - 1]) {\n    \
    \  return false;\n    }\n  }\n\n  return true;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "    return text === get_reversed_string(text);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
