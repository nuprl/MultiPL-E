name: HumanEval_0_has_close_elements
language: ts
prompt: "//Check if in given list of numbers, are any two numbers closer to each other\
  \ than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n//\
  \ false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\n\
  function has_close_elements(numbers: number[], threshold: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
  \ 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n\
  \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
completions: ["\tlet min_diff = Number.MAX_VALUE;\n\tfor (let i = 0; i < numbers.length\
    \ - 1; i++) {\n\t\tconst diff = numbers[i + 1] - numbers[i];\n\t\tif (diff < min_diff)\
    \ {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff < threshold;\n}\n",
  "\tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\tfor (let j = i + 1; j < numbers.length;\
    \ j++) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold) {\n\t\t\t\t\
    return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "  if (numbers.length\
    \ < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b)\
    \ => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber\
    \ - middleNumber) < threshold &&\n      Math.abs(lastNumber - middleNumber) <\
    \ threshold;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\
    \tmax = numbers[i];\n\t\t} else if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t}\n\treturn (Math.abs(max - min) < threshold);\n}\n", "\tlet min_diff\
    \ = threshold;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tlet diff = numbers[i]\
    \ - min_diff;\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\
    \treturn min_diff < threshold;\n}\n", "    if (numbers.length < 2) {\n       \
    \ return false;\n    }\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n\
    \    const diffs = sortedNumbers.map((a, i) => sortedNumbers[i + 1] - a);\n  \
    \  const diffsThreshold = diffs.filter(d => d > threshold);\n    return diffsThreshold.length\
    \ >= 2;\n}\n", "\tlet min_diff = Math.abs(numbers[0] - threshold);\n\tfor (let\
    \ i = 1; i < numbers.length; i++) {\n\t\tconst diff = Math.abs(numbers[i] - threshold);\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff\
    \ < threshold;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\
    \tmax = numbers[i];\n\t\t} else if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t}\n\treturn (max - min) < threshold;\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 0; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] === max) {\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (numbers[i] === min) {\n\t\t\treturn false;\n\t\
    \t}\n\t\tif (Math.abs(numbers[i] - min) < threshold) {\n\t\t\treturn true;\n\t\
    \t}\n\t\tif (Math.abs(numbers[i] - max) < threshold) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn false;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ false;\n    }\n    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i = 2; i < numbers.length; i++) {\n        const diff = Math.abs(numbers[i]\
    \ - numbers[i - 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \        }\n    }\n    return min_diff < threshold;\n}\n", "\tconst len = numbers.length;\n\
    \tif (len < 2) {\n\t\treturn false;\n\t}\n\tlet minDiff = Number.MAX_VALUE;\n\t\
    for (let i = 1; i < len; i++) {\n\t\tconst diff = numbers[i] - numbers[i - 1];\n\
    \t\tif (diff < minDiff) {\n\t\t\tminDiff = diff;\n\t\t}\n\t}\n\treturn minDiff\
    \ < threshold;\n}\n", "    if (numbers.length < 2) {\n        return false;\n\
    \    }\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const firstNumber\
    \ = sortedNumbers[0];\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const firstDiff = Math.abs(firstNumber - threshold);\n    const lastDiff\
    \ = Math.abs(lastNumber - threshold);\n    return firstDiff < lastDiff;\n}\n",
  "  const len = numbers.length;\n  if (len < 2) {\n    return false;\n  }\n  const\
    \ min_diff = threshold;\n  const min_diff_index = -1;\n  const max_diff = -threshold;\n\
    \  const max_diff_index = -1;\n  for (let i = 0; i < len; i++) {\n    const diff\
    \ = numbers[i] - min_diff;\n    if (diff > max_diff) {\n      max_diff = diff;\n\
    \      max_diff_index = i;\n    }\n    if (diff < min_diff) {\n      min_diff\
    \ = diff;\n      min_diff_index = i;\n    }\n  }\n  return min_diff_index != max_diff_index;\n\
    }\n", "    if (numbers.length < 2) {\n        return false;\n    }\n    const\
    \ sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    const firstNumber\
    \ = sortedNumbers[0];\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const middleNumber = (firstNumber + lastNumber) / 2;\n    const middleNumberDistance\
    \ = Math.abs(middleNumber - threshold);\n    for (let i = 1; i < sortedNumbers.length;\
    \ i++) {\n        const currentNumber = sortedNumbers[i];\n        const currentNumberDistance\
    \ = Math.abs(currentNumber - threshold);\n        if (currentNumberDistance <\
    \ middleNumberDistance) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "\tlet min_distance = Number.MAX_VALUE;\n\tfor (let i = 0; i <\
    \ numbers.length - 1; i++) {\n\t\tconst distance = distanceBetween(numbers[i],\
    \ numbers[i + 1]);\n\t\tif (distance < min_distance) {\n\t\t\tmin_distance = distance;\n\
    \t\t}\n\t}\n\treturn min_distance < threshold;\n}\n", "\tlet close = false;\n\t\
    for (let i = 0; i < numbers.length; i++) {\n\t\tconst n = numbers[i];\n\t\tconst\
    \ d = Math.abs(n - threshold);\n\t\tif (d < Math.abs(numbers[i + 1] - threshold))\
    \ {\n\t\t\tclose = true;\n\t\t}\n\t}\n\treturn close;\n}\n", "    for (let i =\
    \ 0; i < numbers.length - 1; i++) {\n        const a = numbers[i];\n        const\
    \ b = numbers[i + 1];\n        const dist = distance(a, b);\n        if (dist\
    \ <= threshold) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tconst diff = Math.abs(numbers[i] - numbers[i\
    \ - 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn\
    \ min_diff < threshold;\n}\n", "\tlet min_diff = Number.MAX_VALUE;\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tconst diff = numbers[i] - threshold;\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff\
    \ < Number.EPSILON;\n}\n", "\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\
    for (let j = i + 1; j < numbers.length; j++) {\n\t\t\tif (Math.abs(numbers[i]\
    \ - numbers[j]) < threshold) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
