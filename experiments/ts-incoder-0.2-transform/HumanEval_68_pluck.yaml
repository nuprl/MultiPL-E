name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length ===\
    \ 0) return [];\n  return evens.reduce((acc, curr, index) => {\n    if (acc ===\
    \ undefined) return [curr, index];\n    if (curr < acc[0]) return [curr, index];\n\
    \    return acc;\n  }, undefined);\n}\n", "  const evenValues = arr.filter(v =>\
    \ v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ val, i) => {\n    const index = arr.indexOf(val);\n    if (index === 0) return\
    \ [val, i];\n    if (index === arr.length - 1) return [val, i];\n    return acc;\n\
    \  }, []);\n}\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  const smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < len;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const minIndex = evenValues.reduce((prev, curr, index) => {\n    if (curr\
    \ < prev) return index;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n  return\
    \ evenValues.map(node => [node, minIndex]);\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev,\
    \ curr, i, arr) => {\n    if (curr < prev) return curr;\n    return arr[i];\n\
    \  });\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((acc, cur, index) => {\n    if\
    \ (index === evenValues.length - 1) return [cur, index];\n    if (cur < evenValues[index\
    \ + 1]) return [cur, index + 1];\n    return [cur, evenValues[index + 1]];\n \
    \ }, []);\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a -\
    \ b);\n  const smallestEvenValue = sortedEvenValues[0];\n  const indexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, indexOfSmallestEvenValue];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr)\
    \ => {\n    if (curr < prev) {\n      return curr;\n    }\n    return arr[i];\n\
    \  }, evenValues[0]);\n}\n", "  const result = [];\n  let minIndex = -1;\n  let\
    \ minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ === minValue) {\n      if (minIndex === -1) {\n        minIndex = i;\n     \
    \ } else if (arr[i] !== minValue) {\n        minIndex = i;\n      }\n    }\n \
    \ }\n  if (minIndex === -1) {\n    return result;\n  }\n  result.push(minValue);\n\
    \  result.push(minIndex);\n  return result;\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((prev, curr) => {\n    const index\
    \ = arr.indexOf(curr);\n    if (index === 0) return [curr, index];\n    if (prev[0]\
    \ < curr) return [curr, index];\n    return [prev[0], prev[1]];\n  }, [evenValues[0],\
    \ 0]);\n}\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ smallestIndex =\n    evenValues.findIndex(\n      v => v === smallestEvenValue\
    \ && v % 2 === 0\n    ) || evenValues.length;\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a -\
    \ b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev, curr)\
    \ => {\n    const index = prev.findIndex(node => node === curr);\n    if (index\
    \ === -1) return [curr, curr];\n    return [index > prev.length ? prev[index]\
    \ : curr, index];\n  }, []);\n}\n", "  const evenValues = arr.filter(n => n %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.sort((a,\
    \ b) => a - b).slice(0, 1);\n}\n", "  const evenValues = arr.filter(node => node\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const smallestIndex =\n   \
    \ evenValues.findIndex(node => node === smallestEvenValue) + 1;\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n\
    \  if (evenValues.length === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc,\
    \ curr, i) => {\n    return curr < acc ? i : acc;\n  }, 0);\n  return evenValues.map(n\
    \ => [n, minIndex]);\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n \
    \ for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n     \
    \ minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  const smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a\
    \ < b ? a : b);\n  const smallestIndex = arr.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "  const evens = arr.filter(n =>\
    \ n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const smallest\
    \ = evens.reduce((prev, curr) => {\n    if (prev === undefined || prev > curr)\
    \ {\n      return curr;\n    }\n    return prev;\n  }, undefined);\n  const index\
    \ = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "  const len = arr.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const minIndex = Math.min(...arr.map(node\
    \ => node % 2));\n  const minValue = arr[minIndex];\n  const evens = arr.filter(node\
    \ => node % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  return\
    \ evens.map(node => node === minValue ? minIndex : minValue);\n}\n", "  const\
    \ result = [];\n  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let smallestIndex\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n\
    \    if (value % 2 === 0) {\n      if (value < smallestEven) {\n        smallestEven\
    \ = value;\n        smallestIndex = i;\n      }\n    }\n  }\n  if (smallestEven\
    \ === Number.MAX_SAFE_INTEGER) {\n    return [];\n  }\n  result.push(smallestEven,\
    \ smallestIndex);\n  return result;\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex\
    \ = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc) return i;\n   \
    \ return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return evenValues.map(v => [v,minIndex]);\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, v, i) => {\n\
    \    if (v < acc[0]) {\n      return [v, i];\n    }\n    return acc;\n  }, [evenValues[0]]);\n\
    }\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a -\
    \ b)[0];\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = arr.findIndex(node => node\
    \ === smallestEvenValue);\n  return [smallestEvenValue, index];\n}\n", "  const\
    \ evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n\
    \      return [val, i];\n    }\n    return acc;\n  }, []);\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((acc, cur, idx) => {\n    if (acc\
    \ === null || cur < acc[0]) {\n      return [cur, idx];\n    }\n    return acc;\n\
    \  }, null);\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  const minValue = evenValues[0];\n  const\
    \ minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr,\
    \ i) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return i;\n \
    \ }, Number.MAX_SAFE_INTEGER);\n  return evenValues.map(n => [n, minIndex]);\n\
    }\n", "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n \
    \ for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n     \
    \ minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue,\
    \ minIndex);\n  return result;\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((acc,\
    \ curr, i) => {\n    if (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  const index = evenValues.indexOf(minValue);\n\
    \  return [minValue, index];\n}\n", "  const evenValues = arr.filter(v => v %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ v, i) => {\n    if (v < acc.min) {\n      acc.min = v;\n      acc.index = i;\n\
    \    }\n    return acc;\n  }, { min: Number.MAX_SAFE_INTEGER, index: -1 });\n\
    }\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  const smallestEven = evens.reduce((a, b) => a < b\
    \ ? a : b);\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((prev, curr, index) => {\n   \
    \ if (prev === undefined || prev > curr) return index;\n    return prev;\n  },\
    \ undefined);\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length\
    \ === 0) {\n    return [];\n  }\n  const min = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = evens.indexOf(min);\n  return [min, index];\n}\n", " \
    \ const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr)\
    \ => {\n    if (prev === undefined || prev > curr) {\n      return curr;\n   \
    \ }\n    return arr[i];\n  });\n}\n", "  const evenValues = arr.filter(v => v\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(x\
    \ => x % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n\
    \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evens = arr.filter(v => v % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  const min = evens.reduce((a,\
    \ b) => a < b ? a : b);\n  const index = arr.indexOf(min);\n  return [min, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(x\
    \ => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) {\n      return\
    \ [curr, arr[i]];\n    }\n    if (curr < arr[i]) {\n      return [curr, arr[i]];\n\
    \    }\n    return [arr[i-1], arr[i]];\n  }, []);\n}\n", "  const evenValues =\
    \ arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((acc, cur, idx) => {\n    if (idx === 0)\
    \ {\n      return cur;\n    }\n    return Math.min(acc, cur);\n  }, evenValues[0]);\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ smallestIndexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  return evenValues.reduce((prev, curr) => {\n    const index\
    \ = arr.indexOf(curr);\n    if (index === 0) return [prev, curr];\n    if (prev[0]\
    \ < curr) prev[1] = index;\n    return prev;\n  }, [evenValues[0], 0]);\n}\n",
  "  const result = [];\n  const minIndex = 0;\n  const minValue = arr[0];\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
    \  return result;\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  const minValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(minValue);\n  return [minValue, index];\n\
    }\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.sort((a, b) => a - b).slice(0, 1);\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.sort((a, b) => a - b).slice(0, 1);\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const smallestIndex = getIndexOfSmallestEvenValue(arr,\
    \ smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n}\n", " \
    \ const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEven = evens.reduce((a, b) =>\
    \ a < b ? a : b);\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr)\
    \ => {\n    if (i === 0) {\n      return [prev, curr];\n    }\n    if (curr <\
    \ prev) {\n      return [curr, i];\n    }\n    return [prev, i - 1];\n  }, [evenValues[0]]);\n\
    }\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n\
    \  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a -\
    \ b);\n  return sortedEvenValues.reduce((acc, cur, idx) => {\n    if (idx ===\
    \ 0) return cur;\n    if (cur % 2 === 0) return cur;\n    return acc;\n  }, 0);\n\
    }\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minValue = arr[0];\n\
    \  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ curr, index) => {\n    if (curr < acc[0]) {\n      return [curr, index];\n \
    \   }\n    return acc;\n  }, evenValues[0]);\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc)\
    \ {\n      return curr;\n    }\n    return i;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n",
  "  let minValue = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((prev, curr, index) => {\n    if (prev === undefined || curr\
    \ < prev) {\n      return curr;\n    }\n    return index;\n  });\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue\
    \ = arr[0];\n  const minIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if\
    \ (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n\
    \  }\n  return [minValue, minIndex];\n}\n", "  const result = [];\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  result.push(minValue);\n  result.push(minIndex);\n  return result;\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((a, b) => a < b ? a : b);\n}\n",
  "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) return\
    \ [curr, arr[i]];\n    if (curr < arr[i]) return [curr, arr[i]];\n    return [arr[i],\
    \ curr];\n  }, [evenValues[0], evenValues[0]]);\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((prev, curr)\
    \ => {\n    return Math.min(prev, curr);\n  });\n  const minValue = evenValues[minIndex];\n\
    \  const minEvenValue = minValue % 2 === 0;\n  return evenValues.filter(node =>\
    \ node === minValue || node === minEvenValue ? node : undefined);\n}\n", "  const\
    \ evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length === 0) {\n\
    \    return [];\n  }\n  const minValue = Math.min(...evenValues);\n  const minIndex\
    \ = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b\
    \ ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evens = arr.filter(n\
    \ => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ min = evens.reduce((a, b) => Math.min(a, b));\n  const index = evens.indexOf(min);\n\
    \  return [min, index];\n}\n", "  const evenValues = arr.filter(n => n % 2 ===\
    \ 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const minValue\
    \ = evenValues.reduce((a, b) => Math.min(a, b));\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((acc,\
    \ val, i) => {\n    if (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const minValue = evenValues[minIndex];\n  return evenValues.filter(n => n ===\
    \ minValue);\n}\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  return evenValues.reduce((acc, v, i)\
    \ => {\n    if (v < acc[0]) {\n      return [v, i];\n    } else if (v === acc[0])\
    \ {\n      return [acc[1], acc[0]];\n    }\n    return acc;\n  }, [evenValues[0],\
    \ 0]);\n}\n", "  const minIndex: number[] = [];\n  let minValue: number = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex.push(i);\n    } else if (arr[i] === minValue)\
    \ {\n      minIndex.push(i);\n    }\n  }\n  return minIndex;\n}\n", "  const minValue\
    \ = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n  return [minValue,\
    \ minIndex];\n}\n", "  const result = [];\n  const minValue = arr[0];\n  const\
    \ minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue);\n\
    \  result.push(minIndex);\n  return result;\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n}\n", "  const evenValues = arr.filter(node => node %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minValue = Math.min(...evenValues);\n  const minIndexes\
    \ = evenValues.indexOf(minValue);\n  return [minValue, minIndexes];\n}\n", " \
    \ let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) {\n   \
    \   return [curr, arr[i]];\n    }\n    if (arr[i] < curr) {\n      return [curr,\
    \ arr[i]];\n    }\n    return [arr[i], arr[i + 1]];\n  }, [evenValues[0], 0]);\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minValue = Math.min(...evenValues);\n\
    \  const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, cur, idx) =>\
    \ {\n    if (acc === null || cur < acc) {\n      return cur;\n    }\n    return\
    \ acc;\n  }, null);\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue =\
    \ evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((acc, node, index) => {\n    if\
    \ (acc.length === 0 || acc[acc.length - 1] < node) return [node, index];\n   \
    \ return acc;\n  }, []);\n}\n", "  const evenValues = arr.filter(node => node\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const minIndex = evenValues.indexOf(minValue);\n  return\
    \ [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ curr, index) => {\n    if (curr !== 0) return [curr];\n    if (index === evenValues.length\
    \ - 1) return [curr];\n    return [curr];\n  }, []);\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const minValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(node =>\
    \ node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minValue = Math.min(...evenValues);\n  const minIndex\
    \ = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr) => {\n  \
    \  if (prev === undefined || prev < curr) {\n      return curr;\n    }\n    return\
    \ prev;\n  });\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc, curr,\
    \ index) => {\n    if (acc === undefined) return [curr, index];\n    if (curr\
    \ < acc[0]) return [curr, index];\n    return [acc[0], index];\n  }, undefined);\n\
    }\n", "  let evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  let smallestEvenValue = Math.min(...evenValues);\n\
    \  let index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((prev, curr, i) => {\n    if (prev\
    \ === undefined || curr < prev) {\n      return curr;\n    }\n    return prev;\n\
    \  }, undefined);\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue =\
    \ evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr,\
    \ i) => {\n    if (curr < prev) return curr;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => Math.min(a, b));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev,\
    \ curr) => {\n    if (prev === undefined || prev < curr) return curr;\n    return\
    \ prev;\n  });\n}\n", "  const result = [];\n  const minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n  if (minIndex === -1) {\n    return result;\n  }\n  const\
    \ minValue = arr[minIndex];\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0) {\n      if (arr[i] < minValue) {\n        minValue = arr[i];\n\
    \        minIndex = i;\n      }\n    }\n  }\n  result.push(minValue, minIndex);\n\
    \  return result;\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n\
    \  if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev,\
    \ curr, i, arr) => {\n    if (curr < prev) return curr;\n    return arr[i];\n\
    \  });\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  return evenValues.reduce((prev, curr)\
    \ => {\n    if (prev === undefined || prev[0] < curr) {\n      return [curr, curr];\n\
    \    }\n    return prev;\n  }, undefined);\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(v => v\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ cur, idx) => {\n    if (idx < evenValues.length && cur < evenValues[idx]) {\n\
    \      acc.push(cur);\n      return acc;\n    }\n    if (idx === evenValues.length\
    \ - 1) {\n      acc.push(cur);\n      return acc;\n    }\n    if (cur < evenValues[idx])\
    \ {\n      acc.push(cur);\n      return acc;\n    }\n    acc.push(evenValues[idx]);\n\
    \    return acc;\n  }, []);\n}\n", "  const evenValues = arr.filter(node => node\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(v => v\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const minIndex = evenValues.indexOf(minValue);\n\
    \  return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(v => v\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const index = evenValues.indexOf(minValue);\n\
    \  return [minValue, index];\n}\n", "  const evenValues = arr.filter(n => n %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const minIndex: number[] = [];\n\
    \  const minValue: number = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n\
    \    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex.push(i);\n\
    \    } else if (arr[i] === minValue) {\n      minIndex.push(i);\n    }\n  }\n\
    \  return minIndex;\n}\n", "  const evenValues = arr.filter(node => node % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue =\
    \ evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const minEven = arr.reduce((prev, curr) => {\n    if (prev === undefined\
    \ || prev === null || prev % 2 !== 0) {\n      return prev;\n    }\n    return\
    \ curr;\n  }, undefined);\n  if (minEven === undefined) {\n    return [];\n  }\n\
    \  return arr.filter(node => node === minEven);\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n      return\
    \ [val, i];\n    }\n    return acc;\n  }, [evenValues[0]]);\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n\
    \  return evenValues.reduce((acc, val, i) => {\n    if (val < acc[0]) {\n    \
    \  return [val, i];\n    }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, cur, index) => {\n\
    \    if (acc === null || cur < acc) {\n      return cur;\n    }\n    return acc;\n\
    \  }, null);\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ minIndex = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc) {\n  \
    \    return curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
    \ minValue = evenValues[minIndex];\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr) => {\n  \
    \  return prev < curr ? prev : curr;\n  });\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev,\
    \ curr, i, arr) => {\n    if (curr < prev) return curr;\n    return arr[i] ===\
    \ arr[i + 1] ? arr[i] : arr[i + 1];\n  });\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const len = arr.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const evens = arr.filter(v => v % 2 ===\
    \ 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const min = evens[0];\n\
    \  const minIndex = arr.indexOf(min);\n  return [min, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((acc, curr, index) => {\n    if (curr < acc[0])\
    \ {\n      return [curr, index];\n    } else if (curr === acc[0]) {\n      return\
    \ [acc[1], acc[1] === 0 ? index : acc[1] + 1];\n    }\n    return acc;\n  }, [evenValues[0],\
    \ 0]);\n}\n", "  const minValue = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n\
    \  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  if (minIndex === -1) return evenValues;\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) {\n    return [];\n  }\n  return evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n}\n", "  const evenValues = arr.filter(v => v % 2 ===\
    \ 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const minIndex\
    \ = evenValues.reduce((acc, curr, i) => {\n    if (curr < acc) {\n      return\
    \ curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue\
    \ = evenValues[minIndex];\n  return evenValues.map(v => [v, minIndex]);\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.findIndex(n => n === smallestEvenValue);\n  return\
    \ [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if\
    \ (evenValues.length === 0) return [];\n  const minValue = evenValues.reduce((a,\
    \ b) => Math.min(a, b));\n  const minIndex = evenValues.indexOf(minValue);\n \
    \ return [minValue, minIndex];\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const smallestIndex = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((acc, curr, i) => {\n    if (acc === null || curr < acc) {\n\
    \      return curr;\n    }\n    return acc;\n  }, null);\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
    \ curr));\n  const indexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, indexOfSmallestEvenValue];\n}\n", "  const evenValues\
    \ = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  return evenValues.reduce((prev, curr, index) => {\n    if (prev\
    \ === undefined || prev[0] < curr) {\n      return [curr, index];\n    }\n   \
    \ return prev;\n  }, undefined);\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ val, i) => {\n    if (val < acc[0]) {\n      return [val, i];\n    }\n    return\
    \ acc;\n  }, [evenValues[0], 0]);\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const index =\
    \ evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, v, i) => {\n\
    \    if (v < acc[0]) {\n      return [v, i];\n    }\n    return acc;\n  }, evenValues[0]);\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const minIndex = arr.findIndex(node => node % 2 === 0);\n  if (minIndex\
    \ === -1) {\n    return [];\n  }\n  const minValue = arr[minIndex];\n  const result\
    \ = [minValue, minIndex];\n  for (let i = minIndex + 1; i < len; i++) {\n    const\
    \ node = arr[i];\n    if (node % 2 === 0) {\n      continue;\n    }\n    if (node\
    \ < minValue) {\n      minValue = node;\n      minIndex = i;\n    }\n  }\n  return\
    \ result;\n}\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a -\
    \ b)[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => Math.min(a, b));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((prev, curr) => {\n    const index = arr.indexOf(curr);\n\
    \    if (index === -1) {\n      return prev;\n    }\n    if (prev[0] < curr) {\n\
    \      return [curr, index];\n    }\n    return prev;\n  }, [evenValues[0], 0]);\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const evens = arr.filter(n\
    \ => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ index = evens.reduce((acc, curr, i) => {\n    if (curr < acc) {\n      return\
    \ curr;\n    }\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return [evens[0],\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev,\
    \ curr) => Math.min(prev, curr));\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n\
    \  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n  const smallestIndex\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, val, i) => {\n\
    \    return val < acc ? i : acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return evenValues.map(n\
    \ => [n, minIndex]);\n}\n", "  const evenValues = arr.filter(node => node % 2\
    \ === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  return\
    \ evenValues.reduce((prev, curr, i, arr) => {\n    if (curr < prev) {\n      return\
    \ curr;\n    }\n    if (i === arr.length - 1) {\n      return prev;\n    }\n \
    \   return arr[i + 1];\n  }, evenValues[0]);\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ v, i) => {\n    if (v < acc[0]) {\n      return [v, i];\n    }\n    return acc;\n\
    \  }, [evenValues[0]]);\n}\n", "  const evenValues = arr.filter(n => n % 2 ===\
    \ 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues = evenValues.sort((a,\
    \ b) => a - b);\n  return sortedEvenValues.reduce((acc, cur, i, arr) => {\n  \
    \  if (i === 0) return [cur, arr[i]];\n    if (cur === arr[0]) return [cur, arr[i]];\n\
    \    if (cur < arr[0]) return [cur, arr[i]];\n    return [cur, arr[i]];\n  },\
    \ []);\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1;\
    \ i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const\
    \ evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  return evenValues.reduce((prev, curr) => {\n    if (prev ===\
    \ undefined || prev < curr) return curr;\n    return prev;\n  });\n}\n", "  const\
    \ evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue\
    \ = sortedEvenValues[0];\n  const smallestIndexOfSmallestEvenValue = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n}\n", "  const\
    \ evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  return evenValues.reduce((acc, curr, i) => {\n    if (curr < acc[0])\
    \ {\n      return [curr, i];\n    } else if (curr === acc[0]) {\n      return\
    \ [acc[1], acc[0]];\n    }\n    return acc;\n  }, [evenValues[0], 0]);\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b\
    \ ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const minValue = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n\
    \  if (minIndex === -1) {\n    return [];\n  }\n  const evenIndex = minIndex %\
    \ 2 === 0;\n  return evenIndex ? [minValue, minIndex] : minValue;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
