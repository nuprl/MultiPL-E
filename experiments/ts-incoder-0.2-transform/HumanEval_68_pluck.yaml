name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length ===\
    \ 0) return [];\n  return evens.reduce((acc, curr, index) => {\n    if (acc ===\
    \ undefined) return [curr, index];\n    if (curr < acc[0]) return [curr, index];\n\
    \    return acc;\n  }, undefined);\n}\n", "  const evenValues = arr.filter(v =>\
    \ v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ val, i) => {\n    const index = arr.indexOf(val);\n    if (index === 0) return\
    \ [val, i];\n    if (index === arr.length - 1) return [val, i];\n    return acc;\n\
    \  }, []);\n}\n", "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  const smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n  const index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
    \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < len;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  const evenValues\
    \ = arr.filter(node => node % 2 === 0);\n  if (evenValues.length === 0) return\
    \ [];\n  const minIndex = evenValues.reduce((prev, curr, index) => {\n    if (curr\
    \ < prev) return index;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n  return\
    \ evenValues.map(node => [node, minIndex]);\n}\n", "  const evenValues = arr.filter(v\
    \ => v % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev,\
    \ curr, i, arr) => {\n    if (curr < prev) return curr;\n    return arr[i];\n\
    \  });\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((acc, cur, index) => {\n    if\
    \ (index === evenValues.length - 1) return [cur, index];\n    if (cur < evenValues[index\
    \ + 1]) return [cur, index + 1];\n    return [cur, evenValues[index + 1]];\n \
    \ }, []);\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a -\
    \ b);\n  const smallestEvenValue = sortedEvenValues[0];\n  const indexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, indexOfSmallestEvenValue];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr)\
    \ => {\n    if (curr < prev) {\n      return curr;\n    }\n    return arr[i];\n\
    \  }, evenValues[0]);\n}\n", "  const result = [];\n  let minIndex = -1;\n  let\
    \ minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ === minValue) {\n      if (minIndex === -1) {\n        minIndex = i;\n     \
    \ } else if (arr[i] !== minValue) {\n        minIndex = i;\n      }\n    }\n \
    \ }\n  if (minIndex === -1) {\n    return result;\n  }\n  result.push(minValue);\n\
    \  result.push(minIndex);\n  return result;\n}\n", "  let minIndex = 0;\n  let\
    \ minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n \
    \ return [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n    \
    \  minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  return evenValues.reduce((prev, curr) => {\n    const index\
    \ = arr.indexOf(curr);\n    if (index === 0) return [curr, index];\n    if (prev[0]\
    \ < curr) return [curr, index];\n    return [prev[0], prev[1]];\n  }, [evenValues[0],\
    \ 0]);\n}\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ smallestIndex =\n    evenValues.findIndex(\n      v => v === smallestEvenValue\
    \ && v % 2 === 0\n    ) || evenValues.length;\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a -\
    \ b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n \
    \ if (evenValues.length === 0) return [];\n  return evenValues.reduce((prev, curr)\
    \ => {\n    const index = prev.findIndex(node => node === curr);\n    if (index\
    \ === -1) return [curr, curr];\n    return [index > prev.length ? prev[index]\
    \ : curr, index];\n  }, []);\n}\n", "  const evenValues = arr.filter(n => n %\
    \ 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.sort((a,\
    \ b) => a - b).slice(0, 1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
