name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\t\
    for (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min1 = numbers[0];\n\
    \tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet\
    \ d = Math.abs(min1 - numbers[i]);\n\t\tif (d < Math.abs(min2 - numbers[i])) {\n\
    \t\t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\t\t} else {\n\t\t\tmin2 = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min1, min2];\n}\n", "\tlet min: number = numbers[0];\n\t\
    let max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\
    \tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\
    \treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min_dist = Number.MAX_VALUE;\n\t\
    let min_dist_index = -1;\n\tlet max_dist_index = -1;\n\tfor (let i = 0; i < numbers.length\
    \ - 1; i++) {\n\t\tlet dist = numbers[i + 1] - numbers[i];\n\t\tif (dist < min_dist)\
    \ {\n\t\t\tmin_dist = dist;\n\t\t\tmin_dist_index = i;\n\t\t}\n\t\tif (dist >\
    \ max_dist) {\n\t\t\tmax_dist = dist;\n\t\t\tmax_dist_index = i;\n\t\t}\n\t}\n\
    \treturn [numbers[min_dist_index], numbers[max_dist_index]];\n}\n", "\tlet min:\
    \ number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max,\
    \ numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "  let min_dist = Number.MAX_VALUE;\n\
    \  let min_number = numbers[0];\n  let max_number = numbers[0];\n  for (let i\
    \ = 1; i < numbers.length; i++) {\n    const dist = abs(numbers[i] - min_number);\n\
    \    if (dist < min_dist) {\n      min_number = numbers[i];\n      min_dist =\
    \ dist;\n    } else if (dist > max_dist) {\n      max_number = numbers[i];\n \
    \     max_dist = dist;\n    }\n  }\n  return [min_number, max_number];\n}\n",
  "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
    \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest =\
    \ numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tlet curr = numbers[i];\n\t\tif (Math.abs(curr - min1) < Math.abs(min2\
    \ - curr)) {\n\t\t\tmin2 = min1;\n\t\t\tmin1 = curr;\n\t\t} else if (Math.abs(curr\
    \ - min2) < Math.abs(min1 - curr)) {\n\t\t\tmin2 = curr;\n\t\t}\n\t}\n\treturn\
    \ [min1, min2];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "  const sortedNumbers = numbers.slice().sort((a, b) => a\
    \ - b);\n  const closest = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i\
    \ = 1; i < sortedNumbers.length; i++) {\n    const currentClosest = sortedNumbers[i];\n\
    \    const previousClosest = sortedNumbers[i - 1];\n    if (currentClosest < previousClosest)\
    \ {\n      closest[0] = currentClosest;\n    } else if (currentClosest > previousClosest)\
    \ {\n      closest[1] = currentClosest;\n    } else {\n      closest[0] = currentClosest;\n\
    \      closest[1] = previousClosest;\n    }\n  }\n  return closest;\n}\n", " \
    \ if (numbers.length < 2) {\n    throw new Error(\"Must provide at least two numbers\
    \ to find closest to\");\n  }\n  const [smallest, largest] = numbers;\n  const\
    \ [smallest2, largest2] = numbers.sort((a, b) => a - b);\n  if (smallest === smallest2)\
    \ {\n    return [smallest, largest];\n  }\n  if (largest === largest2) {\n   \
    \ return [largest, smallest];\n  }\n  const middle = Math.floor((largest2 - smallest2)\
    \ / 2);\n  const [middle2, middle1] = numbers.sort((a, b) => a - b);\n  if (middle1\
    \ === middle2) {\n    return [middle, middle];\n  }\n  return [\n    find_closest_elements([smallest2,\
    \ middle2, largest2]),\n    find_closest_elements([middle2, smallest2, largest2]),\n\
    \  ];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min = numbers[0];\n\tlet max =\
    \ numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "  const sortedNumbers = numbers.sort((a, b)\
    \ => a - b);\n  const closestPair = sortedNumbers.reduce((prev, curr) => {\n \
    \   if (Math.abs(prev - curr) < Math.abs(prev - sortedNumbers[0])) {\n      return\
    \ [prev, curr];\n    }\n    return prev;\n  });\n  return [closestPair[0], closestPair[1]];\n\
    }\n", "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements:\
    \ Must provide at least two numbers to compare\");\n  }\n  let smallest = numbers[0];\n\
    \  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n \
    \   if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if\
    \ (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\tlet result: [number, number] = [min, max];\n\t\
    for (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] === min) {\n\t\t\
    \tcontinue;\n\t\t}\n\t\tif (numbers[i] === max) {\n\t\t\tcontinue;\n\t\t}\n\t\t\
    let d = numbers[i] - min;\n\t\tif (d < 0 && numbers[i] > max) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (d > 0 && numbers[i] < min) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult\
    \ = [numbers[i], numbers[i]];\n\t}\n\treturn result;\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tlet result: [number, number] = [min, max];\n\tfor (let i = 1; i\
    \ < numbers.length; i++) {\n\t\tif (numbers[i] === min) {\n\t\t\tcontinue;\n\t\
    \t}\n\t\tif (numbers[i] === max) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet d = numbers[i]\
    \ - min;\n\t\tlet s = d / max;\n\t\tlet t = min + s * max;\n\t\tresult = [t, numbers[i]];\n\
    \t}\n\treturn result;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tlet result: [number,\
    \ number] = [min, max];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif\
    \ (numbers[i] - min < max - numbers[i]) {\n\t\t\tresult = [min, numbers[i]];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\treturn [min, max];\n}\n", "  let min: number = numbers[0];\n  let max: number\
    \ = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    } else if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  return [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "  const sortedNumbers = numbers.slice().sort((a,\
    \ b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n\
    \  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i]\
    \ > closestNumbers[0]) {\n      closestNumbers = [sortedNumbers[i], sortedNumbers[i]];\n\
    \    } else if (sortedNumbers[i] < closestNumbers[0]) {\n      closestNumbers\
    \ = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestNumbers;\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor (let\
    \ i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\t\
    smallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min:\
    \ number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max,\
    \ numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax =\
    \ Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tlet d = Math.abs(numbers[i] - min);\n\
    \t\tif (d < Math.abs(max - min)) {\n\t\t\tmin = numbers[i];\n\t\t} else {\n\t\t\
    \tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin\
    \ = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min1 = numbers[0];\n\
    \tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet\
    \ d = numbers[i] - min1;\n\t\tif (d < min2 - min1) {\n\t\t\tmin2 = min1;\n\t\t\
    \tmin1 = numbers[i];\n\t\t} else {\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min1, min2];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "  const sortedNumbers = numbers.sort((a, b)\
    \ => a - b);\n  const closest = [sortedNumbers[0], sortedNumbers[0]];\n  for (let\
    \ i = 1; i < sortedNumbers.length; i++) {\n    const currentClosest = Math.abs(sortedNumbers[i]\
    \ - closest[1]);\n    if (currentClosest < Math.abs(sortedNumbers[i] - closest[0]))\
    \ {\n      closest = [sortedNumbers[i], sortedNumbers[i]];\n    } else {\n   \
    \   closest[1] = sortedNumbers[i];\n    }\n  }\n  return closest;\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tlet d = Math.abs(min1 - numbers[i]);\n\t\tif (d < Math.abs(min2\
    \ - numbers[i])) {\n\t\t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\t\t} else {\n\
    \t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn [min1, min2];\n}\n", "\tlet min1\
    \ = numbers[0];\n\tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tlet d = Math.abs(min1 - numbers[i]);\n\t\tif (d < Math.abs(min2\
    \ - numbers[i])) {\n\t\t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\t\t} else {\n\
    \t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn [min1, min2];\n}\n", "\tlet min:\
    \ number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min_dist = Number.MAX_VALUE;\n\t\
    let min_dist_index = -1;\n\tlet max_dist = Number.MIN_VALUE;\n\tlet max_dist_index\
    \ = -1;\n\tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\tlet dist = numbers[i]\
    \ - numbers[i + 1];\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t\t\
    min_dist_index = i;\n\t\t}\n\t\tif (dist > max_dist) {\n\t\t\tmax_dist = dist;\n\
    \t\t\tmax_dist_index = i;\n\t\t}\n\t}\n\treturn [numbers[min_dist_index], numbers[max_dist_index]];\n\
    }\n", "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements:\
    \ not enough numbers to compare\");\n  }\n\n  const smallest = numbers[0];\n \
    \ const largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n\
    \    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n\n   \
    \ if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  return\
    \ [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet smallest: number;\n\tlet largest: number;\n\
    \tlet smallest_index: number;\n\tlet largest_index: number;\n\tfor (let i = 0;\
    \ i < numbers.length; i++) {\n\t\tsmallest = numbers[i];\n\t\tsmallest_index =\
    \ i;\n\t\tfor (let j = i + 1; j < numbers.length; j++) {\n\t\t\tif (numbers[j]\
    \ < smallest) {\n\t\t\t\tsmallest = numbers[j];\n\t\t\t\tsmallest_index = j;\n\
    \t\t\t}\n\t\t}\n\t\tlargest = numbers[smallest_index];\n\t\tlargest_index = smallest_index;\n\
    \t\tfor (let j = smallest_index + 1; j < numbers.length; j++) {\n\t\t\tif (numbers[j]\
    \ > largest) {\n\t\t\t\tlargest = numbers[j];\n\t\t\t\tlargest_index = j;\n\t\t\
    \t}\n\t\t}\n\t\tif (smallest != numbers[smallest_index]) {\n\t\t\tnumbers[smallest_index]\
    \ = smallest;\n\t\t}\n\t\tif (largest != numbers[largest_index]) {\n\t\t\tnumbers[largest_index]\
    \ = largest;\n\t\t}\n\t}\n\treturn numbers;\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet smallest: number = numbers[0];\n\tlet largest: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t\
    }\n\treturn [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax =\
    \ Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min_dist = Number.MAX_VALUE;\n\tlet min_idx = -1;\n\tfor (let i =\
    \ 0; i < numbers.length - 1; i++) {\n\t\tlet dist = distance_between(numbers[i],\
    \ numbers[i + 1]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t\t\
    min_idx = i;\n\t\t}\n\t}\n\treturn [numbers[min_idx], numbers[min_idx + 1]];\n\
    }\n", "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i\
    \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest\
    \ = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tlet result: [number, number]\
    \ = [min, max];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ > result[result.length - 1]) {\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number =\
    \ numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for\
    \ (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min\
    \ = numbers[i];\n    } else if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\t\
    let max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\
    \tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i] -\
    \ min1);\n\t\tif (diff < min2) {\n\t\t\tmin2 = diff;\n\t\t\tmin1 = numbers[i];\n\
    \t\t} else if (diff == min2) {\n\t\t\tmin2 = Math.min(min2, numbers[i]);\n\t\t\
    }\n\t}\n\treturn [min1, min2];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "  let smallest: number = numbers[0];\n  let largest:\
    \ number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
    \ {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "  if (numbers.length\
    \ < 2) {\n    throw new Error(\"find_closest_elements: Invalid number of arguments\"\
    );\n  }\n\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const\
    \ closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i\
    \ < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] < closestNumbers[0])\
    \ {\n      closestNumbers[0] = sortedNumbers[i];\n    } else if (sortedNumbers[i]\
    \ > closestNumbers[1]) {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n\
    \  }\n  return closestNumbers;\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min:\
    \ number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max,\
    \ numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet smallest: number;\n\t\
    let largest: number;\n\tlet smallest_index: number;\n\tlet largest_index: number;\n\
    \tfor (let i = 0; i < numbers.length; i++) {\n\t\tsmallest = numbers[i];\n\t\t\
    smallest_index = i;\n\t\tfor (let j = i + 1; j < numbers.length; j++) {\n\t\t\t\
    if (numbers[j] < smallest) {\n\t\t\t\tsmallest = numbers[j];\n\t\t\t\tsmallest_index\
    \ = j;\n\t\t\t}\n\t\t}\n\t\tlargest = numbers[smallest_index];\n\t\tlargest_index\
    \ = smallest_index;\n\t\tfor (let j = smallest_index + 1; j < numbers.length;\
    \ j++) {\n\t\t\tif (numbers[j] > largest) {\n\t\t\t\tlargest = numbers[j];\n\t\
    \t\t\tlargest_index = j;\n\t\t\t}\n\t\t}\n\t\tif (smallest != numbers[smallest_index])\
    \ {\n\t\t\tnumbers[smallest_index] = smallest;\n\t\t\tnumbers[largest_index] =\
    \ largest;\n\t\t}\n\t}\n\treturn numbers;\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet smallest: number;\n\tlet largest: number;\n\tlet smallest_index:\
    \ number;\n\tlet largest_index: number;\n\tlet i: number;\n\tlet j: number;\n\t\
    let result: number[];\n\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\t\
    smallest_index = 0;\n\tlargest_index = 0;\n\n\tfor (i = 0; i < numbers.length;\
    \ i += 1) {\n\t\tsmallest = numbers[i];\n\t\tfor (j = i + 1; j < numbers.length;\
    \ j += 1) {\n\t\t\tif (numbers[j] < smallest) {\n\t\t\t\tsmallest = numbers[j];\n\
    \t\t\t\tsmallest_index = j;\n\t\t\t}\n\t\t\tif (numbers[j] > largest) {\n\t\t\t\
    \tlargest = numbers[j];\n\t\t\t\tlargest_index = j;\n\t\t\t}\n\t\t}\n\t\tif (smallest\
    \ !== numbers[i]) {\n\t\t\tresult = numbers.slice(smallest_index, largest_index\
    \ + 1);\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn [];\n}\n", "\tlet smallest:\
    \ number;\n\tlet largest: number;\n\tfor (let i = 0; i < numbers.length - 1; i++)\
    \ {\n\t\tsmallest = numbers[i];\n\t\tlargest = numbers[i + 1];\n\t\tif (smallest\
    \ > largest) {\n\t\t\tlet temp = largest;\n\t\t\tlargest = smallest;\n\t\t\tsmallest\
    \ = temp;\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest =\
    \ numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest)\
    \ {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
    \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min1 = numbers[0];\n\tlet max1\
    \ = numbers[0];\n\tlet min2 = numbers[0];\n\tlet max2 = numbers[0];\n\tfor (let\
    \ i = 1; i < numbers.length; i++) {\n\t\tlet num = numbers[i];\n\t\tif (num <\
    \ min1) {\n\t\t\tmin1 = num;\n\t\t} else if (num > max1) {\n\t\t\tmax1 = num;\n\
    \t\t}\n\t\tif (num < min2) {\n\t\t\tmin2 = num;\n\t\t} else if (num > max2) {\n\
    \t\t\tmax2 = num;\n\t\t}\n\t}\n\treturn [min1, max1, min2, max2];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet\
    \ smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin\
    \ = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min_distance = Number.MAX_VALUE;\n\tlet min_number = numbers[0];\n\
    \tlet max_number = numbers[0];\n\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tlet distance = numbers[i] - min_number;\n\t\tif (distance < min_distance)\
    \ {\n\t\t\tmin_number = numbers[i];\n\t\t\tmin_distance = distance;\n\t\t} else\
    \ if (distance > max_distance) {\n\t\t\tmax_number = numbers[i];\n\t\t\tmax_distance\
    \ = distance;\n\t\t}\n\t}\n\n\treturn [min_number, max_number];\n}\n", "\tlet\
    \ min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1;\
    \ i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\
    \tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t} else if (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min:\
    \ number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [min, max];\n}\n", "\tlet min_diff = Number.MAX_VALUE;\n\tlet min_diff_index\
    \ = 0;\n\tlet min_number = numbers[0];\n\tlet max_number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tlet diff = numbers[i] - min_number;\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t\tmin_diff_index = i;\n\
    \t\t\tmin_number = numbers[i];\n\t\t} else if (diff > min_diff) {\n\t\t\tbreak;\n\
    \t\t}\n\t\tmax_number = numbers[i];\n\t}\n\tlet result = [min_number, max_number];\n\
    \treturn result;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number =\
    \ numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
    \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
    \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "  const sortedNumbers\
    \ = numbers.slice().sort((a, b) => a - b);\n  const closest = [sortedNumbers[0],\
    \ sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i++) {\n   \
    \ if (sortedNumbers[i] - sortedNumbers[i - 1] < closest[1] - closest[0]) {\n \
    \     closest = [sortedNumbers[i], sortedNumbers[i]];\n    } else {\n      closest[1]\
    \ = sortedNumbers[i];\n    }\n  }\n  return closest;\n}\n", "\tlet min1 = numbers[0];\n\
    \tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet\
    \ diff = Math.abs(numbers[i] - min1);\n\t\tif (diff < min2) {\n\t\t\tmin2 = min1;\n\
    \t\t\tmin2 = numbers[i];\n\t\t} else if (diff > min2) {\n\t\t\tmin2 = diff;\n\t\
    \t}\n\t\tmin1 = numbers[i];\n\t}\n\treturn [min1, min2];\n}\n", "\tlet smallest\
    \ = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return [smallest, largest];\n}\n", "  if (numbers.length < 2) {\n    throw new\
    \ Error(\"find_closest_elements: Not enough numbers to find closest pair\");\n\
    \  }\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest\
    \ = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tlet result: [number, number] = [min, max];\n\tfor (let i = 1; i\
    \ < numbers.length; i++) {\n\t\tif (numbers[i] - min < max - numbers[i]) {\n\t\
    \t\tresult = [min, numbers[i]];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t\
    }\n\treturn [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet min =\
    \ numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin\
    \ = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n\
    }\n", "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\t\
    let min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i =\
    \ 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
    \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "  let smallest: number\
    \ = numbers[0];\n  let largest: number = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n   \
    \ }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
    \  return [smallest, largest];\n}\n", "\tlet min: number = numbers[0];\n\tlet\
    \ max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    return [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n", "\tlet min: number\
    \ = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
    \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\treturn [min, max];\n}\n", "\tlet min: number = numbers[0];\n\tlet max:\
    \ number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t} else if (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
