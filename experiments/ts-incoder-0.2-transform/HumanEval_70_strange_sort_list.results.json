{
  "language": "ts",
  "name": "HumanEval_70_strange_sort_list",
  "results": [
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return [min, ...strange_sort_list(lst.filter(x => x !== min)), max];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptb_l8fji.js:22:12)\n    at Object.<anonymous> (/tmp/tmptb_l8fji.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min_val = Math.min(...lst);\n  const max_val = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx = lst.indexOf(max_val);\n  const mid_val = min_val + max_val / 2;\n  const mid_val = mid_val.toString();\n  const mid_val_idx = lst.indexOf(mid_val);\n  const mid_val_idx_idx = lst.indexOf(mid_val_idx);\n  const mid_val_idx_idx_idx = lst.indexOf(mid_val_idx_idx);\n  const mid_val_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp33yh_vx9.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp33yh_vx9.ts(34,9): error TS1005: ',' expected.\n../../../../tmp/tmp33yh_vx9.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1_ygkd3g.js:19\n    const left = lst.slice(0, middle);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:19:22)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const minValue = Math.min(...lst);\n  const maxValue = Math.max(...lst);\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.splice(middleIndex, 0, middleValue);\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp0f3tce1x.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0f3tce1x.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len / 2);\n  const leftHalf = lst.slice(0, middle);\n  const rightHalf = lst.slice(middle);\n  return leftHalf.concat(strange_sort_list(rightHalf)).concat([maxValue], minValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmptcwwqpwo.js:18\n    const middle = Math.floor(len / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:18:25)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n    at strange_sort_list (/tmp/tmptcwwqpwo.js:21:28)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq9nzc76f.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:16:22)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpl9vkvf18.js:31:12)\n    at Object.<anonymous> (/tmp/tmpl9vkvf18.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sortedList: number[] = [];\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp_n3j92zu.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_n3j92zu.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpw57edw9y.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:15:22)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n    at strange_sort_list (/tmp/tmpw57edw9y.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnw_w044j.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpnw_w044j.js:16:22)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpx3h7p8zc.js:18\n    const middle = Math.floor(len / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:18:25)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp7gvyhs9i.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:12:22)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n    at strange_sort_list (/tmp/tmp7gvyhs9i.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnw_w044j.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpnw_w044j.js:16:22)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0171o_hg.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:15:22)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2heunnm8.ts(75,31): error TS1003: Identifier expected.\n../../../../tmp/tmp2heunnm8.ts(76,1): error TS1005: ',' expected.\n../../../../tmp/tmp2heunnm8.ts(76,9): error TS1005: ',' expected.\n../../../../tmp/tmp2heunnm8.ts(93,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp6sbfg352.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6sbfg352.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min_value = Math.min(...lst);\n  const max_value = Math.max(...lst);\n  const min_value_str = String(min_value);\n  const max_value_str = String(max_value);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n  const max_value_str = String(max_value_int);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcdd4r18p.ts(81,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max], strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfpc6rwf7.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:12:22)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n    at strange_sort_list (/tmp/tmpfpc6rwf7.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(lst[i]);\n  }\n  res.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpefdxj5it.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpefdxj5it.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpw05cb4cw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpw05cb4cw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -= 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmphcxavxwe.js:36:12)\n    at Object.<anonymous> (/tmp/tmphcxavxwe.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max, val), 0);\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\n  return lst.sort((a, b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue) {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n    if (b === maxValue) {\n      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp_sdguaja.js:38:12)\n    at Object.<anonymous> (/tmp/tmp_sdguaja.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    min = Math.min(min, lst[i]);\n    max = Math.max(max, lst[i]);\n  }\n  const result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpevbbzu_q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpevbbzu_q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnw_w044j.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpnw_w044j.js:16:22)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const left = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\n  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbplrjl1k.js:15\n    const [min, max] = lst;\n                       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values (<anonymous>)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:15:24)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n    at strange_sort_list (/tmp/tmpbplrjl1k.js:18:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j] >= i) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  2,\n  3,\n  4,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpi2katltw.js:35:12)\n    at Object.<anonymous> (/tmp/tmpi2katltw.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4, 2,\n    3, 4, 3, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max, val), 0);\n  const minIndex = lst.findIndex(val => val === minValue);\n  const maxIndex = lst.findIndex(val => val === maxValue);\n  const minIndex = Math.min(minIndex, maxIndex);\n  const maxIndex = Math.max(minIndex, maxIndex);\n  return lst.sort((a, b) => a - b).slice(0, maxIndex + 1).concat(\n    lst.sort((a, b) => b - a).slice(0, minIndex + 1)\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpruxyti5f.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'minIndex'.\n../../../../tmp/tmpruxyti5f.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'maxIndex'.\n../../../../tmp/tmpruxyti5f.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'minIndex'.\n../../../../tmp/tmpruxyti5f.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'maxIndex'.\n",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpry4z5p6l.js:31:12)\n    at Object.<anonymous> (/tmp/tmpry4z5p6l.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpy74otkg5.js:34:12)\n    at Object.<anonymous> (/tmp/tmpy74otkg5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptqgd41ji.js:19:12)\n    at Object.<anonymous> (/tmp/tmptqgd41ji.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -= 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmphcxavxwe.js:36:12)\n    at Object.<anonymous> (/tmp/tmphcxavxwe.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1_ygkd3g.js:19\n    const left = lst.slice(0, middle);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:19:22)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n    at strange_sort_list (/tmp/tmp1_ygkd3g.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp1hv4xrw2.js:36:12)\n    at Object.<anonymous> (/tmp/tmp1hv4xrw2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n    lst\n      .slice(0, mid)\n      .concat(mid === max ? [max] : lst)\n      .concat(mid === min ? [min] : lst.slice(0, mid))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpyct3xkmv.js:19\n        .concat(mid === max ? [max] : lst)\n                    ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:19:21)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n    at strange_sort_list (/tmp/tmpyct3xkmv.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpij9e7sgq.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpij9e7sgq.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor((min + max) / 2);\n  const left = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0jqsqyxr.js:18\n    const mid = Math.floor((min + max) / 2);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:18:22)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n    at strange_sort_list (/tmp/tmp0jqsqyxr.js:19:18)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpry4z5p6l.js:31:12)\n    at Object.<anonymous> (/tmp/tmpry4z5p6l.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min: number = lst[0];\n  const max: number = lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current: number = lst[i];\n    if (current < min) {\n      min = current;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnzwqfjda.ts(17,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpnzwqfjda.ts(20,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3x3h7qzo.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:12:22)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n    at strange_sort_list (/tmp/tmp3x3h7qzo.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sortedList: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpis1f1c2s.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmpis1f1c2s.ts(16,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n../../../../tmp/tmpis1f1c2s.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmpis1f1c2s.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  for (let i = min; i <= max; i++) {\n    for (let j = min2; j <= max2; j++) {\n      if (j > i) {\n        [min2, max2] = [max2, min2];\n        [min, max] = [max, min];\n      }\n    }\n  }\n\n  return lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoad4vy3z.ts(22,10): error TS2588: Cannot assign to 'min2' because it is a constant.\n../../../../tmp/tmpoad4vy3z.ts(22,16): error TS2588: Cannot assign to 'max2' because it is a constant.\n../../../../tmp/tmpoad4vy3z.ts(23,10): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpoad4vy3z.ts(23,15): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlaa6ye.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp2pg75meh.js:39:12)\n    at Object.<anonymous> (/tmp/tmp2pg75meh.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq9nzc76f.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:16:22)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpung3okyt.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpung3okyt.js:12:22)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n    at strange_sort_list (/tmp/tmpung3okyt.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0171o_hg.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:15:22)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n    at strange_sort_list (/tmp/tmp0171o_hg.js:20:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle = Math.floor(lst.length / 2);\n  const left = lst\n    .slice(0, middle)\n    .sort((a, b) => a - b);\n  const right = lst\n    .slice(middle)\n    .sort((a, b) => b - a);\n\n  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  4,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcvs0smgw.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcvs0smgw.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4, 3, 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst.reduce((max, x) => x > max ? x : max, min);\n  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n  const middleIndex = Math.floor((maxIndex + minIndex) / 2);\n  const middle = lst[middleIndex];\n  const leftArr = lst.slice(0, middleIndex);\n  const rightArr = lst.slice(middleIndex + 1);\n  return leftArr.concat(strange_sort_list(rightArr), middle).concat(rightArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  3,\n  4,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpagmy_3em.js:28:12)\n    at Object.<anonymous> (/tmp/tmpagmy_3em.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 4, 3, 4,\n    2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[min]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const res = [lst[min]];\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    res.push(lst[mid]);\n    if (lst[mid] > lst[min]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpxm5ixrr1.js:43:12)\n    at Object.<anonymous> (/tmp/tmpxm5ixrr1.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr4ea8lui.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:16:22)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat(right).concat(left.reverse());\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpabmhigu8.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpabmhigu8.js:12:22)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n    at strange_sort_list (/tmp/tmpabmhigu8.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvi9pxz3e.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpl8_jlncx.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:12:22)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n    at strange_sort_list (/tmp/tmpl8_jlncx.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq9nzc76f.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:16:22)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewta25sk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpewta25sk.js:15:22)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right = strange_sort_list(lst.slice(middle));\n  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf_938pnt.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpf_938pnt.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return left.concat(right, min).concat(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  4,\n  4,\n  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpffurvm6g.js:26:12)\n    at Object.<anonymous> (/tmp/tmpffurvm6g.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 4, 4,\n    3, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpem922neo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpem922neo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  return sorted_lst.map((n) => n + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp9n1cklug.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9n1cklug.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4, 5 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue) {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n    if (b === maxValue) {\n      return -1;\n    }\n    if (a === middleValue) {\n      return -1;\n    }\n    if (b === middleValue) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpchdkxw28.js:45:12)\n    at Object.<anonymous> (/tmp/tmpchdkxw28.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  return strange_sort_list(lst.slice(0, mid)) + [min] + strange_sort_list(lst.slice(mid));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8gps1pbz.ts(18,10): error TS2365: Operator '+' cannot be applied to types 'number[]' and 'number[]'.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n  const max = lst[lst.length - 1];\n\n  const middle = Math.floor((lst.length - 1) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprqa64cz7.js:17\n    const middle = Math.floor((lst.length - 1) / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:17:25)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n    at strange_sort_list (/tmp/tmprqa64cz7.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpi9hsbwh8.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi9hsbwh8.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return [min, ...strange_sort_list(lst.filter(x => x < min)), max, ...strange_sort_list(lst.filter(x => x > max))];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpikrm4or7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpikrm4or7.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max], strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0dc3dy8z.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:12:22)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n    at strange_sort_list (/tmp/tmp0dc3dy8z.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min_value = Math.min(...lst);\n  const max_value = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max_value]).concat(left.reverse());\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpk14ui0vl.js:12\n    const min_value = Math.min(...lst);\n                           ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:12:28)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n    at strange_sort_list (/tmp/tmpk14ui0vl.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n    lst\n      .slice(0, mid)\n      .concat(mid === lst.length ? [max] : lst)\n      .concat(\n        mid === lst.length ? [min] : lst\n          .slice(mid)\n          .concat(mid === lst.length ? [max] : lst)\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpllx1eako.js:20\n        .concat(mid === lst.length ? [min] : lst\n         ^\n\nRangeError: Invalid array length\n    at Array.concat (<anonymous>)\n    at strange_sort_list (/tmp/tmpllx1eako.js:20:10)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n    at strange_sort_list (/tmp/tmpllx1eako.js:17:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333917
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return mergeSort(left, right, minValue, maxValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp90rz2dql.ts(21,10): error TS2304: Cannot find name 'mergeSort'.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i] > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpxv_imyw9.js:39:12)\n    at Object.<anonymous> (/tmp/tmpxv_imyw9.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlaa6ye.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  const middle = Math.floor((min + max) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(right).concat(strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv7h6409p.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpv7h6409p.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min <= max) {\n    result.push(min);\n    min = min + 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp6ye0d08l.js:32:12)\n    at Object.<anonymous> (/tmp/tmp6ye0d08l.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmprnzivdk4.js:39:12)\n    at Object.<anonymous> (/tmp/tmprnzivdk4.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphi3176j5.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmphi3176j5.js:15:22)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n    at strange_sort_list (/tmp/tmphi3176j5.js:20:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333917
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpqf8pdjcr.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:16:22)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n    at strange_sort_list (/tmp/tmpqf8pdjcr.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333917
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([max, min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6udwbsz2.js:18\n    const mid = Math.floor(len / 2);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:18:22)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n    at strange_sort_list (/tmp/tmp6udwbsz2.js:21:55)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333917
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = lst[0];\n  const max = lst.reduce((max, cur) => Math.max(max, cur), -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\n  const middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(right).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6di5jpip.ts(16,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmp6di5jpip.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n../../../../tmp/tmp6di5jpip.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmp6di5jpip.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n",
      "timestamp": 1660333917
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptqgd41ji.js:19:12)\n    at Object.<anonymous> (/tmp/tmptqgd41ji.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr4ea8lui.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:16:22)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq9nzc76f.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:16:22)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sortedList = lst.slice();\n  sortedList.sort((a, b) => a - b);\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcv0duk9r.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcv0duk9r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333917
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right), strange_sort_list(left), min).sort();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa386o88v.js:15\n    let left = lst.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmpa386o88v.js:15:20)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n    at strange_sort_list (/tmp/tmpa386o88v.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i] > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpywhju9sd.js:39:12)\n    at Object.<anonymous> (/tmp/tmpywhju9sd.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvi9pxz3e.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const res = [];\n  for (let i = min; i <= max; i++) {\n    res.push(lst[i]);\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpu70ya_4h.js:36:12)\n    at Object.<anonymous> (/tmp/tmpu70ya_4h.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  return lst.sort((a, b) => {\n    if (a < min) {\n      return -1;\n    }\n    if (a > max) {\n      return 1;\n    }\n    if (b < min2) {\n      return -1;\n    }\n    if (b > max2) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp3y4g12oj.js:36:12)\n    at Object.<anonymous> (/tmp/tmp3y4g12oj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptqgd41ji.js:19:12)\n    at Object.<anonymous> (/tmp/tmptqgd41ji.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((min + max) / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(right).concat(strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp46845s8w.ts(19,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmp46845s8w.ts(22,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpem922neo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpem922neo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(maxValue, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6bpjuqqk.js:18\n    const middle = Math.floor(len / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:18:25)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n    at strange_sort_list (/tmp/tmp6bpjuqqk.js:21:53)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewta25sk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpewta25sk.js:15:22)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n    at strange_sort_list (/tmp/tmpewta25sk.js:20:43)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min < lst.length) {\n    result.push(lst[min]);\n    min = min + 1;\n  }\n  while (max > lst.length) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp4lgp_p6i.js:40:12)\n    at Object.<anonymous> (/tmp/tmp4lgp_p6i.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpem922neo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpem922neo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpmy9qkomu.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:16:22)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n    at strange_sort_list (/tmp/tmpmy9qkomu.js:21:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(mid === 1 ? [max] : [min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpd7kmmwsy.js:20\n    return strange_sort_list(left).concat(mid === 1 ? [max] : [min], strange_sort_list(right));\n                                                       ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:56)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n    at strange_sort_list (/tmp/tmpd7kmmwsy.js:20:70)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(mid === 0 ? [min] : [min, max], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph8gtf0q6.js:20\n    return strange_sort_list(left).concat(mid === 0 ? [min] : [min, max], strange_sort_list(right));\n                                              ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:47)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n    at strange_sort_list (/tmp/tmph8gtf0q6.js:20:75)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmprnzivdk4.js:39:12)\n    at Object.<anonymous> (/tmp/tmprnzivdk4.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333915
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min_value = lst[0];\n  const max_value = lst[lst.length - 1];\n  const min_idx = lst.indexOf(min_value);\n  const max_idx = lst.indexOf(max_value);\n  const swap_idx = min_idx;\n  while (swap_idx < max_idx) {\n    const temp = lst[swap_idx];\n    lst[swap_idx] = lst[max_idx];\n    lst[max_idx] = temp;\n    swap_idx++;\n  }\n  return lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeouwtrul.ts(21,5): error TS2588: Cannot assign to 'swap_idx' because it is a constant.\n",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpl9vkvf18.js:31:12)\n    at Object.<anonymous> (/tmp/tmpl9vkvf18.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp95_dwiwq.js:27:12)\n    at Object.<anonymous> (/tmp/tmp95_dwiwq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp6sbfg352.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6sbfg352.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const middleIndex = Math.floor((lst.length - 1) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.sort((a, b) => {\n    if (a < middleValue) {\n      return -1;\n    }\n    if (a > middleValue) {\n      return 1;\n    }\n    if (b < middleValue) {\n      return -1;\n    }\n    if (b > middleValue) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp8_58g4io.js:39:12)\n    at Object.<anonymous> (/tmp/tmp8_58g4io.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpyawiud31.js:12\n    let min = Math.min(...lst);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpyawiud31.js:12:20)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n    at strange_sort_list (/tmp/tmpyawiud31.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min: number = lst[0];\n  const max: number = lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current: number = lst[i];\n    if (current < min) {\n      min = current;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnzwqfjda.ts(17,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpnzwqfjda.ts(20,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333911
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const min_val = sorted_lst[0];\n  const max_val = sorted_lst[sorted_lst.length - 1];\n  const min_idx = lst.indexOf(min_val);\n  const max_idx = lst.indexOf(max_val);\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_idx = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpswmur9zi.ts(52,9): error TS1005: ',' expected.\n../../../../tmp/tmpswmur9zi.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmppqy6nrqc.js:12\n    let min = Math.min(...lst);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:12:20)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp535alt62.js:23:12)\n    at Object.<anonymous> (/tmp/tmp535alt62.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa4flhw2v.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:12:22)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333920
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpw05cb4cw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpw05cb4cw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp6sbfg352.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6sbfg352.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue) {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n    if (b === maxValue) {\n      return -1;\n    }\n    if (a === middleValue) {\n      return -1;\n    }\n    if (b === middleValue) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpkikgbp6a.js:48:12)\n    at Object.<anonymous> (/tmp/tmpkikgbp6a.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333920
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj6d5n953.ts(105,8): error TS1003: Identifier expected.\n../../../../tmp/tmpj6d5n953.ts(106,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6d5n953.ts(106,9): error TS1005: ',' expected.\n../../../../tmp/tmpj6d5n953.ts(123,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333920
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const middle = Math.floor((max - min) / 2);\n  return strange_sort_list(lst.filter(num => num < middle || num > middle + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5xifewu3.ts(15,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmp5xifewu3.ts(16,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n../../../../tmp/tmp5xifewu3.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'min'.\n../../../../tmp/tmp5xifewu3.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'max'.\n",
      "timestamp": 1660333920
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(min);\n    } else if (lst[i] === max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7h2fyjnd.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmp7h2fyjnd.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333921
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr4ea8lui.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:16:22)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfiglag3m.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:15:22)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n    at strange_sort_list (/tmp/tmpfiglag3m.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333921
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  return strange_sort_list(\n    lst\n      .slice(0, mid)\n      .concat(mid === lst.length ? [max] : lst)\n      .concat(\n        mid === lst.length ? [min] : lst.slice(mid, lst.length)\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvz20h97w.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpvz20h97w.js:15:22)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n    at strange_sort_list (/tmp/tmpvz20h97w.js:18:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333921
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const minLst = lst.sort((a, b) => a - b);\n  const maxLst = lst.sort((a, b) => b - a);\n  return minLst.concat(maxLst).reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcthwgtm9.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcthwgtm9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    1, 2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333921
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk8hu_7f_.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmpk8hu_7f_.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333921
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnw_w044j.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpnw_w044j.js:16:22)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbiwc13xe.js:18\n    const mid = Math.floor((min + max) / 2);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:18:22)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n    at strange_sort_list (/tmp/tmpbiwc13xe.js:21:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    result.push(mid);\n    if (mid < lst.length) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  result.push(min);\n  result.push(max);\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpnb08m1wp.js:43:12)\n    at Object.<anonymous> (/tmp/tmpnb08m1wp.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp535alt62.js:23:12)\n    at Object.<anonymous> (/tmp/tmp535alt62.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpytct0gtu.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:15:22)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n    at strange_sort_list (/tmp/tmpytct0gtu.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333910
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const minValue = lst[0];\n  const maxValue = lst.reduce((max, val) => Math.max(max, val), 0);\n\n  return lst.sort((a, b) => a - b).map((val) => val < minValue ? minValue : val > maxValue ? maxValue : val);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp_3g9dbam.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_3g9dbam.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right), strange_sort_list(left), max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpesz7fuwn.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:12:22)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n    at strange_sort_list (/tmp/tmpesz7fuwn.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min <= max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min < max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmplugdocso.js:36:12)\n    at Object.<anonymous> (/tmp/tmplugdocso.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.slice();\n  sortedList.splice(middleIndex, 0, middleValue);\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpwir71yt_.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwir71yt_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpw05cb4cw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpw05cb4cw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right = strange_sort_list(lst.slice(middle + 1));\n  return left.concat(right, min).sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp8hk31tq9.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8hk31tq9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333921
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const min_idx = sorted_lst.findIndex(x => x === sorted_lst[0]);\n  const max_idx = sorted_lst.findIndex(x => x === sorted_lst[sorted_lst.length - 1]);\n  return sorted_lst.slice(0, min_idx).concat(sorted_lst.slice(max_idx + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp8_n_gs27.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8_n_gs27.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk146mvwe.ts(103,8): error TS1003: Identifier expected.\n../../../../tmp/tmpk146mvwe.ts(104,1): error TS1005: ',' expected.\n../../../../tmp/tmpk146mvwe.ts(104,9): error TS1005: ',' expected.\n../../../../tmp/tmpk146mvwe.ts(121,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp8gnfmd_2.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:15:22)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n    at strange_sort_list (/tmp/tmp8gnfmd_2.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr4ea8lui.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:16:22)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq9nzc76f.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:16:22)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n    at strange_sort_list (/tmp/tmpq9nzc76f.js:21:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    let mid: number = (min + max) / 2;\n    result.push(mid);\n    if (mid < max) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  3.75\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpudllsday.js:41:12)\n    at Object.<anonymous> (/tmp/tmpudllsday.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 3.75 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while (min < lst.length) {\n    result.push(lst[min]);\n    min = min + 1;\n  }\n  while (max > lst.length) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp4lgp_p6i.js:40:12)\n    at Object.<anonymous> (/tmp/tmp4lgp_p6i.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpju33t2rk.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:15:22)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n    at strange_sort_list (/tmp/tmpju33t2rk.js:20:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(val, max), -Infinity);\n  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n  const middle = Math.floor((minIndex + maxIndex) / 2);\n  const leftArr = lst.slice(0, middle);\n  const rightArr = lst.slice(middle);\n  return strange_sort_list(leftArr).concat(rightArr).concat(strange_sort_list(rightArr));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphz_oaigp.js:16\n    const max = lst.reduce((max, val) => Math.max(val, max), -Infinity);\n                                              ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.max (<anonymous>)\n    at /tmp/tmphz_oaigp.js:16:47\n    at Array.reduce (<anonymous>)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:16:21)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n    at strange_sort_list (/tmp/tmphz_oaigp.js:22:63)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      res.push(min);\n    } else if (lst[i] === max) {\n      res.push(max);\n    } else {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp55nmh425.js:42:12)\n    at Object.<anonymous> (/tmp/tmp55nmh425.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333922
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const res = [];\n  while (min < max) {\n    res.push(min);\n    min += 1;\n  }\n  while (min > max) {\n    res.push(max);\n    max -= 1;\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp279cgw35.ts(20,7): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmp279cgw35.ts(23,7): error TS2588: Cannot assign to 'max' because it is a constant.\n../../../../tmp/tmp279cgw35.ts(29,5): error TS2588: Cannot assign to 'min' because it is a constant.\n../../../../tmp/tmp279cgw35.ts(33,5): error TS2588: Cannot assign to 'max' because it is a constant.\n",
      "timestamp": 1660333922
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpcx4o7o4t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcx4o7o4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa4flhw2v.js:12\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:12:22)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n    at strange_sort_list (/tmp/tmpa4flhw2v.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333920
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[lst.length - 1];\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(lst.slice(0, mid)).concat([mid], strange_sort_list(lst.slice(mid, lst.length)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmplupp6wo8.js:18\n    return strange_sort_list(lst.slice(0, mid)).concat([mid], strange_sort_list(lst.slice(mid, lst.length)));\n                                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:34)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n    at strange_sort_list (/tmp/tmplupp6wo8.js:18:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333923
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n  const max = lst.reduce((acc, x) => Math.max(acc, x), 0);\n  return strange_sort_list(\n    lst.filter(x => x !== min).concat(\n      lst.filter(x => x !== max).concat(\n        lst.filter(x => x !== min).concat(\n          lst.filter(x => x !== max).concat(\n            lst.filter(x => x !== min).concat(\n              lst.filter(x => x !== max).concat(\n                lst.filter(x => x !== min).concat(\n                  lst.filter(x => x !== max).concat(\n                    lst.filter(x => x !== min).concat(\n                      lst.filter(x => x !== max).concat(\n                        lst.filter(x => x !== min).concat(\n                          lst.filter(x => x !== max).concat(\n                            lst.filter(x => x !== min).concat(\n                              lst.filter(x => x !== max).concat(\n                                lst.filter(x => x !== min).concat(\n                                  lst.filter(x => x !== max).concat(\n                                    lst.filter(x => x !== min).concat(\n                                      lst.filter(x => x !== max).concat(\n                                        lst.filter(x => x !== min).concat(\n                                          lst.filter(x => x !== max).concat(\n                                            lst.filter(x => x !== min).concat(\n                                              lst.filter(x => x !== max).concat(\n                                                lst.filter(x => x !== min).concat(\n                                                  lst.filter(x => x !== max).concat(\n                                                    lst.filter(x => x !== min).concat(\n                                                      lst.filter(x => x !== max).concat(\n                                                        lst.filter(x => x !== min).concat(\n                                                          lst.filter(x => x !== max).concat(\n                                                            lst.filter(x => x !== min).concat(\n                                                              lst.filter(x => x !== max).concat(\n                                                                lst.filter(x => x !== min).concat(\n                                                                  lst.filter(x => x !== max).concat(\n                                                                    lst.filter(x => x !== min).concat(\n                                                                      lst.filter(x => x !== max).concat(\n                                                                        lst.filter(x => x !== min).concat(\n                                                                          lst.filter(x => x !== max).concat(\n                                                                            lst.filter(x => x !== min).concat(\n                                                                              lst.filter(x => x !== max).concat(\n                                                                                lst.filter(x => x !== min).concat(\n                                                                                  lst.filter(x \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppyq54b3z.ts(58,1): error TS1005: ',' expected.\n../../../../tmp/tmppyq54b3z.ts(58,9): error TS1005: ',' expected.\n../../../../tmp/tmppyq54b3z.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333923
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList = lst.sort((a, b) => {\n    if (a === minValue) {\n      return -1;\n    }\n    if (b === minValue) {\n      return 1;\n    }\n    if (a === maxValue) {\n      return 1;\n    }\n    if (b === maxValue) {\n      return -1;\n    }\n    if (a === middleValue) {\n      return -1;\n    }\n    if (b === middleValue) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptt8ozhet.js:47:12)\n    at Object.<anonymous> (/tmp/tmptt8ozhet.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333923
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n\n  return [...strange_sort_list(min2), ...strange_sort_list(max2), ...strange_sort_list(min)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps45y4kdn.ts(19,32): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmps45y4kdn.ts(19,60): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmps45y4kdn.ts(19,88): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660333923
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmptqgd41ji.js:19:12)\n    at Object.<anonymous> (/tmp/tmptqgd41ji.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333911
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnw_w044j.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpnw_w044j.js:16:22)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n    at strange_sort_list (/tmp/tmpnw_w044j.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  return strange_sort_list(\n    lst\n      .slice(middle)\n      .concat(\n        lst\n          .slice(0, middle)\n          .concat(\n            lst\n              .slice(middle + 1)\n              .map(i => Math.max(i, min))\n          )\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfx56huzb.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpfx56huzb.js:15:22)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n    at strange_sort_list (/tmp/tmpfx56huzb.js:18:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333923
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min_value = lst[0];\n  const max_value = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min_value) {\n      min_value = lst[i];\n    }\n    if (lst[i] > max_value) {\n      max_value = lst[i];\n    }\n  }\n  const min_idx = lst.indexOf(min_value);\n  const max_idx = lst.indexOf(max_value);\n  const min_idx_1 = lst.indexOf(min_value);\n  const max_idx_1 = lst.indexOf(max_value);\n  const min_idx_2 = lst.indexOf(min_value);\n  const max_idx_2 = lst.indexOf(max_value);\n  const min_idx_3 = lst.indexOf(min_value);\n  const max_idx_3 = lst.indexOf(max_value);\n  const min_idx_4 = lst.indexOf(min_value);\n  const max_idx_4 = lst.indexOf(max_value);\n  const min_idx_5 = lst.indexOf(min_value);\n  const max_idx_5 = lst.indexOf(max_value);\n  const min_idx_6 = lst.indexOf(min_value);\n  const max_idx_6 = lst.indexOf(max_value);\n  const min_idx_7 = lst.indexOf(min_value);\n  const max_idx_7 = lst.indexOf(max_value);\n  const min_idx_8 = lst.indexOf(min_value);\n  const max_idx_8 = lst.indexOf(max_value);\n  const min_idx_9 = lst.indexOf(min_value);\n  const max_idx_9 = lst.indexOf(max_value);\n  const min_idx_10 = lst.indexOf(min_value);\n  const max_idx_10 = lst.indexOf(max_value);\n  const min_idx_11 = lst.indexOf(min_value);\n  const max_idx_11 = lst.indexOf(max_value);\n  const min_idx_12 = lst.indexOf(min_value);\n  const max_idx_12 = lst.indexOf(max_value);\n  const min_idx_13 = lst.indexOf(min_value);\n  const max_idx_13 = lst.indexOf(max_value);\n  const min_idx_14 = lst.indexOf(min_value);\n  const max_idx_14 = lst.indexOf(max_value);\n  const min_idx_15 = lst.indexOf(min_value);\n  const max_idx_15 = lst.indexOf(max_value);\n  const min_idx_16 = lst.indexOf(min_value);\n  const max_idx_16 = lst.indexOf(max_value);\n  const min_idx_17 = lst.indexOf(min_value);\n  const max_idx_17 = lst.indexOf(max_value);\n  const min_idx_18 = lst.indexOf(min_value);\n  const max_idx_18 = lst.indexOf(max_value);\n  const min_idx_19 = lst.indexOf(min_value);\n  const max_idx_19 = lst.indexOf(max_value);\n  const min_idx_20 = lst.indexOf(min_value);\n  const max_idx_20 = lst.indexOf(max_value);\n  const min_idx_21 = lst.indexOf(min_value);\n  const max_idx_21 = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdi991k2s.ts(69,9): error TS1005: ',' expected.\n../../../../tmp/tmpdi991k2s.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333923
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpl8sy09gb.js:15\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:15:22)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n    at strange_sort_list (/tmp/tmpl8sy09gb.js:20:48)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333924
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n    lst.slice(0, mid).concat(\n      strange_sort_list(lst.slice(mid)),\n      lst.slice(mid),\n    ),\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpyyruso89.js:18\n    const mid = Math.floor((min + max) / 2);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpyyruso89.js:18:22)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n    at strange_sort_list (/tmp/tmpyyruso89.js:19:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333924
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjivt585o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjivt585o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmppqy6nrqc.js:12\n    let min = Math.min(...lst);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:12:20)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n    at strange_sort_list (/tmp/tmppqy6nrqc.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333918
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const sorted_lst = lst.slice();\n  sorted_lst.sort((a, b) => a - b);\n  return sorted_lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp6ctayttb.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6ctayttb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333924
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpx3h7p8zc.js:18\n    const middle = Math.floor(len / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:18:25)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n    at strange_sort_list (/tmp/tmpx3h7p8zc.js:21:55)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -= 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmphcxavxwe.js:36:12)\n    at Object.<anonymous> (/tmp/tmphcxavxwe.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const min_val = Math.min(...lst);\n  const max_val = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx = lst.indexOf(max_val);\n  const min_idx_2 = lst.indexOf(min_val);\n  const max_idx_2 = lst.indexOf(max_val);\n  const min_idx_3 = lst.indexOf(min_val);\n  const max_idx_3 = lst.indexOf(max_val);\n  const min_idx_4 = lst.indexOf(min_val);\n  const max_idx_4 = lst.indexOf(max_val);\n  const min_idx_5 = lst.indexOf(min_val);\n  const max_idx_5 = lst.indexOf(max_val);\n  const min_idx_6 = lst.indexOf(min_val);\n  const max_idx_6 = lst.indexOf(max_val);\n  const min_idx_7 = lst.indexOf(min_val);\n  const max_idx_7 = lst.indexOf(max_val);\n  const min_idx_8 = lst.indexOf(min_val);\n  const max_idx_8 = lst.indexOf(max_val);\n  const min_idx_9 = lst.indexOf(min_val);\n  const max_idx_9 = lst.indexOf(max_val);\n  const min_idx_10 = lst.indexOf(min_val);\n  const max_idx_10 = lst.indexOf(max_val);\n  const min_idx_11 = lst.indexOf(min_val);\n  const max_idx_11 = lst.indexOf(max_val);\n  const min_idx_12 = lst.indexOf(min_val);\n  const max_idx_12 = lst.indexOf(max_val);\n  const min_idx_13 = lst.indexOf(min_val);\n  const max_idx_13 = lst.indexOf(max_val);\n  const min_idx_14 = lst.indexOf(min_val);\n  const max_idx_14 = lst.indexOf(max_val);\n  const min_idx_15 = lst.indexOf(min_val);\n  const max_idx_15 = lst.indexOf(max_val);\n  const min_idx_16 = lst.indexOf(min_val);\n  const max_idx_16 = lst.indexOf(max_val);\n  const min_idx_17 = lst.indexOf(min_val);\n  const max_idx_17 = lst.indexOf(max_val);\n  const min_idx_18 = lst.indexOf(min_val);\n  const max_idx_18 = lst.indexOf(max_val);\n  const min_idx_19 = lst.indexOf(min_val);\n  const max_idx_19 = lst.indexOf(max_val);\n  const min_idx_20 = lst.indexOf(min_val);\n  const max_idx_20 = lst.indexOf(max_val);\n  const min_idx_21 = lst.indexOf(min_val);\n  const max_idx_21 = lst.indexOf(max_val);\n  const min_idx_22 = lst.indexOf(min_val);\n  const max_idx_22 = lst.indexOf(max_val);\n  const min_idx_23 = lst.indexOf(min_val);\n  const max_idx_23 = lst.indexOf(max_val);\n  const min_idx_24 = lst.indexOf(min_val);\n  const max_idx_24\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4kvtnb_l.ts(79,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333924
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len / 2);\n  const leftHalf = strange_sort_list(lst.slice(0, middle));\n  const rightHalf = strange_sort_list(lst.slice(middle));\n  return leftHalf.concat(rightHalf).sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp8l4wvcn7.js:18\n    const middle = Math.floor(len / 2);\n                        ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:18:25)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n    at strange_sort_list (/tmp/tmp8l4wvcn7.js:20:23)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333924
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr4ea8lui.js:16\n    const min = Math.min(...lst);\n                     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:16:22)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n    at strange_sort_list (/tmp/tmpr4ea8lui.js:21:50)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333914
    },
    {
      "exit_code": 1,
      "program": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right).concat(strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmplyyonju2.js:12\n    let min = Math.min(...lst);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmplyyonju2.js:12:20)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n    at strange_sort_list (/tmp/tmplyyonju2.js:17:24)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333924
    }
  ]
}