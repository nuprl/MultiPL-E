name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two lists.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const result = [];\n  let j = 0;\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n\
    \    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const found: boolean = l2.indexOf(l1[i]) !== -1;\n    if (!found)\
    \ {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 =\
    \ new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const\
    \ item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  const sortedL1 =\
    \ l1.sort((a, b) => a - b);\n  const sortedL2 = l2.sort((a, b) => a - b);\n  let\
    \ j = 0;\n  let k = 0;\n  while (j < sortedL1.length && k < sortedL2.length) {\n\
    \    if (sortedL1[j] === sortedL2[k]) {\n      l.push(sortedL1[j]);\n      j++;\n\
    \      k++;\n    } else if (sortedL1[j] < sortedL2[k]) {\n      j++;\n    } else\
    \ {\n      k++;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n \
    \ let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i])\
    \ {\n      l.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const found = false;\n    for (let j = 0; j < l2.length; j++) {\n\
    \      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n        found = true;\n\
    \        break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n   \
    \ }\n  }\n  return l;\n}\n", "  const l1Len = l1.length;\n  const l2Len = l2.length;\n\
    \  if (l1Len === 0 || l2Len === 0) {\n    return [];\n  }\n  const result: number[]\
    \ = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if\
    \ (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n   \
    \ } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n \
    \ }\n  return result;\n}\n", "  const result = [];\n  const hashMap = new Map();\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashMap.has(key))\
    \ {\n      hashMap.set(key, true);\n      result.push(key);\n    }\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n    if (!hashMap.has(key))\
    \ {\n      hashMap.set(key, true);\n      result.push(key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result\
    \ = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i]\
    \ === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else {\n      break;\n\
    \    }\n  }\n  return result;\n}\n", "  var result = [];\n  var lLen1 = l1.length;\n\
    \  var lLen2 = l2.length;\n  if (lLen1 === 0 || lLen2 === 0) {\n    return result;\n\
    \  }\n  var tIndex = 0;\n  var lIndex = 0;\n  while (lIndex < lLen1 && tIndex\
    \ < lLen2) {\n    if (l1[lIndex] === l2[tIndex]) {\n      result.push(l1[lIndex]);\n\
    \      lIndex++;\n      tIndex++;\n    } else if (l1[lIndex] < l2[tIndex]) {\n\
    \      lIndex++;\n    } else {\n      tIndex++;\n    }\n  }\n  return result;\n\
    }\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n  \
    \  const found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i]\
    \ === l2[j]) {\n        found = true;\n        break;\n      }\n    }\n    if\
    \ (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let n1: number;\n  let n2: number;\n  let\
    \ n: number;\n  for (i = 0, n = l1.length; i < n; i++) {\n    l1 = l1[i];\n  \
    \  l2 = l2[i];\n    n1 = l1;\n    n2 = l2;\n    for (j = 0; j < n; j++) {\n  \
    \    if (l1 === l2) {\n        l.push(l1);\n        break;\n      }\n      if\
    \ (n1 === n2) {\n        l.push(l1);\n        n1 = n2;\n      }\n      if (n1\
    \ === n2) {\n        l.push(l2);\n        n1 = n2;\n      }\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n\
    \    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n",
  "  const result = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j <\
    \ l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n\
    \      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n     \
    \ j++;\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result: number[] =\
    \ [];\n  let j = 0;\n  let k = 0;\n  while (j < l1.length && k < l2.length) {\n\
    \    if (l1[j] === l2[k]) {\n      result.push(l1[j]);\n      j++;\n      k++;\n\
    \    } else if (l1[j] < l2[k]) {\n      j++;\n    } else {\n      k++;\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  let i: number;\n \
    \ let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len: number;\n  let min: number;\n  let max: number;\n  let mid: number;\n \
    \ let flag: boolean;\n  let found: boolean;\n  let minIndex: number;\n  let maxIndex:\
    \ number;\n  let minLength: number;\n  let maxLength: number;\n  let minValue:\
    \ number;\n  let maxValue: number;\n  let minIndex2: number;\n  let maxIndex2:\
    \ number;\n  let minLength2: number;\n  let maxLength2: number;\n  let minValue2:\
    \ number;\n  let maxValue2: number;\n  let minIndex3: number;\n  let maxIndex3:\
    \ number;\n  let minLength3: number;\n  let maxLength3: number;\n  let minValue3:\
    \ number;\n  let maxValue3: number;\n  let minIndex4: number;\n  let maxIndex4:\
    \ number;\n  let minLength4: number;\n  let maxLength4: number;\n  let minValue4:\
    \ number;\n  let maxValue4: number;\n  let minIndex5: number;\n  let maxIndex5:\
    \ number;\n  let minLength5: number;\n  let maxLength5: number;\n  let minValue5:\
    \ number;\n  let maxValue5: number;\n  let minIndex6: number;\n  let maxIndex6:\
    \ number;\n  let minLength6: number;\n  let maxLength6: number;\n  let minValue6:\
    \ number;\n  let maxValue6: number;\n  let minIndex7: number;\n  let maxIndex7:\
    \ number;\n  let minLength7: number;\n  let maxLength7: number;\n  let minValue7:\
    \ number;\n  let maxValue7: number;\n  let minIndex8: number;\n  let maxIndex8:\
    \ number;\n  let minLength8: number;\n  let maxLength8: number;\n  let minValue8:\
    \ number;\n  let maxValue8: number;\n  let minIndex9: number;\n  let maxIndex9:\
    \ number;\n  let minLength9: number;\n  let maxLength9: number;\n  let minValue9:\
    \ number;\n  let maxValue9: number;\n  let minIndex10: number;\n  let maxIndex10:\
    \ number;\n  let minLength10: number;\n  let maxLength10: number;\n  let minValue10:\
    \ number;\n  let maxValue10: number;\n  let minIndex11: number;\n  let maxIndex11:\
    \ number;\n  let minLength11: number;\n  let maxLength11: number;\n  let minValue11:\
    \ number;\n  let maxValue11: number;\n  let minIndex12: number;\n  let maxIndex12:\
    \ number;\n  let minLength12: number;\n  let maxLength12: number;\n  let minValue12:\
    \ number;\n  let maxValue12: number;\n  let minIndex13: number;\n  let maxIndex13:\
    \ number;\n  let minLength13: number;\n  let maxLength13: number;\n  let minValue13:\
    \ number;\n  let ", "  const l: number[] = [];\n  let i: number;\n  let j: number;\n\
    \  let k: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen: number;\n\
    \  let l1: number;\n  let l2: number;\n  let llen: number;\n  let l1: number;\n\
    \  let l2: number;\n  let llen: number;\n  let l1: number;\n  let l2: number;\n\
    \  let llen: number;\n  let l1: number;\n  let l2: number;\n  let llen", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const ret: number[] = [];\n \
    \ for (const num of set1) {\n    if (set2.has(num)) {\n      ret.push(num);\n\
    \    }\n  }\n  return ret;\n}\n", "  const l: number[] = [];\n  const i: number[]\
    \ = [];\n  let j: number[] = [];\n  let k: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: number[]\
    \ = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1: ", "  const\
    \ result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    if\
    \ (l2.indexOf(l1[i]) === -1) {\n      l[j] = l1[i];\n      j++;\n    }\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const found: boolean = l2.indexOf(l1[i]) !== -1;\n    if (!found)\
    \ {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean = false;\n\
    \    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     l.push(l1[i]);\n        found = true;\n        break;\n      }\n    }\n\
    \    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const lLen = l1.length;\n  const rLen = l2.length;\n  for\
    \ (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < rLen; j++) {\n      if\
    \ (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n      }\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n\
    \  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    hash1[l1[i]] = true;\n  }\n  for (let i = 0;\
    \ i < l2.length; i++) {\n    hash2[l2[i]] = true;\n  }\n  for (let key in hash1)\
    \ {\n    if (hash2.hasOwnProperty(key)) {\n      result.push(key);\n    }\n  }\n\
    \  return result;\n}\n", "  const l: number[] = [];\n  let i = 0;\n  while (i\
    \ < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n\
    \      i++;\n    } else {\n      i++;\n    }\n  }\n  return l;\n}\n", "  const\
    \ set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  set1.forEach((val)\
    \ => {\n    if (set2.has(val)) {\n      result.push(val);\n    }\n  });\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n\
    \    }\n    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l[j] = l1[i];\n\
    \      j++;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let k: number;\n  let l1: number;\n  let l2:\
    \ number;\n  let l3: number;\n  let l4: number;\n  let l5: number;\n  let l6:\
    \ number;\n  let l7: number;\n  let l8: number;\n  let l9: number;\n  let l10:\
    \ number;\n  let l11: number;\n  let l12: number;\n  let l13: number;\n  let l14:\
    \ number;\n  let l15: number;\n  let l16: number;\n  let l17: number;\n  let l18:\
    \ number;\n  let l19: number;\n  let l20: number;\n  let l21: number;\n  let l22:\
    \ number;\n  let l23: number;\n  let l24: number;\n  let l25: number;\n  let l26:\
    \ number;\n  let l27: number;\n  let l28: number;\n  let l29: number;\n  let l30:\
    \ number;\n  let l31: number;\n  let l32: number;\n  let l33: number;\n  let l34:\
    \ number;\n  let l35: number;\n  let l36: number;\n  let l37: number;\n  let l38:\
    \ number;\n  let l39: number;\n  let l40: number;\n  let l41: number;\n  let l42:\
    \ number;\n  let l43: number;\n  let l44: number;\n  let l45: number;\n  let l46:\
    \ number;\n  let l47: number;\n  let l48: number;\n  let l49: number;\n  let l50:\
    \ number;\n  let l51: number;\n  let l52: number;\n  let l53: number;\n  let l54:\
    \ number;\n  let l55: number;\n  let l56: number;\n  let l57: number;\n  let l58:\
    \ number;\n  let l59: number;\n  let l60: number;\n  let l61: number;\n  let l62:\
    \ number;\n  let l63: number;\n  let l64: number;\n  let l65: number;\n  let l66:\
    \ number;\n  let l67: number;\n  let l68: number;\n  let l69: number;\n  let l70:\
    \ number;\n  let l71: number;\n  let l72: number;\n  let l73: number;\n  let l74:\
    \ number;\n  let l75: number;\n  let l76: number;\n  let l77: number;\n  let l78:\
    \ number;\n  let l79: number;\n  let l80: number;\n  let l81: number;\n  let l82:\
    \ number;\n  let l83: number;\n  let l84: number;\n  let l85: number;\n  let l86:\
    \ number;\n  let l87: number;\n  let l88: number;\n  let l89: number;\n  let l90:\
    \ number;\n  let l91: number;\n  let l92: number;\n  let l93: number;\n  let l94:\
    \ number;\n  let l95: number;\n  let l96: number;\n  let l97: number;\n  let l98:\
    \ number;", "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length &&\
    \ i < l2.length) {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n\
    \    } else {\n      break;\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  let l1: number;\n\
    \  let l2: number;\n  let len1: number;\n  let len2: number;\n  let min: number;\n\
    \  let max: number;\n  let min1: number;\n  let min2: number;\n  let max1: number;\n\
    \  let max2: number;\n  let mid: number;\n  let mid1: number;\n  let mid2: number;\n\
    \  let mid3: number;\n  let mid4: number;\n  let mid5: number;\n  let mid6: number;\n\
    \  let mid7: number;\n  let mid8: number;\n  let mid9: number;\n  let mid10: number;\n\
    \  let mid11: number;\n  let mid12: number;\n  let mid13: number;\n  let mid14:\
    \ number;\n  let mid15: number;\n  let mid16: number;\n  let mid17: number;\n\
    \  let mid18: number;\n  let mid19: number;\n  let mid20: number;\n  let mid21:\
    \ number;\n  let mid22: number;\n  let mid23: number;\n  let mid24: number;\n\
    \  let mid25: number;\n  let mid26: number;\n  let mid27: number;\n  let mid28:\
    \ number;\n  let mid29: number;\n  let mid30: number;\n  let mid31: number;\n\
    \  let mid32: number;\n  let mid33: number;\n  let mid34: number;\n  let mid35:\
    \ number;\n  let mid36: number;\n  let mid37: number;\n  let mid38: number;\n\
    \  let mid39: number;\n  let mid40: number;\n  let mid41: number;\n  let mid42:\
    \ number;\n  let mid43: number;\n  let mid44: number;\n  let mid45: number;\n\
    \  let mid46: number;\n  let mid47: number;\n  let mid48: number;\n  let mid49:\
    \ number;\n  let mid50: number;\n  let mid51: number;\n  let mid52: number;\n\
    \  let mid53: number;\n  let mid54: number;\n  let mid55: number;\n  let mid56:\
    \ number;\n  let mid57: number;\n  let mid58: number;\n  let mid59: number;\n\
    \  let mid60: number;\n  let mid61: number;\n  let mid62: number;\n  let mid63:\
    \ number;\n  let mid64: number;\n  let mid65: number;\n  let mid66: number;\n\
    \  let mid67: number;\n  let mid68: number;\n  let mid69: number;\n  let mid70:\
    \ number;\n  let mid71: number;\n  let mid72: number;\n  let mid73: number;\n\
    \  let mid74: number;\n  let mid75: number;\n  let mid76: number;\n  let mid77:\
    \ number;\n  let mid78: number;\n  let mid79: number;\n  let mid80: number;\n\
    \  let mid81: number;\n  let mid82: number;\n  let mid83: number;\n  let mid84:\
    \ number;\n  let mid85: number;\n  let mid86: number;\n  let mid87: number;\n\
    \  let mid88", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result = [];\n  const hash1 = new Map();\n  const\
    \ hash2 = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.set(l1[i],\
    \ true);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.set(l2[i], true);\n\
    \  }\n  for (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  const hashMap = new Map();\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const val = l1[i];\n    if (hashMap.has(val)) {\n      hashMap.get(val).push(l2[i]);\n\
    \    } else {\n      hashMap.set(val, [l2[i]]);\n    }\n  }\n  for (let i = 0;\
    \ i < l2.length; i++) {\n    const val = l2[i];\n    if (hashMap.has(val)) {\n\
    \      l.push(...hashMap.get(val));\n      hashMap.delete(val);\n    }\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const found: boolean = l2.some((item: number) => item === l1[i]);\n\
    \    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const\
    \ item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  let i: number;\n \
    \ let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len1: number;\n  let len2: number;\n  let min: number;\n  let max: number;\n\
    \  let minIndex: number;\n  let maxIndex: number;\n  let comp: number;\n  for\
    \ (i = 0, len1 = l1.length; i < len1; i++) {\n    l1 = l1[i];\n    for (j = 0,\
    \ len2 = l2.length; j < len2; j++) {\n      l2 = l2[j];\n      comp = l1 - l2;\n\
    \      if (comp !== 0) {\n        min = l1;\n        max = l2;\n        minIndex\
    \ = i;\n        maxIndex = j;\n        break;\n      }\n      min = l2;\n    \
    \  max = l1;\n      minIndex = j;\n      maxIndex = i;\n    }\n    if (i === minIndex)\
    \ {\n      l.push(min);\n    } else if (j === maxIndex) {\n      l.push(max);\n\
    \    } else {\n      l.push(l1);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 =\
    \ new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let\
    \ i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n\
    \    }\n  }\n  return common;\n}\n", "  const l: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      l[j] = l1[i];\n      j++;\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j <\
    \ l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  let i: number;\n  let j: number;\n\
    \  let k: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n \
    \ let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n \
    \ let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n \
    \ let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: ", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  const result: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  for (let i = 0; i < l2.length; i++) {\n    if (l.indexOf(l2[i]) !== -1)\
    \ {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n\
    \    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     found = true;\n        break;\n      }\n    }\n    if (!found) {\n     \
    \ l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n\
    \  const l2 = l2 || [];\n  const result = [];\n  const hashMap = new Map();\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const item = l1[i];\n    if (hashMap.has(item))\
    \ {\n      hashMap.get(item).push(l2[i]);\n    } else {\n      hashMap.set(item,\
    \ l2[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const item\
    \ = l2[i];\n    if (hashMap.has(item)) {\n      result.push(...hashMap.get(item));\n\
    \      hashMap.delete(item);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  const hashMap = new Map<number, number>();\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (hashMap.has(val))\
    \ {\n      l.push(hashMap.get(val));\n    } else {\n      l.push(val);\n     \
    \ hashMap.set(val, i);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n\
    \    const val = l2[i];\n    if (hashMap.has(val)) {\n      l.push(hashMap.get(val));\n\
    \    } else {\n      l.push(val);\n      hashMap.set(val, i);\n    }\n  }\n  return\
    \ l;\n}\n", "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n \
    \   const found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if\
    \ (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        found = true;\n  \
    \      break;\n      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const set1 = new Set(l1);\n  const set2\
    \ = new Set(l2);\n  const ret: number[] = [];\n  for (const val of set1) {\n \
    \   if (set2.has(val)) {\n      ret.push(val);\n    }\n  }\n  return ret;\n}\n",
  "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hashTable: { [key: number]: boolean; } = {};\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashTable[key])\
    \ {\n      hashTable[key] = true;\n      result.push(key);\n    }\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n    if (!hashTable[key])\
    \ {\n      hashTable[key] = true;\n      result.push(key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n\
    \    }\n    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n\
    \    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n  \
    \  if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n\
    \    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n",
  "  const result: number[] = [];\n  const hash1 = new Set();\n  const hash2 = new\
    \ Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n\
    \  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean\
    \ = l2.some((item: number) => item === l1[i]);\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len: number;\n  let min: number;\n  let max: number;\n  let minIndex: number;\n\
    \  let maxIndex: number;\n  let minLen: number;\n  let maxLen: number;\n  let\
    \ same: boolean;\n  for (i = 0, len = l1.length; i < len; i++) {\n    l1 = l1[i];\n\
    \    for (j = 0, len2 = l2.length; j < len2; j++) {\n      l2 = l2[j];\n     \
    \ min = Math.min(l1, l2);\n      max = Math.max(l1, l2);\n      if (min === max)\
    \ {\n        l.push(min);\n      } else {\n        same = min === l1 && l2 ===\
    \ l2;\n        l.push(min);\n        l.push(max);\n      }\n    }\n  }\n  l =\
    \ l.sort(function (a, b) { return a - b; });\n  minIndex = -1;\n  maxIndex = -1;\n\
    \  minLen = l[0].length;\n  maxLen = l[l.length - 1].length;\n  for (i = 0, len\
    \ = l.length; i < len; i++) {\n    l = l[i];\n    for (j = 0, len2 = l.length;\
    \ j < len2; j++) {\n      l1 = l[j];\n      minIndex = Math.min(minIndex, l1.indexOf(l[i]));\n\
    \      maxIndex = Math.max(maxIndex, l1.indexOf(l[i]));\n    }\n  }\n  return\
    \ [l.slice(minIndex, maxIndex + 1), minLen, maxLen];\n}\n", "  const l: number[]\
    \ = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i]\
    \ === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n      i++;\n \
    \   }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size);\
    \ i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n\
    \  }\n  return common;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i])\
    \ {\n      j++;\n    }\n    if (j === l2.length) {\n      l.push(l1[i]);\n   \
    \ }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  const hash1 =\
    \ new Set();\n  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    hash1.add(l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n   \
    \ hash2.add(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i])\
    \ && hash2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n  \
    \  if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n\
    \      j++;\n    }\n    l.push(l1[i]);\n  }\n  return l;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let\
    \ i = 0; i < set1.length; i++) {\n    if (set2.has(set1.get(i))) {\n      result.push(set1.get(i));\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result = [];\n  const hash1 = new Set();\n\
    \  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n\
    \  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n \
    \     i++;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    const found = false;\n    for (let j = 0; j\
    \ < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        found = true;\n        break;\n      }\n    }\n    if (!found) {\n  \
    \    result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n \
    \   for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n    \
    \    l.push(l1[i]);\n        found = true;\n        break;\n      }\n    }\n \
    \   if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let\
    \ i = 0; i < set1.length; i++) {\n    if (set2.has(set1.get(i))) {\n      result.push(set1.get(i));\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  const lLen: number\
    \ = l1.length;\n  const l2Len: number = l2.length;\n  for (let i = 0; i < lLen;\
    \ i++) {\n    for (let j = 0; j < l2Len; j++) {\n      if (l1[i] === l2[j]) {\n\
    \        l.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return l;\n}\n",
  "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let i\
    \ = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hashTable: { [key: number]: boolean; } = {};\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashTable[key])\
    \ {\n      hashTable[key] = true;\n      result.push(key);\n    }\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n    if (!hashTable[key])\
    \ {\n      hashTable[key] = true;\n      result.push(key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const found = false;\n    for (let j = 0; j < l2.length; j++) {\n\
    \      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n        found = true;\n\
    \        break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n   \
    \ }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return\
    \ [...set1].filter(x => !common.has(x));\n}\n", "  const l: number[] = [];\n \
    \ const i: number[] = [];\n  let j: number[] = [];\n  let k = 0;\n  while (k <\
    \ l1.length && k < l2.length) {\n    if (l1[k] === l2[k]) {\n      l.push(l1[k]);\n\
    \      i.push(k);\n      k++;\n    } else if (l1[k] < l2[k]) {\n      l.push(l1[k]);\n\
    \      i.push(k);\n      k++;\n    } else {\n      j.push(k);\n      k++;\n  \
    \  }\n  }\n  while (k < l1.length) {\n    l.push(l1[k]);\n    i.push(k);\n   \
    \ k++;\n  }\n  while (k < l2.length) {\n    l.push(l2[k]);\n    i.push(k);\n \
    \   k++;\n  }\n  return [l, i, j];\n}\n", "  const result = [];\n  const hash1\
    \ = new Map();\n  const hash2 = new Map();\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    const val = l1[i];\n    if (!hash1.has(val)) {\n      hash1.set(val,\
    \ i);\n      result.push(val);\n    }\n  }\n  for (let i = 0; i < l2.length; i++)\
    \ {\n    const val = l2[i];\n    if (!hash2.has(val)) {\n      hash2.set(val,\
    \ i);\n      result.push(val);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l1\
    \ = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  const hashMap =\
    \ new Map();\n  for (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n\
    \    if (!hashMap.has(key)) {\n      hashMap.set(key, true);\n      result.push(key);\n\
    \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n\
    \    if (!hashMap.has(key)) {\n      hashMap.set(key, true);\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const common: number[] = [];\n  set1.forEach((val) => {\n    if\
    \ (set2.has(val)) {\n      common.push(val);\n      set2.delete(val);\n    }\n\
    \  });\n  set2.forEach((val) => {\n    if (set1.has(val)) {\n      common.push(val);\n\
    \      set1.delete(val);\n    }\n  });\n  return common;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l1 = l1\
    \ || [];\n  const l2 = l2 || [];\n  const result = [];\n  let i = 0;\n  let j\
    \ = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n\
    \      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j])\
    \ {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
  "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n\
    \    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     found = true;\n        break;\n      }\n    }\n    if (!found) {\n     \
    \ l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n    for (let\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n\
    \        found = true;\n        break;\n      }\n    }\n    if (!found) {\n  \
    \    l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const ret = [];\n  for (const val of set1) {\n\
    \    if (set2.has(val)) {\n      ret.push(val);\n    }\n  }\n  return ret;\n}\n",
  "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  for (i = 0, j\
    \ = 0, k = l1.length; i < l1.length && j < l2.length; i++, j++) {\n    if (l1[i]\
    \ === l2[j]) {\n      l.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i]\
    \ > l2[j]) {\n      l.push(l1[i]);\n    } else {\n      l.push(l2[j]);\n    }\n\
    \  }\n  while (i < l1.length) {\n    l.push(l1[i]);\n    i++;\n  }\n  while (j\
    \ < l2.length) {\n    l.push(l2[j]);\n    j++;\n  }\n  return l;\n}\n", "  const\
    \ result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let i\
    \ = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean = l2.indexOf(l1[i])\
    \ !== -1;\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n\
    }\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n  \
    \  if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    const found: boolean = l2.some(item => item === l1[i]);\n    if (!found)\
    \ {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean = l2.some((item)\
    \ => item === l1[i]);\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n    \
    \  j++;\n    }\n    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  const result: number[] =\
    \ [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n   \
    \ for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n      \
    \  found = true;\n        break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i])\
    \ === -1) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\
    \  for (const item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i])\
    \ {\n      j++;\n    }\n    l.push(l1[i]);\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n\
    \  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n\
    \      j++;\n    }\n    if (j === l2.length) {\n      l.push(l1[i]);\n    }\n\
    \  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const\
    \ result = [];\n  const hashMap = new Map();\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const item = l1[i];\n    if (hashMap.has(item)) {\n      hashMap.get(item).push(l2[i]);\n\
    \    } else {\n      hashMap.set(item, l2[i]);\n    }\n  }\n  for (let i = 0;\
    \ i < l2.length; i++) {\n    const item = l2[i];\n    if (hashMap.has(item)) {\n\
    \      result.push(...hashMap.get(item));\n      hashMap.delete(item);\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const set1Size = set1.size;\n  const set2Size = set2.size;\n  const\
    \ commonSet = new Set();\n  for (let i = 0; i < set1Size; i++) {\n    if (set1.has(i)\
    \ && set2.has(i)) {\n      commonSet.add(i);\n    }\n  }\n  return [...commonSet];\n\
    }\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n  \
    \  if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return\
    \ l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n \
    \ return l;\n}\n", "  const l: number[] = [];\n  const result: number[] = [];\n\
    \  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l[j] = l1[i];\n      j++;\n    }\n  }\n  for (let i = 0; i\
    \ < l2.length; i++) {\n    if (l.indexOf(l2[i]) === -1) {\n      l[j] = l2[i];\n\
    \      j++;\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i])\
    \ === -1) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean\
    \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        l.push(l1[i]);\n        found = true;\n        break;\n      }\n\
    \    }\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n",
  "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  const i: number[] = [];\n  let j: number[] = [];\n  let k\
    \ = 0;\n  while (k < l1.length && k < l2.length) {\n    if (l1[k] === l2[k]) {\n\
    \      l.push(l1[k]);\n      i.push(k);\n      j = [];\n      k++;\n    } else\
    \ {\n      if (j.length > 0) {\n        l.push(j);\n        i.push(k);\n     \
    \   j = [];\n        k++;\n      } else {\n        j.push(l1[k]);\n        i.push(k);\n\
    \        k++;\n      }\n    }\n  }\n  if (j.length > 0) {\n    l.push(j);\n  \
    \  i.push(k);\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  const hashMap\
    \ = new Map<number, number>();\n  for (let i = 0; i < l1.length; i++) {\n    const\
    \ val = l1[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val, 1);\n   \
    \   result.push(val);\n    } else {\n      const count = hashMap.get(val);\n \
    \     hashMap.set(val, count + 1);\n    }\n  }\n  for (let i = 0; i < l2.length;\
    \ i++) {\n    const val = l2[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val,\
    \ 1);\n      result.push(val);\n    } else {\n      const count = hashMap.get(val);\n\
    \      hashMap.set(val, count + 1);\n    }\n  }\n  return result;\n}\n", "  const\
    \ l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n\
    \    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
    \      i++;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n\
    \    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
