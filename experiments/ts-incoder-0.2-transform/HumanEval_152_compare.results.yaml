language: ts
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < guess.length; i++) {\n        let diff\
    \ = guess[i] - game[i];\n        if (diff > 0) {\n            result.push(diff);\n\
    \        } else {\n            result.push(Math.abs(diff));\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738531
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const score = game[i];\n\
    \    const guess = guess[i];\n    if (score === guess) {\n      result.push(i);\n\
    \    } else {\n      result.push(Math.abs(score - guess));\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl5pjp_nb.ts(17,19): error TS2448: Block-scoped variable
    ''guess'' used before its declaration.

    '
  timestamp: 1659738536
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    let score = game[i];\n\
    \    let guess = guess[i];\n    if (score === guess) {\n      result[i] = 0;\n\
    \    } else {\n      result[i] = Math.abs(score - guess);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppvxonolb.ts(17,17): error TS2448: Block-scoped variable
    ''guess'' used before its declaration.

    '
  timestamp: 1659738586
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff = guess[i]\
    \ - game[i];\n    if (diff > 0) result.push(diff);\n    else if (diff < 0) result.push(Math.abs(diff));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmplgvirqel.js:27:12)\n    at Object.<anonymous> (/tmp/tmplgvirqel.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738586
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const score:\
    \ number[] = [];\n  const guesses: number[] = [];\n  const gameLength: number\
    \ = game.length;\n  const guessesLength: number = guess.length;\n  for (let i\
    \ = 0; i < gameLength; i++) {\n    score.push(game[i]);\n    guesses.push(guess[i]);\n\
    \  }\n  for (let i = 0; i < guessesLength; i++) {\n    const gameIndex: number\
    \ = guesses.indexOf(guess[i]);\n    const scoreIndex: number = score.indexOf(game[i]);\n\
    \    if (gameIndex === -1) {\n      score.push(Math.abs(guess[i] - game[i]));\n\
    \    } else {\n      score.splice(scoreIndex, 1);\n    }\n  }\n  return score;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n    at test (/tmp/tmpzvc26qwz.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzvc26qwz.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738586
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < guess.length; i++) {\n        let diff\
    \ = Math.abs(guess[i] - game[i]);\n        if (diff > result[i]) {\n         \
    \   result[i] = diff;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n    at test (/tmp/tmpw4d8dv3t.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw4d8dv3t.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738528
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i]\
    \ - game[i]);\n    if (diff === 0) {\n      result.push(i);\n    } else {\n  \
    \    result.push(diff);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2,\
    \ 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n\
    \  0,\n  3,\n  3\n]\n    at test (/tmp/tmp_ezy127y.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_ezy127y.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 3, 3 ],\n  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738533
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < guess.length; i++) {\n        let scoreDiff\
    \ = Math.abs(guess[i] - game[i]);\n        if (scoreDiff === 0) {\n          \
    \  result.push(i);\n        } else {\n            result.push(scoreDiff);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0,\
    \ 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0,\
    \ 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2,\
    \ -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2,\
    \ 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n\
    \  0,\n  3,\n  3\n]\n    at test (/tmp/tmpou3urvz7.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpou3urvz7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 3, 3 ],\n  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738586
- exit_code: 0
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff =\
    \ guess[i] - game[i];\n    if (diff > 0) {\n      result.push(diff);\n    } else\
    \ {\n      result.push(Math.abs(diff));\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738528
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const difference = Math.abs(guess[i]\
    \ - game[i]);\n    if (difference === 0) {\n      result.push(i);\n    } else\
    \ {\n      result.push(difference);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n\
    \  0,\n  3,\n  3\n]\n    at test (/tmp/tmpj58d0nxa.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj58d0nxa.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 3, 3 ],\n  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738534
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff = guess[i]\
    \ - game[i];\n    if (diff !== 0) {\n      result.push(diff);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmp8gvdmxu6.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8gvdmxu6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738531
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff = guess[i]\
    \ - game[i];\n    if (diff !== 0) {\n      result.push(diff);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmp8gvdmxu6.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8gvdmxu6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738531
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff =\
    \ guess[i] - game[i];\n    if (diff !== 0) {\n      result.push(diff);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmplzzg4q1y.js:26:12)\n    at Object.<anonymous> (/tmp/tmplzzg4q1y.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738531
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const diff = guess[i]\
    \ - game[i];\n    if (diff !== 0) {\n      result.push(diff);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmp8gvdmxu6.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8gvdmxu6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738531
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let score: number[] = [];\n    let guesses: number[] = [];\n\
    \    let scoreIndex: number[] = [];\n    let guessesIndex: number[] = [];\n  \
    \  let maxScore: number = game[0];\n    let maxGuess: number = game[0];\n    let\
    \ maxScoreIndex: number = game[0];\n    let maxGuessesIndex: number = game[0];\n\
    \    for (let i = 0; i < game.length; i++) {\n        score[i] = game[i];\n  \
    \      guesses[i] = guess[i];\n        scoreIndex[i] = i;\n        guessesIndex[i]\
    \ = i;\n    }\n    for (let i = 0; i < game.length; i++) {\n        if (score[i]\
    \ > maxScore) {\n            maxScore = score[i];\n            maxScoreIndex =\
    \ scoreIndex[i];\n        }\n        if (guesses[i] > maxGuess) {\n          \
    \  maxGuess = guesses[i];\n            maxGuessesIndex = guessesIndex[i];\n  \
    \      }\n    }\n    for (let i = 0; i < game.length; i++) {\n        if (scoreIndex[i]\
    \ === maxScoreIndex) {\n            result[i] = 0;\n        } else {\n       \
    \     result[i] = Math.abs(guesses[i] - maxGuess);\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not work. Try it out with your example and you will\
    \ see that it does not work. Try it out with my example and you will see that\
    \ it does not work. Try it out with my example and you will see that it does not\
    \ work. Try it out with my example and you will see that it does not work. Try\
    \ it out with my example and you will see that it does not work. Try it out with\
    \ my example and you will see that it does not work. Try it out with my example\
    \ and you will see that it does not work. Try it out with my example and you will\
    \ see that it does not work. Try it out with my example and you will see that\
    \ it does not work. Try it out with my example and you will see that it does not\
    \ work. Try it out with my example and you will see that it does not work. Try\
    \ it out with my example and you will see that it does not work. Try it out with\
    \ my example and you will see that it does not work. Try it out with my example\
    \ and you will see that it does not work. Try it out with my example and you will\
    \ see that it does not work. Try it out with my example and you will see that\
    \ it does not work. Try it out with my example and you will see that it does not\
    \ work. Try it out with my example and you will see that it does not work. Try\
    \ it out with my example and you will see that it does not work. Try it out with\
    \ my example and you will see that it does not work. Try it out with my example\
    \ and you will see that it does not work. Try \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0,\
    \ 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0,\
    \ 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2,\
    \ -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2,\
    \ 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpydac18pq.ts(48,2): error TS1110: Type expected.

    ../../../../../tmp/tmpydac18pq.ts(48,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpydac18pq.ts(49,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpydac18pq.ts(49,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpydac18pq.ts(50,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpydac18pq.ts(50,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpydac18pq.ts(51,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,59): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,63): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,68): error TS1005: ''('' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,73): error TS1005: '')'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,85): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,89): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,94): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,98): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,103): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,111): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmpydac18pq.ts(51,125): error TS1005: '';'' expected.

    ../../../../..'
  timestamp: 1659738586
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let score: number[] = [];\n    let guesses: number[] = [];\n\
    \    let scoreIndex: number[] = [];\n    let guessesIndex: number[] = [];\n  \
    \  let scoreIndexIndex: number[] = [];\n    let guessesIndexIndex: number[] =\
    \ [];\n    let scoreIndexIndexIndex: number[] = [];\n    let guessesIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndex: number[] = [];\n    let guessesIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndex: number[] = [];\n   \
    \ let guessesIndexIndexIndexIndexIndex: number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let scoreIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let scoreIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let guessesIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl8rw5_z0.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738528
- exit_code: 1
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i]\
    \ - game[i]);\n    if (diff > 0) {\n      result.push(diff);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  0,\n  0,\n  0,\n  3,\n  3\n]\n  \
    \  at test (/tmp/tmpb40jfpkb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpb40jfpkb.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3 ],\n\
    \  expected: [ 0, 0, 0, 0, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738533
- exit_code: 0
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = guess[i] -\
    \ game[i];\n    if (diff > 0) {\n      result.push(diff);\n    } else {\n    \
    \  result.push(Math.abs(diff));\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738541
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let score: number[] = [];\n    let guessed: number[] = [];\n\
    \    let scoreIndex: number[] = [];\n    let guessedIndex: number[] = [];\n  \
    \  let maxScore: number = 0;\n    let maxGuess: number = 0;\n    let maxScoreIndex:\
    \ number = 0;\n    let maxGuessedIndex: number = 0;\n    let maxScoreIndex2: number\
    \ = 0;\n    let maxGuessedIndex2: number = 0;\n    let maxScoreIndex3: number\
    \ = 0;\n    let maxGuessedIndex3: number = 0;\n    let maxScoreIndex4: number\
    \ = 0;\n    let maxGuessedIndex4: number = 0;\n    let maxScoreIndex5: number\
    \ = 0;\n    let maxGuessedIndex5: number = 0;\n    let maxScoreIndex6: number\
    \ = 0;\n    let maxGuessedIndex6: number = 0;\n    let maxScoreIndex7: number\
    \ = 0;\n    let maxGuessedIndex7: number = 0;\n    let maxScoreIndex8: number\
    \ = 0;\n    let maxGuessedIndex8: number = 0;\n    let maxScoreIndex9: number\
    \ = 0;\n    let maxGuessedIndex9: number = 0;\n    let maxScoreIndex10: number\
    \ = 0;\n    let maxGuessedIndex10: number = 0;\n    let maxScoreIndex11: number\
    \ = 0;\n    let maxGuessedIndex11: number = 0;\n    let maxScoreIndex12: number\
    \ = 0;\n    let maxGuessedIndex12: number = 0;\n    let maxScoreIndex13: number\
    \ = 0;\n    let maxGuessedIndex13: number = 0;\n    let maxScoreIndex14: number\
    \ = 0;\n    let maxGuessedIndex14: number = 0;\n    let maxScoreIndex15: number\
    \ = 0;\n    let maxGuessedIndex15: number = 0;\n    let maxScoreIndex16: number\
    \ = 0;\n    let maxGuessedIndex16: number = 0;\n    let maxScoreIndex17: number\
    \ = 0;\n    let maxGuessedIndex17: number = 0;\n    let maxScoreIndex18: number\
    \ = 0;\n    let maxGuessedIndex18: number = 0;\n    let maxScoreIndex19: number\
    \ = 0;\n    let maxGuessedIndex19: number = 0;\n    let maxScoreIndex20: number\
    \ = 0;\n    let maxGuessedIndex20: number = 0;\n    let maxScoreIndex21: number\
    \ = 0;\n    let maxGuessedIndex21: number = 0;\n    let maxScoreIndex22: number\
    \ = 0;\n    let maxGuessedIndex22: number = 0;\n    let maxScoreIndex23: number\
    \ = 0;\n    let maxGuessedIndex23: number = 0;\n    let maxScoreIndex24: number\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5],\
    \ [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb50yf_0y.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738586
- exit_code: 2
  program: "//I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// >>>\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n//\
    \ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\n\
    function compare(game: number[], guess: number[]): number[] {\n  const result:\
    \ number[] = new Array(guess.length).fill(0);\n  for (let i = 0; i < guess.length;\
    \ i++) {\n    const score = game[i];\n    const guess = guess[i];\n    if (score\
    \ === guess) {\n      result[i] = 0;\n    } else {\n      result[i] = Math.abs(score\
    \ - guess);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0,\
    \ 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0,\
    \ 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2,\
    \ -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2,\
    \ 0, 0, 1]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpujkhhhpm.ts(14,52): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    ../../../../../tmp/tmpujkhhhpm.ts(17,19): error TS2448: Block-scoped variable
    ''guess'' used before its declaration.

    '
  timestamp: 1659738586
