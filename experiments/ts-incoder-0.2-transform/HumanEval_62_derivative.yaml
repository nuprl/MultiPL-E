name: HumanEval_62_derivative
language: ts
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2,\
  \ 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return\
    \ [xs[0]];\n  const d = [(xs[0] * xs[0])]; // first derivative\n  for (let i =\
    \ 1; i < n; i++) {\n    d.push((xs[i] * d[n-1]));\n  }\n  return d;\n}\n", " \
    \ const n = xs.length;\n  const result: number[] = new Array(n);\n  for (let i\
    \ = 0; i < n; i++) {\n    result[i] = xs[i + 1];\n  }\n  return result;\n}\n",
  "  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n\
    \  const d = [];\n  for (let i = 1; i < n; i++) {\n    d.push((xs[i] - xs[i -\
    \ 1]) / (xs[i]));\n  }\n  return d;\n}\n", "  const n = xs.length;\n  const result\
    \ = new Array(n);\n  for (let i = 0; i < n; i++) {\n    result[i] = xs[i + 1];\n\
    \  }\n  return result;\n}\n", "  const n = xs.length;\n  if (n === 0) return [];\n\
    \  if (n === 1) return [xs[0]];\n  const d = [];\n  for (let i = 1; i < n; i++)\
    \ {\n    d[i] = xs[i] - xs[i - 1];\n  }\n  return d;\n}\n", "  const n = xs.length;\n\
    \  const result: number[] = new Array(n);\n  for (let i = 0; i < n; i++) {\n \
    \   result[i] = xs[i + 1];\n  }\n  return result;\n}\n", "  const n = xs.length;\n\
    \  const d = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i +\
    \ 1];\n  }\n  for (let i = n - 2; i >= 0; --i) {\n    d[i] = d[i + 1] * xs[i];\n\
    \  }\n  return d;\n}\n", "  const n = xs.length;\n  if (n < 1) return [];\n  const\
    \ d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[0];\n\
    \    xs[0] = xs[i];\n  }\n  for (let i = 1; i < n; i++) {\n    d[i] = d[i] * xs[i];\n\
    \  }\n  return d;\n}\n", "  const n = xs.length;\n  if (n < 1) return [];\n  if\
    \ (n === 1) return [xs[0]];\n  const d = xs[1];\n  return [\n    xs[0] * d,\n\
    \    xs[1] * d * xs[0],\n    xs[2] * d * xs[0] * d,\n    xs[3] * d * xs[0] * d\
    \ * xs[0],\n  ];\n}\n", "  const n = xs.length;\n  if (n < 1) {\n    return [];\n\
    \  }\n  const d = [];\n  for (let i = 1; i < n; i++) {\n    d[i] = xs[i] - xs[i\
    \ - 1];\n  }\n  return d;\n}\n", "  const n = xs.length;\n  if (n < 1) return\
    \ [];\n  const d = [];\n  for (let i = 1; i < n; i++) {\n    d[i] = xs[i] - xs[i\
    \ - 1];\n  }\n  return d;\n}\n", "  const n = xs.length;\n  const result = new\
    \ Array(n);\n  for (let i = 0; i < n; i++) {\n    result[i] = xs[i + 1];\n  }\n\
    \  return result;\n}\n", "  const n = xs.length;\n  const result: number[] = new\
    \ Array(n);\n  for (let i = 0; i < n; i++) {\n    result[i] = xs[i + 1];\n  }\n\
    \  return result;\n}\n", "  const n = xs.length;\n  if (n === 0) return [];\n\
    \  if (n === 1) return [xs[0]];\n  const d = xs[1];\n  return [(xs[0] * d) + (xs[1]\
    \ * xs[0] * d) + (xs[2] * xs[1] * d) + (xs[3] * xs[2] * d) + (xs[4] * xs[3] *\
    \ d) + (xs[5] * xs[4] * d)];\n}\n", "  const n = xs.length;\n  if (n < 1) return\
    \ [];\n  const d = [];\n  for (let i = 1; i < n; i++) {\n    d[i] = xs[i] - xs[i\
    \ - 1];\n  }\n  return d;\n}\n", "  const n = xs.length;\n  if (n === 0) return\
    \ [];\n  if (n === 1) return [xs[0]];\n  const d = [(xs[0] * xs[0])]; // d(xs[0])\
    \ = xs[0]\n  for (let i = 1; i < n; i++) {\n    d[i] = (xs[i] * d[i-1]);\n  }\n\
    \  return d;\n}\n", "  const n = xs.length;\n  if (n === 0) return [];\n  if (n\
    \ === 1) return [xs[0]];\n  const d = [(xs[0] * xs[0])]; // use xs[0] instead\
    \ of xs[0]*xs[0] since xs[0] is always 1.\n  for (let i = 1; i < n; i++) {\n \
    \   d.push((xs[i] * d[i-1]));\n  }\n  return d;\n}\n", "  const n = xs.length;\n\
    \  const result = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    result[i]\
    \ = xs[i + 1];\n  }\n  return result;\n}\n", "  let n = xs.length;\n  if (n <\
    \ 2) return [];\n  let d = xs[1];\n  for (let i = 2; i < n; i++) {\n    d *= xs[i];\n\
    \  }\n  return [xs[0] / d, xs[1] / d, xs[2] / d, xs[3] / d, xs[4] / d];\n}\n",
  "  const n = xs.length;\n  if (n < 1) return [];\n  if (n === 1) return [xs[0]];\n\
    \  const d = xs[1];\n  return [\n    xs[0] * d,\n    xs[1] * d * xs[0],\n    xs[2]\
    \ * d * xs[0] * d,\n    xs[3] * d * xs[0] * d * xs[0],\n  ];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
