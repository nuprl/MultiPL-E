name: HumanEval_130_tri
language: ts
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return a list of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
  \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
  \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
  \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return\
    \ [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2);\n}\n", "  if (n === 1) {\n    return [1, 1, 1];\n  }\n  if (n\
    \ === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 === 0) {\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n}\n", "  let arr: number[] = [];\n  if (n === 1) {\n    arr.push(1);\n\
    \    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n\
    \    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return arr;\n  }\n  arr.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n  arr.push(tri(n - 2) + tri(n + 1));\n  return\
    \ arr;\n}\n", "  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return\
    \ [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1);\n\
    }\n", "  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)];\n}\n", "  if (n === 0 || n === 1) {\n    return [n, n, n];\n  }\n  const\
    \ result: number[] = [];\n  const first: number = tri(n - 1);\n  const second:\
    \ number = tri(n - 2);\n  const third: number = tri(n - 3) + tri(n - 2) + tri(n\
    \ - 1);\n  result.push(first);\n  result.push(second);\n  result.push(third);\n\
    \  return result;\n}\n", "  let arr: number[] = [];\n  arr.push(3);\n  if (n %\
    \ 2 === 0) {\n    arr.push(1);\n  }\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}\n", "    let result:\
    \ number[] = [];\n    let first = 1;\n    let second = 1;\n    let third = 1;\n\
    \    for (let i = 1; i <= n; i++) {\n        result.push(first);\n        first++;\n\
    \        second++;\n        third++;\n    }\n    result.push(third);\n    return\
    \ result;\n}\n", "  if (n === 0) return [];\n  if (n === 1) return [1];\n  if\
    \ (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n -\
    \ 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2), tri(n - 2)\
    \ + tri(n - 1)];\n}\n", "    let result: number[] = [];\n    let first: number\
    \ = 1;\n    let second: number = 1;\n    let third: number = 1;\n    for (let\
    \ i = 1; i <= n; i++) {\n        result.push(first);\n        third = first +\
    \ second;\n        first = second;\n        second = third;\n    }\n    return\
    \ result;\n}\n", "  if (n === 1) {\n    return [1, 1, 1];\n  }\n  if (n === 2)\
    \ {\n    return [1, 2, 1];\n  }\n  if (n === 3) {\n    return [1, 1, 2];\n  }\n\
    \  if (n % 2 === 0) {\n    return [1, 1, 1];\n  }\n  return [1, 1, 2] + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n}\n", "  if (n === 0) return [];\n  if (n ===\
    \ 1) return [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n  return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n", "  if (n === 0) return [];\n\
    \  if (n === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2), tri(n + 1)];\n  return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n + 1)];\n}\n", "  if (n === 1) {\n    return [1, 1,\
    \ 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 === 0) {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n", "  if\
    \ (n === 0) return [];\n  if (n === 1) return [1];\n  if (n % 2 === 0) return\
    \ [tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n\
    }\n", "  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n % 2 ===\
    \ 0) return [tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)];\n}\n", "  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n  \
    \  return [1, 1];\n  }\n  if (n % 2 === 0) {\n    return [tri(n - 1) + tri(n -\
    \ 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  }\n  return [tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n}\n", "  let result:\
    \ number[] = [];\n  if (n === 1) {\n    result.push(1);\n    return result;\n\
    \  }\n  if (n === 2) {\n    result.push(3);\n    return result;\n  }\n  if (n\
    \ % 2 === 0) {\n    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else\
    \ {\n    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n  }\n\
    \  return result;\n}\n", "  if (n === 1) {\n    return [1];\n  }\n  if (n ===\
    \ 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1) + tri(n - 2);\n}\n", "  if (n === 0) return [];\n  if (n === 1) return [1];\n\
    \  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 1)];\n  return [tri(n - 1) + tri(n - 2), tri(n -\
    \ 2) + tri(n - 1)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
