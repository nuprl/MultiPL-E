name: HumanEval_153_Strongest_Extension
language: ts
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let max_strength = -1;\n    let max_extension = \"\";\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let extensions_count\
    \ = extensions.length;\n    let extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    let extensions_count_sm = extensions_count.toLowerCase().length;\n    let\
    \ extensions_count_diff = extensions_count_cap - extensions_count_sm;\n    let\
    \ extensions_count_min = extensions_count_cap - extensions_count_diff;\n    let\
    \ extensions_count_max = extensions_count_sm;\n    let extensions_count_sum =\
    \ extensions_count_cap + extensions_count_sm;\n    let extensions_count_average\
    \ = extensions_count_sum / extensions_count;\n    let extensions_count_highest\
    \ = extensions_count_max;\n    let extensions_count_lowest = extensions_count_min;\n\
    \    let extensions_count_middle = extensions_count_average - extensions_count_highest;\n\
    \    let extensions_count_middle2 = extensions_count_average - extensions_count_lowest;\n\
    \    let extensions_count_middle3 = extensions_count_average + extensions_count_highest;\n\
    \    let extensions_count_middle4 = extensions_count_average + extensions_count_lowest;\n\
    \    let extensions_count_middle5 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4;\n\
    \    let extensions_count_middle6 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5;\n    let extensions_count_middle7 = extensions_count_average\
    \ + extensions_count_middle + extensions_count_middle2 + extensions_count_middle3\
    \ + extensions_count_middle4 + extensions_count_middle5 + extensions_count_middle6;\n\
    \    let extensions_count_middle8 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6 + extensions_count_middle7;\n\
    \    let extensions_count_middle9 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6 + extensions_count_middle7\
    \ + extensions_count_middle8;\n    let extensions_count_middle10 = extensions_count_average\
    \ + extensions_count_middle + extensions_count_middle2 + extensions_count_middle3\
    \ + extensions_count_middle4 + extensions_count_middle5 + extensions_count_middle6\
    \ + extensions_count_middle7 + extensions_count_middle8 + extensions_count_middle9;\n\
    \    let extensions_count_middle11 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + ", "  let strongest_extension: string = extensions[0];\n  for (let i = 1;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
    \ = extension.length;\n    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = Extension_Strength(extension);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\t\t\
    if (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let max_extension_strength\
    \ = -1;\n    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength\
    \ > max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension_name;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let class_name = class_name + extension;\n\
    \    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
    \ = class_name.toUpperCase();\n    let class_name_length = class_name_upper.length;\n\
    \    let extension_length = extension.length;\n    let strength = class_name_length\
    \ - extension_length;\n    if (strength > max_strength) {\n      max_strength\
    \ = strength;\n      max_extension = extension;\n    }\n  }\n  return class_name\
    \ + max_extension;\n}\n", "\tlet strongest_extension: string = class_name;\n\t\
    let strongest_extension_strength: number = -1;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn strongest_extension;\n}\n", "  let strongest_extension:\
    \ number = 0;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension_str: string = extensions[i];\n\
    \    let extension_str_length: number = extension_str.length;\n    let extension_str_upper:\
    \ number = extension_str_length - 1;\n    let extension_str_lower: number = extension_str_length\
    \ - 2;\n    let extension_str_first_upper: number = extension_str_upper - 1;\n\
    \    let extension_str_first_lower: number = extension_str_lower - 1;\n    let\
    \ extension_str_first_cap: number = extension_str_first_upper - 1;\n    let extension_str_first_sm:\
    \ number = extension_str_first_lower - 1;\n    let extension_str_first_cap_sm:\
    \ number = extension_str_first_cap - 1;\n    let extension_str_first_cap_sm_length:\
    \ number = extension_str_first_cap_sm - extension_str_first_sm;\n    let extension_str_first_cap_sm_strongest:\
    \ number = extension_str_first_cap_sm_length - 1;\n    let extension_str_first_cap_sm_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest - extension_str_first_cap;\n \
    \   let extension_str_first_cap_sm_strongest_strongest: number = extension_str_first_cap_sm_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_length: number\
    \ = extension_str_first_cap_sm_strongest_strongest - extension_str_first_cap_sm;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest: number = extension_str_first_cap_sm_strongest_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest - extension_str_first_cap_sm_length;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest: number\
    \ = extension_str_first_cap_sm_strongest_strongest_strongest_length - 1;\n   \
    \ let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest_strongest\
    \ - extension_str_first_cap_sm_strongest;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_strongest:\
    \ number = extension_str_first_cap_sm_strongest_str", "\tlet strongest_extension:\
    \ string = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\
    \tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length\
    \ - sm.length;\n\t\tif (strength > strongest_extension.length) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = \"\";\n  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
    \ = extension.length;\n    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension_str:\
    \ string = extensions[i];\n\t\tlet extension_str_length: number = extension_str.length;\n\
    \t\tlet extension_str_length_lowercase: number = extension_str_length;\n\t\tlet\
    \ extension_str_length_uppercase: number = extension_str_length;\n\t\tfor (let\
    \ j = 0; j < extension_str.length; j++) {\n\t\t\tif (extension_str[j] === extension_str[j].toUpperCase())\
    \ {\n\t\t\t\textension_str_length_uppercase++;\n\t\t\t} else if (extension_str[j]\
    \ === extension_str[j].toLowerCase()) {\n\t\t\t\textension_str_length_lowercase++;\n\
    \t\t\t}\n\t\t}\n\t\tlet extension_str_length_length_difference: number = extension_str_length_lowercase\
    \ - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference_inverse:\
    \ number = extension_str_length_uppercase - extension_str_length_lowercase;\n\t\
    \tlet extension_str_length_length_difference_fraction: number = extension_str_length_length_difference\
    \ / extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_inverse:\
    \ number = extension_str_length_length_difference / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction: number = extension_str_length_length_difference_fraction\
    \ / extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction: number\
    \ = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference_inverse;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension",
  "  let max_extension_strength: number = -1;\n  let max_extension_class: string =\
    \ \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_class:\
    \ string = extensions[i];\n    let extension_strength: number = extension_class.match(/[A-Z]/g).length\
    \ - extension_class.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_class\
    \ = extension_class;\n    }\n  }\n  return class_name + \".\" + max_extension_class;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
