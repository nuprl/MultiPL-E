name: HumanEval_153_Strongest_Extension
language: ts
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let max_strength = -1;\n    let max_extension = \"\";\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let extensions_count\
    \ = extensions.length;\n    let extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    let extensions_count_sm = extensions_count.toLowerCase().length;\n    let\
    \ extensions_count_diff = extensions_count_cap - extensions_count_sm;\n    let\
    \ extensions_count_min = extensions_count_cap - extensions_count_diff;\n    let\
    \ extensions_count_max = extensions_count_sm;\n    let extensions_count_sum =\
    \ extensions_count_cap + extensions_count_sm;\n    let extensions_count_average\
    \ = extensions_count_sum / extensions_count;\n    let extensions_count_highest\
    \ = extensions_count_max;\n    let extensions_count_lowest = extensions_count_min;\n\
    \    let extensions_count_middle = extensions_count_average - extensions_count_highest;\n\
    \    let extensions_count_middle2 = extensions_count_average - extensions_count_lowest;\n\
    \    let extensions_count_middle3 = extensions_count_average + extensions_count_highest;\n\
    \    let extensions_count_middle4 = extensions_count_average + extensions_count_lowest;\n\
    \    let extensions_count_middle5 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4;\n\
    \    let extensions_count_middle6 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5;\n    let extensions_count_middle7 = extensions_count_average\
    \ + extensions_count_middle + extensions_count_middle2 + extensions_count_middle3\
    \ + extensions_count_middle4 + extensions_count_middle5 + extensions_count_middle6;\n\
    \    let extensions_count_middle8 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6 + extensions_count_middle7;\n\
    \    let extensions_count_middle9 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6 + extensions_count_middle7\
    \ + extensions_count_middle8;\n    let extensions_count_middle10 = extensions_count_average\
    \ + extensions_count_middle + extensions_count_middle2 + extensions_count_middle3\
    \ + extensions_count_middle4 + extensions_count_middle5 + extensions_count_middle6\
    \ + extensions_count_middle7 + extensions_count_middle8 + extensions_count_middle9;\n\
    \    let extensions_count_middle11 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + ", "  let strongest_extension: string = extensions[0];\n  for (let i = 1;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
    \ = extension.length;\n    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = Extension_Strength(extension);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\t\t\
    if (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let max_extension_strength\
    \ = -1;\n    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength\
    \ > max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension_name;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let class_name = class_name + extension;\n\
    \    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
    \ = class_name.toUpperCase();\n    let class_name_length = class_name_upper.length;\n\
    \    let extension_length = extension.length;\n    let strength = class_name_length\
    \ - extension_length;\n    if (strength > max_strength) {\n      max_strength\
    \ = strength;\n      max_extension = extension;\n    }\n  }\n  return class_name\
    \ + max_extension;\n}\n", "\tlet strongest_extension: string = class_name;\n\t\
    let strongest_extension_strength: number = -1;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn strongest_extension;\n}\n", "  let strongest_extension:\
    \ number = 0;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension_str: string = extensions[i];\n\
    \    let extension_str_length: number = extension_str.length;\n    let extension_str_upper:\
    \ number = extension_str_length - 1;\n    let extension_str_lower: number = extension_str_length\
    \ - 2;\n    let extension_str_first_upper: number = extension_str_upper - 1;\n\
    \    let extension_str_first_lower: number = extension_str_lower - 1;\n    let\
    \ extension_str_first_cap: number = extension_str_first_upper - 1;\n    let extension_str_first_sm:\
    \ number = extension_str_first_lower - 1;\n    let extension_str_first_cap_sm:\
    \ number = extension_str_first_cap - 1;\n    let extension_str_first_cap_sm_length:\
    \ number = extension_str_first_cap_sm - extension_str_first_sm;\n    let extension_str_first_cap_sm_strongest:\
    \ number = extension_str_first_cap_sm_length - 1;\n    let extension_str_first_cap_sm_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest - extension_str_first_cap;\n \
    \   let extension_str_first_cap_sm_strongest_strongest: number = extension_str_first_cap_sm_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_length: number\
    \ = extension_str_first_cap_sm_strongest_strongest - extension_str_first_cap_sm;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest: number = extension_str_first_cap_sm_strongest_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest - extension_str_first_cap_sm_length;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest: number\
    \ = extension_str_first_cap_sm_strongest_strongest_strongest_length - 1;\n   \
    \ let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest_strongest\
    \ - extension_str_first_cap_sm_strongest;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_strongest:\
    \ number = extension_str_first_cap_sm_strongest_str", "\tlet strongest_extension:\
    \ string = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\
    \tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length\
    \ - sm.length;\n\t\tif (strength > strongest_extension.length) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = \"\";\n  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
    \ = extension.length;\n    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension_str:\
    \ string = extensions[i];\n\t\tlet extension_str_length: number = extension_str.length;\n\
    \t\tlet extension_str_length_lowercase: number = extension_str_length;\n\t\tlet\
    \ extension_str_length_uppercase: number = extension_str_length;\n\t\tfor (let\
    \ j = 0; j < extension_str.length; j++) {\n\t\t\tif (extension_str[j] === extension_str[j].toUpperCase())\
    \ {\n\t\t\t\textension_str_length_uppercase++;\n\t\t\t} else if (extension_str[j]\
    \ === extension_str[j].toLowerCase()) {\n\t\t\t\textension_str_length_lowercase++;\n\
    \t\t\t}\n\t\t}\n\t\tlet extension_str_length_length_difference: number = extension_str_length_lowercase\
    \ - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference_inverse:\
    \ number = extension_str_length_uppercase - extension_str_length_lowercase;\n\t\
    \tlet extension_str_length_length_difference_fraction: number = extension_str_length_length_difference\
    \ / extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_inverse:\
    \ number = extension_str_length_length_difference / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction: number = extension_str_length_length_difference_fraction\
    \ / extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction: number\
    \ = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference_inverse;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension",
  "  let max_extension_strength: number = -1;\n  let max_extension_class: string =\
    \ \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_class:\
    \ string = extensions[i];\n    let extension_strength: number = extension_class.match(/[A-Z]/g).length\
    \ - extension_class.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_class\
    \ = extension_class;\n    }\n  }\n  return class_name + \".\" + max_extension_class;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - CAP_SM_RE.exec(extension)[1];\n\
    \t\tif (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) strongest_extension\
    \ = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: string = \"\";\n\tlet strongest_extension_strength:\
    \ number = -1;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    const extension = extensions[i];\n    const cap = extension.charAt(0).toUpperCase();\n\
    \    const sm = extension.charAt(0).toLowerCase();\n    const strength = cap -\
    \ sm;\n    if (strength > 0) {\n      strongest_extension = extension;\n    }\n\
    \  }\n  return class_name + \".\" + strongest_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  let strongest_extension = \"\";\n  let strongest_extension_strength\
    \ = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n", "    let max_strength\
    \ = -1\n    let max_extension = \"\"\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i]\n        let strength = class_name.split(extension).length\
    \ - 1\n        if (strength > max_strength) {\n            max_strength = strength\n\
    \            max_extension = extension\n        }\n    }\n    return `${class_name}.${max_extension}`\n\
    }\n", "    let strongest_extension: number = 0;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_str_upper: number = extension_str_length\
    \ - 1;\n        let extension_str_lower: number = extension_str_length - 2;\n\
    \        let extension_str_middle_upper: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_middle_lower: number = extension_str_lower - extension_str_upper;\n\
    \        let extension_str_middle_strength: number = extension_str_middle_upper\
    \ - extension_str_middle_lower;\n        let extension_str_middle_strength_str:\
    \ string = extension_str_middle_strength.toString();\n        let extension_str_middle_strength_str_length:\
    \ number = extension_str_middle_strength_str.length;\n        let extension_str_middle_strength_str_upper:\
    \ number = extension_str_middle_strength_str_length - 1;\n        let extension_str_middle_strength_str_lower:\
    \ number = extension_str_middle_strength_str_length - 2;\n        let extension_str_middle_strength_str_middle_upper:\
    \ number = extension_str_middle_strength_str_upper - extension_str_middle_strength_str_lower;\n\
    \        let extension_str_middle_strength_str_middle_lower: number = extension_str_middle_strength_str_lower\
    \ - extension_str_middle_strength_str_upper;\n        let extension_str_middle_strength_str_middle_strength:\
    \ number = extension_str_middle_strength_str_middle_upper - extension_str_middle_strength_str_middle_lower;\n\
    \        let extension_str_middle_strength_str_middle_strength_str: string = extension_str_middle_strength_str_middle_strength.toString();\n\
    \        let extension_str_middle_strength_str_middle_strength_str_length: number\
    \ = extension_str_middle_strength_str_middle_strength_str.length;\n        let\
    \ extension_str_middle_strength_str_middle_strength_str_upper: number = extension_str_middle_strength_str_middle_strength_str_length\
    \ - 1;\n        let extension_str_middle_strength_str_middle_strength_str_lower:\
    \ number = extension_str_middle_strength_str_middle_strength_str_length - 2;\n\
    \        let extension_str_middle_strength_str_middle_strength_str_middle_upper:\
    \ number = extension_str_middle_strength_str_middle_strength_str_upper - extension_str_middle_strength_str_middle_strength_str_lower;\n\
    \        let extension_str_middle_strength_str_middle_strength_str_middle_lower:\
    \ number = extension_str_middle_strength_str_middle_strength_str_lower - extension_str_middle_strength_str_middle_strength_str_upper;\n\
    \        let extension_str_middle_strength_str_", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet strength = Extension_Strength(class_name,\
    \ extension);\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let class_name\
    \ = class_name + extension;\n    let strength = Extension_Strength(class_name);\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + max_extension;\n}\n", "  let\
    \ max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
    \ = extension.length;\n    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name\
    \ = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet extension_length = extension.length;\n\t\
    \tlet extension_upper = extension.toUpperCase();\n\t\tlet extension_lower = extension.toLowerCase();\n\
    \t\tlet extension_strength = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_length - extension_lower.length;\n\t\t\
    let extension_strength_upper = extension_length - extension_upper.length;\n\t\t\
    let extension_strength_lower = extension_", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm\
    \ = extensions_count_cap - extensions_count_sm;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm == 0 ? 0 : extensions_count_cap_sm;\n  let extensions_count_cap_sm_min\
    \ = extensions_count_cap_sm == 0 ? 1 : extensions_count_cap_sm;\n  let extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm == 0 ? extensions_count_cap_sm_min : extensions_count_cap_sm;\n\
    \  let extensions_count_cap_sm_max_min_max = extensions_count_cap_sm == 0 ? extensions_count_cap_sm_max_min\
    \ : extensions_count_cap_sm_max;\n  let extensions_count_cap_sm_max_min_max_max\
    \ = extensions_count_cap_sm == 0 ? extensions_count_cap_sm_max_min_max : extensions_count_cap_sm_max_min;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max = extensions_count_cap_sm ==\
    \ 0 ? extensions_count_cap_sm_max_min_max_max : extensions_count_cap_sm_max_min_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max : extensions_count_cap_sm_max_min_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_", "  let strongest_extension = \"\";\n  let strongest_extension_strength\
    \ = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_strength = extension_strength;\n   \
    \ }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let max_strength\
    \ = -1\n  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i]\n    let class_name = class_name + extension\n\
    \    let class_name_lower = class_name.toLowerCase()\n    let extension_lower\
    \ = extension.toLowerCase()\n    let strength = class_name_lower.length - extension_lower.length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + max_extension\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_name = extensions[i];\n    let extension_strength\
    \ = extension_name.toUpperCase().charCodeAt(0) - extension_name.toLowerCase().charCodeAt(0);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n \
    \ }\n  return class_name + \".\" + max_extension_name;\n}\n", "\tlet strongest_extension:\
    \ number = 0;\n\tlet strongest_extension_str: string = \"\";\n\tlet strongest_extension_class:\
    \ string = \"\";\n\tlet strongest_extension_class_str: string = \"\";\n\tlet strongest_extension_class_count:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_class = class_name + extension;\n\t\tlet\
    \ extension_class_str = extension_class.charAt(0).toUpperCase() + extension_class.substring(1);\n\
    \t\tlet extension_class_count = extension_class_str.split(\"\").length;\n\t\t\
    if (extension_class_count > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str\
    \ = extension_class_str;\n\t\t\tstrongest_extension_class_count = extension_class_count;\n\
    \t\t\tstrongest_extension_class = extension_class;\n\t\t\tstrongest_extension\
    \ = -1;\n\t\t} else if (extension_class_count == strongest_extension_class_count)\
    \ {\n\t\t\tif (extension_class_count > strongest_extension_class_count) {\n\t\t\
    \t\tstrongest_extension_class_str = extension_class_str;\n\t\t\t\tstrongest_extension_class_count\
    \ = extension_class_count;\n\t\t\t\tstrongest_extension_class = extension_class;\n\
    \t\t\t\tstrongest_extension = -1;\n\t\t\t}\n\t\t}\n\t}\n\tif (strongest_extension_class_count\
    \ > 0) {\n\t\tlet strongest_extension_class_str: string = strongest_extension_class_str.charAt(0).toUpperCase()\
    \ + strongest_extension_class_str.substring(1);\n\t\tlet strongest_extension_class_count:\
    \ string = strongest_extension_class_str.split(\"\").length;\n\t\tif (strongest_extension_class_count\
    \ > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str =\
    \ strongest_extension_class_str.charAt(0).toUpperCase() + strongest_extension_class_str.substring(1);\n\
    \t\t\tstrongest_extension_class_count = strongest_extension_class_str.split(\"\
    \").length;\n\t\t\tstrongest_extension_class = strongest_extension_class_str;\n\
    \t\t\tstrongest_extension = -1;\n\t\t}\n\t}\n\tif (strongest_extension_class_count\
    \ > 0) {\n\t\tlet strongest_extension_class_str: string = strongest_extension_class_str.charAt(0).toUpperCase()\
    \ + strongest_extension_class_str.substring(1);\n\t\tlet strongest_extension_class_count:\
    \ string = strongest_extension_class_str.split(\"\").length;\n\t\tif (strongest_extension_class_count\
    \ > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str =\
    \ strongest_extension_class_str.charAt(0).toUpperCase() + ", "  let strongest_extension\
    \ = \"\";\n  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n\
    \    const extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_extension_strength\
    \ = -1\n  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i]\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength\n      max_extension =\
    \ extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n", " \
    \ let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let max_extension_strength = -1;\n    let max_extension_classname = \"\";\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_classname = class_name + extension;\n        let extension_strength\
    \ = Extension_Strength(extension_classname);\n        if (extension_strength >\
    \ max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_classname = extension_classname;\n        }\n    }\n\
    \    return max_extension_classname;\n}\n", "    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n\
    \    const extension_strength = extension_length - extension_strength(extension);\n\
    \    if (extension_strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "  let max_strength = -1\n  let max_extension = \"\"\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i]\n    let strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n    if\
    \ (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n",
  "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n\
    \    const extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "  let strongest_extension:\
    \ string = class_name;\n  let strongest_extension_strength: number = -1;\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "    let extension_strength:\
    \ number[] = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension = extensions[i];\n        let extension_letters = extension.length;\n\
    \        let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_strength = extension_strength.reduce((a, b) => Math.max(a, b));\n    let\
    \ max_index = extension_strength.indexOf(max_strength);\n    let max_extension\
    \ = extensions[max_index];\n    return class_name + \".\" + max_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension:\
    \ string = \"\";\n\tlet strongest_extension_strength: number = -1;\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\
    \tlet extension_strength = extension.charCodeAt(0) - 65;\n\t\tif (extension_strength\
    \ > strongest_extension_strength) {\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet strongest_extension: number = -1;\n\t\
    let strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension_str: string = extensions[i];\n\t\tlet extension_str_length:\
    \ number = extension_str.length;\n\t\tlet extension_str_length_lowercase: number\
    \ = extension_str_length.toLowerCase();\n\t\tlet extension_str_length_uppercase:\
    \ number = extension_str_length.toUpperCase();\n\t\tlet extension_str_length_length_difference:\
    \ number = extension_str_length_lowercase - extension_str_length_uppercase;\n\t\
    \tlet extension_str_length_length_difference_inverse: number = extension_str_length_uppercase\
    \ - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference_square:\
    \ number = extension_str_length_length_difference * extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_square_inverse: number = extension_str_length_length_difference\
    \ * extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_square_root:\
    \ number = Math.sqrt(extension_str_length_length_difference_square);\n\t\tlet\
    \ extension_str_length_length_difference_square_root_inverse: number = Math.sqrt(extension_str_length_length_difference_square_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse: number\
    \ = Math.sqrt(extension_str_length_length_difference_square_root_inverse);\n\t\
    \tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "  let strongest_extension:\
    \ number = -Infinity;\n  let strongest_extension_class: string = class_name;\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension: number =\
    \ extensions[i].charCodeAt(0) - 97;\n    if (extension > strongest_extension)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_class =\
    \ extensions[i];\n    }\n  }\n  return strongest_extension_class;\n}\n", "  let\
    \ extension_strength: number = -1;\n  let extension_strongest: string = \"\";\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_upper = extension.toUpperCase();\n    let extension_lower =\
    \ extension.toLowerCase();\n    let extension_length = extension_upper.length\
    \ - extension_lower.length;\n    let extension_strength_upper = extension_upper.split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0), 0);\n    let extension_strength_lower\
    \ = extension_lower.split(\"\").reduce((a, b) => a + b.charCodeAt(0), 0);\n  \
    \  let extension_strength_length = extension_strength_upper - extension_strength_lower;\n\
    \    if (extension_strength_length > extension_strength) {\n      extension_strength\
    \ = extension_strength_length;\n      extension_strongest = extension;\n    }\n\
    \  }\n  return class_name + \".\" + extension_strongest;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "    let max_strength = -1;\n\
    \    let max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - class_name.split(\"\").reduce((a,\
    \ b) => a + b.toUpperCase().charCodeAt(0) - b.toLowerCase().charCodeAt(0), 0);\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return `${class_name}.${max_extension}`;\n}\n", "  let max_strength =\
    \ -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "  let max_strength = -1\n  let max_extension = \"\"\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i]\n    let strength\
    \ = class_name.split(extension).length - 1\n    if (strength > max_strength) {\n\
    \      max_strength = strength\n      max_extension = extension\n    }\n  }\n\
    \  return class_name + \".\" + max_extension\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let\
    \ sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n\
    \    if (strength > strongest_extension.length) {\n      strongest_extension =\
    \ extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strongest_extension: number = -Infinity;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length\
    \ - sm.length;\n\t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[extensions.length\
    \ - 1];\n}\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\
    \tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension = \"\";\n  let strongest_extension_strength =\
    \ 0;\n  let strongest_extension_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension_extension;\n\
    }\n", "\tlet strongest_extension: number = -Infinity;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i].toLowerCase();\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[extensions.length\
    \ - 1];\n}\n", "    let strongest_extension = extensions[0];\n    for (let i =\
    \ 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n \
    \       let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0)\
    \ - strongest_extension.charCodeAt(1)) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let strongest_extension = \"\";\n  let strongest_extension_strength = 0;\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return `${class_name}.${strongest_extension}`;\n}\n", "  let strongest_extension:\
    \ number = -1;\n  let strongest_extension_str: string = \"\";\n  for (let i =\
    \ 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let\
    \ extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension_str.length;\n    if (extension_strength > strongest_extension)\
    \ {\n      strongest_extension = extension_strength;\n      strongest_extension_str\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let extensions_count = extensions.length;\n    let extensions_count_cap\
    \ = extensions_count.toUpperCase().length;\n    let extensions_count_sm = extensions_count.toLowerCase().length;\n\
    \    let extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n\
    \    let extensions_count_cap_sm_min = extensions_count_cap_sm / 2;\n    let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm / 2;\n    let extensions_count_cap_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm =\
    \ extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm;\n\
    \    let extensions_count_cap_sm_min_max_sm_min = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm_min_max_sm\
    \ = extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max_sm_min = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm_min_max_sm_min_max_sm\
    \ = extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + ", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_upper = extension.toUpperCase();\n\t\tlet extension_lower =\
    \ extension.toLowerCase();\n\t\tlet extension_strength = extension_length - extension_upper.length\
    \ - extension_lower.length;\n\t\tlet extension_strength_sign = extension_strength\
    \ < 0 ? -1 : 1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
    \t\tlet extension_strength_abs_sign = Math.abs(extension_strength_sign);\n\t\t\
    let extension_strength_abs_abs = Math.abs(extension_strength_abs);\n\t\tlet extension_strength_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_sign);\n\t\tlet extension_strength_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension", "  let extensions_count = extensions.length;\n  let extensions_count_cap\
    \ = extensions_count.toUpperCase().length;\n  let extensions_count_sm = extensions_count.toLowerCase().length;\n\
    \  let extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm > 0 ? extensions_count_cap_sm\
    \ : 1;\n  let extensions_count_cap_sm_min = extensions_count_cap_sm > 0 ? 0 :\
    \ extensions_count_cap_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_min = extensions_count_cap_sm_min < 0 ? 0 : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max ",
  "\tlet extensions_count = extensions.length;\n\tlet extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \tlet extensions_count_sm = extensions_count.toLowerCase().length;\n\tlet extensions_count_cap_sm\
    \ = extensions_count_cap - extensions_count_sm;\n\tlet extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm : 1;\n\tlet extensions_count_cap_sm_min\
    \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm - 1 : -1;\n\tlet extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max =\
    \ extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_name = extensions[i];\n    let extension_strength\
    \ = class_name.split(extension_name).length - 1;\n    if (extension_strength >\
    \ max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_name = extension_name;\n    }\n  }\n  return class_name +\
    \ \".\" + max_extension_name;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_classname = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_classname = class_name + extensions[i];\n    let extension_strength\
    \ = Extension_Strength(extension_classname);\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_classname\
    \ = extension_classname;\n    }\n  }\n  return max_extension_classname;\n}\n",
  "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name\
    \ + \".\" + extension;\n\t\tlet strength = Extension_Strength(class_name);\n\t\
    \tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension = \"\";\n    let strongest_extension_strength = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.charCodeAt(0) - extension.charCodeAt(extension.length\
    \ - 1);\n        if (extension_strength > strongest_extension_strength) {\n  \
    \          strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tlet strongest_extension_class: string = \"\";\n\tlet strongest_extension_class_str:\
    \ string = \"\";\n\tlet strongest_extension_class_count: string = \"\";\n\tfor\
    \ (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name = class_name + \".\" + extension;\n\t\tlet class_count: string\
    \ = class_name.split(\" \").length;\n\t\tlet extension_count: string = extension.split(\"\
    \ \").length;\n\t\tlet extension_strength: string = extension_count - class_count;\n\
    \t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_class = class_name;\n\t\t\t\
    strongest_extension_class_str = extension;\n\t\t\tstrongest_extension_class_count\
    \ = class_count;\n\t\t}\n\t}\n\treturn strongest_extension_class + \".\" + strongest_extension_class_str;\n\
    }\n", "  let strongest_extension: string = extensions[0];\n  for (let i = 1; i\
    \ < extensions.length; i++) {\n    const extension = extensions[i];\n    const\
    \ extension_length = extension.length;\n    const extension_uppercase_count =\
    \ extension_length / 2;\n    const extension_lowercase_count = extension_length\
    \ - extension_uppercase_count;\n    const extension_strength = extension_uppercase_count\
    \ - extension_lowercase_count;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "    let extensions_count = extensions.length;\n    let extensions_count_cap\
    \ = extensions_count.toUpperCase().length;\n    let extensions_count_sm = extensions_count.toLowerCase().length;\n\
    \    let extensions_count_diff = extensions_count_cap - extensions_count_sm;\n\
    \    let extensions_count_max = Math.max(extensions_count_cap, extensions_count_sm);\n\
    \    let extensions_count_min = Math.min(extensions_count_cap, extensions_count_sm);\n\
    \    let extensions_count_strength = extensions_count_diff / extensions_count_max;\n\
    \    let extensions_count_strength_rounded = Math.round(extensions_count_strength\
    \ * 100) / 100;\n    let extensions_count_strength_rounded_str = extensions_count_strength_rounded.toString();\n\
    \    let extensions_count_strength_rounded_str = extensions_count_strength_rounded_str.charAt(0).toUpperCase()\
    \ + extensions_count_strength_rounded_str.slice(1);\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_min + extensions_count_strength_rounded_str;", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension;\n}\n", "  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = \"\";\n  let max_strength = -1;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      strongest_extension = extension;\n\
    \      max_strength = extension_strength;\n    }\n  }\n  return class_name + \"\
    .\" + strongest_extension;\n}\n", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.charCodeAt(0) - extension.charCodeAt(extension.length\
    \ - 1);\n\t\tif (extension_strength > strongest_extension_strength) {\n\t\t\t\
    strongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let\
    \ max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  let strongest_extension = \"\";\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - 1;\n    let extension_class_name = class_name + extension;\n    let extension_class_name_length\
    \ = extension_class_name.length;\n    let extension_class_name_strength = extension_class_name_length\
    \ - 1;\n    let extension_class_name_strength_fraction = extension_class_name_strength\
    \ / extension_class_name_length;\n    if (extension_strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension_class_name;\n    }\n    if (extension_strength\
    \ > strongest_extension.length && extension_strength > extension_class_name_strength)\
    \ {\n      strongest_extension = extension_class_name;\n    }\n    if (extension_strength\
    \ > strongest_extension.length && extension_strength > extension_class_name_strength\
    \ && extension_strength > extension_class_name_strength_fraction) {\n      strongest_extension\
    \ = extension_class_name;\n    }\n  }\n  return strongest_extension;\n}\n", " \
    \ let strongest_extension: number = -1;\n  let strongest_extension_name: string\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n    if (extension_strength\
    \ > strongest_extension) {\n      strongest_extension = extension_strength;\n\
    \      strongest_extension_name = extension;\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension_name;\n}\n", "    let max_strength = -1;\n   \
    \ let max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n\
    \        let extension = extensions[i];\n        let strength = Extension_Strength(class_name,\
    \ extension);\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension;\n}\n", "  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i].toLowerCase();\n    let extension_strength\
    \ = extension_name.length - extension_name.match(/[a-z]/g).length;\n    if (extension_strength\
    \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_name = extension_name;\n    }\n  }\n  return class_name +\
    \ \".\" + max_extension_name;\n}\n", "  let strongest_extension: number = -1;\n\
    \  let strongest_extension_name: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n    if (extension > strongest_extension) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_name = extensions[i];\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension_name;\n}\n", "\tlet strongest_extension:\
    \ number = 0;\n\tlet strongest_extension_index: number = 0;\n\tlet strongest_extension_strength:\
    \ number = -1;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = i;\n\t\t\tstrongest_extension_index = i;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + extensions[strongest_extension_index];\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_str: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str_length - 1;\n        let extension_str_lower:\
    \ number = extension_str_length - 2;\n        let extension_str_first_upper: number\
    \ = extension_str_upper - 1;\n        let extension_str_first_lower: number =\
    \ extension_str_lower - 1;\n        let extension_str_first_upper_smaller: number\
    \ = extension_str_first_upper - 1;\n        let extension_str_first_lower_smaller:\
    \ number = extension_str_first_lower - 1;\n        let extension_str_first_upper_bigger:\
    \ number = extension_str_first_upper + 1;\n        let extension_str_first_lower_bigger:\
    \ number = extension_str_first_lower + 1;\n        let extension_str_first_upper_smaller2:\
    \ number = extension_str_first_upper + 2;\n        let extension_str_first_lower_smaller2:\
    \ number = extension_str_first_lower + 2;\n        let extension_str_first_upper_bigger2:\
    \ number = extension_str_first_upper + 3;\n        let extension_str_first_lower_bigger2:\
    \ number = extension_str_first_lower + 3;\n        let extension_str_first_upper_smaller3:\
    \ number = extension_str_first_upper + 4;\n        let extension_str_first_lower_smaller3:\
    \ number = extension_str_first_lower + 4;\n        let extension_str_first_upper_bigger3:\
    \ number = extension_str_first_upper + 5;\n        let extension_str_first_lower_bigger3:\
    \ number = extension_str_first_lower + 5;\n        let extension_str_first_upper_smaller4:\
    \ number = extension_str_first_upper + 6;\n        let extension_str_first_lower_smaller4:\
    \ number = extension_str_first_lower + 6;\n        let extension_str_first_upper_bigger4:\
    \ number = extension_str_first_upper + 7;\n        let extension_str_first_lower_bigger4:\
    \ number = extension_str_first_lower + 7;\n        let extension_str_first_upper_smaller5:\
    \ number = extension_str_first_upper + 8;\n        let extension_str_first_lower_smaller5:\
    \ number = extension_str_first_lower + 8;\n        let extension_str_first_upper_bigger5:\
    \ number = extension_str_first_upper + 9;\n        let extension_str_first_lower_bigger5:\
    \ number = extension_str_first_lower + 9;\n        let extension_str_first_upper_smaller6:\
    \ number = extension_str_first_upper + 10;\n        let extension_str_first_lower_smaller6:\
    \ number = extension_str_first_lower + 10;\n        let extension_str_first_upper_big",
  "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_upper = extension.toUpperCase();\n\
    \    let extension_lower = extension.toLowerCase();\n    let extension_strength_upper\
    \ = extension_upper.charCodeAt(0) - extension_lower.charCodeAt(0);\n    let extension_strength_lower\
    \ = extension_upper.charCodeAt(0) - extension_lower.charCodeAt(0);\n    extension_strength.push(extension_strength_upper);\n\
    \    extension_strength.push(extension_strength_lower);\n  }\n  let max_strength\
    \ = Math.max.apply(null, extension_strength);\n  let max_index = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_index];\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: number = 0;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_str_upper: number = extension_str_length\
    \ - 1;\n        let extension_str_lower: number = extension_str_length - 2;\n\
    \        let extension_str_first_upper: number = extension_str_upper - 1;\n  \
    \      let extension_str_first_lower: number = extension_str_lower - 1;\n    \
    \    let extension_str_first_cap: number = extension_str_first_upper - 1;\n  \
    \      let extension_str_first_sm: number = extension_str_first_lower - 1;\n \
    \       let extension_str_first_cap_sm: number = extension_str_first_cap - 1;\n\
    \        let extension_str_first_cap_sm_lower: number = extension_str_first_cap_sm\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper: number = extension_str_first_cap_sm_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower: number = extension_str_first_cap_sm_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper: number\
    \ = extension_str_first_cap_sm_lower_upper_lower - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper - 1;\n        let\
    \ extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper: number = extension_str_first_cap_sm_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper - 1;\n\
    \        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_", "  let max_strength = -1;\n  let max_extension = \"\"\
    ;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "    let extension_strength: number[] = [];\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_letters\
    \ = extension.length;\n        let extension_lowercase_letters = extension_letters\
    \ - extension_letters.toUpperCase().length;\n        let extension_strength_fraction\
    \ = extension_lowercase_letters / extension_letters;\n        extension_strength.push(extension_strength_fraction);\n\
    \    }\n    let max_strength = extension_strength.reduce((a, b) => Math.max(a,\
    \ b));\n    let max_index = extension_strength.indexOf(max_strength);\n    let\
    \ class_name_with_max_strength = class_name + extensions[max_index];\n    return\
    \ class_name_with_max_strength;\n}\n", "    let strongest_extension = \"\";\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.charCodeAt(0) - extension.charCodeAt(extension.length - 1);\n  \
    \      if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let extension_strength: number[] = [];\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_letters\
    \ = extension.split(\"\");\n        let extension_letters_count = extension_letters.length;\n\
    \        let extension_strength_sum = 0;\n        for (let j = 0; j < extension_letters_count;\
    \ j++) {\n            let letter = extension_letters[j];\n            extension_strength_sum\
    \ += (letter.charCodeAt(0) - 65);\n        }\n        extension_strength[i] =\
    \ extension_strength_sum;\n    }\n    let max_strength = extension_strength.indexOf(Math.max(...extension_strength));\n\
    \    return class_name + extensions[max_strength];\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - strongest_extension.length;\n\t\tif (extension_strength\
    \ > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;\n}\n", "  let strongest_extension: number = -1;\n\
    \  let strongest_extension_class: string = class_name;\n  let strongest_extension_strength:\
    \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n    if (extension > strongest_extension)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_class =\
    \ extensions[i];\n      strongest_extension_strength = i;\n    }\n  }\n  return\
    \ strongest_extension_class + \".\" + extensions[strongest_extension_strength];\n\
    }\n", "  let max_strength = -1\n  let max_extension = \"\"\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i]\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n    if\
    \ (extension_strength > max_strength) {\n      max_strength = extension_strength\n\
    \      max_extension = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n\
    }\n", "  let strongest_extension: number = -1;\n  let strongest_extension_str:\
    \ string = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str:\
    \ string = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
    \    let extension_str_lower_case: number = extension_str.toLowerCase();\n   \
    \ let extension_str_upper_case: number = extension_str.toUpperCase();\n    let\
    \ extension_str_length_capitalized: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_lowercase: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_uppercase: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_lowercase_capitalized: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_upper_case: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_upper_case_capitalized: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_upper_case_capitalized_lowercase: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_upper_case_capitalized_lowercase_capitalized: number\
    \ = extension_str_length.toLocaleUpperCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capit",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length)\n         \
    \   strongest_extension = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension: string = \"\";\n  let strongest_extension_strength:\
    \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.charCodeAt(0) - extension.charCodeAt(extension.length\
    \ - 1);\n    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension = \"\";\n  let strongest_extension_strength =\
    \ 0;\n  let extension_counter = 0;\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_counter = extension_counter\
    \ + 1;\n    let extension_strength = extension_counter;\n    let extension_class_name\
    \ = class_name + extension;\n    let extension_class_name_lower = extension_class_name.toLowerCase();\n\
    \    for (let j = 0; j < extensions.length; j++) {\n      let extension_counter\
    \ = extension_counter + 1;\n      let extension_strength = extension_counter;\n\
    \      let extension_class_name = class_name + extension;\n      let extension_class_name_lower\
    \ = extension_class_name.toLowerCase();\n      if (extension_strength > strongest_extension_strength)\
    \ {\n        strongest_extension_strength = extension_strength;\n        strongest_extension\
    \ = extension_class_name;\n      }\n    }\n  }\n  return strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (cap < sm) {\n            strength = -1;\n        }\n\
    \        if (strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet extensions_count = extensions.length;\n\tlet extensions_count_cap\
    \ = extensions_count - extensions_count.toLocaleLowerCase();\n\tlet extensions_count_sm\
    \ = extensions_count.toLocaleLowerCase();\n\tlet extensions_count_cap_sm = (extensions_count_cap\
    \ - extensions_count_sm) / extensions_count_cap;\n\tlet extensions_count_cap_sm_cap\
    \ = extensions_count_cap_sm + extensions_count_cap;\n\tlet extensions_count_cap_sm_cap_sm\
    \ = (extensions_count_cap_sm_cap - extensions_count_sm) / extensions_count_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm + extensions_count_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm_cap_sm\
    \ + extensions_count_cap_sm_cap_sm_cap;\n\tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap =\
    \ extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm_", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_of_letter(extension.charAt(0));\n\t\tif (extension_strength\
    \ > strongest_extension_strength) {\n\t\t\tstrongest_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let max_extension_strength\
    \ = -1;\n    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n", "    let\
    \ extension_strength: number[] = [];\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_letters\
    \ = extension.length;\n        let extension_lowercase_letters = extension_letters\
    \ - extension_letters.toUpperCase().length;\n        let extension_strength_fraction\
    \ = extension_lowercase_letters / extension_letters;\n        extension_strength.push(extension_strength_fraction);\n\
    \    }\n    let max_extension_strength = Math.max.apply(null, extension_strength);\n\
    \    let max_extension_strength_index = extension_strength.indexOf(max_extension_strength);\n\
    \    let max_extension = extensions[max_extension_strength_index];\n    return\
    \ class_name + \".\" + max_extension;\n}\n", "    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_name: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_name = extensions[i];\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}\n",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - extension_strength_count(extension);\n\
    \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length\
    \ = extension.length;\n\t\tlet extension_strength = extension_length - class_name.indexOf(extension);\n\
    \t\tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension = \"\";\n  let max_strength = 0;\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let extension_class = class_name + extension;\n    let extension_strength\
    \ = Extension_Strength(extension_class);\n    if (extension_strength > max_strength)\
    \ {\n      strongest_extension = extension_class;\n      max_strength = extension_strength;\n\
    \    }\n  }\n  return strongest_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n  \
    \    max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "  let strongest_extension:\
    \ string = \"\";\n  let cap_extensions: number[] = [];\n  let sm_extensions: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let sm\
    \ = extension.charAt(0).toLowerCase();\n    cap_extensions.push(cap);\n    sm_extensions.push(sm);\n\
    \  }\n  let cap_extensions_length = cap_extensions.length;\n  let sm_extensions_length\
    \ = sm_extensions.length;\n  let max_extension_strength = -1;\n  for (let i =\
    \ 0; i < cap_extensions_length; i++) {\n    for (let j = 0; j < sm_extensions_length;\
    \ j++) {\n      let cap_extension = cap_extensions[i];\n      let sm_extension\
    \ = sm_extensions[j];\n      let cap_extension_strength = cap_extension.charCodeAt(0)\
    \ - sm_extension.charCodeAt(0);\n      if (cap_extension_strength > max_extension_strength)\
    \ {\n        max_extension_strength = cap_extension_strength;\n        strongest_extension\
    \ = class_name + \".\" + cap_extension;\n      }\n    }\n  }\n  return strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) strongest_extension\
    \ = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension: number = -Infinity;\n  let strongest_extension_str:\
    \ string;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str:\
    \ string = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
    \    let extension_str_upper: number = extension_str.toUpperCase().length;\n \
    \   let extension_str_lower: number = extension_str.toLowerCase().length;\n  \
    \  let extension_str_length_ratio: number = extension_str_upper / extension_str_length;\n\
    \    let extension_str_lower_ratio: number = extension_str_lower / extension_str_length;\n\
    \    let extension_str_upper_ratio: number = extension_str_upper / extension_str_lower;\n\
    \    let extension_str_lower_ratio: number = extension_str_lower / extension_str_upper;\n\
    \    let extension_str_strength: number = extension_str_length_ratio * extension_str_lower_ratio;\n\
    \    if (extension_str_strength > strongest_extension) {\n      strongest_extension\
    \ = extension_str_strength;\n      strongest_extension_str = extension_str;\n\
    \    }\n  }\n  return class_name + \".\" + strongest_extension_str;\n}\n", " \
    \ let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let\
    \ sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n\
    \    if (strength > strongest_extension.length) {\n      strongest_extension =\
    \ extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n",
  "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_strength_counter = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - strongest_extension_strength_counter;\n\
    \t\tif (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength_counter\
    \ = extension_length;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_extension_strength = -1;\n    let max_extension_name = \"\"\
    ;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension =\
    \ extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_extension_strength)\
    \ {\n            max_extension_strength = extension_strength;\n            max_extension_name\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension_name;\n\
    }\n", "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_name:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)] - SM_TO_STRONG[extension.charAt(extension_length\
    \ - 1)];\n\t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_name = extension;\n\t\t}\n\t\
    }\n\treturn class_name + \".\" + strongest_extension_name;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n \
    \       let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
    \        let extension_str_length_cap: number = extension_str_length - 1;\n  \
    \      let extension_str_length_lower: number = extension_str_length - 1;\n  \
    \      let extension_str_length_upper: number = extension_str_length - 1;\n  \
    \      let extension_str_length_total: number = extension_str_length_cap + extension_str_length_lower\
    \ + extension_str_length_upper;\n        let extension_str_length_total_cap: number\
    \ = extension_str_length_cap + extension_str_length_upper;\n        let extension_str_length_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper;\n        let\
    \ extension_str_length_total_upper: number = extension_str_length_cap + extension_str_length_lower;\n\
    \        let extension_str_length_total_total: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_cap: number = extension_str_length_cap\
    \ + extension_str_length_upper + extension_str_length_total;\n        let extension_str_length_total_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_upper: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_total: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_cap:\
    \ number = extension_str_length_cap + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_upper:\
    \ number = extension_str_length_cap + extension_str_length_lower + extension_str_length_upper\
    \ + extension_str_length_total + extension_str_length_total;\n        let extension_str_length_total_total_total_total:\
    \ number = extension_str_length_cap + extension_", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet extension_strength: number[] = [];\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name\
    \ + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet\
    \ class_name_length = class_name.length;\n\t\tlet class_name_upper = class_name.charAt(0).toUpperCase()\
    \ + class_name.slice(1);\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_", "    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) strongest_extension\
    \ = extension;\n  }\n  return class_name + \".\" + strongest_extension;\n}\n",
  "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = Extension_Strength(extension);\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n",
  "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_diff\
    \ = extensions_count_cap - extensions_count_sm;\n  let extensions_count_max =\
    \ Math.max(extensions_count_cap, extensions_count_sm);\n  let extensions_count_min\
    \ = Math.min(extensions_count_cap, extensions_count_sm);\n  let extensions_count_average\
    \ = Math.round(extensions_count / extensions_count_max);\n  let extensions_count_average_cap\
    \ = Math.round(extensions_count_cap / extensions_count_max);\n  let extensions_count_average_sm\
    \ = Math.round(extensions_count_sm / extensions_count_max);\n  let extensions_count_average_diff\
    \ = Math.round(extensions_count_diff / extensions_count_max);\n  let extensions_count_average_max\
    \ = Math.round(extensions_count_max / extensions_count_max);\n  let extensions_count_average_min\
    \ = Math.round(extensions_count_min / extensions_count_max);\n  let extensions_count_average_average\
    \ = Math.round(extensions_count_average / extensions_count_max);\n  let extensions_count_average_average_cap\
    \ = Math.round(extensions_count_average_cap / extensions_count_max);\n  let extensions_count_average_average_sm\
    \ = Math.round(extensions_count_average_sm / extensions_count_max);\n  let extensions_count_average_average_diff\
    \ = Math.round(extensions_count_average_diff / extensions_count_max);\n  let extensions_count_average_average_max\
    \ = Math.round(extensions_count_average_max / extensions_count_max);\n  let extensions_count_average_average_min\
    \ = Math.round(extensions_count_average_min / extensions_count_max);\n  let extensions_count_average_average_average\
    \ = Math.round(extensions_count_average_average / extensions_count_max);\n  let\
    \ extensions_count_average_average_average_cap = Math.round(extensions_count_average_average_cap\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_sm\
    \ = Math.round(extensions_count_average_average_sm / extensions_count_max);\n\
    \  let extensions_count_average_average_average_diff = Math.round(extensions_count_average_average_diff\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_max\
    \ = Math.round(extensions_count_average_average_max / extensions_count_max);\n\
    \  let extensions_count_average_average_average_min = Math.round(extensions_count_average_average_min\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_average\
    \ = Math.round(extensions_count_average_average_average / extensions_count_max);\n\
    \  let extensions_count_average_average_average_average_cap = Math.round(extensions_count_average_average_average_cap\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_average_sm\
    \ = Math.round(extension", "    let strongest_extension = extensions[0];\n   \
    \ for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", " \
    \   let strongest_extension = \"\";\n    let strongest_extension_strength = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - CAP_TO_STRONG(extension);\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_str: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_upper: number = extension_str_length.toUpperCase();\n \
    \       let extension_str_length_lower: number = extension_str_length.toLowerCase();\n\
    \        let extension_str_length_upper_sm: number = extension_str_length_upper.length\
    \ - extension_str_length_lower.length;\n        let extension_str_length_lower_sm:\
    \ number = extension_str_length_lower.length - extension_str_length_upper.length;\n\
    \        let extension_str_length_upper_cap: number = extension_str_length_upper.length\
    \ - extension_str_length_lower.length - 1;\n        let extension_str_length_lower_cap:\
    \ number = extension_str_length_lower.length - extension_str_length_upper.length\
    \ - 1;\n        let extension_str_length_upper_smcap: number = extension_str_length_upper_sm\
    \ - extension_str_length_lower_sm;\n        let extension_str_length_lower_smcap:\
    \ number = extension_str_length_lower_sm - extension_str_length_upper_sm;\n  \
    \      let extension_str_length_upper_capsm: number = extension_str_length_upper_cap\
    \ - extension_str_length_lower_cap;\n        let extension_str_length_lower_capsm:\
    \ number = extension_str_length_lower_cap - extension_str_length_upper_cap;\n\
    \        let extension_str_length_upper_smcapsm: number = extension_str_length_upper_smcap\
    \ - extension_str_length_lower_capsm;\n        if (extension_str_length_upper_sm\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_sm;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_sm\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_lower_sm;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_upper_cap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_cap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_cap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_lower_cap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_upper_smcap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_smcap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_cap",
  "  let strongest_extension = \"\";\n  let strongest_extension_strength = 0;\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.charCodeAt(0) - extension.charCodeAt(extension.length\
    \ - 1);\n    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_strength = extension_strength;\n   \
    \ }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n   \
    \     let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension) {\n            strongest_extension\
    \ = strength;\n            strongest_extension_str = extension;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension_str;\n}\n", "  let\
    \ strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - extension_strength_count(extension);\n\
    \    if (extension_strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "  let strongest_extension = \"\";\n  let strongest_extension_strength =\
    \ 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_strength = extension_strength;\n   \
    \ }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let strongest_extension\
    \ = \"\";\n  let max_strength = -1;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      strongest_extension = extension;\n      max_strength = extension_strength;\n\
    \    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let\
    \ strongest_extension = \"\";\n  let strongest_extension_strength = 0;\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_strength = extension_strength;\n   \
    \ }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    const\
    \ extension = extensions[i];\n    const extension_length = extension.length;\n\
    \    const extension_uppercase_count = extension_length / 2;\n    const extension_lowercase_count\
    \ = extension_length - extension_uppercase_count;\n    const extension_strength\
    \ = extension_uppercase_count - extension_lowercase_count;\n    if (extension_strength\
    \ > strongest_extension.strength) {\n      strongest_extension = extension;\n\
    \    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.charCodeAt(0)\
    \ - extension.charCodeAt(extension.length - 1);\n\t\tif (extension_strength >\
    \ strongest_extension_strength) {\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n",
  "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (strength > max_strength) {\n\t\t\
    \tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension: number\
    \ = 0;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_str: string =\
    \ extension.charAt(0).toUpperCase() + extension.slice(1);\n\t\tlet extension_strength\
    \ = extension_str.length - extension_str.toLowerCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension) {\n\t\t\tstrongest_extension = extension_strength;\n\t\
    \t\tstrongest_extension_str = extension_str;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension_str;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ `${class_name}${strongest_extension}`;\n}\n", "  let strongest_extension = \"\
    \";\n  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length - sm.length;\n\
    \t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension = strength;\n\
    \t\t\tstrongest_extension_str = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension_str;\n}\n", "\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_class: string = \"\";\n\tlet strongest_extension_name:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n\t\tlet extension_class: string\
    \ = extensions[i].charAt(0).toUpperCase() + extensions[i].slice(1);\n\t\tlet extension_name:\
    \ string = extensions[i].charAt(0).toLowerCase() + extensions[i].slice(1);\n\t\
    \tlet extension_strength: number = extension_class.charCodeAt(0) - extension_name.charCodeAt(0);\n\
    \t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_class = extension_class;\n\t\
    \t\tstrongest_extension_name = extension_name;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension_name + \".\" + strongest_extension_class;\n}\n",
  "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name\
    \ + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet\
    \ class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
    \ - extension_length;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength\
    \ = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + max_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\"\
    ;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name.length;\n\t\tlet extension_length = extension.length;\n\t\tlet\
    \ extension_upper = extension.toUpperCase();\n\t\tlet extension_lower = extension.toLowerCase();\n\
    \t\tlet extension_strength = extension_length - extension_upper.length - extension_lower.length;\n\
    \t\tlet strength = class_name_length - extension_length;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + max_extension;\n}\n", "  let strongest_extension: string\
    \ = \"\";\n  let strongest_extension_strength: number = -1;\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet max_strength = -1\n\tfor (let i = 0;\
    \ i < extensions.length; i++) {\n\t\tlet extension = extensions[i]\n\t\tlet strength\
    \ = class_name.split(extension).length - 1\n\t\tif (strength > max_strength) {\n\
    \t\t\tmax_strength = strength\n\t\t}\n\t}\n\treturn class_name + extensions[max_strength]\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
