{
  "language": "ts",
  "name": "HumanEval_47_median",
  "results": [
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length % 2) {\n    return sortedList[middle];\n  }\n  const leftMedian = sortedList[middle - 1];\n  const rightMedian = sortedList[middle];\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpgj58u3cd.js:23:12)\n    at Object.<anonymous> (/tmp/tmpgj58u3cd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n  const medianValue = median(l);\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6z1ggg5i.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmp6z1ggg5i.js:7:11)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n    at median (/tmp/tmp6z1ggg5i.js:17:25)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const leftMedian = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return ((leftMedian + rightMedian) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpavf5l_af.js:25:12)\n    at Object.<anonymous> (/tmp/tmpavf5l_af.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"List must contain at least one element\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpewxqy_47.js:22:12)\n    at Object.<anonymous> (/tmp/tmpewxqy_47.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpl28zkamr.js:18:12)\n    at Object.<anonymous> (/tmp/tmpl28zkamr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpx91aia6l.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpx91aia6l.js:11:27)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjqkbihgp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpjqkbihgp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxs92zilt.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvlwtnfxl.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvlwtnfxl.js:11:27)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n    at median (/tmp/tmpvlwtnfxl.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn2jcqb8k.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn2jcqb8k.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    throw new Error(\"Cannot calculate median of an even length list\");\n  }\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const medianOfLeftHalf = median(l.slice(0, mid));\n  const medianOfRightHalf = median(l.slice(mid));\n  return medianOfLeftHalf + medianOfRightHalf;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpk60siwyi.js:12\n        throw new Error(\"Cannot calculate median of an even length list\");\n        ^\n\nError: Cannot calculate median of an even length list\n    at median (/tmp/tmpk60siwyi.js:12:15)\n    at test (/tmp/tmpk60siwyi.js:24:22)\n    at Object.<anonymous> (/tmp/tmpk60siwyi.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmperpzjned.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmperpzjned.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmperpzjned.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmperpzjned.ts(18,35): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0sf6_k2o.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmp0sf6_k2o.js:8:15)\n    at median (/tmp/tmp0sf6_k2o.js:14:24)\n    at median (/tmp/tmp0sf6_k2o.js:14:24)\n    at median (/tmp/tmp0sf6_k2o.js:15:25)\n    at test (/tmp/tmp0sf6_k2o.js:21:22)\n    at Object.<anonymous> (/tmp/tmp0sf6_k2o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpun93ytsc.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpun93ytsc.js:11:27)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n    at median (/tmp/tmpun93ytsc.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfqwl40kz.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpfqwl40kz.js:11:27)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n    at median (/tmp/tmpfqwl40kz.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const midIndex = Math.floor(sortedList.length / 2);\n  return sortedList[midIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp4scz42na.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4scz42na.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpo036fi1r.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpo036fi1r.js:8:15)\n    at median (/tmp/tmpo036fi1r.js:18:24)\n    at median (/tmp/tmpo036fi1r.js:18:24)\n    at median (/tmp/tmpo036fi1r.js:19:25)\n    at test (/tmp/tmpo036fi1r.js:25:22)\n    at Object.<anonymous> (/tmp/tmpo036fi1r.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp101cdxmd.js:22:12)\n    at Object.<anonymous> (/tmp/tmp101cdxmd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpql36r1c_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpql36r1c_.js:8:15)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:15:19)\n    at test (/tmp/tmpql36r1c_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpql36r1c_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmptm8zgp2v.js:8\n        throw new Error('Cannot calculate median of an empty list');\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmptm8zgp2v.js:8:15)\n    at median (/tmp/tmptm8zgp2v.js:16:28)\n    at median (/tmp/tmptm8zgp2v.js:16:28)\n    at median (/tmp/tmptm8zgp2v.js:17:26)\n    at test (/tmp/tmptm8zgp2v.js:23:22)\n    at Object.<anonymous> (/tmp/tmptm8zgp2v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp__nnmtv5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp__nnmtv5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = n >> 1;\n  const a = l[mid];\n  let b = l[n - 1];\n  let c = l[mid];\n  let d = l[n - 1];\n  while (true) {\n    if (a > b) {\n      d = a;\n      a = b;\n      b = c;\n      c = d;\n      d = (d + (c / 2)) | 0;\n    }\n    if (b > c) {\n      d = b;\n      b = c;\n      c = d;\n      d = (d + (b / 2)) | 0;\n    }\n    if (a > c) {\n      d = a;\n      a = c;\n      c = d;\n      d = (d + (a / 2)) | 0;\n    }\n    if (b > d) {\n      d = b;\n      b = d;\n      d = c;\n      c = (c + (d / 2)) | 0;\n    }\n    if (c > d) {\n      d = c;\n      c = d;\n      d = a;\n      a = (a + (c / 2)) | 0;\n    }\n    if (a > b) {\n      d = a;\n      a = b;\n      b = d;\n      d = (d + (a / 2)) | 0;\n    }\n    if (b > c) {\n      d = b;\n      b = c;\n      c = d;\n      d = (d + (b / 2)) | 0;\n    }\n    if (d > c) {\n      d = c;\n      c = d;\n      d = a;\n      a = (a + (d / 2)) | 0;\n    }\n    if (c > b) {\n      d = c;\n      c = b;\n      b = d;\n      d = (d + (a / 2)) | 0;\n    }\n    if (d > a) {\n      d = a;\n      a = d;\n      d = c;\n      c = (c + (d / 2)) | 0;\n    }\n    if (c > a) {\n      d = c;\n      c = a;\n      a = d;\n      d = (d + (c / 2)) | 0;\n    }\n    if (a > d) {\n      d = a;\n      a = d;\n      d = c;\n      c = (c + (d / 2)) | 0;\n    }\n    if (b > d) {\n      d = b;\n      b = d;\n      d = c;\n      c = (c + (b / 2)) | 0;\n    }\n    if (c > b) {\n      d = c;\n      c = b;\n      b = d;\n      d = (d + (a / 2)) | 0;\n    }\n    if (d > a) {\n      d = a;\n      a = d;\n      d = c;\n      c = (c + (d / 2)\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7p_i6g4a.ts(110,1): error TS1005: ')' expected.\n../../../../tmp/tmp7p_i6g4a.ts(123,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_2fs8t3a.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp_2fs8t3a.js:15:27)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpahwtpe7m.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpahwtpe7m.js:11:27)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n    at median (/tmp/tmpahwtpe7m.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  }\n  const mid = Math.floor(l.length / 2)\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpaw7kskj1.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpaw7kskj1.js:11:20)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n    at median (/tmp/tmpaw7kskj1.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = len / 2;\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n  return (right - left) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjt3zzp42.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjt3zzp42.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return median(l[middle - 1]) < medianValue ? median(l[middle - 1]) : medianValue;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwc46mzvg.ts(17,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpwc46mzvg.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpwc46mzvg.ts(18,55): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return median1 + median2 > 0 ? median1 + median2 : median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmb3azc_9.js:23:12)\n    at Object.<anonymous> (/tmp/tmpmb3azc_9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid-1] + sorted[mid+1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpse1bqk1i.js:20:12)\n    at Object.<anonymous> (/tmp/tmpse1bqk1i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpx91aia6l.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpx91aia6l.js:11:27)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lhk3jsf.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lhk3jsf.js:11:20)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpnp10bc4l.js:22:12)\n    at Object.<anonymous> (/tmp/tmpnp10bc4l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.ceil((right - left) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpoiyp74nd.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpoiyp74nd.js:14:27)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n    at median (/tmp/tmpoiyp74nd.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0ld4pf66.js:8\n        throw new Error(\"Cannot calculate median of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty list.\n    at median (/tmp/tmp0ld4pf66.js:8:15)\n    at median (/tmp/tmp0ld4pf66.js:14:18)\n    at median (/tmp/tmp0ld4pf66.js:14:18)\n    at median (/tmp/tmp0ld4pf66.js:15:19)\n    at test (/tmp/tmp0ld4pf66.js:21:22)\n    at Object.<anonymous> (/tmp/tmp0ld4pf66.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpzg124nkx.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpzg124nkx.js:8:15)\n    at median (/tmp/tmpzg124nkx.js:14:18)\n    at median (/tmp/tmpzg124nkx.js:14:18)\n    at median (/tmp/tmpzg124nkx.js:15:19)\n    at test (/tmp/tmpzg124nkx.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzg124nkx.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 === mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6klcm47w.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp6klcm47w.js:14:27)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n    at median (/tmp/tmp6klcm47w.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpu10c5xly.js:20:12)\n    at Object.<anonymous> (/tmp/tmpu10c5xly.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvs7dd44i.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvs7dd44i.js:11:20)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpzr5upc_8.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzr5upc_8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[sorted.length / 2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_uheb01z.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_uheb01z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor((n - 1) / 2);\n  if (l[mid] < l[mid+1]) {\n    return median(l[mid]);\n  }\n  return median(l[mid+1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvokwnzjt.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpvokwnzjt.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdy4umrb_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdy4umrb_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1xyq91mf.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp1xyq91mf.js:14:27)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    throw new Error(\"Cannot calculate median of an list of length 0\");\n  }\n  if (mid === 1) {\n    return l[0];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph6n4glw4.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmph6n4glw4.js:8:15)\n    at median (/tmp/tmph6n4glw4.js:18:24)\n    at median (/tmp/tmph6n4glw4.js:18:24)\n    at median (/tmp/tmph6n4glw4.js:19:25)\n    at test (/tmp/tmph6n4glw4.js:25:22)\n    at Object.<anonymous> (/tmp/tmph6n4glw4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  }\n  const mid = l.length / 2\n  const left = median(l.slice(0, mid))\n  const right = median(l.slice(mid))\n  return left + Math.abs(right - left) / 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxr0ujq4e.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpxr0ujq4e.js:11:27)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n    at median (/tmp/tmpxr0ujq4e.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    throw new Error(\"median: list too short\");\n  }\n  if (n === 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp88oe9bw3.js:9\n        throw new Error(\"median: list too short\");\n        ^\n\nError: median: list too short\n    at median (/tmp/tmp88oe9bw3.js:9:15)\n    at median (/tmp/tmp88oe9bw3.js:17:12)\n    at median (/tmp/tmp88oe9bw3.js:17:27)\n    at test (/tmp/tmp88oe9bw3.js:22:22)\n    at Object.<anonymous> (/tmp/tmp88oe9bw3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_2fs8t3a.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp_2fs8t3a.js:15:27)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 === mid ? Math.min(left, right) : Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa4cu6muy.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpa4cu6muy.js:11:27)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n    at median (/tmp/tmpa4cu6muy.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjwono8ff.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpjwono8ff.js:11:20)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  let left = l[mid];\n  let right = l[mid];\n  for (let i = 0; i < mid; i++) {\n    if (l[i] > right) {\n      right = l[i];\n    }\n  }\n  for (let i = mid; i < l.length; i++) {\n    if (l[i] > left) {\n      left = l[i];\n    }\n  }\n  return left + (right - left) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjqaybzdt.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjqaybzdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpyjvdhut2.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyjvdhut2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpzwi3d3rj.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpzwi3d3rj.js:8:15)\n    at median (/tmp/tmpzwi3d3rj.js:15:18)\n    at median (/tmp/tmpzwi3d3rj.js:15:18)\n    at median (/tmp/tmpzwi3d3rj.js:16:19)\n    at test (/tmp/tmpzwi3d3rj.js:22:22)\n    at Object.<anonymous> (/tmp/tmpzwi3d3rj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkjy_c9yd.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpkjy_c9yd.js:8:15)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:16:19)\n    at test (/tmp/tmpkjy_c9yd.js:22:22)\n    at Object.<anonymous> (/tmp/tmpkjy_c9yd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length % 2 === 0) {\n    return sortedList[middle];\n  }\n  return sortedList[middle - 1] + sortedList[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0b9y1_v6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0b9y1_v6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0px0vf4n.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp0px0vf4n.js:8:15)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:16:19)\n    at test (/tmp/tmp0px0vf4n.js:22:22)\n    at Object.<anonymous> (/tmp/tmp0px0vf4n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpspkxzdi3.js:22:12)\n    at Object.<anonymous> (/tmp/tmpspkxzdi3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplk9emtqa.js:21:12)\n    at Object.<anonymous> (/tmp/tmplk9emtqa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmppf0jqbr2.js:8\n        throw new Error('Cannot compute median of an empty list');\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmppf0jqbr2.js:8:15)\n    at median (/tmp/tmppf0jqbr2.js:15:18)\n    at median (/tmp/tmppf0jqbr2.js:15:18)\n    at median (/tmp/tmppf0jqbr2.js:16:19)\n    at test (/tmp/tmppf0jqbr2.js:22:22)\n    at Object.<anonymous> (/tmp/tmppf0jqbr2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return median1 + median2 > 0 ? median1 + median2 : median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpez0mjz_p.js:23:12)\n    at Object.<anonymous> (/tmp/tmpez0mjz_p.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length / 2;\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp309t0yjq.js:17:12)\n    at Object.<anonymous> (/tmp/tmp309t0yjq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_m5zdvld.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_m5zdvld.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpe2b_0d82.js:23:12)\n    at Object.<anonymous> (/tmp/tmpe2b_0d82.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    throw new Error(\"Cannot calculate median of an even list\");\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnks4hd1a.js:12\n        throw new Error(\"Cannot calculate median of an even list\");\n        ^\n\nError: Cannot calculate median of an even list\n    at median (/tmp/tmpnks4hd1a.js:12:15)\n    at test (/tmp/tmpnks4hd1a.js:22:22)\n    at Object.<anonymous> (/tmp/tmpnks4hd1a.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjwg9msi8.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjwg9msi8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const sorted: number[] = l.slice().sort((a: number, b: number) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[sorted.length / 2 - 1];\n  }\n  return sorted[(sorted.length / 2) - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpddo5zq_n.js:16:12)\n    at Object.<anonymous> (/tmp/tmpddo5zq_n.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpstr4a7vy.js:23:12)\n    at Object.<anonymous> (/tmp/tmpstr4a7vy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph4bx786d.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmph4bx786d.js:11:20)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpefbera3v.js:23:12)\n    at Object.<anonymous> (/tmp/tmpefbera3v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvr1kr3c5.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvr1kr3c5.js:14:27)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n    at median (/tmp/tmpvr1kr3c5.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[len - 1 - middle];\n  return median1 + median2 > 0 ? median2 : median1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp5i96w3t4.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5i96w3t4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length / 2;\n  let lower = l[mid];\n  let upper = l[mid];\n  for (let i = mid + 1; i < l.length; i++) {\n    if (l[i] < lower) {\n      lower = l[i];\n    }\n    if (l[i] > upper) {\n      upper = l[i];\n    }\n  }\n  return lower + (upper - lower) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprn6qbb22.js:25:12)\n    at Object.<anonymous> (/tmp/tmprn6qbb22.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  let mid = l.length / 2;\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp309t0yjq.js:17:12)\n    at Object.<anonymous> (/tmp/tmp309t0yjq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprub2yd_o.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmprub2yd_o.js:11:27)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpwmq363bm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwmq363bm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpr04a9u99.js:21:12)\n    at Object.<anonymous> (/tmp/tmpr04a9u99.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2];\n  }\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmplckyw7j_.js:21:12)\n    at Object.<anonymous> (/tmp/tmplckyw7j_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmc82txrz.js:21:12)\n    at Object.<anonymous> (/tmp/tmpmc82txrz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpmk7_crqh.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpmk7_crqh.js:8:15)\n    at median (/tmp/tmpmk7_crqh.js:15:18)\n    at median (/tmp/tmpmk7_crqh.js:15:18)\n    at median (/tmp/tmpmk7_crqh.js:16:19)\n    at test (/tmp/tmpmk7_crqh.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmk7_crqh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[mid];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue + leftMedian + rightMedian;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbg17xtze.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpbg17xtze.js:8:15)\n    at median (/tmp/tmpbg17xtze.js:15:24)\n    at median (/tmp/tmpbg17xtze.js:15:24)\n    at median (/tmp/tmpbg17xtze.js:15:24)\n    at test (/tmp/tmpbg17xtze.js:22:22)\n    at Object.<anonymous> (/tmp/tmpbg17xtze.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpumm67sti.js:17:12)\n    at Object.<anonymous> (/tmp/tmpumm67sti.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5bqiszb8.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5bqiszb8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) return NaN;\n  if (n === 1) return l[0];\n  if (n === 2) return Math.max(...l);\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.max(...l.slice(mid).map(v => v - right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpy1oie4cq.js:22:12)\n    at Object.<anonymous> (/tmp/tmpy1oie4cq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3r53i2qc.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp3r53i2qc.js:11:20)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const sorted: number[] = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  return sorted[len / 2 - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpbqhdlm71.js:17:12)\n    at Object.<anonymous> (/tmp/tmpbqhdlm71.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n === 1) return l[0]\n  if (n === 2) return (l[0] + l[1]) / 2\n  const mid = n >> 1\n  const a = median(l.slice(0, mid))\n  const b = median(l.slice(mid))\n  return ((a + b) / 2) | 0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp39l831lu.js:22:12)\n    at Object.<anonymous> (/tmp/tmp39l831lu.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpxbftvwqn.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpxbftvwqn.js:8:15)\n    at median (/tmp/tmpxbftvwqn.js:16:28)\n    at median (/tmp/tmpxbftvwqn.js:16:28)\n    at median (/tmp/tmpxbftvwqn.js:17:26)\n    at test (/tmp/tmpxbftvwqn.js:23:22)\n    at Object.<anonymous> (/tmp/tmpxbftvwqn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 0,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const half = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[half];\n  }\n  return (l[half - 1] + l[half]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0px0vf4n.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp0px0vf4n.js:8:15)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:16:19)\n    at test (/tmp/tmp0px0vf4n.js:22:22)\n    at Object.<anonymous> (/tmp/tmp0px0vf4n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let mid = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  if (sorted[mid] >= sorted[mid - 1]) {\n    return sorted[mid];\n  }\n  return sorted[mid - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp518uuehb.js:23:12)\n    at Object.<anonymous> (/tmp/tmp518uuehb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp17c05coz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp17c05coz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[(sorted.length / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpafnrqfok.js:19:12)\n    at Object.<anonymous> (/tmp/tmpafnrqfok.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid + 1, l.length));\n  return medianValue + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpwsdviac6.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwsdviac6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpr3x18y2s.js:21:12)\n    at Object.<anonymous> (/tmp/tmpr3x18y2s.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmplk9emtqa.js:21:12)\n    at Object.<anonymous> (/tmp/tmplk9emtqa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp80jt7udr.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmp80jt7udr.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmp80jt7udr.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n  return (right - left) / 2 + left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp3rnuwr9g.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3rnuwr9g.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334908
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length % 2 === 0) {\n    return sortedList[mid];\n  }\n  return sortedList[mid - 1] + sortedList[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp6b1uo_6o.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6b1uo_6o.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334908
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[middle - 1];\n  }\n  if (middle === 2) {\n    return Math.max(...l);\n  }\n  const medianValue = l[middle];\n  const leftMedian = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return medianValue + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp12hmgvtt.js:28:12)\n    at Object.<anonymous> (/tmp/tmp12hmgvtt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334908
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9igxdy5w.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9igxdy5w.js:8:15)\n    at median (/tmp/tmp9igxdy5w.js:15:18)\n    at median (/tmp/tmp9igxdy5w.js:15:18)\n    at median (/tmp/tmp9igxdy5w.js:16:19)\n    at test (/tmp/tmp9igxdy5w.js:22:22)\n    at Object.<anonymous> (/tmp/tmp9igxdy5w.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l);\n  const right = median(l.slice(mid + 1));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpshi595w4.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmpshi595w4.js:7:11)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n    at median (/tmp/tmpshi595w4.js:14:18)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp15bdinr0.js:22:12)\n    at Object.<anonymous> (/tmp/tmp15bdinr0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid - 1] + l[mid - 2];\n  }\n  return l[mid - 1] + median(l[mid]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyackvqv_.ts(17,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpofoet3e5.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpofoet3e5.js:8:15)\n    at median (/tmp/tmpofoet3e5.js:15:18)\n    at median (/tmp/tmpofoet3e5.js:15:18)\n    at median (/tmp/tmpofoet3e5.js:16:19)\n    at test (/tmp/tmpofoet3e5.js:22:22)\n    at Object.<anonymous> (/tmp/tmpofoet3e5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const sortedArr = l.slice().sort((a, b) => a - b);\n  const len = sortedArr.length;\n  if (len % 2 === 0) {\n    return sortedArr[len / 2 - 1];\n  }\n  return sortedArr[len / 2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpxxqb0fhs.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxxqb0fhs.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2] as number;\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle] + (sorted[middle + 1] as number) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp9iuon1sq.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9iuon1sq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0px0vf4n.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp0px0vf4n.js:8:15)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:16:19)\n    at test (/tmp/tmp0px0vf4n.js:22:22)\n    at Object.<anonymous> (/tmp/tmp0px0vf4n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length % 2 === 0) {\n    return sortedList[mid];\n  }\n  return sortedList[mid - 1] + sortedList[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp6b1uo_6o.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6b1uo_6o.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334908
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2] as number;\n  }\n  const middle = len / 2;\n  const left = sorted[middle];\n  const right = sorted[middle + 1];\n  return (right - left) / 2 + left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpl8prbw1n.js:23:12)\n    at Object.<anonymous> (/tmp/tmpl8prbw1n.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return l.slice(0, middle).concat([medianValue]).concat(l.slice(middle + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwucvggz1.ts(17,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpwucvggz1.ts(18,3): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) {\n    return l[0]\n  }\n  const mid = Math.floor(n / 2)\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right) / 2.0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6.125\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp941yf9be.js:19:12)\n    at Object.<anonymous> (/tmp/tmp941yf9be.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6.125,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n === 1) return l[0]\n  if (n === 2) return (l[0] + l[1]) / 2\n  const mid = n >> 1\n  const a = median(l.slice(0, mid))\n  const b = median(l.slice(mid))\n  return (a + b) / 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpobw7dn18.js:22:12)\n    at Object.<anonymous> (/tmp/tmpobw7dn18.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpzo_8s7tb.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpzo_8s7tb.js:8:15)\n    at median (/tmp/tmpzo_8s7tb.js:14:18)\n    at median (/tmp/tmpzo_8s7tb.js:14:18)\n    at median (/tmp/tmpzo_8s7tb.js:15:19)\n    at test (/tmp/tmpzo_8s7tb.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzo_8s7tb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? Math.round((left + right) / 2) : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkvdvhhbu.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpkvdvhhbu.js:11:27)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n    at median (/tmp/tmpkvdvhhbu.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[0];\n  }\n  if (mid === 1) {\n    return l[mid - 1];\n  }\n  const median1 = median(l.slice(0, mid));\n  const median2 = median(l.slice(mid));\n  return median1 + median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpuk_q2pnc.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpuk_q2pnc.js:8:15)\n    at median (/tmp/tmpuk_q2pnc.js:17:21)\n    at median (/tmp/tmpuk_q2pnc.js:17:21)\n    at median (/tmp/tmpuk_q2pnc.js:18:21)\n    at test (/tmp/tmpuk_q2pnc.js:24:22)\n    at Object.<anonymous> (/tmp/tmpuk_q2pnc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp101cdxmd.js:22:12)\n    at Object.<anonymous> (/tmp/tmp101cdxmd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpd4s6bi2u.js:8\n        throw new Error(\"Cannot calculate median of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty list.\n    at median (/tmp/tmpd4s6bi2u.js:8:15)\n    at median (/tmp/tmpd4s6bi2u.js:14:18)\n    at median (/tmp/tmpd4s6bi2u.js:14:18)\n    at median (/tmp/tmpd4s6bi2u.js:15:19)\n    at test (/tmp/tmpd4s6bi2u.js:21:22)\n    at Object.<anonymous> (/tmp/tmpd4s6bi2u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate median of an empty list');\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = l[mid];\n  const right = l[mid + 1];\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpvlfhmod5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvlfhmod5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2];\n  }\n  const middle = sorted.length / 2;\n  const left = sorted[middle];\n  const right = sorted[middle + 1];\n  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpot1dlo07.js:22:12)\n    at Object.<anonymous> (/tmp/tmpot1dlo07.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2];\n  }\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpt2f3gpmw.js:20:12)\n    at Object.<anonymous> (/tmp/tmpt2f3gpmw.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp__nnmtv5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp__nnmtv5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp97_mqtdi.js:17:12)\n    at Object.<anonymous> (/tmp/tmp97_mqtdi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjwono8ff.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpjwono8ff.js:11:20)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp3xp596je.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3xp596je.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const half = n / 2\n  const left = l.slice(0, half)\n  const right = l.slice(half)\n  return median(left) + median(right) / 2.0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6.125\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj4jogpeb.js:18:12)\n    at Object.<anonymous> (/tmp/tmpj4jogpeb.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6.125,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpfkt7eecr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfkt7eecr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp8gw3folm.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8gw3folm.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp1380o_ob.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1380o_ob.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334911
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpp2orx101.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpp2orx101.js:14:27)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpo6jloe62.js:22:12)\n    at Object.<anonymous> (/tmp/tmpo6jloe62.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334911
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3owz948z.js:15\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp3owz948z.js:15:27)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n    at median (/tmp/tmp3owz948z.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334911
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsp25x6tm.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpsp25x6tm.js:8:15)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:15:19)\n    at test (/tmp/tmpsp25x6tm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsp25x6tm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjwono8ff.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpjwono8ff.js:11:20)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpzr5upc_8.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzr5upc_8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp101cdxmd.js:22:12)\n    at Object.<anonymous> (/tmp/tmp101cdxmd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  }\n  const mid = l.length / 2\n  const left = median(l.slice(0, mid))\n  const right = median(l.slice(mid))\n  return Math.max(left, right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpymwt79nt.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpymwt79nt.js:11:27)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n    at median (/tmp/tmpymwt79nt.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334911
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp17c05coz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp17c05coz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l);\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp45_3s0mq.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmp45_3s0mq.js:7:11)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n    at median (/tmp/tmp45_3s0mq.js:14:18)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334911
    }
  ]
}