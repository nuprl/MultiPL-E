name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n\
  // [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum\
    \ += array[i];\n  }\n  if (sum % 2 === 1) {\n    array.sort((a, b) => a - b);\n\
    \  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", " \
    \ if (array.length === 0) {\n    return array;\n  }\n  const sum = array.reduce((prev,\
    \ curr) => prev + curr, 0);\n  if (sum % 2 === 0) {\n    array.sort((a, b) =>\
    \ a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum +=\
    \ array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n \
    \ } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  if\
    \ (array.length === 0) {\n    return array;\n  }\n  const sum = (array[0] + array[array.length\
    \ - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n\
    \    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum\
    \ % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  const len = array.length;\n  if\
    \ (len === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex] = getFirstAndLastIndex(array);\n\
    \  const [firstSum, lastSum] = getSumAndSum(array, firstIndex, lastIndex);\n \
    \ if (firstSum % 2 === 1) {\n    return array.sort((a, b) => a - b);\n  }\n  return\
    \ array.sort((a, b) => b - a);\n}\n", "  const len = array.length;\n  if (len\
    \ === 0) {\n    return array;\n  }\n  const sum = (array[0] + array[len - 1]);\n\
    \  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  const len = array.length;\n  if\
    \ (len === 0) {\n    return array;\n  }\n  const sum = (array[0] + array[len -\
    \ 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n\
    \    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum\
    \ % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  const sum = (first: number, last:\
    \ number) => first + last;\n  const isOdd = (first: number, last: number) => sum(0,\
    \ last) % 2 === 1;\n  const isEven = (first: number, last: number) => sum(0, last)\
    \ % 2 === 0;\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b)\
    \ => {\n    if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b))\
    \ {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedArray;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const sum = (array[0]\
    \ + array[array.length - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) =>\
    \ a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex,\
    \ lastIndex] = array.sort((a, b) => a - b);\n  return [...array.slice(0, firstIndex),\
    \ ...array.slice(firstIndex, lastIndex), ...array.slice(lastIndex)];\n}\n", " \
    \ const sum = array.reduce((acc, val) => acc + val, 0);\n  if (sum % 2 === 1)\
    \ {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a,\
    \ b) => b - a);\n  }\n}\n", "  if (array.length === 0) {\n    return array;\n\
    \  }\n\n  const [firstIndex, lastIndex] = array.sort((a, b) => a - b);\n  const\
    \ isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd ? array.sort((a,\
    \ b) => a - b) : array.sort((a, b) => b - a);\n}\n", "  if (array.length === 0)\
    \ {\n    return array;\n  }\n  const [firstIndex, lastIndex] = array.sort((a,\
    \ b) => a - b);\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return\
    \ isOdd ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
    \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n \
    \   array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex] = array.sort((a,\
    \ b) => a - b);\n  if (firstIndex === lastIndex) {\n    return array;\n  }\n \
    \ const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd ? array.sort((a,\
    \ b) => a - b) : array.sort((a, b) => b - a);\n}\n", "  const len = array.length;\n\
    \  if (len === 0) {\n    return array;\n  }\n  const sum = (array[0] + array[len\
    \ - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n\
    \    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  const len =\
    \ array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum = (array[0]\
    \ + array[len - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n\
    \  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", " \
    \ const sum = (first: number, last: number) => first + last;\n  const isOdd =\
    \ (first: number, last: number) => sum(0, last) % 2 === 1;\n  const isEven = (first:\
    \ number, last: number) => sum(0, last) % 2 === 0;\n  const sortedArray = array.slice().sort((a,\
    \ b) => isOdd(a, b) ? -1 : isEven(a, b) ? 1 : 0);\n  return sortedArray;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
