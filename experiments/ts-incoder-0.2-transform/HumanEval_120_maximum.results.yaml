language: ts
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max =\
    \ arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpr0_i44ak.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr0_i44ak.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let maxArr = [];\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > maxArr[maxIndex]) {\n      maxArr[maxIndex] = arr[i];\n\
    \      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    maxArr.push(arr[i]);\n\
    \  }\n  return maxArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpqdz_sg6u.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqdz_sg6u.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (k > arr.length)\
    \ {\n    return arr;\n  }\n  let maxArr = [];\n  let maxIndex = -1;\n  for (let\
    \ i = 0; i < k; i++) {\n    let index = arr.indexOf(Math.max(...arr));\n    if\
    \ (index > maxIndex) {\n      maxIndex = index;\n      maxArr = [Math.max(...arr)];\n\
    \    } else {\n      maxArr.push(Math.max(...arr));\n    }\n  }\n  return maxArr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpaltmyx3_.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaltmyx3_.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let max: number[] = [];\n  for (let i = 0; i < k; i++) {\n   \
    \ let maxElement = arr[i];\n    for (let j = i + 1; j < arr.length; j++) {\n \
    \     if (arr[j] > maxElement) {\n        maxElement = arr[j];\n      }\n    }\n\
    \    max.push(maxElement);\n  }\n  return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_rx3kza6.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_rx3kza6.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  let i:\
    \ number;\n  let j: number;\n  for (i = 0; i < k; i++) {\n    max = Math.max(max,\
    \ arr[i]);\n  }\n  for (i = 0; i < k; i++) {\n    for (j = i + 1; j < k; j++)\
    \ {\n      if (arr[i] > arr[j]) {\n        max = Math.max(max, arr[i]);\n    \
    \    break;\n      }\n    }\n  }\n  for (i = 0; i < k; i++) {\n    result.push(max);\n\
    \    max = Math.max(max, arr[i]);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpj2r0c7ts.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj2r0c7ts.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n\
    \    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a\
    \ - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpd61qnx36.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd61qnx36.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i =\
    \ 0; i < k; i++) {\n    if (arr[i] > max) {\n      result.push(max);\n      max\
    \ = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpbl2a6xod.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbl2a6xod.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n\
    \    let i: number;\n    let j: number;\n    let maxIndex: number = 0;\n    for\
    \ (i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            maxIndex = i;\n        }\n    }\n    for (j = 0; j <\
    \ arr.length; j++) {\n        if (arr[j] === max) {\n            result.push(arr[j]);\n\
    \        }\n    }\n    if (result.length < k) {\n        for (j = result.length;\
    \ j > k; j--) {\n            result.push(result[j - 1]);\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp015tl0uk.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp015tl0uk.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] > k) {\n     \
    \ result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpxhiqmbr9.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxhiqmbr9.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max =\
    \ arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > max && arr[i] % k === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpbgsh3sv8.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbgsh3sv8.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let max: number[] = [];\n  for (let i = 0; i < k; i++) {\n   \
    \ let maxElement = arr[i];\n    for (let j = i + 1; j < arr.length; j++) {\n \
    \     if (arr[j] > maxElement) {\n        maxElement = arr[j];\n      }\n    }\n\
    \    max.push(maxElement);\n  }\n  return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_rx3kza6.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_rx3kza6.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let maxArr = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(arr[i]);\n\
    \  }\n  for (let i = k; i < arr.length; i++) {\n    maxArr.push(arr[i]);\n  }\n\
    \  return maxArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp3zyso2mj.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3zyso2mj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (maxIndex.length < k)\
    \ {\n            max.push(arr[i]);\n            maxIndex.push(i);\n        } else\
    \ if (arr[i] > max[k - maxIndex.length]) {\n            max.push(arr[i]);\n  \
    \          maxIndex.push(i);\n        }\n    }\n    return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpe21g3f9m.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe21g3f9m.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n\
    \    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max)\
    \ {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a\
    \ - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpd61qnx36.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd61qnx36.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] >= k) {\n    \
    \  result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpd46qijj3.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd46qijj3.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i =\
    \ 0; i < k; i++) {\n    if (arr[i] === max) {\n      result.push(max);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_23zx9o7.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_23zx9o7.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      result.push(max);\n\
    \      max = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpj8ho74i5.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj8ho74i5.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] >= k) {\n    \
    \  result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpd46qijj3.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd46qijj3.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (k > arr.length)\
    \ {\n    return arr;\n  }\n  const maxArr = [];\n  let maxValue = arr[0];\n  for\
    \ (let i = 1; i < k; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n\
    \    }\n  }\n  maxArr.push(maxValue);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n    maxArr.push(maxValue);\n\
    \  }\n  return maxArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp05g58r_m.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp05g58r_m.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738492
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number):\
    \ number[] {\n  let result = [];\n  for (let i = 0; i < k; i++) {\n    let max\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpchd0dcxo.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpchd0dcxo.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738493
