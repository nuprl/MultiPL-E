name: HumanEval_15_string_sequence
language: ts
prompt: "//Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
  // \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"\
  0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"
completions: ["  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n\
    }\n", "  return Array.from({length: n}, (_, i) => i + 1).join(' ');\n}\n", " \
    \ return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).replace(/^0/g,\
    \ \"\").replace(/\\s{2,}/g, \" \");\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).replace(/./g,\
    \ function(c: number) {\n    return String.fromCharCode(c * 64 + 48);\n  });\n\
    }\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(function(_, i) { return i.toString(); }).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(function(_, i) { return i.toString(); });\n\
    }\n", "  return Array(n + 1).join(0).split('').join(' ');\n}\n", "  return Array.from({length:\
    \ n}, (_, i) => i).join(\" \");\n}\n", "  return Array(n + 1).join(0).split('');\n\
    }\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n",
  "  return Array(n + 1).join(0).split('').map(function(_, i) {\n    return i;\n \
    \ }).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).split('').map(function (_, i) { return\
    \ String(i); });\n}\n", "  return Array.from({length: n}, (_, i) => i + 1).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).replace(/^0/g, \"\").replace(/\\s$/,\
    \ \"\");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array(n + 1).join(0).split('').map(function(_, i) { return i.toString();\
    \ }).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(function\
    \ (_, i) { return i.toString(); }).join(' ');\n}\n", "  return Array.from({length:\
    \ n}, (_, i) => i).join(\" \");\n}\n", "  return Array.from({length: n}, (_, i)\
    \ => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).split('').join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(function(_, i) {\n    return i;\n  }).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(\" \");\n}\n", "  return Array(n +\
    \ 1).join(0).split('').join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(function\
    \ (_, i) { return i.toString(); }).join(' ');\n}\n", "  return Array.from({length:\
    \ n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(String).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).replace(/^0*/, \"\");\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).replace(/^0+/, \"\");\n}\n", "  return\
    \ Array.from({length: n}).map((_, i) => i.toString()).join(\" \");\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(function (_, i) { return i.toString(); }).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(String).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).split('').join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}).map((_, i) => i).join(\" \");\n}\n", "  return Array(n\
    \ + 1).join(0).split('').map(function(_, i) { return String(i); });\n}\n", " \
    \ return Array(n + 1).join(0).replace(/^0*/, \"\").replace(/[^ ]+/g, \" \");\n\
    }\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array(n + 1).join(0).split('').map(i => i + 1).join(' ');\n}\n", "  return Array.from({length:\
    \ n}, (_, i) => i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).split('').join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).replace(/[0-9]/g,\
    \ function(x) { return x + 1; });\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n",
  "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n", "  return Array(n\
    \ + 1).join(0).split('').join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(function(_,\
    \ i) {\n    return i + 1;\n  }).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n",
  "  return Array(n + 1).join(0).replace(/[^\\d]/g, ' ');\n}\n", "  return Array(n\
    \ + 1).join(0).replace(/\\n/g, \" \");\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array(n + 1).join(0).split('').map(i => i + 1).join(' ');\n\
    }\n", "  return Array(n + 1).join(0).split('').join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array(n + 1).join(0).split('').map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(\" \");\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(\" \");\n}\n",
  "  return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", "  return\
    \ Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
