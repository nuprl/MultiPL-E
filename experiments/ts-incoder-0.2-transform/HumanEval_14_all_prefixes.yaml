name: HumanEval_14_all_prefixes
language: ts
prompt: "//Return list of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
  \ string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
  \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"\
  WWW\"]);\n}\n\ntest();"
completions: ["  const prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n",
  "  const prefixes: string[] = [];\n  for (let i = 0; i < string.length; i++) {\n\
    \    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "  const\
    \ prefixes: string[] = [];\n  let i = 0;\n  while (i < string.length) {\n    prefixes.push(string.substr(i,\
    \ string.length));\n    i += 1;\n  }\n  return prefixes;\n}\n", "    const prefixes:\
    \ string[] = [];\n    let prefix = '';\n    for (let i = 0; i < string.length;\
    \ i++) {\n        prefix += string[i];\n        if (string[i] === string[0]) {\n\
    \            prefixes.push(prefix);\n            prefix = '';\n        }\n   \
    \ }\n    return prefixes;\n}\n", "  const prefixes: string[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i));\n \
    \ }\n  return prefixes;\n}\n", "  const prefixes: string[] = [];\n  let prefix\
    \ = \"\";\n  for (let i = 0; i < string.length; i++) {\n    prefix = prefix +\
    \ string[i];\n    if (string[i] === string[0]) {\n      prefixes.push(prefix);\n\
    \      prefix = \"\";\n    }\n  }\n  return prefixes;\n}\n", "  const prefixes\
    \ = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n   \
    \ if (string[i] === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n\
    \    } else {\n      prefix += string[i];\n    }\n  }\n  prefixes.push(prefix);\n\
    \  return prefixes;\n}\n", "    const prefixes: string[] = [];\n    let prefix\
    \ = '';\n    for (let i = 0; i < string.length; i++) {\n        prefix += string[i];\n\
    \        if (string[i] === string[0]) {\n            prefixes.push(prefix);\n\
    \            prefix = '';\n        }\n    }\n    return prefixes;\n}\n", "   \
    \ const prefixes: string[] = [];\n    let current: string = string;\n    while\
    \ (current !== \"\") {\n        current = current.substring(0, current.length\
    \ - 1);\n        prefixes.unshift(current);\n    }\n    return prefixes;\n}\n",
  "    const prefixes = [];\n    let prefix = '';\n    for (let i = 0; i < string.length;\
    \ i++) {\n        prefix += string[i];\n        if (string[i] === string[0]) {\n\
    \            prefixes.push(prefix);\n            prefix = '';\n        }\n   \
    \ }\n    return prefixes;\n}\n", "  const prefixes = [];\n  let prefix = '';\n\
    \  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n  \
    \  if (char === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n\
    \    } else {\n      prefix += char;\n    }\n  }\n  prefixes.push(prefix);\n \
    \ return prefixes;\n}\n", "  const prefixes = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n",
  "    const prefixes = [];\n    let current = '';\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === current) {\n            prefixes.push(current);\n\
    \            current = '';\n        } else {\n            current += string[i];\n\
    \        }\n    }\n    prefixes.push(current);\n    return prefixes;\n}\n", " \
    \ const prefixes: string[] = [];\n  let i = 0;\n  while (i < string.length) {\n\
    \    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n\
    \      prefixes.push(char);\n      i++;\n    } else {\n      prefixes.push(char.toUpperCase());\n\
    \      i++;\n    }\n  }\n  return prefixes;\n}\n", "  const prefixes: string[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0,\
    \ i));\n  }\n  return prefixes;\n}\n", "  const prefixes: string[] = [];\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i);\n\
    \    prefixes.push(prefix);\n  }\n  return prefixes;\n}\n", "  let prefixes: string[]\
    \ = [];\n  let prefix_length = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    if (string[i] === string[0]) {\n      prefix_length++;\n    } else {\n  \
    \    prefixes.push(string.substr(0, prefix_length));\n      prefix_length = 0;\n\
    \    }\n  }\n  prefixes.push(string.substr(0, prefix_length));\n  return prefixes;\n\
    }\n", "    const prefixes = [];\n    let prefix = '';\n    for (let i = 0; i <\
    \ string.length; i++) {\n        if (string[i] === string[0]) {\n            prefix\
    \ = prefix + string[i];\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix = string[i];\n        }\n    }\n    prefixes.push(prefix);\n\
    \    return prefixes;\n}\n", "  const prefixes = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n",
  "  const prefixes: string[] = [];\n  let prefix = \"\";\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    \
    \  prefix = \"\";\n    } else {\n      prefix += string[i];\n    }\n  }\n  prefixes.push(prefix);\n\
    \  return prefixes;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
