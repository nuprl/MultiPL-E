name: HumanEval_75_is_multiply_prime
language: ts
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  function is_multiply_prime(a: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n\
  \  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n\
  \  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n\
  \  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n\
  \  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n\
  \  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"
completions: ["\tlet prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \tlet is_multiply = false;\n\tfor (let i = 0; i < prime_numbers.length; i++) {\n\
    \t\tif (a % prime_numbers[i] == 0) {\n\t\t\tis_multiply = true;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn is_multiply;\n}\n", "    let prime_numbers: number[] = [];\n\
    \    let is_multiply = false;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n\
    \        if (a % i === 0) {\n            prime_numbers.push(i);\n        }\n \
    \   }\n    for (let i = 0; i < prime_numbers.length; i++) {\n        if (prime_numbers[i]\
    \ === prime_numbers[i - 1]) {\n            is_multiply = true;\n        }\n  \
    \  }\n    return is_multiply;\n}\n", "    if (a < 100) {\n        return false;\n\
    \    }\n    let primes: number[] = [];\n    for (let i = 2; i < Math.sqrt(a);\
    \ i++) {\n        if (a % i === 0) {\n            primes.push(i);\n        }\n\
    \    }\n    for (let i = 0; i < primes.length; i++) {\n        if (primes[i] ===\
    \ a) {\n            return true;\n        }\n    }\n    return false;\n}\n", " \
    \   let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < primes.length;\
    \ i++) {\n        if (a%primes[i] === 0) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n", "  if(a<100){\n    return false;\n  }\n \
    \ for(let i=2;i<=Math.sqrt(a);i++){\n    if(a%i==0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n", "    let prime_numbers = prime_numbers_array;\n\
    \    let is_multiply_prime = false;\n    for (let i = 0; i < prime_numbers.length;\
    \ i++) {\n        if (a % prime_numbers[i] == 0) {\n            is_multiply_prime\
    \ = true;\n            break;\n        }\n    }\n    return is_multiply_prime;\n\
    }\n", "  if(a<100){\n    return false;\n  }\n  let prime_numbers:number[] = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \  for(let i=0;i<prime_numbers.length;i++){\n    if(a%prime_numbers[i]==0){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "    let prime_numbers\
    \ = prime_numbers_array;\n    let prime_number_array = [];\n    for (let i = 0;\
    \ i < prime_numbers.length; i++) {\n        prime_number_array.push(prime_numbers[i]);\n\
    \    }\n    let multiply_numbers = prime_number_array.filter(function(el) {\n\
    \        return el % a === 0;\n    });\n    return multiply_numbers.length <=\
    \ 3;\n}\n", "  if(a<100){\n    return false\n  }\n  \n  let prime_array = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \  \n  for(let i=0;i<prime_array.length;i++){\n    for(let j=i+1;j<prime_array.length;j++){\n\
    \      if(prime_array[i]*prime_array[j]===a){\n        return true\n      }\n\
    \    }\n  }\n  return false\n}\n", "  let prime_numbers = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \  for (let i = 0; i < prime_numbers.length; i++) {\n    if (a % prime_numbers[i]\
    \ === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    let prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    for (let i = 0; i < prime_numbers.length; i++) {\n\
    \        if (a%prime_numbers[i] === 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    if (a < 100) {\n        return false;\n \
    \   }\n    let primes: number[] = [];\n    for (let i = 2; i <= Math.sqrt(a);\
    \ i++) {\n        if (a % i === 0) {\n            return false;\n        }\n \
    \   }\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n        if (a % i === 0)\
    \ {\n            primes.push(i);\n        }\n    }\n    for (let i = primes.length\
    \ - 1; i >= 0; i--) {\n        if (a % primes[i] === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "\tlet b: number[] = [];\n\
    \tlet c: number[] = [];\n\tlet d: number[] = [];\n\tlet e: number[] = [];\n\t\
    let f: number[] = [];\n\tlet g: number[] = [];\n\tlet h: number[] = [];\n\tlet\
    \ i: number[] = [];\n\tlet j: number[] = [];\n\tlet k: number[] = [];\n\tlet l:\
    \ number[] = [];\n\tlet m: number[] = [];\n\tlet n: number[] = [];\n\tlet o: number[]\
    \ = [];\n\tlet p: number[] = [];\n\tlet q: number[] = [];\n\tlet r: number[] =\
    \ [];\n\tlet s: number[] = [];\n\tlet t: number[] = [];\n\tlet u: number[] = [];\n\
    \tlet v: number[] = [];\n\tlet w: number[] = [];\n\tlet x: number[] = [];\n\t\
    let y: number[] = [];\n\tlet z: number[] = [];\n\tlet a: number[] = [];\n\tlet\
    \ b: number[] = [];\n\tlet c: number[] = [];\n\tlet d: number[] = [];\n\tlet e:\
    \ number[] = [];\n\tlet f: number[] = [];\n\tlet g: number[] = [];\n\tlet h: number[]\
    \ = [];\n\tlet i: number[] = [];\n\tlet j: number[] = [];\n\tlet k: number[] =\
    \ [];\n\tlet l: number[] = [];\n\tlet m: number[] = [];\n\tlet n: number[] = [];\n\
    \tlet o: number[] = [];\n\tlet p: number[] = [];\n\tlet q: number[] = [];\n\t\
    let r: number[] = [];\n\tlet s: number[] = [];\n\tlet t: number[] = [];\n\tlet\
    \ u: number[] = [];\n\tlet v: number[] = [];\n\tlet w: number[] = [];\n\tlet x:\
    \ number[] = [];\n\tlet y: number[] = [];\n\tlet z: number[] = [];\n\tlet a: number[]\
    \ = [];\n\tlet b: number[] = [];\n\tlet c: number[] = [];\n\tlet d: number[] =\
    \ [];\n\tlet e: number[] = [];\n\tlet f: number[] = [];\n\tlet g: number[] = [];\n\
    \tlet h: number[] = [];\n\tlet i: number[] = [];\n\tlet j: number[] = [];\n\t\
    let k: number[] = [];\n\tlet l: number[] = [];\n\tlet m: number[] = [];\n\tlet\
    \ n: number[] = [];\n\tlet o: number[] = [];\n\tlet p: number[] = [];\n\tlet q:\
    \ number[] = [];\n\tlet r: number[] = [];\n\tlet s: number[] = [];\n\tlet t: number",
  "  let prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \  let is_prime = true;\n  for (let i = 0; i < prime_numbers.length; i++) {\n\
    \    if (a % prime_numbers[i] === 0) {\n      is_prime = false;\n      break;\n\
    \    }\n  }\n  return is_prime;\n}\n", "    let prime_numbers = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    for (let i = 0; i < prime_numbers.length; i++) {\n        if (a%prime_numbers[i]\
    \ == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    let primes_length = primes.length;\n \
    \   let result = false;\n    for (let i = 0; i < primes_length; i++) {\n     \
    \   if (a%primes[i] == 0) {\n            result = true;\n            break;\n\
    \        }\n    }\n    return result;\n}\n", "    let prime_numbers = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    for (let i = 0; i < prime_numbers.length; i++) {\n        if (a%prime_numbers[i]\
    \ === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "  if(a<100) {\n    return false\n  }\n  \n  let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \  \n  for(let i=0;i<primes.length;i++) {\n    let p = primes[i]\n    for(let\
    \ j=i+1;j<primes.length;j++) {\n      if(a%p==0) {\n        return false\n   \
    \   }\n    }\n  }\n  return true\n}\n", "    let prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let prime_numbers_length = prime_numbers.length;\n    let is_multiply_prime\
    \ = false;\n    for (let i = 0; i < prime_numbers_length; i++) {\n        if (a%prime_numbers[i]\
    \ == 0) {\n            is_multiply_prime = true;\n            break;\n       \
    \ }\n    }\n    return is_multiply_prime;\n}\n", "  \n  // Write your code here\n\
    \  \n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
