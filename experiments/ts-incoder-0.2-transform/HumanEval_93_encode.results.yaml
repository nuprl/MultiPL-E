language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let nextLetter =\
    \ message[(i + 1) % (message.length)];\n            if (nextLetter === \"a\" ||\
    \ nextLetter === \"e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter\
    \ === \"u\") {\n                result += nextLetter;\n            } else {\n\
    \                let nextVowel = message[(i + 2) % (message.length)];\n      \
    \          if (nextVowel === \"a\" || nextVowel === \"e\" || nextVowel === \"\
    i\" || nextVowel === \"o\" || nextVowel === \"u\") {\n                    result\
    \ += nextVowel;\n                } else {\n                    result += letter.toUpperCase();\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgmpnxx2u.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgmpnxx2u.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n \
    \       let index = alphabet.indexOf(letter);\n        if (index != -1) {\n  \
    \          let nextIndex = index + 1;\n            if (nextIndex < alphabet.length)\
    \ {\n                let nextLetter = alphabet[nextIndex];\n                result\
    \ += nextLetter;\n            }\n        }\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n\
    \        if (index != -1) {\n            let nextIndex = index + 1;\n        \
    \    if (nextIndex < vowels.length) {\n                let nextLetter = vowels[nextIndex];\n\
    \                result += nextLetter;\n            }\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmp_s5evyx9.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_s5evyx9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        }\n        else {\n            let index\
    \ = alphabet.indexOf(letter);\n            if (index > -1) {\n               \
    \ result += alphabet[index + 2];\n            }\n            else {\n        \
    \        result += letter;\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusj4wg2i.ts(19,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpusj4wg2i.ts(21,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      result\
    \ += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1oy9pd4w.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1oy9pd4w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toUpperCase();\n        } else {\n         \
    \   let index = alphabet.indexOf(letter);\n            if (index === -1) {\n \
    \               result += letter;\n            } else {\n                result\
    \ += alphabet[index + 1];\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdv2xm4zr.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpdv2xm4zr.ts(22,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetterForVowel(letter);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpikffi77j.ts(18,17): error TS2304: Cannot find name
    ''getLetterForVowel''.

    '
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ newMessage += letter;\n    } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      newMessage\
    \ += letter.toUpperCase();\n    } else {\n      newMessage += letter;\n    }\n\
    \  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplmzx3xq6.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplmzx3xq6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toUpperCase();\n        } else {\n         \
    \   result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1icvv56f.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1icvv56f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    }\
    \ else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      newMessage += letter;\n      i++;\n\
    \    } else if (letter === \"b\" || letter === \"c\" || letter === \"d\" || letter\
    \ === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\" || letter\
    \ === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"n\" || letter\
    \ === \"p\" || letter === \"q\" || letter === \"r\" || letter === \"s\" || letter\
    \ === \"t\" || letter === \"v\" || letter === \"w\" || letter === \"x\" || letter\
    \ === \"y\" || letter === \"z\") {\n      newMessage += letter;\n      i++;\n\
    \    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnhupvehv.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnhupvehv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const letter = message[i];\n        newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    for (let i = 0; i < newMessage.length; i++)\
    \ {\n        const letter = newMessage[i];\n        const index = letter.charCodeAt(0)\
    \ - 97;\n        const letter2 = String.fromCharCode(index + 2);\n        newMessage\
    \ = newMessage.replace(letter, letter2);\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF5\uFFE6\uFFF4\
    \uFFF5'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4n74eior.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4n74eior.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF5\uFFE6\
    \uFFF4\uFFF5',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[(index + 1) % alphabet.length];\n     \
    \       result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyo5rl3p7.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpyo5rl3p7.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpyo5rl3p7.ts(19,53): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n\
    \    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13E-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpysir53ik.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpysir53ik.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13E-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 97;\n        if (index >= 0) {\n            result += letter.toUpperCase();\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyharvp15.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyharvp15.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      let nextLetter = alphabet[index + 1];\n      result += nextLetter;\n  \
    \  }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbofbu1qr.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpbofbu1qr.ts(19,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getVowel(letter);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfbt5rxf_.ts(18,17): error TS2304: Cannot find name
    ''getVowel''.

    '
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < newMessage.length;\
    \ i++) {\n    let letter = newMessage.charAt(i);\n    let nextLetter = newMessage.charAt(i\
    \ + 1);\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter,\
    \ nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqsjcwrnv.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqsjcwrnv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let vowelIndex =\
    \ alphabet.indexOf(letter);\n            let vowel = alphabet[vowelIndex + 1];\n\
    \            result += vowel;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpigt5c5pm.ts(18,30): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpigt5c5pm.ts(19,25): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      let nextLetter\
    \ = alphabet[index + 1];\n      result += nextLetter;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8_4rrfn1.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp8_4rrfn1.ts(19,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738437
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter\
    \ = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else\
    \ if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"\
    o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter\
    \ = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5j3uxyj8.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j3uxyj8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo__r3bm1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo__r3bm1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiou\";\n    const\
    \ letterIndex = vowels.indexOf(letter);\n    if (letterIndex > -1) {\n      const\
    \ vowelIndex = letterIndex + 2;\n      result += vowels[vowelIndex];\n    } else\
    \ {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoa0ew628.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoa0ew628.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ letter = letter.toUpperCase();\n    }\n    for (let j = 0; j < 2; j++) {\n \
    \     let index = alphabet.indexOf(letter);\n      if (index === -1) {\n     \
    \   result += letter;\n        break;\n      }\n      letter = alphabet[index\
    \ + 1];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7qc069rv.ts(19,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp7qc069rv.ts(24,16): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        let nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n        let nextLetterLetterLetter =\
    \ alphabet[nextLetterLetterIndex + 1];\n        result += alphabet[alphabet.indexOf(letter)\
    \ + 1] + \n            alphabet[alphabet.indexOf(letter) + 2] + \n           \
    \ alphabet[alphabet.indexOf(letter) + 3] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 4] + \n            alphabet[alphabet.indexOf(letter) + 5] + \n           \
    \ alphabet[alphabet.indexOf(letter) + 6] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 7] + \n            alphabet[alphabet.indexOf(letter) + 8] + \n           \
    \ alphabet[alphabet.indexOf(letter) + 9] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 10] + \n            alphabet[alphabet.indexOf(letter) + 11] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 12] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 13] + \n            alphabet[alphabet.indexOf(letter) + 14] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 15] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 16] + \n            alphabet[alphabet.indexOf(letter) + 17] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 18] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 19] + \n            alphabet[alphabet.indexOf(letter) + 20] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 21] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 22] + \n            alphabet[alphabet.indexOf(letter) + 23] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 24] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 25] + \n            alphabet[alphabet.indexOf(letter) + 26] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 27] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 28] + \n            alphabet[alphabet.indexOf(letter) + 29] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 30] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 31] + \n            alphabet[alphabet.indexOf(letter) + 32] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 33] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 34] + \n            alphabet[alphabet.indexOf(letter) + 35] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 36] + \n            alphabet[alphabet.indexOf(letter)\
    \ + 37] + \n            alphabet[alphabet.indexOf(letter) + 38] + \n         \
    \   alphabet[alphabet.indexOf(letter) + 39] + \n            alphabet[\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmuiva200.ts(60,9): error TS1005: '']'' expected.

    ../../../../../tmp/tmpmuiva200.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n        if (nextLetter === \"a\" || nextLetter === \"\
    e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n\
    \            result += nextLetter;\n            i++;\n        } else if (nextLetter\
    \ === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter ===\
    \ \"O\" || nextLetter === \"U\") {\n            result += nextLetter.toUpperCase();\n\
    \            i++;\n        } else {\n            result += nextLetter;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprsnmvbk1.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmprsnmvbk1.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let letterIndex = englishLetters.indexOf(letter);\n\
    \        if (letterIndex > -1) {\n            let nextLetterIndex = letterIndex\
    \ + 2;\n            if (nextLetterIndex < englishLetters.length) {\n         \
    \       let nextLetter = englishLetters[nextLetterIndex];\n                result\
    \ += nextLetter;\n            } else {\n                result += letter;\n  \
    \          }\n        } else {\n            result += letter;\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr41n9pjm.ts(15,27): error TS2304: Cannot find name
    ''englishLetters''.

    ../../../../../tmp/tmpr41n9pjm.ts(18,35): error TS2304: Cannot find name ''englishLetters''.

    ../../../../../tmp/tmpr41n9pjm.ts(19,34): error TS2304: Cannot find name ''englishLetters''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      if (index === -1) {\n        result += letter;\n      } else {\n      \
    \  result += alphabet[index + 2];\n      }\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpya8o1775.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpya8o1775.ts(22,19): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        for (let j = 0; j < alphabet.length; j++) {\n            if (alphabet.charAt(j)\
    \ == letter) {\n                newLetter = alphabet.charAt(j + 2);\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0;\
    \ i < vowels.length; i++) {\n        newMessage = newMessage.replace(vowels[i],\
    \ vowels[i + 2]);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzt684lc_.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzt684lc_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letterToSwap = letterIndex + 2;\n    if (letterToSwap > alphabet.length\
    \ - 1) {\n      letterToSwap = letterToSwap - alphabet.length;\n    }\n    newMessage\
    \ += alphabet[letterToSwap];\n  }\n  return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpck0xidvi.ts(15,23): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpck0xidvi.ts(17,24): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpck0xidvi.ts(18,37): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpck0xidvi.ts(20,19): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index != -1) {\n   \
    \         let nextLetter = vowels[index + 1];\n            result += nextLetter;\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmrpimyln.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmrpimyln.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiou\";\n    const\
    \ vowelIndex = vowels.indexOf(letter);\n    const nextVowelIndex = vowelIndex\
    \ + 2;\n    if (vowelIndex >= 0 && nextVowelIndex < vowels.length) {\n      newMessage\
    \ += vowels[vowelIndex];\n      newMessage += vowels[nextVowelIndex];\n    } else\
    \ {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0eea6kf.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0eea6kf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0)\
    \ - 65;\n    const nextLetter = message[i + 1];\n    if (index === 0 && nextLetter\
    \ === letter) {\n      result += letter;\n    } else {\n      result += String.fromCharCode(index\
    \ + 65);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpee20y87n.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpee20y87n.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ letter = letter.toUpperCase();\n    }\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[index + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq2g4w3v5.ts(18,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpq2g4w3v5.ts(22,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo__r3bm1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo__r3bm1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo__r3bm1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo__r3bm1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n\
    \        } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter\
    \ === 'O' || letter === 'U') {\n            result += letter;\n            i++;\n\
    \        } else if (letter === 'y' || letter === 'Y') {\n            result +=\
    \ letter;\n            i++;\n        } else {\n            result += nextLetter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EEundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo5vyqj6q.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo5vyqj6q.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EEundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index != -1) {\n      let nextLetter = alphabet[index + 1];\n      result\
    \ += nextLetter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkxcqa1zq.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpkxcqa1zq.ts(17,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        let nextLetterIndex = letterIndex + 2;\n        if (nextLetterIndex >\
    \ alphabet.length - 1) {\n            nextLetterIndex = 0;\n        }\n      \
    \  newMessage += alphabet[nextLetterIndex];\n    }\n    return newMessage;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe59fqi56.ts(15,27): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpe59fqi56.ts(17,31): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpe59fqi56.ts(20,23): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = english.indexOf(letter);\n\
    \        if (index > -1) {\n            let nextLetter = english[index + 1];\n\
    \            if (nextLetter === letter) {\n                result += nextLetter;\n\
    \            } else {\n                result += letter;\n            }\n    \
    \    } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpom8zkz2r.ts(15,21): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmpom8zkz2r.ts(17,30): error TS2304: Cannot find name ''english''.

    '
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += letter.charCodeAt(0)\
    \ - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0rqgz3__.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0rqgz3__.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu11t1avi.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu11t1avi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n\
    \    const nextLetterIndex = letterIndex + 2;\n    const nextLetter = englishAlphabet[nextLetterIndex];\n\
    \    newMessage += nextLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpksvyh5hc.ts(15,25): error TS2304: Cannot find name
    ''englishAlphabet''.

    ../../../../../tmp/tmpksvyh5hc.ts(17,24): error TS2304: Cannot find name ''englishAlphabet''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      let letter2\
    \ = english[index + 1];\n      result += letter2.toUpperCase();\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn58bkqvg.ts(15,17): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmpn58bkqvg.ts(19,21): error TS2304: Cannot find name ''english''.

    '
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index != -1) {\n      result += alphabet[(index + 1) % alphabet.length];\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx53hlyn_.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpx53hlyn_.ts(17,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpx53hlyn_.ts(17,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let encodedVowel = vowels[encodedLetter];\n    encodedMessage += encodedLetter\
    \ + encodedVowel;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpte335yf9.ts(16,24): error TS2304: Cannot find name
    ''vowels''.

    '
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n\
    \        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex\
    \ > -1) {\n            let vowel = encodedLetter.charAt(vowelIndex - 1);\n   \
    \         let vowel2 = encodedLetter.charAt(vowelIndex + 1);\n            encodedLetter\
    \ = vowel + vowel2;\n        }\n        encodedMessage += encodedLetter;\n   \
    \ }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,string,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1i3lzrn.ts(26,2): error TS1110: Type expected.

    ../../../../../tmp/tmpf1i3lzrn.ts(26,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpf1i3lzrn.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1i3lzrn.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpf1i3lzrn.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1i3lzrn.ts(28,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1i3lzrn.ts(28,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1i3lzrn.ts(30,9): error TS1005: '';'' expected.

    '
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getVowel(letter);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpffafezdm.ts(18,17): error TS2304: Cannot find name
    ''getVowel''.

    '
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let result: string = \"\";\n    for (let i = 0; i <\
    \ message.length; i++) {\n        let letter = message[i];\n        let index\
    \ = alphabet.indexOf(letter);\n        if (index != -1) {\n            let nextIndex\
    \ = index + 1;\n            if (nextIndex < alphabet.length) {\n             \
    \   let nextLetter = alphabet[nextIndex];\n                result += nextLetter;\n\
    \            }\n        }\n    }\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n\
    \        if (index != -1) {\n            let nextIndex = index + 2;\n        \
    \    if (nextIndex < vowels.length) {\n                let nextLetter = vowels[nextIndex];\n\
    \                result += nextLetter;\n            }\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpf5hta9fq.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf5hta9fq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let messageArray: string[] = message.split(\"\
    \");\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter: string = messageArray[i];\n        let encodedLetter:\
    \ string = \"\";\n        for (let j = 0; j < letter.length; j++) {\n        \
    \    let index: string = alphabet.indexOf(letter[j]);\n            let nextIndex:\
    \ string = alphabet.indexOf(letter[j + 1], index + 1);\n            if (index\
    \ != -1 && nextIndex != -1) {\n                encodedLetter += alphabet[index];\n\
    \                encodedLetter += alphabet[nextIndex];\n            } else {\n\
    \                encodedLetter += letter[j];\n            }\n        }\n     \
    \   encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work if the message\
    \ contains two consecutive vowels. For example, `encode(\"This is a message\"\
    )` returns `tHKS KS C MGSSCGG`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed\
    \ it. I was thinking about this problem for a while and couldn't come up with\
    \ a solution that would work for all cases. I guess I should just delete this\
    \ answer. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI deleted my answer\
    \ because I realized that my solution doesn't work for all cases. I guess I'll\
    \ leave it here in case someone else comes up with a better solution.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for all cases. I hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your solution! I really appreciate it!\n<|/ c |>\n<|\
    \ a |>\nI came up with a solution that works for all cases. I hope it helps.\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd5h0lyb9.ts(33,2): error TS1110: Type expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(33,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpd5h0lyb9.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(34,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpd5h0lyb9.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(35,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(36,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(36,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(36,138): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpd5h0lyb9.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(37,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpd5h0lyb9.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(38,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,61): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,73): error TS1005: ''('' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmpd5h0lyb9.ts(39,81): error TS1005: ''('' expected.

    ../../../../../tmp/tmpd5h0lyb9'
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n  \
    \          let nextLetter = vowels[index + 1];\n            result += nextLetter;\n\
    \        }\n        else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works? I understand that we are looping through\
    \ each character in the message, but how does this work? What is happening in\
    \ the if statement?\n<|/ c |>\n<| c |>\nThe if statement checks if the current\
    \ character is a vowel. If it is, it gets the next character in the alphabet,\
    \ and adds it to the result string. Otherwise, it just adds the current character\
    \ to the result string.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you\
    \ please explain how this works? I understand that we are looping through each\
    \ character in the message, but how does this work? What is happening in the if\
    \ statement?\n<|/ c |>\n<| c |>\nThe if statement checks if the current character\
    \ is a vowel. If it is, it gets the next character in the alphabet, and adds it\
    \ to the result string. Otherwise, it just adds the current character to the result\
    \ string.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you please explain\
    \ how this works? I understand that we are looping through each character in the\
    \ message, but how does this work? What is happening in the if statement?\n<|/\
    \ c |>\n<| a tags=javascript,typescript |>\n<code>\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppet1lmt7.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmppet1lmt7.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmppet1lmt7.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmppet1lmt7.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmppet1lmt7.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmppet1lmt7.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,33): error TS1005: '')'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,48): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,66): error TS1005: '':'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,77): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,82): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,85): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,89): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,97): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,105): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,110): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,127): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,140): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,144): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,149): error TS1005: '';'' expected.

    ../../../../../tmp/tmppet1lmt7.ts(30,154): error TS1005: '';'' expected.

    ../../../../'
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ \"a\".charCodeAt(0);\n    result += letter.charAt(index) + letter.charAt(index\
    \ + 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpha9xtmaq.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpha9xtmaq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index === -1) {\n            result += letter;\n        } else {\n\
    \            let nextLetter = alphabet[index + 1];\n            let replacement\
    \ = alphabet.indexOf(nextLetter);\n            if (replacement === -1) {\n   \
    \             result += letter;\n            } else {\n                result\
    \ += alphabet[replacement];\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq142w30d.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpq142w30d.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpq142w30d.ts(20,31): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpq142w30d.ts(24,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let\
    \ vowels = \"AEIOU\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 1;\n    }\n    return newMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1961819'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3f0lkdsf.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3f0lkdsf.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1961819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        result += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        }\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (letter \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpndf8nfzf.ts(86,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpndf8nfzf.ts(99,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n\
    \    encodedMessage += alphabet[letterIndex + 2];\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2c2zzk7t.ts(15,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp2c2zzk7t.ts(16,23): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9b4cxh_v.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9b4cxh_v.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter === vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n                break;\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkxaio3lz.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkxaio3lz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index === -1) {\n                result += letter;\n        \
    \    } else {\n                let nextLetter = alphabet[index + 1];\n       \
    \         result += nextLetter;\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfb1_jsra.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpfb1_jsra.ts(22,34): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toLowerCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpft8vbia1.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpft8vbia1.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\"\
    ;\n    let vowelIndex = 0;\n    let vowelCount = 0;\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        if (vowels.indexOf(newMessage[i]) !== -1) {\n            vowelIndex++;\n\
    \            if (vowelIndex === 2) {\n                vowelIndex = 0;\n      \
    \          vowelCount++;\n            }\n        }\n        else {\n         \
    \   newMessage = newMessage.replace(newMessage[i], newMessage[vowelIndex]);\n\
    \        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTTT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5rdlelbn.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5rdlelbn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 97;\n        if (index >= 0) {\n            result += letter.toUpperCase();\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyharvp15.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyharvp15.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738437
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let vowel = vowels[letter];\n\
    \            result += vowels[vowel];\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf2vj8s7n.ts(18,25): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    ../../../../../tmp/tmpf2vj8s7n.ts(19,23): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n  \
    \          let nextVowel = vowels[index + 1];\n            newMessage += letter.toUpperCase();\n\
    \            newMessage += nextVowel.toUpperCase();\n        } else {\n      \
    \      newMessage += letter.toUpperCase();\n        }\n    }\n    return newMessage;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr4ys3nba.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmpr4ys3nba.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpr4ys3nba.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpr4ys3nba.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpr4ys3nba.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpr4ys3nba.ts(29,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpr4ys3nba.ts(29,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpr4ys3nba.ts(31,9): error TS1005: '';'' expected.

    '
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        }\n        else {\n            let index\
    \ = alphabet.indexOf(letter);\n            if (index === -1) {\n             \
    \   result += letter;\n            }\n            else {\n                let\
    \ nextLetter = alphabet[index + 1];\n                result += nextLetter;\n \
    \           }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp52zkid7k.ts(19,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp52zkid7k.ts(24,34): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793395
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    }\
    \ else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp61dkucwj.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp61dkucwj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let messageArray: string[] = message.split(\"\
    \");\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter: string = messageArray[i];\n        let encodedLetter:\
    \ string = alphabet[alphabet.indexOf(letter) + 2];\n        encodedMessage +=\
    \ encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bbbb'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3gqcaezp.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3gqcaezp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bbbb',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    let vowels = \"aeiouAEIOU\"\
    ;\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n\
    \        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n\
    \            let nextLetter = vowels[index + 1];\n            newMessage = newMessage.replace(letter,\
    \ nextLetter);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for the answer. I'm sorry I didn't specify this in my\
    \ question, but I do need to use only a for loop to solve this problem. I'm also\
    \ not allowed to use any built in functions. I appreciate the help though.\n<|/\
    \ c |>\n<| c |>\nI updated my answer with a solution that uses only a for loop\
    \ and no built in functions. I hope it helps.\n<|/ c |>\n<| c |>\nThank you for\
    \ the update. I tried running your code and I got this error: TypeError: Cannot\
    \ read property 'indexOf' of undefined. Do you know why that is?\n<|/ c |>\n<|\
    \ c |>\nI updated my answer with a solution that uses only a for loop and no built\
    \ in functions. I hope it helps.\n<|/ c |>\n<| c |>\nThank you for the update.\
    \ I tried running your code and I got this error: TypeError: Cannot read property\
    \ 'indexOf' of undefined. Do you know why that is?\n<|/ c |>\n<| a |>\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8zgjg4wn.ts(24,2): error TS1110: Type expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(24,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp8zgjg4wn.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(25,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp8zgjg4wn.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(26,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,15): error TS1005: ''('' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,44): error TS1005: '')'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,89): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,92): error TS1005: '')'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,101): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,103): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,107): error TS1005: ''('' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,112): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,121): error TS1005: '')'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,126): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8zgjg4wn.ts(27,136): error TS1005: '';'' expected.

    ../../../..'
  timestamp: 1659793397
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n   \
    \ let index = vowels.indexOf(letter);\n    if (index != -1) {\n      result +=\
    \ vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxt5g058n.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt5g058n.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793397
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let\
    \ vowels = \"AEIOU\";\n    let messageArray = message.split(\"\");\n    let encodedMessage\
    \ = \"\";\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter\
    \ = messageArray[i];\n        let encodedLetter = \"\";\n        for (let j =\
    \ 0; j < alphabet.length; j++) {\n            if (alphabet.charAt(j) == letter)\
    \ {\n                encodedLetter = alphabet.charAt(j);\n            }\n    \
    \    }\n        for (let j = 0; j < vowels.length; j++) {\n            if (vowels.charAt(j)\
    \ == letter) {\n                encodedLetter = vowels.charAt(j) + encodedLetter;\n\
    \            }\n        }\n        encodedMessage += encodedLetter;\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2hxj7f6r.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2hxj7f6r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo__r3bm1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo__r3bm1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxwh8y4dt.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxwh8y4dt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n\
    \    if (index > -1) {\n      result += swapCase(letter, index - 1);\n    } else\
    \ {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu2rr4hi9.ts(15,17): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmpu2rr4hi9.ts(17,17): error TS2304: Cannot find name ''swapCase''.

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    let vowels = \"aeiou\"\
    ;\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i <\
    \ newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n    \
    \    if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n\
    \            newMessage = newMessage.slice(0, i) + letters[(index + 2) % letters.length]\
    \ + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5wzdh31_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5wzdh31_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      let letter2 = alphabet[(index + 1) % alphabet.length];\n      result +=\
    \ letter2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp6c_hfwn.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpp6c_hfwn.ts(19,21): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpp6c_hfwn.ts(19,44): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppcs8lamm.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter === vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n            }\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplyw3blfl.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplyw3blfl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message.toLowerCase();\n  let vowels =\
    \ \"aeiou\";\n  let newVowels = \"\";\n  for (let i = 0; i < newMessage.length;\
    \ i++) {\n    if (vowels.indexOf(newMessage[i]) > -1) {\n      newVowels += newMessage[i];\n\
    \      newVowels += newMessage[vowels.indexOf(newMessage[i]) + 2];\n    } else\
    \ {\n      newVowels += newMessage[i];\n    }\n  }\n  return newVowels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tetst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx7qsm4n1.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx7qsm4n1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tetst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0);\n        result += String.fromCharCode(index + 'a'.charCodeAt(0));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc_ere7b8.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc_ere7b8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ letter = letter.toUpperCase();\n    }\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[index + 1];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnino_5_f.ts(18,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpnino_5_f.ts(22,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[alphabet.indexOf(letter) + 1];\n      \
    \      result += alphabet[alphabet.indexOf(letter) + 1] + alphabet[alphabet.indexOf(letter)\
    \ + 2];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu0y1lz3x.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(19,39): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(20,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(20,32): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(20,64): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu0y1lz3x.ts(20,73): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      if (index === -1) {\n        result += letter;\n      } else {\n      \
    \  let nextLetter = alphabet[index + 1];\n        if (nextLetter === \"a\" ||\
    \ nextLetter === \"e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter\
    \ === \"u\") {\n          result += nextLetter;\n        } else {\n          result\
    \ += alphabet[index];\n        }\n      }\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp354ai89w.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp354ai89w.ts(22,26): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp354ai89w.ts(26,21): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"aeiouAEIOU\";\n        if (vowels.indexOf(letter) > -1)\
    \ {\n            let index = vowels.indexOf(letter);\n            newLetter =\
    \ vowels[index + 1];\n        }\n        newMessage += newLetter;\n    }\n   \
    \ return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc7b8_8p4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc7b8_8p4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetterFromVowel(letter,\
    \ i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0qiz9r5.ts(18,17): error TS2304: Cannot find name
    ''getLetterFromVowel''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index >= 0) {\n            let nextLetter = alphabet[index + 1];\n\
    \            result += nextLetter;\n        } else {\n            result += letter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9dzgkye.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpf9dzgkye.ts(17,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"AEIOUaeiou\";\n\
    \    let replacement = vowels[vowels.indexOf(letter)];\n    if (replacement ===\
    \ letter) {\n      replacement = vowels[vowels.indexOf(letter) + 2];\n    }\n\
    \    result += replacement;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedOundefinedundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8yxlgynf.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8yxlgynf.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedOundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowelIndex = letter.charCodeAt(0)\
    \ - 65;\n        let vowel = vowels[vowelIndex];\n        newMessage += vowel;\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphx85o39e.ts(16,21): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ newMessage += letter;\n    } else {\n      newMessage += letter.charCodeAt(0)\
    \ - 97;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp721s9k0o.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp721s9k0o.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetterFromVowel(letter);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpod8fwak5.ts(18,17): error TS2304: Cannot find name
    ''getLetterFromVowel''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n\
    \    if (index > -1) {\n      result += swapCase(letter);\n      result += english[index\
    \ + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_a0m_m_0.ts(15,17): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmp_a0m_m_0.ts(17,17): error TS2304: Cannot find name ''swapCase''.

    ../../../../../tmp/tmp_a0m_m_0.ts(18,17): error TS2304: Cannot find name ''english''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string[] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let newMessage:\
    \ string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let\
    \ letter = message[i];\n        let index = alphabet.indexOf(letter);\n      \
    \  if (index != -1) {\n            let nextIndex = index + 2;\n            if\
    \ (nextIndex < alphabet.length) {\n                newMessage += alphabet[nextIndex];\n\
    \            } else {\n                newMessage += letter;\n            }\n\
    \        } else {\n            newMessage += letter;\n        }\n    }\n    for\
    \ (let i = 0; i < vowels.length; i++) {\n        newMessage = newMessage.replace(vowels[i],\
    \ vowels[i + 1]);\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if the message is \"aBcD\"\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it on \"aBcD\"\n<|/ c |>\n<| c |>\nIt doesn't work if the message is\
    \ \"aBcD\"\n<|/ c |>\n<| c |>\nIt doesn't work if the message is \"aBcD\"\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if the message is \"aBcD\"\n<|/ c |>\n<| a tags=algorithm,javascript\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy53_gcb_.ts(34,2): error TS1110: Type expected.

    ../../../../../tmp/tmpy53_gcb_.ts(34,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpy53_gcb_.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(35,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpy53_gcb_.ts(36,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(36,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(37,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(37,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(37,43): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpy53_gcb_.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(38,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpy53_gcb_.ts(39,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(39,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(40,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(40,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(40,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(40,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(40,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(41,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(41,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpy53_gcb_.ts(42,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(42,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(43,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(43,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpy53_gcb_.ts(43,41): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpy53_gcb_.ts(44,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpy53_gcb_.ts(44,4'
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\") {\n            newLetter = \"A\";\n        } else\
    \ if (letter === \"e\") {\n            newLetter = \"E\";\n        } else if (letter\
    \ === \"i\") {\n            newLetter = \"I\";\n        } else if (letter ===\
    \ \"o\") {\n            newLetter = \"O\";\n        } else if (letter === \"u\"\
    ) {\n            newLetter = \"U\";\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptbpj475f.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptbpj475f.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ 97;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8yx2a0e8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8yx2a0e8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    let newLetter = letter;\n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newLetter\
    \ = nextLetter;\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprr8q66am.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprr8q66am.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n   \
    \ let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result +=\
    \ vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0v5bsnf1.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0v5bsnf1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      result\
    \ += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1oy9pd4w.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1oy9pd4w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === nextLetter) {\n            result += letter;\n\
    \        } else {\n            result += letter.toUpperCase();\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7cg53wuw.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7cg53wuw.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"A\") {\n         \
    \   result += letter;\n            i++;\n        }\n        else if (letter ===\
    \ \"e\") {\n            result += letter.toUpperCase();\n            i++;\n  \
    \      }\n        else if (letter === \"E\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"i\") {\n         \
    \   result += letter.toUpperCase();\n            i++;\n        }\n        else\
    \ if (letter === \"I\") {\n            result += letter;\n            i++;\n \
    \       }\n        else if (letter === \"o\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"O\") {\n         \
    \   result += letter;\n            i++;\n        }\n        else if (letter ===\
    \ \"u\") {\n            result += letter.toUpperCase();\n            i++;\n  \
    \      }\n        else if (letter === \"U\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"y\") {\n         \
    \   result += letter.toUpperCase();\n            i++;\n        }\n        else\
    \ if (letter === \"Y\") {\n            result += letter;\n            i++;\n \
    \       }\n        else if (letter === \"s\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"S\") {\n         \
    \   result += letter;\n            i++;\n        }\n        else if (letter ===\
    \ \"t\") {\n            result += letter.toUpperCase();\n            i++;\n  \
    \      }\n        else if (letter === \"T\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"k\") {\n         \
    \   result += letter.toUpperCase();\n            i++;\n        }\n        else\
    \ if (letter === \"K\") {\n            result += letter;\n            i++;\n \
    \       }\n        else if (letter === \"h\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"H\") {\n         \
    \   result += letter;\n            i++;\n        }\n        else if (letter ===\
    \ \"r\") {\n            result += letter.toUpperCase();\n            i++;\n  \
    \      }\n        else if (letter === \"R\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"d\") {\n         \
    \   result += letter.toUpperCase();\n            i++;\n        }\n        else\
    \ if (letter === \"D\") {\n            result += letter;\n            i++;\n \
    \       }\n        else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/tsc.js:72099:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiou\";\n    let letterIndex\
    \ = vowels.indexOf(letter);\n    if (letterIndex > -1) {\n      letter = vowels[letterIndex\
    \ + 2];\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1ed0o53d.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ed0o53d.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += getLetterIndexInAlphabet(letter);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy3lncn8v.ts(18,23): error TS2304: Cannot find name
    ''getLetterIndexInAlphabet''.

    '
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let vowel = letter.charCodeAt(0) - 97;\n\
    \      result += String.fromCharCode(vowel);\n    }\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\
    \uFFF3'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeny5pv9w.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeny5pv9w.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\
    \uFFF2\uFFF3',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n   \
    \ let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result +=\
    \ vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0v5bsnf1.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0v5bsnf1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let vowelIndex = alphabet.indexOf(letter);\n\
    \      let vowel = alphabet[vowelIndex + 1];\n      result += vowel;\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu8jkmma6.ts(18,24): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpu8jkmma6.ts(19,19): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex !=\
    \ -1) {\n            let vowelIndex2 = vowelIndex + 1;\n            let letter2\
    \ = vowels.charAt(vowelIndex2);\n            result += letter2;\n        }\n \
    \       else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp29e_vs5x.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp29e_vs5x.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n  \
    \          result += vowels[index + 1];\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkfuqhvp8.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkfuqhvp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[(i +\
    \ 1) % message.length];\n    const nextNextLetter = message[(i + 2) % message.length];\n\
    \    const nextNextNextLetter = message[(i + 3) % message.length];\n    const\
    \ nextNextNextNextLetter = message[(i + 4) % message.length];\n    const nextNextNextNextNextLetter\
    \ = message[(i + 5) % message.length];\n    const nextNextNextNextNextNextLetter\
    \ = message[(i + 6) % message.length];\n    const nextNextNextNextNextNextNextLetter\
    \ = message[(i + 7) % message.length];\n    const nextNextNextNextNextNextNextLetter\
    \ = message[(i + 8) % message.length];\n    const nextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 9) % message.length];\n    const nextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 10) % message.length];\n    const nextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 11) % message.length];\n    const nextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 12) % message.length];\n    const nextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 13) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 14) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 15) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 16) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 17) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 18) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 19) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 20) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 21) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 22) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 23) % message.length];\n    const nextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[(i + 24) % \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1l4zewfa.ts(39,9): error TS1005: '']'' expected.

    ../../../../../tmp/tmp1l4zewfa.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793400
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpszr3ftxs.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpszr3ftxs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowelIndex = letter.charCodeAt(0)\
    \ - 65;\n        let vowel = vowels[vowelIndex];\n        result += vowel;\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxhace024.ts(16,21): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    '
  timestamp: 1659793400
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[index + 1];\n            result += nextLetter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpomrmptmu.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpomrmptmu.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0)\
    \ - 97;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 97);\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8xw9wj8w.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8xw9wj8w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa3eyo775.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa3eyo775.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >\
    \ -1) {\n            letter = vowels[vowelIndex + 1];\n        }\n        result\
    \ += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6hctjvwd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6hctjvwd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxwh8y4dt.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxwh8y4dt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvnblu25x.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvnblu25x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 97;\n        if (index >= 0) {\n            result += String.fromCharCode(index\
    \ + 1);\n        } else {\n            result += letter;\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your\
    \ answer! I understand what you are saying, but I am not sure how to implement\
    \ it. I am very new to coding and am trying to learn as I go. Would you be able\
    \ to give me an example of how I would implement this into my code? Thank you!\n\
    <|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v1ugwsi.ts(24,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(24,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1v1ugwsi.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(25,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1v1ugwsi.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(26,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,15): error TS1005: ''('' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,30): error TS1005: '')'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,71): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,80): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,97): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,103): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,111): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1v1ugwsi.ts(27,118): error TS1005: '';'' expected.

    ../../../../../'
  timestamp: 1659793401
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        const letter = newMessage[i];\n        const nextLetter = newMessage[i\
    \ + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n            newMessage = newMessage.replace(letter,\
    \ nextLetter);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptih3vz3o.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptih3vz3o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793401
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ encodedMessage += letter;\n    } else {\n      let vowelIndex = alphabet.indexOf(letter);\n\
    \      encodedMessage += alphabet[vowelIndex + 2];\n    }\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqaao815.ts(18,24): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmphqaao815.ts(19,25): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793401
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index === -1) {\n                result += letter;\n        \
    \    } else {\n                result += alphabet[index + 2];\n            }\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvqzjuew4.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpvqzjuew4.ts(22,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793402
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter === vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n                break;\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkxaio3lz.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkxaio3lz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n\
    \        if (vowelIndex > -1) {\n            newLetter = vowels[vowelIndex + 1];\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpntb4v3cz.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpntb4v3cz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetter2PlaceAheadLetter(letter);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5w9hbah9.ts(18,17): error TS2304: Cannot find name
    ''getLetter2PlaceAheadLetter''.

    '
  timestamp: 1659793402
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let encodedVowel = encodedLetter.replace(/[AEIOUaeiou]/g, letter => {\n \
    \     return letter.toUpperCase();\n    });\n    encodedMessage += encodedVowel;\n\
    \  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyemzi_x1.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyemzi_x1.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index >= 0) {\n      result\
    \ += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg0fw1rru.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg0fw1rru.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n   \
    \ let vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n     \
    \ let vowelIndex = vowelIndex + 2;\n      let vowel = vowels[vowelIndex];\n  \
    \    result += vowel;\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcxqtm_v4.ts(18,24): error TS2448: Block-scoped variable
    ''vowelIndex'' used before its declaration.

    '
  timestamp: 1659793402
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[(i +\
    \ 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \    const nextLetterIndex = nextLetterIndex === -1 ? alphabet.length : nextLetterIndex;\n\
    \    const nextLetterLetter = alphabet[nextLetterIndex];\n    const nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n    const nextLetterLetterIndex = nextLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterIndex;\n    const nextLetterLetterLetter\
    \ = alphabet[nextLetterLetterIndex];\n    const nextLetterLetterLetterIndex =\
    \ alphabet.indexOf(nextLetterLetterLetter);\n    const nextLetterLetterLetterIndex\
    \ = nextLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterIndex;\n\
    \    const nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterIndex;\n    const nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterLetterIndex\
    \ = nextLetterLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterIndex;\n\
    \    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterLetterIndex;\n\
    \    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterLetterLetterIndex;\n\
    \    const nextLetterLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetter\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphaeptmqt.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if\
    \ (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\"\
    \ || letter === \"u\") {\n      encodedLetter = letter.toUpperCase();\n    }\n\
    \    for (let j = 0; j < letter.length; j++) {\n      let vowel = letter.charAt(j);\n\
    \      let vowelIndex = vowels.indexOf(vowel);\n      if (vowelIndex > -1) {\n\
    \        encodedLetter = encodedLetter.replace(vowel, vowels[vowelIndex + 2]);\n\
    \      }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyf7el6q1.ts(21,24): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    ../../../../../tmp/tmpyf7el6q1.ts(23,54): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \        if (i > 0) {\n            newMessage += letter.charCodeAt(0) - letter.charCodeAt(i\
    \ - 1);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TE0SNaNTNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp91yiwz_0.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp91yiwz_0.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TE0SNaNTNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowelIndex = letter.charCodeAt(0)\
    \ - 65;\n        let vowel = vowelIndex >= 0 ? vowels[vowelIndex] : \"\";\n  \
    \      result += vowel + letter.toLowerCase();\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx6ulweq5.ts(16,39): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    '
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n        if (vowels.indexOf(letter) > -1) {\n            let index\
    \ = vowels.indexOf(letter);\n            let nextLetter = message[i + 1];\n  \
    \          if (nextLetter == letter) {\n                result += letter;\n  \
    \          } else {\n                result += nextLetter;\n            }\n  \
    \      } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks for the answer.\
    \ Can you please explain how this works? I understand that you are iterating through\
    \ each character in the string and checking if it's a vowel, but how does this\
    \ work for the second letter? How does it know to swap the second letter?\n<|/\
    \ c |>\n<| c |>\nThe second letter is checked by looking at the next letter. If\
    \ it's equal to the current letter, then the second letter is swapped with the\
    \ current letter. Otherwise, the second letter is left unchanged.\n<|/ c |>\n\
    <| c |>\nThanks for the explanation. Can you please explain how this works? I\
    \ understand that you are iterating through each character in the string and checking\
    \ if it's a vowel, but how does this work for the second letter? How does it know\
    \ to swap the second letter?\n<|/ c |>\n<| c |>\nThe second letter is checked\
    \ by looking at the next letter. If it's equal to the current letter, then the\
    \ second letter is swapped with the current letter. Otherwise, the second letter\
    \ is left unchanged.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you please\
    \ explain how this works? I understand that you are iterating through each character\
    \ in the string and checking if it's a vowel, but how does this work for the second\
    \ letter? How does it know to swap the second letter?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpswycu4gw.ts(30,2): error TS1110: Type expected.

    ../../../../../tmp/tmpswycu4gw.ts(30,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpswycu4gw.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpswycu4gw.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpswycu4gw.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpswycu4gw.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,32): error TS1005: '')'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,51): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,65): error TS1005: '':'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,85): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,89): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,99): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,107): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,112): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,129): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,136): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,140): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,149): error TS1005: '';'' expected.

    ../../../../../tmp/tmpswycu4gw.ts(33,152): error TS1005: ''('' expected.

    ../../../../'
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index === -1) {\n                result += letter;\n        \
    \    } else {\n                let nextLetter = alphabet[index + 1];\n       \
    \         if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"\
    i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n                    result\
    \ += nextLetter;\n                } else {\n                    result += alphabet[index];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu1ozefr9.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpu1ozefr9.ts(22,34): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpu1ozefr9.ts(26,31): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    let vowels\
    \ = \"AEIOUaeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n      if (letter\
    \ === vowels[j]) {\n        newLetter = vowels[j + 1];\n      }\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpatzwpjpk.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpatzwpjpk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n\
    \        } else {\n            newMessage += letter.toUpperCase();\n        }\n\
    \        if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"\
    i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n            newMessage\
    \ += letter;\n        } else {\n            newMessage += letter.toLowerCase();\n\
    \        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TtEeSsTt'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjykb6w31.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjykb6w31.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TtEeSsTt',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        let letter = newMessage.charAt(i);\n        if (letter === 'a'\
    \ || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n\
    \            newMessage = newMessage.replace(letter, letter.charCodeAt(0) - 64);\n\
    \        }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n       \
    \ let letter = newMessage.charAt(i);\n        if (letter === 'a' || letter ===\
    \ 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            newMessage\
    \ = newMessage.replace(letter, letter.charCodeAt(0) + 2);\n        }\n    }\n\
    \    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpcrrxshb_.ts(16,53): error TS2769: No overload matches\
    \ this call.\n  Overload 1 of 2, '(searchValue: string | RegExp, replaceValue:\
    \ string): string', gave the following error.\n    Argument of type 'number' is\
    \ not assignable to parameter of type 'string'.\n  Overload 2 of 2, '(searchValue:\
    \ string | RegExp, replacer: (substring: string, ...args: any[]) => string): string',\
    \ gave the following error.\n    Argument of type 'number' is not assignable to\
    \ parameter of type '(substring: string, ...args: any[]) => string'.\n../../../../../tmp/tmpcrrxshb_.ts(22,53):\
    \ error TS2769: No overload matches this call.\n  Overload 1 of 2, '(searchValue:\
    \ string | RegExp, replaceValue: string): string', gave the following error.\n\
    \    Argument of type 'number' is not assignable to parameter of type 'string'.\n\
    \  Overload 2 of 2, '(searchValue: string | RegExp, replacer: (substring: string,\
    \ ...args: any[]) => string): string', gave the following error.\n    Argument\
    \ of type 'number' is not assignable to parameter of type '(substring: string,\
    \ ...args: any[]) => string'.\n"
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ newMessage += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      newMessage += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpge72pzyi.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpge72pzyi.ts(19,21): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpge72pzyi.ts(19,44): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n      newLetter = letter.toUpperCase();\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzlddmqli.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzlddmqli.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793404
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      const nextLetter\
    \ = alphabet[index + 1];\n      result += nextLetter.toUpperCase();\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmporj5t0bb.ts(15,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmporj5t0bb.ts(19,26): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index > -1) {\n            let nextIndex = index + 1;\n         \
    \   if (nextIndex < alphabet.length) {\n                let nextLetter = alphabet[nextIndex];\n\
    \                newMessage += vowels.indexOf(letter) > -1 ? letter : nextLetter;\n\
    \            } else {\n                newMessage += letter;\n            }\n\
    \        } else {\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for the example\
    \ `encode(\"This is a message\")`\n<|/ c |>\n<| c |>\nIt does work for the example\
    \ you provided. Did you try it? It returns `tHKS KS C MGSSCGG` for the example\
    \ you provided.\n<|/ c |>\n<| c |>\nYes, I did. `tHKS KS C MGSSCGG` should be\
    \ the correct output.\n<|/ c |>\n<| c |>\nI see what you mean. I'll update my\
    \ answer to reflect that.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your\
    \ updated requirements.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpplg82ass.ts(32,2): error TS1110: Type expected.

    ../../../../../tmp/tmpplg82ass.ts(32,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpplg82ass.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(33,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpplg82ass.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(34,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(35,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(35,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(35,64): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpplg82ass.ts(36,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(36,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpplg82ass.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(37,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpplg82ass.ts(38,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,18): error TS1005: ''('' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,34): error TS1005: '')'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,48): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,56): error TS1005: ''{'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,63): error TS1005: '':'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,95): error TS1005: ''('' expected.

    ../../../../../tmp/tmpplg82ass.ts(38,99): error TS1005: '';'' expected.

    ../../../../../tmp/tmpplg82ass.t'
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let letterIndex = vowels.indexOf(letter);\n        if (letterIndex >\
    \ -1) {\n            let vowelIndex = letterIndex + 2;\n            if (vowelIndex\
    \ < vowels.length) {\n                let vowel = vowels[vowelIndex];\n      \
    \          let vowelIndex = vowels.indexOf(vowel);\n                let letterIndex\
    \ = letterIndex + vowelIndex;\n                let letter = vowels[letterIndex];\n\
    \                result += letter;\n            }\n        }\n        else {\n\
    \            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0xlqwlrm.ts(20,36): error TS2448: Block-scoped variable
    ''vowelIndex'' used before its declaration.

    ../../../../../tmp/tmp0xlqwlrm.ts(22,35): error TS2448: Block-scoped variable
    ''letterIndex'' used before its declaration.

    '
  timestamp: 1659793403
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index > -1) {\n      let letter2 = alphabet[index + 1];\n      result\
    \ += letter2.toUpperCase();\n    } else {\n      result += letter.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqsyyjm5l.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpqsyyjm5l.ts(17,21): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxwh8y4dt.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxwh8y4dt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = englishAlphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      newMessage += letter;\n    } else {\n      let\
    \ nextLetter = englishAlphabet[index + 1];\n      newMessage += letter.toUpperCase();\n\
    \      newMessage += nextLetter.toUpperCase();\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt76a4uco.ts(15,17): error TS2304: Cannot find name
    ''englishAlphabet''.

    ../../../../../tmp/tmpt76a4uco.ts(19,24): error TS2304: Cannot find name ''englishAlphabet''.

    '
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9b4cxh_v.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9b4cxh_v.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793395
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppcs8lamm.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let messageArray: string[] = message.split(\"\
    \");\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        if (letter.match(/[aeiou]/))\
    \ {\n            let index = alphabet.indexOf(letter);\n            let nextIndex\
    \ = alphabet.indexOf(letter, index + 1);\n            let nextLetter = alphabet[nextIndex];\n\
    \            encodedMessage += letter;\n            encodedMessage += nextLetter;\n\
    \        } else {\n            encodedMessage += letter;\n        }\n    }\n \
    \   return encodedMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<|\
    \ c |>\nThis does not work. Try it with `encode(\"This is a message\")`\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it with `encode(\"This is a message\")`\n<|/\
    \ c |>\n<| c |>\nIt does not work. Try it with `encode(\"This is a message\")`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"This is a message\")`\n\
    <|/ c |>\n<| c |>\nIt does not work. Try it with `encode(\"This is a message\"\
    )`\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpll2u0rbq.ts(30,2): error TS1110: Type expected.

    ../../../../../tmp/tmpll2u0rbq.ts(30,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpll2u0rbq.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpll2u0rbq.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(33,33): error TS1005: ''('' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(34,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpll2u0rbq.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(35,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(36,4): error TS1005: '')'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(36,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(36,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(36,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(36,27): error TS1005: ''('' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(37,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpll2u0rbq.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(38,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpll2u0rbq.ts(39,4): error TS1005: '')'' expected.

    ../../../../../tmp/tmpll2u0rbq.ts(39,9): error TS1005: '';'' expected.

    ../..'
  timestamp: 1659793403
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3fr1yo19.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3fr1yo19.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793396
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index > -1) {\n                let nextLetter = alphabet[index\
    \ + 1];\n                if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter\
    \ === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n             \
    \       result += nextLetter;\n                } else {\n                    result\
    \ += alphabet[index];\n                }\n            } else {\n             \
    \   result += letter;\n            }\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsqakh60a.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpsqakh60a.ts(20,34): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpsqakh60a.ts(24,31): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowelIndex = getVowelIndex(letter);\n\
    \    let nextVowelIndex = vowelIndex + 1;\n    let nextLetter = message[nextVowelIndex];\n\
    \    newMessage += letter;\n    newMessage += nextLetter;\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpajv17yyl.ts(15,22): error TS2552: Cannot find name
    ''getVowelIndex''. Did you mean ''nextVowelIndex''?

    '
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[(i\
    \ + 1) % message.length];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \        if (nextLetterIndex > -1) {\n            letter = alphabet[nextLetterIndex];\n\
    \        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzgs0ev5g.ts(16,31): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpzgs0ev5g.ts(18,22): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let vowelIndex =\
    \ alphabet.indexOf(letter);\n            let nextVowelIndex = alphabet.indexOf(letter,\
    \ vowelIndex + 1);\n            if (vowelIndex === -1) {\n                result\
    \ += letter;\n            } else if (nextVowelIndex === -1) {\n              \
    \  result += alphabet[vowelIndex];\n            } else {\n                result\
    \ += alphabet[vowelIndex] + alphabet[nextVowelIndex];\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4e54sxzs.ts(18,30): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp4e54sxzs.ts(19,34): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp4e54sxzs.ts(23,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp4e54sxzs.ts(25,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp4e54sxzs.ts(25,50): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowelIndex = letter.indexOf('a');\n\
    \        if (vowelIndex > 0) {\n            letter = letter.substring(0, vowelIndex)\
    \ + letter.substring(vowelIndex + 1, vowelIndex + 2).toUpperCase();\n        }\n\
    \        for (let j = 0; j < letter.length; j++) {\n            let vowelIndex\
    \ = letter.indexOf('a');\n            if (vowelIndex > 0) {\n                letter\
    \ = letter.substring(0, vowelIndex) + letter.substring(vowelIndex + 1, vowelIndex\
    \ + 2).toUpperCase();\n            }\n        }\n        result += letter;\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjzv88j_b.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjzv88j_b.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            newMessage += letter.toUpperCase();\n        } else {\n     \
    \       newMessage += letter;\n        }\n    }\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        let letter = newMessage[i];\n        if (letter === \"A\" ||\
    \ letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"\
    ) {\n            newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \        }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n       \
    \ let letter = newMessage[i];\n        if (letter === \"a\" || letter === \"e\"\
    \ || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n           \
    \ newMessage = newMessage.replace(letter, letter.toUpperCase());\n        }\n\
    \    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter\
    \ = newMessage[i];\n        if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            newMessage\
    \ = newMessage.replace(letter, letter.toUpperCase());\n        }\n    }\n    for\
    \ (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n    }\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        let letter = newMessage[i];\n        if (letter === \"A\" ||\
    \ letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"\
    ) {\n            newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \        }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n       \
    \ let letter = newMessage[i];\n        if (letter === \"a\" || letter === \"e\"\
    \ || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n           \
    \ newMessage = newMessage.replace(letter, letter.toUpperCase());\n        }\n\
    \    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter\
    \ = newMessage[i];\n        if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            newMessage\
    \ = newMessage.replace(letter, letter.toUpperCase());\n        }\n    }\n    for\
    \ (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n        }\n    }\n    for (let i = 0; i < newMessage.length;\
    \ i++) {\n        let letter = newMessage[i];\n        if (letter === \"A\" ||\
    \ letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"\
    ) {\n            newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \        }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n       \
    \ let letter = newMessage[i];\n        if (letter === \"a\" || letter \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpui4k0u29.ts(78,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpui4k0u29.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let vowels = \"aeiou\";\n        if (vowels.indexOf(letter) >\
    \ -1) {\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter;\n\
    \            newMessage += letter;\n            newMessage += letter;\n      \
    \      newMessage += letter;\n            newMessage += letter;\n            newMessage\
    \ += letter;\n            newMessage += letter;\n            newMessage += letter\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdcrtv4wc.ts(110,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 +\
    \ 2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwqhoadun.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwqhoadun.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    for (let i = 0; i < newMessage.length; i++)\
    \ {\n        let letter = newMessage[i];\n        let index = letter.charCodeAt(0)\
    \ - 97;\n        newMessage = newMessage.replace(letter, String.fromCharCode(index));\n\
    \    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThis works perfectly\
    \ for me. Thank you so much!\n<|/ c |>\n<| a tags=javascript,string,algorithm\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpclj5a6oj.ts(24,2): error TS1110: Type expected.

    ../../../../../tmp/tmpclj5a6oj.ts(24,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpclj5a6oj.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(25,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpclj5a6oj.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(26,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,26): error TS1005: ''('' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(27,43): error TS1005: '')'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpclj5a6oj.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(29,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpclj5a6oj.ts(29,40): error TS1109: Expression expected.

    ../../../../../tmp/tmpclj5a6oj.ts(31,9): error TS1005: '';'' expected.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index > -1) {\n    \
    \        result += vowels[index + 1];\n        } else {\n            result +=\
    \ letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj5klqx6_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj5klqx6_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppcs8lamm.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmppcs8lamm.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793398
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index >= 0) {\n  \
    \          result += vowels[index + 2];\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw8kf8ox_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw8kf8ox_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793405
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetterFromIndex(letter,\
    \ i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptym4ez1z.ts(18,17): error TS2304: Cannot find name
    ''getLetterFromIndex''.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"aeiouAEIOU\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter == vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n                break;\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpir6azwc1.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpir6azwc1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[(i +\
    \ 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \    const nextLetterIndex = nextLetterIndex === -1 ? alphabet.length : nextLetterIndex;\n\
    \    const nextLetter = alphabet[nextLetterIndex];\n    newMessage += letter.toUpperCase();\n\
    \    newMessage += nextLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmped4bbnil.ts(15,11): error TS2451: Cannot redeclare
    block-scoped variable ''nextLetter''.

    ../../../../../tmp/tmped4bbnil.ts(16,11): error TS2451: Cannot redeclare block-scoped
    variable ''nextLetterIndex''.

    ../../../../../tmp/tmped4bbnil.ts(16,29): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmped4bbnil.ts(17,11): error TS2451: Cannot redeclare block-scoped
    variable ''nextLetterIndex''.

    ../../../../../tmp/tmped4bbnil.ts(17,54): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmped4bbnil.ts(18,11): error TS2451: Cannot redeclare block-scoped
    variable ''nextLetter''.

    ../../../../../tmp/tmped4bbnil.ts(18,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793405
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    const nextLetterIndex = message.indexOf(nextLetter, i + 2);\n    if (nextLetterIndex\
    \ === -1) {\n      newMessage += letter;\n    } else {\n      const nextLetterLetter\
    \ = message[nextLetterIndex];\n      newMessage += letter.toUpperCase();\n   \
    \   newMessage += nextLetterLetter.toUpperCase();\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph2w484yr.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2w484yr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter.toLowerCase();\n\
    \        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzkyztdgr.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzkyztdgr.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index != -1) {\n   \
    \         let nextLetter = vowels[index + 1];\n            let replacement = letter.toUpperCase();\n\
    \            result += nextLetter + replacement;\n        } else {\n         \
    \   result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn791e3on.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn791e3on.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmploqo63qt.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploqo63qt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           newMessage += letter;\n        } else {\n            newMessage +=\
    \ letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7kwghztz.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7kwghztz.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0)\
    \ - 65;\n    const vowelIndex = letterIndex + 2;\n    const vowel = vowels[letterIndex];\n\
    \    const vowelIndex = vowel.charCodeAt(0) - 65;\n    const vowel2 = vowels[vowelIndex];\n\
    \    const vowel3 = vowels[vowelIndex + 1];\n    const vowel4 = vowels[vowelIndex\
    \ + 2];\n    const vowel5 = vowels[vowelIndex + 3];\n    const vowel6 = vowels[vowelIndex\
    \ + 4];\n    const vowel7 = vowels[vowelIndex + 5];\n    const vowel8 = vowels[vowelIndex\
    \ + 6];\n    const vowel9 = vowels[vowelIndex + 7];\n    const vowel10 = vowels[vowelIndex\
    \ + 8];\n    const vowel11 = vowels[vowelIndex + 9];\n    const vowel12 = vowels[vowelIndex\
    \ + 10];\n    const vowel13 = vowels[vowelIndex + 11];\n    const vowel14 = vowels[vowelIndex\
    \ + 12];\n    const vowel15 = vowels[vowelIndex + 13];\n    const vowel16 = vowels[vowelIndex\
    \ + 14];\n    const vowel17 = vowels[vowelIndex + 15];\n    const vowel18 = vowels[vowelIndex\
    \ + 16];\n    const vowel19 = vowels[vowelIndex + 17];\n    const vowel20 = vowels[vowelIndex\
    \ + 18];\n    const vowel21 = vowels[vowelIndex + 19];\n    const vowel22 = vowels[vowelIndex\
    \ + 20];\n    const vowel23 = vowels[vowelIndex + 21];\n    const vowel24 = vowels[vowelIndex\
    \ + 22];\n    const vowel25 = vowels[vowelIndex + 23];\n    const vowel26 = vowels[vowelIndex\
    \ + 24];\n    const vowel27 = vowels[vowelIndex + 25];\n    const vowel28 = vowels[vowelIndex\
    \ + 26];\n    const vowel29 = vowels[vowelIndex + 27];\n    const vowel30 = vowels[vowelIndex\
    \ + 28];\n    const vowel31 = vowels[vowelIndex + 29];\n    const vowel32 = vowels[vowelIndex\
    \ + 30];\n    const vowel33 = vowels[vowelIndex + 31];\n    const vowel34 = vowels[vowelIndex\
    \ + 32];\n    const vowel35 = vowels[vowelIndex + 33];\n    const vowel36 = vowels[vowelIndex\
    \ + 34];\n    const vowel37 = vowels[vowelIndex + 35];\n    const vowel38 = vowels[vowelIndex\
    \ + 36];\n    const vowel39 = vowels[vowelIndex + 37];\n    const vowel40 = vowels[vowelIndex\
    \ + 38];\n    const vowel4\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpir9rzx1v.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793406
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[index + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprxmdymf3.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmprxmdymf3.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793406
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[(i +\
    \ 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \    const nextLetterVowelIndex = alphabet.indexOf(letter);\n    const nextLetterVowelIndex2\
    \ = alphabet.indexOf(letter, nextLetterIndex + 1);\n    if (nextLetterVowelIndex2\
    \ > -1) {\n      result += alphabet[nextLetterVowelIndex2];\n    } else {\n  \
    \    result += alphabet[nextLetterVowelIndex];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa2ge051j.ts(16,29): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpa2ge051j.ts(17,34): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpa2ge051j.ts(18,35): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpa2ge051j.ts(20,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpa2ge051j.ts(22,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    let\
    \ vowels = \"AEIOUaeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n  \
    \    if (letter === vowels[j]) {\n        encodedLetter = vowels[j + 1];\n   \
    \   }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphc3h_ggo.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphc3h_ggo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793406
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnuv5l86b.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpnuv5l86b.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpnuv5l86b.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659793406
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += letter.charCodeAt(0)\
    \ - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0rqgz3__.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0rqgz3__.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex !=\
    \ -1) {\n            let vowel = vowels[vowelIndex + 1];\n            newMessage\
    \ += vowel;\n        } else {\n            newMessage += letter;\n        }\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi717va15.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi717va15.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793407
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppkfp2vyj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkfp2vyj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    let vowels\
    \ = \"AEIOUaeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n      if (letter\
    \ == vowels[j]) {\n        newLetter = vowels[j + 1];\n        break;\n      }\n\
    \    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0_yjxk8c.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0_yjxk8c.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659793407
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i].toLowerCase();\n    const vowelIndex =\
    \ letter.indexOf('a');\n    const vowel = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('e');\n    const vowel2\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('i');\n    const vowel3 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('o');\n    const vowel4\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('u');\n    const vowel5 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('y');\n    const vowel6\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('a');\n    const vowel7 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('e');\n    const vowel8\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('i');\n    const vowel9 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('o');\n    const vowel10\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('u');\n    const vowel11 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('y');\n    const vowel12\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('a');\n    const vowel13 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('e');\n    const vowel14\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('i');\n    const vowel15 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('o');\n    const vowel16\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('u');\n    const vowel17 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('y');\n    const vowel18\
    \ = vowelIndex === -1 ? letter : letter.slice(0, vowelIndex);\n    const vowelIndex\
    \ = letter.indexOf('a');\n    const vowel19 = vowelIndex === -1 ? letter : letter.slice(0,\
    \ vowelIndex);\n    const vowelIndex = letter.indexOf('e');\n    const \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj477xvkc.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpj477xvkc.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659793406
