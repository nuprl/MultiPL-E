name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["\tlet chars = string.split(\"\");\n\tlet charsSet = new Set(chars);\n\
    \treturn charsSet.size;\n}\n", "\tlet chars: number[] = [];\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tchars.push(string.charCodeAt(i));\n\t}\n\tlet\
    \ uniqueChars: number[] = [];\n\tfor (let i = 0; i < chars.length; i++) {\n\t\t\
    let char = chars[i];\n\t\tif (uniqueChars.indexOf(char) === -1) {\n\t\t\tuniqueChars.push(char);\n\
    \t\t}\n\t}\n\treturn uniqueChars.length;\n}\n", "    let chars = string.split('');\n\
    \    let uniqueChars = new Set();\n    for (let char of chars) {\n        uniqueChars.add(char);\n\
    \    }\n    return uniqueChars.size;\n}\n", "    let count = 1;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        if\
    \ (string.indexOf(char.toLowerCase()) === -1 && string.indexOf(char.toUpperCase())\
    \ === -1) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (string.includes(char.toLowerCase())) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (chars.indexOf(char) === -1) {\n\
    \            chars.push(char);\n        }\n    }\n    return chars.length;\n}\n",
  "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\tif (char ===\
    \ char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\t\
    let count = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string.charAt(i);\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "  return string.split('').reduce((prev, curr)\
    \ => {\n    return prev + curr.toUpperCase() === curr.toLowerCase() ? prev + 1\
    \ : prev;\n  }, 0);\n}\n", "  let chars = string.split('');\n  let charsCount\
    \ = {};\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i];\n\
    \    if (charsCount[char]) {\n      charsCount[char] += 1;\n    } else {\n   \
    \   charsCount[char] = 1;\n    }\n  }\n  return Object.keys(charsCount).length;\n\
    }\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tchars += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "    let distinct\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === char.toUpperCase()) {\n            distinct++;\n       \
    \ }\n        else if (char === char.toLowerCase()) {\n            distinct++;\n\
    \        }\n    }\n    return distinct;\n}\n", "  let chars: number[] = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "\tlet chars: number =\
    \ 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tchars += string.charCodeAt(i);\n\
    \t}\n\treturn chars;\n}\n", "    let chars: number = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        const char = string[i];\n        if (chars.indexOf(char)\
    \ === -1) {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tlet distinctCount = 0;\n\tfor (let i = 0; i <\
    \ string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tdistinctCount++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\
    \t\tdistinctCount++;\n\t\t}\n\t}\n\treturn distinctCount;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    const char = string.charAt(i);\n    if (char.match(/[a-z]/i)) {\n      count++;\n\
    \    }\n    if (char.match(/[A-Z]/i)) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    let chars: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string[i];\n        if (chars.indexOf(char) === -1)\
    \ {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\n", "  let chars: number = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (chars.indexOf(char)\
    \ === -1) {\n      chars.push(char);\n    }\n  }\n  return chars.length;\n}\n",
  "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ !== string.charCodeAt(i - 1)) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet\
    \ char = string[i];\n\t\tlet lowerCaseChar = char.toLowerCase();\n\t\tif (lowerCaseChar\
    \ === char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let chars:\
    \ number[] = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "  const chars = string.split('');\n\
    \  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char\
    \ = chars[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "    let distinctCount = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (distinctCount < string[i].toUpperCase().charCodeAt(0) -\
    \ string[i].toLowerCase().charCodeAt(0)) {\n            distinctCount++;\n   \
    \     }\n    }\n    return distinctCount;\n}\n", "  let count = 1;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string[i] !== string[i].toLowerCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  return string\n   \
    \ .split('')\n    .reduce((acc, curr) => {\n      return acc + count_distinct_characters(curr);\n\
    \    }, 0);\n}\n", "\tlet count = 1;\n\tfor (let i = 0; i < string.length; i++)\
    \ {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacterCount = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char === char.toLowerCase()) {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\t\
    }\n\treturn distinctCharacterCount;\n}\n", "\tlet count = 0;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacterCount = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet previousChar = string[i - 1];\n\t\tif (currentChar === previousChar) {\n\
    \t\t\tdistinctCharacterCount++;\n\t\t} else {\n\t\t\tdistinctCharacterCount =\
    \ 1;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "  let count = 1;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) !==\
    \ string.charCodeAt(i - 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ !== string.charCodeAt(i - 1)) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let chars = string.split('');\n  let char_count\
    \ = chars.length;\n  let distinct_char_count = 0;\n  for (let i = 0; i < chars.length;\
    \ i++) {\n    if (chars.indexOf(chars[i]) == i) {\n      distinct_char_count++;\n\
    \    }\n  }\n  return distinct_char_count;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let chars: string[] = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string[i].toLowerCase());\n\
    \  }\n  return chars.filter((char: string) => chars.indexOf(char) === -1).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charCodeAt(i) >= 65 && string.charCodeAt(i) <= 90) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet previousChar = string[i - 1];\n\t\tif (currentChar === previousChar) {\n\
    \t\t\tdistinctCharacterCount++;\n\t\t} else {\n\t\t\tdistinctCharacterCount =\
    \ 1;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "  let distinctCharCount\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (distinctCharCount < char.toLowerCase().length) {\n      distinctCharCount\
    \ = char.toLowerCase().length;\n    }\n  }\n  return distinctCharCount;\n}\n",
  "\tlet distinctCharacterCount = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "\tlet count = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char ===\
    \ char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\t\
    let count = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string.charAt(i);\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let chars: number[] = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "  let chars: number[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet\
    \ char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\
    \t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (char.toLowerCase() !== char) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "\tlet distinctCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string.charAt(i);\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tdistinctCount++;\n\t\t}\n\t\telse\
    \ if (char === char.toLowerCase()) {\n\t\t\tdistinctCount++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tdistinctCount++;\n\t\t}\n\t}\n\treturn distinctCount;\n}\n", "\tlet\
    \ count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\n", "  let count = 1;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (string.includes(char.toLowerCase()))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let chars = string.split('');\n\
    \    let charsCount = {};\n    for (let i = 0; i < chars.length; i++) {\n    \
    \    let char = chars[i];\n        if (charsCount[char]) {\n            charsCount[char]++;\n\
    \        } else {\n            charsCount[char] = 1;\n        }\n    }\n    return\
    \ Object.keys(charsCount).length;\n}\n", "  let chars: number = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (chars.includes(char))\
    \ {\n      chars++;\n    } else {\n      chars = chars + 1;\n    }\n  }\n  return\
    \ chars;\n}\n", "\tlet count = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tif (string[i] !== string[i].toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 1;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) !== string.charCodeAt(i\
    \ - 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let chars: number[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((acc, val) => acc + val, 0);\n}\n", "\tlet distinct\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.charCodeAt(0) !== char.charCodeAt(0)) {\n\t\t\tdistinct++;\n\t\t\
    }\n\t}\n\treturn distinct;\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ string.length; i++) {\n        const char = string[i];\n        if (char ===\
    \ char.toUpperCase()) {\n            count++;\n        } else if (char === char.toLowerCase())\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() !== char) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let chars = string.split('');\n  let char_count = chars.length;\n\
    \  let char_count_distinct = chars.filter(char => char.match(/[a-z]/i)).length;\n\
    \  return char_count_distinct;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\t\
    \tif (char === char.toUpperCase()) {\n\t\t\tdistinctCharacterCount++;\n\t\t} else\
    \ if (char === char.toLowerCase()) {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\
    \t}\n\treturn distinctCharacterCount;\n}\n", "  let distinctCharacters = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n      distinctCharacters++;\n    }\n  }\n  return distinctCharacters;\n}\n",
  "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char\
    \ = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tdistinct++;\n\t\t\
    }\n\t}\n\treturn distinct;\n}\n", "  let count = 1;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charCodeAt(i) !== string.charCodeAt(i - 1)) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\n", "  let chars = string.split('');\n\
    \  let char_count = chars.length;\n  let char_count_distinct = chars.filter((char)\
    \ => char.match(/[a-z]/i)).length;\n  return char_count - char_count_distinct;\n\
    }\n", "    let distinctCharacterCount = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (distinctCharacterCount < string[i].toUpperCase().charCodeAt(0))\
    \ {\n            distinctCharacterCount += string[i].toUpperCase().charCodeAt(0)\
    \ - string[i].toUpperCase().charCodeAt(0).toLowerCase();\n        }\n        else\
    \ if (distinctCharacterCount < string[i].toLowerCase().charCodeAt(0)) {\n    \
    \        distinctCharacterCount += string[i].toLowerCase().charCodeAt(0) - string[i].toLowerCase().charCodeAt(0).toLowerCase();\n\
    \        }\n    }\n    return distinctCharacterCount;\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let chars: number[] = [];\n  for (let i = 0; i < string.length; i++)\
    \ {\n    chars.push(string.charCodeAt(i));\n  }\n  return chars.reduce((acc, val)\
    \ => acc + val, 0);\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tif (distinctCharacterCount < currentChar.toLowerCase().length) {\n\t\t\tdistinctCharacterCount\
    \ = currentChar.toLowerCase().length;\n\t\t}\n\t\tif (distinctCharacterCount <\
    \ currentChar.toUpperCase().length) {\n\t\t\tdistinctCharacterCount = currentChar.toUpperCase().length;\n\
    \t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "\tlet count = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.match(/[a-z]/i)) {\n      count += 1;\n    }\n\
    \    if (char.match(/[A-Z]/i)) {\n      count += 1;\n    }\n  }\n  return count;\n\
    }\n", "  const chars = string.split('');\n  const uniqueChars = {};\n  chars.forEach((char)\
    \ => {\n    uniqueChars[char] = uniqueChars[char] ? uniqueChars[char] + 1 : 1;\n\
    \  });\n  return Object.keys(uniqueChars).length;\n}\n", "  const chars = string.split('');\n\
    \  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char\
    \ = chars[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "    let count = 1;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "\tlet distinct\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.charCodeAt(0) !== char.charCodeAt(0)) {\n\t\t\tdistinct++;\n\t\t\
    }\n\t}\n\treturn distinct;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let distinct = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) !==\
    \ string.charCodeAt(i).toUpperCase()) {\n      distinct++;\n    }\n  }\n  return\
    \ distinct;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++)\
    \ {\n    const char = string[i];\n    if (char.toLowerCase() !== char) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "\tlet chars: number[] = [];\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tchars.push(string.charCodeAt(i));\n\
    \t}\n\tlet uniqueChars: number[] = [];\n\tfor (let i = 0; i < chars.length; i++)\
    \ {\n\t\tlet char = chars[i];\n\t\tif (uniqueChars.indexOf(char) === -1) {\n\t\
    \t\tuniqueChars.push(char);\n\t\t}\n\t}\n\treturn uniqueChars.length;\n}\n", "\t\
    let distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char =\
    \ string[i];\n\t\tlet lower = char.toLowerCase();\n\t\tlet upper = char.toUpperCase();\n\
    \t\tif (lower === upper) {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tlet character = string[i];\n\t\t\
    if (distinctCharacterCount < character.toLowerCase().length) {\n\t\t\tdistinctCharacterCount\
    \ = character.toLowerCase().length;\n\t\t}\n\t\tif (distinctCharacterCount < character.toUpperCase().length)\
    \ {\n\t\t\tdistinctCharacterCount = character.toUpperCase().length;\n\t\t}\n\t\
    }\n\treturn distinctCharacterCount;\n}\n", "    let chars: number[] = [];\n  \
    \  for (let i = 0; i < string.length; i++) {\n        chars.push(string.charCodeAt(i));\n\
    \    }\n    return chars.filter((value, index, self) => self.indexOf(value) ===\
    \ index).length;\n}\n", "  let chars: number[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    chars.push(string.charCodeAt(i));\n  }\n  return chars.reduce((a,\
    \ b) => a + b, 0);\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase() === char.toUpperCase())\
    \ {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "  let count = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toLowerCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  return string.split('').filter((char)\
    \ => char.match(/[a-z]/i)).filter((char) => char.match(/[A-Z]/i)).filter((char)\
    \ => char.match(/[0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/)).filter((char) => char.match(/[^a-zA-Z0-9]/)).filter((char)\
    \ => char.", "\tlet distinctCharacterCount = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet character = string[i];\n\t\tif (distinctCharacterCount > 0)\
    \ {\n\t\t\tif (distinctCharacterCount !== character) {\n\t\t\t\tdistinctCharacterCount++;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tdistinctCharacterCount = character;\n\t\t}\n\t}\n\
    \treturn distinctCharacterCount;\n}\n", "  let chars: number[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n  }\n\
    \  return chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet chars: number = 0;\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tlet char = string.charAt(i);\n\t\tif (char\
    \ === char.toUpperCase()) {\n\t\t\tchars += 1;\n\t\t} else if (char === char.toLowerCase())\
    \ {\n\t\t\tchars += 2;\n\t\t}\n\t}\n\treturn chars;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tif (currentChar === currentChar.toLowerCase()) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t}\n\t\tif (currentChar === currentChar.toUpperCase()) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "  let distinctCharacterCount\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n\
    \    if (distinctCharacterCount < character.toLowerCase().length) {\n      distinctCharacterCount\
    \ = character.toLowerCase().length;\n    }\n  }\n  return distinctCharacterCount;\n\
    }\n", "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let char_count: number = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n     \
    \ char_count++;\n    }\n    if (char.match(/[A-Z]/i)) {\n      char_count++;\n\
    \    }\n  }\n  return char_count;\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n\
    \  const charsCount = chars.reduce((acc, curr) => {\n    return acc + count_distinct_characters(curr);\n\
    \  }, 0);\n  return charsCount;\n}\n", "\tlet distinctCharacterCount = 0;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\t\
    \tlet previousChar = string[i - 1];\n\t\tif (currentChar === previousChar) {\n\
    \t\t\tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n\
    }\n", "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n\
    \    if (string[i] !== string[i].toLowerCase()) {\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\
    \t\tdistinct++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\
    \t\t}\n\t}\n\treturn distinct;\n}\n", "    let chars: number = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        if\
    \ (chars.indexOf(char) === -1) {\n            chars.push(char);\n        }\n \
    \   }\n    return chars.length;\n}\n", "  let count = 0;\n  for (let i = 0; i\
    \ < string.length; i++) {\n    const char = string.charAt(i);\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    let distinctCharacterCount = 0;\n    for (let i = 0; i <\
    \ string.length; i++) {\n        const character = string[i];\n        if (distinctCharacterCount\
    \ < character.toLowerCase().length) {\n            distinctCharacterCount = character.toLowerCase().length;\n\
    \        }\n    }\n    return distinctCharacterCount;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet previousChar = string[i - 1];\n\t\tif (currentChar === previousChar) {\n\
    \t\t\tdistinctCharacterCount++;\n\t\t} else {\n\t\t\tdistinctCharacterCount =\
    \ 1;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "  const chars = string.split('');\n\
    \  const charsLength = chars.length;\n  let distinctCharsCount = 0;\n  for (let\
    \ i = 0; i < charsLength; i++) {\n    const char = chars[i];\n    if (char.charCodeAt(0)\
    \ !== char.charCodeAt(0)) {\n      distinctCharsCount++;\n    }\n  }\n  return\
    \ distinctCharsCount;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() !== char) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "\tlet count = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let chars = string.split('');\n  let char_count: number = 0;\n  for (let\
    \ i = 0; i < chars.length; i++) {\n    let char = chars[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      char_count++;\n    }\n  }\n  return char_count;\n}\n", "    let distinctCharacterCount\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        const currentChar\
    \ = string[i];\n        if (distinctCharacterCount === 0 && currentChar !== currentChar.toLowerCase())\
    \ {\n            distinctCharacterCount++;\n        }\n        else if (distinctCharacterCount\
    \ === 0 && currentChar !== currentChar.toUpperCase()) {\n            distinctCharacterCount++;\n\
    \        }\n        else if (distinctCharacterCount > 0) {\n            distinctCharacterCount++;\n\
    \        }\n    }\n    return distinctCharacterCount;\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\
    \t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "\tlet count = 1;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tif (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let chars: number[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n\
    }\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\t\
    let char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tdistinct++;\n\
    \t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\t\t}\n\
    \t\telse {\n\t\t\tdistinct--;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() !== char.toUpperCase()) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      count++;\n \
    \   }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n  const\
    \ charsLength = chars.length;\n  let distinctCharsCount = 0;\n\n  for (let i =\
    \ 0; i < charsLength; i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n     \
    \ distinctCharsCount++;\n    }\n  }\n\n  return distinctCharsCount;\n}\n", "\t\
    let distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char\
    \ = string[i];\n\t\tif (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\t\t\
    }\n\t}\n\treturn distinct;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst currentChar = string[i];\n\t\tif\
    \ (distinctCharacterCount < currentChar.toLowerCase().length) {\n\t\t\tdistinctCharacterCount\
    \ = currentChar.toLowerCase().length;\n\t\t}\n\t\tif (distinctCharacterCount <\
    \ currentChar.toUpperCase().length) {\n\t\t\tdistinctCharacterCount = currentChar.toUpperCase().length;\n\
    \t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "\tlet distinct = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase()\
    \ === char.toUpperCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    let count = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        let char = string[i];\n        if (char.toLowerCase()\
    \ !== char) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  let chars = string.split('');\n  let char_count = chars.length;\n  let distinct_char_count\
    \ = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i])\
    \ !== i) {\n      distinct_char_count++;\n    }\n  }\n  return distinct_char_count;\n\
    }\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tchars += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "    let count\
    \ = 1;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "\tlet chars = string.split(\"\
    \");\n\tlet uniqueChars = {};\n\tlet count = 0;\n\tfor (let i = 0; i < chars.length;\
    \ i++) {\n\t\tlet char = chars[i];\n\t\tif (uniqueChars[char]) {\n\t\t\tuniqueChars[char]++;\n\
    \t\t} else {\n\t\t\tuniqueChars[char] = 1;\n\t\t}\n\t}\n\tfor (let char in uniqueChars)\
    \ {\n\t\tcount += uniqueChars[char];\n\t}\n\treturn count;\n}\n", "  let chars\
    \ = string.split('');\n  let count = 1;\n  for (let i = 0; i < chars.length; i++)\
    \ {\n    if (chars[i] === chars[i - 1]) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    let char_count: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n\
    \            char_count++;\n        }\n    }\n    return char_count;\n}\n", "\t\
    let chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tchars\
    \ += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let char_count:\
    \ number = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    const char_code = char.charCodeAt(0);\n    if (char_code >= 65 && char_code\
    \ <= 90) {\n      char_count++;\n    }\n  }\n  return char_count;\n}\n", "   \
    \ let distinctCharacterCount = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (char.toLowerCase() === char.toUpperCase())\
    \ {\n            distinctCharacterCount++;\n        }\n    }\n    return distinctCharacterCount;\n\
    }\n", "  let chars = string.split('');\n  let char_count = chars.length;\n  let\
    \ char_count_distinct = 0;\n  for (let i = 0; i < chars.length; i++) {\n    let\
    \ char = chars[i];\n    if (char.match(/[a-z]/i)) {\n      char_count_distinct\
    \ += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      char_count_distinct +=\
    \ 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      char_count_distinct += 1;\n\
    \    }\n  }\n  return char_count_distinct;\n}\n", "  let count = 1;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string[i] !== string[i].toLowerCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet chars: number =\
    \ 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (chars.indexOf(char) === -1) {\n\t\t\tchars++;\n\t\t}\n\t}\n\treturn chars;\n\
    }\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\t\
    const char = string.charAt(i);\n\t\tif (char === char.toUpperCase()) {\n\t\t\t\
    distinct++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\
    \t\t}\n\t\telse {\n\t\t\tdistinct--;\n\t\t}\n\t}\n\treturn distinct;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char\
    \ = string[i];\n    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 1;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charCodeAt(i) !== string.charCodeAt(i - 1)) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\n", "  let distinct = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      distinct++;\n    }\n  }\n  return distinct;\n}\n", "\tlet\
    \ count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n\
    \  const uniqueChars = {};\n  for (let i = 0; i < chars.length; i++) {\n    const\
    \ char = chars[i];\n    if (uniqueChars[char]) {\n      uniqueChars[char]++;\n\
    \    } else {\n      uniqueChars[char] = 1;\n    }\n  }\n  return Object.keys(uniqueChars).length;\n\
    }\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\t\
    const char = string[i];\n\t\tif (char.toLowerCase() === char.toUpperCase()) {\n\
    \t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "\tlet distinct = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t\telse if (char\
    \ === char.toUpperCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t\telse {\n\t\t\tdistinct--;\n\
    \t\t}\n\t}\n\treturn distinct;\n}\n", "  let chars = string.split(\"\");\n  let\
    \ charCount = new Map();\n  for (let i = 0; i < chars.length; i++) {\n    let\
    \ char = chars[i];\n    if (charCount.has(char)) {\n      charCount.set(char,\
    \ charCount.get(char) + 1);\n    } else {\n      charCount.set(char, 1);\n   \
    \ }\n  }\n  return charCount.size;\n}\n", "\tlet chars: number = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tchars++;\n\t\t} else if (char === char.toLowerCase())\
    \ {\n\t\t\tchars++;\n\t\t}\n\t}\n\treturn chars;\n}\n", "    let chars: number\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (chars.indexOf(char) === -1) {\n            chars.push(char);\n  \
    \      }\n    }\n    return chars.length;\n}\n", "  let chars = string.split('');\n\
    \  let charsCount = chars.length;\n  let distinctCharsCount = 0;\n  for (let i\
    \ = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n    \
    \  distinctCharsCount++;\n    }\n  }\n  return distinctCharsCount;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\
    \t\tcount++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet distinct = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t\
    }\n\treturn distinct;\n}\n", "\tlet distinctCharacters = 0;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tlet character = string[i].toLowerCase();\n\t\t\
    if (distinctCharacters < character.length) {\n\t\t\tdistinctCharacters = character.length;\n\
    \t\t}\n\t}\n\treturn distinctCharacters;\n}\n", "\tlet chars = string.split('');\n\
    \tlet uniqueChars = {};\n\tfor (let i = 0; i < chars.length; i++) {\n\t\tlet char\
    \ = chars[i];\n\t\tif (uniqueChars[char]) {\n\t\t\tuniqueChars[char]++;\n\t\t\
    } else {\n\t\t\tuniqueChars[char] = 1;\n\t\t}\n\t}\n\treturn Object.keys(uniqueChars).length;\n\
    }\n", "  return string\n    .split('')\n    .reduce((acc, cur) => {\n      return\
    \ acc + count_distinct_characters(cur);\n    }, 0);\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\telse if (char ===\
    \ char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", " \
    \   let chars: number[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        chars.push(string.charCodeAt(i));\n    }\n    return chars.reduce((a,\
    \ b) => a + b, 0);\n}\n", "  const chars = string.split('');\n  const charsLength\
    \ = chars.length;\n  const distinctCharsSet = new Set<string>();\n  for (let i\
    \ = 0; i < charsLength; i++) {\n    distinctCharsSet.add(chars[i]);\n  }\n  return\
    \ charsLength - distinctCharsSet.size;\n}\n", "    let count = 1;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        let\
    \ lowerChar = string[i].toLowerCase();\n        let upperChar = string[i].toUpperCase();\n\
    \        if (char === lowerChar || char === upperChar) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "  const chars = string.split('');\n\
    \  const counts = {};\n  for (let i = 0; i < chars.length; i++) {\n    const char\
    \ = chars[i];\n    counts[char] = (counts[char] || 0) + 1;\n  }\n  return Object.keys(counts).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++)\
    \ {\n\t\tlet char = string[i];\n\t\tlet lowerChar = string[i].toLowerCase();\n\
    \t\tlet upperChar = string[i].toUpperCase();\n\t\tif (char === lowerChar || char\
    \ === upperChar) {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "\t\
    let count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    \telse if (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "  const chars = string.split('');\n  const charsLength = chars.length;\n\
    \  const counts = new Array(charsLength);\n  for (let i = 0; i < charsLength;\
    \ i++) {\n    counts[chars.charCodeAt(i)] = 0;\n  }\n  for (let i = 0; i < charsLength;\
    \ i++) {\n    counts[chars.charCodeAt(i)] += 1;\n  }\n  return counts.length;\n\
    }\n", "  let chars = string.split('');\n  let charsCount = chars.length;\n  let\
    \ distinctCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    let char\
    \ = chars[i];\n    let lowerChar = char.toLowerCase();\n    if (lowerChar !==\
    \ char) {\n      distinctCharsCount++;\n    }\n  }\n  return distinctCharsCount;\n\
    }\n", "  return string\n    .split('')\n    .reduce((prev, curr) => {\n      return\
    \ prev + curr.length;\n    }, 0);\n}\n", "  let chars: number = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (chars.indexOf(char)\
    \ === -1) {\n      chars.push(char);\n    }\n  }\n  return chars.length;\n}\n",
  "    let distinctCharacterCount = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        const currentChar = string[i];\n        if (distinctCharacterCount\
    \ < currentChar.toLowerCase().length) {\n            distinctCharacterCount =\
    \ currentChar.toLowerCase().length;\n        }\n    }\n    return distinctCharacterCount;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet\
    \ char = string[i];\n\t\tlet lower = char.toLowerCase();\n\t\tif (lower !== char)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    let distinct = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.charCodeAt(i)\
    \ !== string.charCodeAt(i).toUpperCase()) {\n            distinct++;\n       \
    \ }\n    }\n    return distinct;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i\
    \ < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  let chars = string.split('');\n  let char_count\
    \ = chars.length;\n  let char_count_distinct = chars.filter((char) => char.match(/[a-z]/i)).length;\n\
    \  return char_count_distinct;\n}\n", "  let distinct = 0;\n  for (let i = 0;\
    \ i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase())\
    \ {\n      distinct++;\n    }\n  }\n  return distinct;\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst\
    \ char = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "    let chars: number[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        if\
    \ (chars.indexOf(char) === -1) {\n            chars.push(char);\n        }\n \
    \   }\n    return chars.length;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i\
    \ < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif (char.toLowerCase()\
    \ !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacters\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tdistinctCharacters++;\n\t\t}\n\t\
    \tif (char === char.toLowerCase()) {\n\t\t\tdistinctCharacters++;\n\t\t}\n\t}\n\
    \treturn distinctCharacters;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet count = 0;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tconst\
    \ lower = char.toLowerCase();\n\t\tconst upper = char.toUpperCase();\n\t\tif (lower\
    \ === upper) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char.match(/[a-z]/i)) {\n            count += 1;\n        }\n   \
    \     if (char.match(/[A-Z]/i)) {\n            count += 1;\n        }\n      \
    \  if (char.match(/[0-9]/i)) {\n            count += 1;\n        }\n    }\n  \
    \  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() !== char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let chars: number[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  return string.split('').filter((char) => char.match(/[a-z]/i)).filter((char)\
    \ => char.match(/[A-Z]/i)).filter((char) => char.match(/[0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/", "  let count = 0;\n  for (let i = 0; i < string.length; i++)\
    \ {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let chars: string[] = string.split('');\n\
    \  let charsSet = new Set(chars);\n  return charsSet.size;\n}\n", "\tlet distinctCharacters\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet character = string[i];\n\
    \t\tif (distinctCharacters < character.toLowerCase().length) {\n\t\t\tdistinctCharacters\
    \ = character.toLowerCase().length;\n\t\t}\n\t\tif (distinctCharacters < character.toUpperCase().length)\
    \ {\n\t\t\tdistinctCharacters = character.toUpperCase().length;\n\t\t}\n\t}\n\t\
    return distinctCharacters;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
