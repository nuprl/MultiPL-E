name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["\tlet chars = string.split(\"\");\n\tlet charsSet = new Set(chars);\n\
    \treturn charsSet.size;\n}\n", "\tlet chars: number[] = [];\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tchars.push(string.charCodeAt(i));\n\t}\n\tlet\
    \ uniqueChars: number[] = [];\n\tfor (let i = 0; i < chars.length; i++) {\n\t\t\
    let char = chars[i];\n\t\tif (uniqueChars.indexOf(char) === -1) {\n\t\t\tuniqueChars.push(char);\n\
    \t\t}\n\t}\n\treturn uniqueChars.length;\n}\n", "    let chars = string.split('');\n\
    \    let uniqueChars = new Set();\n    for (let char of chars) {\n        uniqueChars.add(char);\n\
    \    }\n    return uniqueChars.size;\n}\n", "    let count = 1;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        if\
    \ (string.indexOf(char.toLowerCase()) === -1 && string.indexOf(char.toUpperCase())\
    \ === -1) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  let count = 1;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (string.includes(char.toLowerCase())) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    \tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (chars.indexOf(char) === -1) {\n\
    \            chars.push(char);\n        }\n    }\n    return chars.length;\n}\n",
  "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\tif (char ===\
    \ char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\t\
    let count = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string.charAt(i);\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "  return string.split('').reduce((prev, curr)\
    \ => {\n    return prev + curr.toUpperCase() === curr.toLowerCase() ? prev + 1\
    \ : prev;\n  }, 0);\n}\n", "  let chars = string.split('');\n  let charsCount\
    \ = {};\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i];\n\
    \    if (charsCount[char]) {\n      charsCount[char] += 1;\n    } else {\n   \
    \   charsCount[char] = 1;\n    }\n  }\n  return Object.keys(charsCount).length;\n\
    }\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tchars += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "    let distinct\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === char.toUpperCase()) {\n            distinct++;\n       \
    \ }\n        else if (char === char.toLowerCase()) {\n            distinct++;\n\
    \        }\n    }\n    return distinct;\n}\n", "  let chars: number[] = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "\tlet chars: number =\
    \ 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tchars += string.charCodeAt(i);\n\
    \t}\n\treturn chars;\n}\n", "    let chars: number = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        const char = string[i];\n        if (chars.indexOf(char)\
    \ === -1) {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tlet distinctCount = 0;\n\tfor (let i = 0; i <\
    \ string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tdistinctCount++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\
    \t\tdistinctCount++;\n\t\t}\n\t}\n\treturn distinctCount;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
