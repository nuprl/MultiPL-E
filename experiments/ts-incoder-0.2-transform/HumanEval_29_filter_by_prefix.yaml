name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"\
  bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings:\
  \ string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\
    \treturn strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    const prefix_length = prefix.length;\n\
    \    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n   \
    \ return filtered_strings;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tlet filtered: string[] = [];\n\tfor (let i = 0; i < strings.length; i++)\
    \ {\n\t\tif (strings[i].startsWith(prefix)) {\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n", "  return strings.filter(function (str)\
    \ {\n    return str.startsWith(prefix);\n  });\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    const filtered_strings = strings.filter((s) => {\n\t\treturn s.startsWith(prefix);\n\
    \t});\n\treturn filtered_strings;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter((s) =>\
    \ s.startsWith(prefix));\n}\n", "\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\
    \treturn strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function\
    \ (str) {\n        return str.startsWith(prefix);\n    });\n}\n", "    const prefix_length\
    \ = prefix.length;\n    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n\
    \    return filtered_strings.map(s => s.substr(prefix_length));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function\
    \ (str) {\n        return str.startsWith(prefix);\n    });\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\treturn strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(function (str) {\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    const prefix_length = prefix.length;\n    const filtered_strings =\
    \ strings.filter(s => s.startsWith(prefix));\n    return filtered_strings;\n}\n",
  "  return strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "\tconst prefix_length = prefix.length;\n\tconst filtered_strings = strings.filter(s\
    \ => s.startsWith(prefix));\n\treturn filtered_strings.map(s => s.substr(prefix_length));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "\tlet result:\
    \ string[] = [];\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tif (strings[i].startsWith(prefix))\
    \ {\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "   \
    \ return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\treturn strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(function\
    \ (str) {\n    return str.startsWith(prefix);\n  });\n}\n", "\tconst filtered_strings\
    \ = strings.filter(s => s.startsWith(prefix));\n\treturn filtered_strings;\n}\n",
  "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\
    \treturn strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    const prefix_length = prefix.length;\n\
    \    const result: string[] = [];\n    for (const string of strings) {\n     \
    \   if (string.startsWith(prefix)) {\n            result.push(string);\n     \
    \   }\n    }\n    return result;\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tlet prefix_length = prefix.length;\n\tlet result: string[] = [];\n\t\
    for (let i = 0; i < strings.length; i++) {\n\t\tif (strings[i].substr(0, prefix_length)\
    \ === prefix) {\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    const\
    \ prefix_length = prefix.length;\n    const filtered_strings = strings.filter(s\
    \ => s.startsWith(prefix));\n    return filtered_strings.length ? filtered_strings\
    \ : [];\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "\t\
    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n\treturn\
    \ filtered_strings;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(function\
    \ (str) {\n    return str.startsWith(prefix);\n  });\n}\n", "    return strings.filter(function\
    \ (str) {\n        return str.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function\
    \ (str) {\n    return str.startsWith(prefix);\n  });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "    const prefix_length\
    \ = prefix.length;\n    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n\
    \    return filtered_strings;\n}\n", "    return strings.filter(function (str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "\tlet prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\
    \treturn strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\treturn strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\tconst prefix_length = prefix.length;\n\t\
    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(function (str) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "\tconst prefix_length\
    \ = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n}\n",
  "\tconst prefix_length = prefix.length;\n\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(function (str) {\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n", "  return strings.filter(s =>\
    \ s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "\treturn strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "\treturn strings.filter(s => s.startsWith(prefix));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
