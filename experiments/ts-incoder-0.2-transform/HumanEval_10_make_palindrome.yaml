name: HumanEval_10_make_palindrome
language: ts
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    const reversed = string\n        .split(\"\")\n        .reverse()\n\
    \        .join(\"\");\n    const prefix = string.slice(0, string.length - reversed.length);\n\
    \    return prefix + reversed;\n}\n", "  let longestPalindrome = string.substr(0,\
    \ string.length - 1);\n  let reversedLongestPalindrome = longestPalindrome.split('').reverse().join('');\n\
    \  return string + reversedLongestPalindrome;\n}\n", "  let max_len = string.length\n\
    \  let min_len = string.length\n  let min_palindrome = string\n  let max_palindrome\
    \ = string\n  let min_palindrome_len = string.length\n  let max_palindrome_len\
    \ = string.length\n  let min_palindrome_start = -1\n  let max_palindrome_start\
    \ = -1\n  let min_palindrome_end = -1\n  let max_palindrome_end = -1\n  let min_palindrome_mid\
    \ = -1\n  let max_palindrome_mid = -1\n  let min_palindrome_mid2 = -1\n  let max_palindrome_mid2\
    \ = -1\n  let min_palindrome_mid3 = -1\n  let max_palindrome_mid3 = -1\n  let\
    \ min_palindrome_mid4 = -1\n  let max_palindrome_mid4 = -1\n  let min_palindrome_mid5\
    \ = -1\n  let max_palindrome_mid5 = -1\n  let min_palindrome_mid6 = -1\n  let\
    \ max_palindrome_mid6 = -1\n  let min_palindrome_mid7 = -1\n  let max_palindrome_mid7\
    \ = -1\n  let min_palindrome_mid8 = -1\n  let max_palindrome_mid8 = -1\n  let\
    \ min_palindrome_mid9 = -1\n  let max_palindrome_mid9 = -1\n  let min_palindrome_mid10\
    \ = -1\n  let max_palindrome_mid10 = -1\n  let min_palindrome_mid11 = -1\n  let\
    \ max_palindrome_mid11 = -1\n  let min_palindrome_mid12 = -1\n  let max_palindrome_mid12\
    \ = -1\n  let min_palindrome_mid13 = -1\n  let max_palindrome_mid13 = -1\n  let\
    \ min_palindrome_mid14 = -1\n  let max_palindrome_mid14 = -1\n  let min_palindrome_mid15\
    \ = -1\n  let max_palindrome_mid15 = -1\n  let min_palindrome_mid16 = -1\n  let\
    \ max_palindrome_mid16 = -1\n  let min_palindrome_mid17 = -1\n  let max_palindrome_mid17\
    \ = -1\n  let min_palindrome_mid18 = -1\n  let max_palindrome_mid18 = -1\n  let\
    \ min_palindrome_mid19 = -1\n  let max_palindrome_mid19 = -1\n  let min_palindrome_mid20\
    \ = -1\n  let max_palindrome_mid20 = -1\n  let min_palindrome_mid21 = -1\n  let\
    \ max_palindrome_mid21 = -1\n  let min_palindrome_", "  let reverse: string =\
    \ string\n  let prefix: string = string\n  let suffix: string = string\n  let\
    \ longest: number = string.length\n  let longestPalindrome: string = string\n\
    \  let longestPalindromeLength: number = string.length\n  for (let i = 0; i <\
    \ string.length; i++) {\n    let char = string[i]\n    let index = string.indexOf(char,\
    \ i + 1)\n    if (index === -1) {\n      break\n    }\n    let nextChar = string[index]\n\
    \    let nextIndex = string.indexOf(nextChar, index + 1)\n    if (nextIndex ===\
    \ -1) {\n      break\n    }\n    if (char === nextChar) {\n      continue\n  \
    \  }\n    let palindrome = string.substring(i, nextIndex)\n    if (palindrome\
    \ === reverse) {\n      longestPalindrome = palindrome\n      longestPalindromeLength\
    \ = nextIndex - i\n      break\n    }\n  }\n  if (longestPalindromeLength > longest)\
    \ {\n    longest = longestPalindromeLength\n    longestPalindrome = longestPalindrome\n\
    \  }\n  return longestPalindrome\n}\n", "  const reverse: string = string\n  \
    \  .toLowerCase()\n    .split('')\n    .reverse()\n    .join('');\n  const prefix:\
    \ string = string.slice(0, reverse.length);\n  const suffix: string = string.slice(reverse.length);\n\
    \  return prefix + reverse + suffix;\n}\n", "    let longestPalindrome = longestPalindromeFrom(string);\n\
    \    if (longestPalindrome === \"\") {\n        return string;\n    }\n    let\
    \ reversedString = reverseString(longestPalindrome);\n    return string + reversedString;\n\
    }\n", "  let longestPalindrome = string\n  let longestPalindromeLength = 0\n \
    \ for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    const\
    \ reversedChar = string[string.length - i - 1]\n    if (char === reversedChar)\
    \ {\n      longestPalindromeLength++\n    } else {\n      if (longestPalindromeLength\
    \ > longestPalindrome.length) {\n        longestPalindrome = string.slice(0, longestPalindromeLength)\n\
    \      }\n      longestPalindromeLength = 1\n    }\n  }\n  return longestPalindrome\n\
    }\n", "  let longestPalindrome = string\n  let longestPalindromeLength = string.length\n\
    \  let longestPalindromePrefix = \"\"\n  let longestPalindromeSuffix = \"\"\n\
    \  let longestPalindromeSuffixReverse = \"\"\n  let longestPalindromeSuffixReverseLength\
    \ = 0\n\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i]\n\
    \    let currentCharLength = string[i].length\n\n    if (currentCharLength > longestPalindromeLength)\
    \ {\n      longestPalindrome = currentChar\n      longestPalindromeLength = currentCharLength\n\
    \      longestPalindromePrefix = \"\"\n      longestPalindromeSuffix = \"\"\n\
    \      longestPalindromeSuffixReverse = \"\"\n      longestPalindromeSuffixReverseLength\
    \ = 0\n    }\n\n    if (currentCharLength === longestPalindromeLength) {\n   \
    \   longestPalindromeSuffix += currentChar\n      longestPalindromeSuffixReverse\
    \ += currentChar\n      longestPalindromeSuffixReverseLength += currentCharLength\n\
    \    }\n\n    if (currentCharLength < longestPalindromeLength) {\n      longestPalindromePrefix\
    \ += currentChar\n    }\n  }\n\n  return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindromeSuffixReverse\n}\n", "  const reverse: string = string\n\
    \    .split(\"\")\n    .reverse()\n    .join(\"\");\n  const prefix: string =\
    \ string.split(\"\").reverse().join(\"\");\n  return prefix + reverse;\n}\n",
  "  let longestPalindrome = find_longest_palindrome(string);\n  let reversedLongestPalindrome\
    \ = reverse_palindrome(longestPalindrome);\n  return string + reversedLongestPalindrome;\n\
    }\n", "  if (string.length <= 1) {\n    return string;\n  }\n\n  const reversed\
    \ = string\n    .split('')\n    .reverse()\n    .join('');\n\n  return string\
    \ + reversed;\n}\n", "  if (string.length <= 1) {\n    return string;\n  }\n \
    \ const prefix_length = string.length - 1;\n  const postfix_length = string.length\
    \ - 1;\n  const prefix_postfix = string.slice(0, prefix_length);\n  const postfix_prefix\
    \ = string.slice(postfix_length, string.length);\n  const postfix_postfix = string.slice(prefix_length,\
    \ postfix_length);\n  const postfix_reverse = reverse(postfix_prefix);\n  const\
    \ postfix_palindrome = postfix_prefix + postfix_postfix + postfix_reverse;\n \
    \ return postfix_palindrome;\n}\n", "    let reverse: string = string.replace(/^./g,\
    \ (match: string) => match.split('').reverse().join(''));\n    return string +\
    \ reverse;\n}\n", "  let longestPalindrome = string.substr(0, string.length -\
    \ 1);\n  let reversedLongestPalindrome = longestPalindrome.repeat(longestPalindrome.length);\n\
    \  return string + reversedLongestPalindrome;\n}\n", "  const reversed = string\n\
    \    .split('')\n    .reverse()\n    .join('');\n  return string + reversed;\n\
    }\n", "  if (string === \"\") {\n    return \"\";\n  }\n  let longestPalindrome\
    \ = longestPalindromeRev(string);\n  return string + longestPalindrome;\n}\n",
  "  let longestPalindrome = string.substr(0, string.length - 1);\n  let longestPalindromeReversed\
    \ = longestPalindrome.split('').reverse().join('');\n  return longestPalindromeReversed\
    \ + longestPalindrome;\n}\n", "  const reversed = string\n    .split('')\n   \
    \ .reverse()\n    .join('');\n  const prefix = string.slice(0, string.length -\
    \ reversed.length);\n  return prefix + reversed;\n}\n", "  let longestPalindrome\
    \ = longestPalindromeFrom(string);\n  let reversedString = reverseString(longestPalindrome);\n\
    \  return string + reversedString;\n}\n", "  if (string.length <= 1) {\n    return\
    \ string;\n  }\n\n  const prefix_length = string.length - 1;\n  const postfix_length\
    \ = string.length - 1;\n  const prefix_postfix = string.slice(0, prefix_length);\n\
    \  const postfix_prefix = string.slice(prefix_length, postfix_length);\n\n  const\
    \ palindrome = prefix_postfix.concat(\n    string[prefix_length],\n    make_palindrome(postfix_prefix),\n\
    \  );\n\n  return palindrome;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
