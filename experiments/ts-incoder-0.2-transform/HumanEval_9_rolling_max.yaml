name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["    let rolling_max_numbers: number[] = [];\n    let rolling_max_numbers_length:\
    \ number = 0;\n    let rolling_max_numbers_sum: number = 0;\n    let rolling_max_numbers_index:\
    \ number = 0;\n    let rolling_max_numbers_index_sum: number = 0;\n    let rolling_max_numbers_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index: number = 0;\n \
    \   let rolling_max_numbers_index_length_index_sum: number = 0;\n    let rolling_max_numbers_index_length_index_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length: number =\
    \ 0;\n    let rolling_max_numbers_index_length_index_length_length_sum: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length: number\
    \ = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_sum:\
    \ number = 0;\n    let rolling_max_numbers_index_length_index_length_length_length_length_length_length_length:\
    \ number = 0;", "    const result: number[] = [];\n    let max: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n", "    let max: number[] = [];\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max[max.length\
    \ - 1]) {\n            max.push(numbers[i]);\n        }\n    }\n    return max;\n\
    }\n", "  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let maxIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \  let maxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "  const rolling_max_arr: number[] = [];\n  let rolling_max_num: number = 0;\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_num)\
    \ {\n      rolling_max_num = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_arr.push(rolling_max_num);\n  }\n  return rolling_max_arr;\n\
    }\n", "    const rolling_max_result: number[] = [];\n    const rolling_max_number:\
    \ number[] = [];\n    let rolling_max_number_index: number[] = [];\n    let rolling_max_number_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let rolling_max_number_index_index_index: number[] = [];\n\
    \    let rolling_max_number_index_index_index: number[] = [];\n    let rolling_max_number_index_index_index:\
    \ number[] = [];\n    let ", "  let max: number[] = [];\n  let current: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    current.push(numbers[i]);\n\
    \    if (i > 0) {\n      let maxElement = current[current.length - 1];\n     \
    \ for (let j = 0; j < current.length - 1; j++) {\n        if (current[j] > maxElement)\
    \ {\n          maxElement = current[j];\n        }\n      }\n      max.push(maxElement);\n\
    \    }\n  }\n  return max;\n}\n", "  const result = [];\n  let max = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  if (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    let result: number[] = [];\n    let max: number = 0;\n \
    \   let index: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n            index\
    \ = i;\n        }\n    }\n    for (let i = index; i < numbers.length; i++) {\n\
    \        result.push(numbers[i]);\n    }\n    return result;\n}\n", "  let max:\
    \ number[] = [];\n  let maxIndex: number[] = [];\n  let maxIndexIndex: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max[maxIndexIndex])\
    \ {\n      maxIndex.push(i);\n      maxIndexIndex.push(maxIndex.length - 1);\n\
    \      max.push(numbers[i]);\n    } else {\n      maxIndex[maxIndexIndex.pop()]\
    \ = i;\n    }\n  }\n  return max;\n}\n", "    const rolling_max_array: number[]\
    \ = [];\n    let rolling_max_index = 0;\n    let rolling_max_value = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_value)\
    \ {\n            rolling_max_value = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n   \
    \ return rolling_max_array;\n}\n", "    const rolling_max_array: number[] = [];\n\
    \    let rolling_max_number: number = 0;\n    let rolling_max_index = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > rolling_max_number)\
    \ {\n            rolling_max_number = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n  \
    \  for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] < rolling_max_number)\
    \ {\n            rolling_max_number = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n  \
    \  return rolling_max_array;\n}\n", "    let result: number[] = [];\n    let currentMax:\
    \ number = numbers[0];\n    let currentIndex: number = 0;\n    while (currentIndex\
    \ < numbers.length) {\n        if (numbers[currentIndex] > currentMax) {\n   \
    \         result.push(currentMax);\n            currentMax = numbers[currentIndex];\n\
    \        } else {\n            currentMax = numbers[currentIndex];\n        }\n\
    \        currentIndex++;\n    }\n    result.push(currentMax);\n    return result;\n\
    }\n", "    let result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n", "  const rolling_max_list: number[]\
    \ = [];\n  let rolling_max_number: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > rolling_max_number) {\n      rolling_max_number\
    \ = numbers[i];\n    }\n    rolling_max_list.push(rolling_max_number);\n  }\n\
    \  return rolling_max_list;\n}\n", "    const rolling_max_array: number[] = [];\n\
    \    let max_element: number = 0;\n    let max_index: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max_element) {\n\
    \            max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    for (let i = max_index; i < numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n\
    \    }\n    return rolling_max_array;\n}\n", "  const result: number[] = [];\n\
    \  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  let max: number[] = [];\n  let currentMax: number[] = [];\n  let currentMaxIndex:\
    \ number[] = [];\n  let currentMaxIndexIndex: number[] = [];\n  let currentMaxIndexIndexIndex:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    currentMax.push(numbers[i]);\n\
    \    currentMaxIndex.push(i);\n    currentMaxIndexIndex.push(i);\n    currentMaxIndexIndexIndex.push(i);\n\
    \  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n\
    \        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length; j++) {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j\
    \ + 1]) {\n        currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n\
    \        currentMaxIndexIndex[j].push(j);\n      }\n    }\n  }\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++)\
    \ {\n      if (currentMaxIndexIndex[j] < currentMaxIndexIndex[j + 1]) {\n    \
    \    currentMaxIndexIndex[j + 1] = currentMaxIndexIndex[j] + 1;\n        currentMaxIndexIndex[j].push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let\
    \ j = 0; j < numbers.length", "  const result = [];\n  let max = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
