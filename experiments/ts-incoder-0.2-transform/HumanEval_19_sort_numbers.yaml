name: HumanEval_19_sort_numbers
language: ts
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers(numbers: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  let numbers_array = numbers.split(\" \");\n  numbers_array.sort();\n\
    \  return numbers_array.join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n", "  let nums = numbers.split(\" \");\n  nums = nums.sort();\n  return\
    \ nums.join(\" \");\n}\n", "  let numbers_array = numbers.split(\" \");\n  numbers_array.sort();\n\
    \  return numbers_array.join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n", "  let numbers_array = numbers.split(\" \");\n  numbers_array.sort();\n\
    \  return numbers_array.join(\" \");\n}\n", "  return numbers.split(' ')\n   \
    \ .map(n => Number(n))\n    .sort((a, b) => a - b)\n    .map(n => n < 10 ? '0'\
    \ + n : n)\n    .join(' ');\n}\n", "  let nums = numbers.split(\" \");\n  let\
    \ sortedNums = nums.sort();\n  return sortedNums.join(\" \");\n}\n", "  return\
    \ numbers.split(\" \").sort().join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n", "  let numbers_array = numbers.split(\" \");\n  numbers_array.sort();\n\
    \  return numbers_array.join(\" \");\n}\n", "  return numbers.replace(/\\s+/g,\
    \ \"\").replace(/[^0-9]/g, \"\").replace(/\\s+$/g, \"\").replace(/^\\s+/, \"\"\
    ).replace(/\\s+/, \" \").split(\" \").sort().join(\" \");\n}\n", "  let numbers_array\
    \ = numbers.split(\" \");\n  let numbers_sorted = [];\n  for (let i = 0; i < numbers_array.length;\
    \ i++) {\n    let number = numbers_array[i];\n    if (number === \"zero\") {\n\
    \      numbers_sorted.push(\"zero\");\n    } else if (number === \"one\") {\n\
    \      numbers_sorted.push(\"one\");\n    } else if (number === \"two\") {\n \
    \     numbers_sorted.push(\"two\");\n    } else if (number === \"three\") {\n\
    \      numbers_sorted.push(\"three\");\n    } else if (number === \"four\") {\n\
    \      numbers_sorted.push(\"four\");\n    } else if (number === \"five\") {\n\
    \      numbers_sorted.push(\"five\");\n    } else if (number === \"six\") {\n\
    \      numbers_sorted.push(\"six\");\n    } else if (number === \"seven\") {\n\
    \      numbers_sorted.push(\"seven\");\n    } else if (number === \"eight\") {\n\
    \      numbers_sorted.push(\"eight\");\n    } else if (number === \"nine\") {\n\
    \      numbers_sorted.push(\"nine\");\n    } else {\n      numbers_sorted.push(number);\n\
    \    }\n  }\n  return numbers_sorted.join(\" \");\n}\n", "  const numbers_array\
    \ = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) =>\
    \ a - b);\n  return numbers_sorted.join(' ');\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n", "  let numbers_array = numbers.split(\" \");\n  let sorted_numbers\
    \ = numbers_array.sort();\n  return sorted_numbers.join(\" \");\n}\n", "\tlet\
    \ numbers_array = numbers.split(\" \");\n\tnumbers_array.sort((a, b) => a - b);\n\
    \treturn numbers_array.join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort();\n  return numbers_array.join(\" \");\n}\n", " \
    \ let numbers_array = numbers.split(\" \");\n  numbers_array.sort((a, b) => a\
    \ - b);\n  return numbers_array.join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
