name: HumanEval_158_find_max
language: ts
prompt: "//Write a function that accepts a list of strings.\n// The list contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if\
    \ (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n \
    \   }\n  }\n  return maxWord;\n}\n", "  let maxCount = 0;\n  let maxWord = \"\"\
    ;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let\
    \ j = 0; j < words[i].length; j++) {\n      if (words[i][j] !== undefined) {\n\
    \        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount\
    \ = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n}\n", " \
    \ let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = word.length();\n    if (count\
    \ > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n\
    \  return maxWord;\n}\n", "  let max: number = 0;\n  let word: string = \"\";\n\
    \  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let\
    \ j = 0; j < words[i].length; j++) {\n      count += words[i][j].length;\n   \
    \ }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n\
    \  }\n  return word;\n}\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for\
    \ (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0;\
    \ j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n\
    \      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord\
    \ = words[i];\n    }\n  }\n  return maxWord;\n}\n", "  let maxCount = 0;\n  let\
    \ maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count =\
    \ words[i].length;\n    if (count > maxCount) {\n      maxCount = count;\n   \
    \   maxWord = words[i];\n    }\n  }\n  return maxWord;\n}\n", "  let maxCount\
    \ = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n  \
    \  let word = words[i];\n    let count = countUniqueChars(word);\n    if (count\
    \ > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n\
    \  return maxWord;\n}\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n\
    \    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n", "  let max: number = 0;\n  let word: string\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n  \
    \  for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) ==\
    \ words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max)\
    \ {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n\
    }\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = countChars(word);\n    if\
    \ (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n\
    \  }\n  return maxWord;\n}\n", "  const charMap = new Map<string, number>();\n\
    \  for (const word of words) {\n    const chars = word.split('').map(c => c.charCodeAt(0));\n\
    \    const maxChar = chars.reduce((max, c) => Math.max(max, c), 0);\n    charMap.set(word,\
    \ maxChar);\n  }\n  const maxChars = Array.from(charMap.values()).sort((a, b)\
    \ => b - a);\n  return maxChars.reduce((a, b) => a < b ? a : b);\n}\n", "  let\
    \ maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++)\
    \ {\n    const word = words[i];\n    const count = countUniqueChars(word);\n \
    \   if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n", "  let maxCount = 0;\n  let maxWord = \"\
    \";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n  \
    \  let count = countChars(word);\n    if (count > maxCount) {\n      maxCount\
    \ = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "  let\
    \ max: number = 0;\n  let word: string = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let wordCount: number = words[i].length;\n    if (wordCount > max)\
    \ {\n      max = wordCount;\n      word = words[i];\n    }\n  }\n  return word;\n\
    }\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n\
    \    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "  let maxCount =\
    \ 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let\
    \ word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n\
    \      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n\
    \    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n", "  let maxCount = 0;\n  let maxWord = \"\
    \";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n\
    \    const count = word.length\n      ? word\n          .split(\"\")\n       \
    \   .reduce((acc, cur) => acc + cur.length, 0)\n      : 0;\n    if (count > maxCount)\
    \ {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      count += words[i][j].length;\n    }\n    if (count > maxCount) {\n    \
    \  maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n\
    }\n", "  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      if (words[i][j] !== undefined) {\n        count += 1;\n      }\n    }\n\
    \    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n\
    \    }\n  }\n  return maxWord;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
