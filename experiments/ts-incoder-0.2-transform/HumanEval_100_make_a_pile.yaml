name: HumanEval_100_make_a_pile
language: ts
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3,\
  \ 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5,\
  \ 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"
completions: ["  const pile: number[] = [];\n  for (let i = 1; i <= n; i++) {\n  \
    \  if (n % 2 === 0) {\n      pile.push(i);\n    } else {\n      pile.push(n -\
    \ i);\n    }\n  }\n  return pile;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n\
    \    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const pile = make_a_pile_internal(n, result);\n\
    \  return result;\n}\n", "  let pile: number[] = [];\n  for (let i = 1; i <= n;\
    \ i++) {\n    pile.push(i);\n  }\n  if (n % 2 === 0) {\n    pile.push(pile[pile.length\
    \ - 1]);\n  }\n  return pile;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\
    \ else {\n      result.push(n - i);\n    }\n  }\n  return result;\n}\n", "  const\
    \ arr: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n\
    \  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n}\n", " \
    \ const pile: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2\
    \ === 0) {\n      pile.push(i);\n    } else {\n      pile.push(pile[pile.length\
    \ - 1] + i);\n    }\n  }\n  return pile;\n}\n", "  const arr: number[] = [];\n\
    \  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n",
  "  const pile: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n\
    \  }\n  return pile;\n}\n", "  const arr: number[] = [];\n  for (let i = 1; i\
    \ <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n", "  const result =\
    \ [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n\
    \    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n}\n",
  "  let pile: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n\
    \  }\n  if (n % 2 === 0) {\n    pile.push(pile[pile.length - 1]);\n  }\n  return\
    \ pile;\n}\n", "  const result: number[] = [];\n  if (n === 0) return result;\n\
    \  const odd = n % 2 === 1;\n  const even = n % 2 === 0;\n  const nextOdd = odd\
    \ ? n : n + 1;\n  const nextEven = even ? n : n + 1;\n  result.push(odd ? nextOdd\
    \ : nextEven);\n  return make_a_pile(nextEven).concat(make_a_pile(nextOdd));\n\
    }\n", "  const result: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    if\
    \ (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n -\
    \ i);\n    }\n  }\n  return result;\n}\n", "  const pile: number[] = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i);\n  \
    \  } else {\n      pile.push(n - i);\n    }\n  }\n  return pile;\n}\n", "  const\
    \ stones: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 ===\
    \ 0) {\n      stones.push(stones[stones.length - 1] + i);\n    } else {\n    \
    \  stones.push(i);\n    }\n  }\n  return stones;\n}\n", "  const result = [];\n\
    \  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n\
    \    } else {\n      result.push(2 * i + 1);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n\
    \      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n\
    \  return result;\n}\n", "  const arr: number[] = [];\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n\
    \ - i);\n    }\n  }\n  return arr;\n}\n", "  const stones: number[] = [];\n  let\
    \ nextLevel: number[] = [];\n  if (n % 2 === 0) {\n    nextLevel = [n];\n  } else\
    \ {\n    nextLevel = [n - 1];\n  }\n  for (let i = 1; i <= n; i++) {\n    stones.push(nextLevel[i\
    \ % 2]);\n  }\n  return stones;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
