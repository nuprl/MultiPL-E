name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  return [min, ...strange_sort_list(lst.filter(x\
    \ => x !== min)), max];\n}\n", "  const min_val = Math.min(...lst);\n  const max_val\
    \ = Math.max(...lst);\n  const min_idx = lst.indexOf(min_val);\n  const max_idx\
    \ = lst.indexOf(max_val);\n  const mid_val = min_val + max_val / 2;\n  const mid_val\
    \ = mid_val.toString();\n  const mid_val_idx = lst.indexOf(mid_val);\n  const\
    \ mid_val_idx_idx = lst.indexOf(mid_val_idx);\n  const mid_val_idx_idx_idx = lst.indexOf(mid_val_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx);\n  const\
    \ mid_val_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx);\n\
    \  const mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = lst.indexOf(mid_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n", "  const\
    \ len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const\
    \ left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n", "  const minValue = Math.min(...lst);\n\
    \  const maxValue = Math.max(...lst);\n  const minIndex = lst.indexOf(minValue);\n\
    \  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex\
    \ + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const sortedList\
    \ = lst.slice();\n  sortedList.splice(middleIndex, 0, middleValue);\n  return\
    \ sortedList;\n}\n", "  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const leftHalf = lst.slice(0, middle);\n  const\
    \ rightHalf = lst.slice(middle);\n  return leftHalf.concat(strange_sort_list(rightHalf)).concat([maxValue],\
    \ minValue);\n}\n", "  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n", "  let min: number = lst[0];\n  let max: number\
    \ = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n  }\n  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n\
    \    result.push(i);\n  }\n  return result;\n}\n", "  const sorted = lst.slice();\n\
    \  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n", "  const sortedList:\
    \ number[] = [];\n  let min: number = Number.MAX_VALUE;\n  let max: number = Number.MIN_VALUE;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sortedList.push(min);\n\
    \    } else if (lst[i] > max) {\n      sortedList.push(max);\n    } else {\n \
    \     sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n", "  const\
    \ len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const\
    \ left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n", "  const len = lst.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len\
    \ - 1];\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([minValue],\
    \ strange_sort_list(right));\n}\n", "  const min = Math.min(...lst);\n  const\
    \ max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const\
    \ left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n", "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n",
  "  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n", "  if\
    \ (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(0, middle)),\n \
    \       strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle)),\n        strange_sort_list(lst.slice(middle)),\n\
    \        strange_sort_list(lst.", "  let min: number = lst[0];\n  let max: number\
    \ = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n  }\n  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n", "  const min_value = Math.min(...lst);\n\
    \  const max_value = Math.max(...lst);\n  const min_value_str = String(min_value);\n\
    \  const max_value_str = String(max_value);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);\n  const min_value_int = parseInt(min_value_str,\
    \ 10);\n  const max_value_int = parseInt(max_value_str, 10);\n  const min_value_str\
    \ = String(min_value_int);\n  const max_value_str = String(max_value_int);\n \
    \ const min_value_int = parseInt(min_value_str, 10);\n  const max_value_int =\
    \ parseInt(max_value_str, 10);\n  const min_value_str = String(min_value_int);\n\
    \  const max_value_str = String(max_value_int);", "  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
    \ left.concat(strange_sort_list(right)).concat([max], strange_sort_list(left));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
