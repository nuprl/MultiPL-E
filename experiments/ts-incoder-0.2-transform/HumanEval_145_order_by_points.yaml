name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((sum,\
    \ index) => [sum, index]);\n  return order.sort((a, b) => a[0] - b[0]).map(a =>\
    \ a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x\
    \ => x * x);\n  const sorted = sums.sort((a, b) => a - b);\n  const index = new\
    \ Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    index[sorted[i]]\
    \ = i;\n  }\n  return nums.map((x, i) => index[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ - digit < 0) {\n      result.push(num);\n      continue;\n    }\n    for (let\
    \ j = digits_len - 1; j >= 0; j--) {\n      const left = digits[j];\n      const\
    \ right = sum_digits - left - digit;\n      if (right > 0) {\n        result.push(num);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => Math.abs(n));\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const digit = digits[i];\n    if (digit === sum_digits) {\n      result.push(nums[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const sums = nums.map(n => n.toString().split('').reduce((acc,\
    \ c) => acc + +c, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((acc,\
    \ d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    if (digit === sum_digits) {\n    \
    \  result.push(nums[i]);\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).join('');\n\
    \  const map = new Map<string, number>();\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    const digit = digits[i];\n    const index = map.get(digit);\n  \
    \  if (index === undefined) {\n      map.set(digit, i);\n    } else {\n      map.set(digit,\
    \ index + 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of\
    \ map.entries()) {\n    result.push(nums[value]);\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const sorted = sums.sort((a, b) => a -\
    \ b);\n  const index = sums.indexOf(sorted[0]);\n  return nums.map((n, i) => i\
    \ === index ? n : sorted[i]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(num => num.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sums = digits.map(d => d.reduce((acc, cur)\
    \ => acc + cur, 0));\n  const sorted = sums.map((sum, index) => [sum, index]);\n\
    \  sorted.sort((a, b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(n =>\
    \ Number(n));\n  const len = sums.length;\n  const result = new Array(len);\n\
    \  for (let i = 0; i < len; i++) {\n    result[i] = sums[i];\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(n\
    \ => n.toString().split('').map(Number).reduce((a, b) => a + b));\n  const sorted\
    \ = sums.map(n => [n, nums.indexOf(n)]).sort((a, b) => a[1] - b[1]);\n  return\
    \ sorted.map(n => nums[n[1]]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((sum, index) => ({ sum, index }));\n  const orders =\
    \ order.sort((a, b) => a.sum - b.sum);\n  return orders.map(o => nums[o.index]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n);\n  const digits_len = digits.length;\n  const sum_digits_len\
    \ = sum_digits.length;\n  const result = [];\n  for (let i = 0; i < len; i +=\
    \ 1) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ === digit) {\n      result.push(num);\n      continue;\n    }\n    const index\
    \ = sum_digits_len - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  const points\
    \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digits = num.toString().split('').reverse();\n    const sum = 0;\n\
    \    for (let j = 0; j < digits.length; j++) {\n      sum += digits[j] * Math.pow(10,\
    \ j);\n    }\n    points[i] = sum;\n  }\n  points.sort((a, b) => a - b);\n  return\
    \ points.map(i => nums[i]);\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n  const orders = sums.map(sums => sums.sort((a, b) => a - b));\n\
    \  return orders.map(order => order.map(num => nums.indexOf(num)));\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x +\
    \ '');\n  const indexes = sums.map((x, i) => i);\n  const sorted = indexes.sort((a,\
    \ b) => sums[a] - sums[b]);\n  return nums.map((x, i) => sorted[i]);\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(n =>\
    \ Number(n));\n  const len = sums.length;\n  const index = new Array(len).fill(0);\n\
    \  for (let i = 0; i < len; i++) {\n    index[sums[i]] = i;\n  }\n  return nums.map((n,\
    \ i) => index[sums[i]]);\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  const res = [];\n  for (let i = 0; i < len; i++) {\n\
    \    res.push(nums[sorted[i][1]]);\n  }\n  return res;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((acc, cur) => acc + cur, 0));\n  const\
    \ sorted = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const index = sorted.indexOf(-sums[i]);\n    if (index\
    \ !== -1) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \  }\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (sum\
    \ > 0) {\n      result.push(nums[i]);\n      sum -= nums[i];\n    } else {\n \
    \     result.push(nums[i]);\n    }\n  }\n  return result;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc, cur)\
    \ => acc + +cur, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sums = digits.reduce((sum, digit, i) => {\n    return sum + digit;\n\
    \  }, 0);\n  const indexes = Array.from({ length: len }).map((_, i) => i);\n \
    \ return indexes.sort((a, b) => {\n    const sumA = sums[a];\n    const sumB =\
    \ sums[b];\n    if (sumA === sumB) {\n      return a - b;\n    }\n    return sumA\
    \ - sumB;\n  });\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const\
    \ sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((sum,\
    \ index) => [sum, index]);\n  return order.sort((a, b) => a[0] - b[0]).map(a =>\
    \ a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const len = digits.length;\n\
    \  const points = new Array<number>(len);\n  for (let i = 0; i < len; i++) {\n\
    \    const point = [];\n    for (let j = 0; j < len; j++) {\n      if (digits[j].length\
    \ === 1) {\n        point.push(0);\n      } else {\n        point.push(digits[j].charCodeAt(0)\
    \ - '0'.charCodeAt(0));\n      }\n    }\n    points[i] = point;\n  }\n  const\
    \ sorted = points.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    result.push(sorted[i][1]);\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ if (digit < sum_digits) {\n      result.push(nums[i]);\n    } else if (digit\
    \ === sum_digits) {\n      result.push(digit);\n    }\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
    \ digit = num % 10;\n    const index = sum_digits - digit;\n    if (index >= digits_len)\
    \ {\n      result.push(num);\n    } else {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n  }\n  let result = [];\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    if (sum > 0) {\n      result.push(nums[i]);\n     \
    \ sum -= nums[i];\n    } else {\n      result.push(nums[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return sums.map(summ\
    \ => nums[summ]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(num => num.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sum = digits.reduce((acc, cur) => acc + cur,\
    \ 0);\n  return digits.sort((a, b) => sum - a + b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n %\
    \ 10);\n  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n\
    \  const digits_len = digits.length;\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const num = nums[i];\n    const digit = num / Math.pow(10,\
    \ digits_len - i);\n    const index = sum_digits - digit;\n    if (index >= 0)\
    \ {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ sums: number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n    sums.push(nums[i].toString().split('').reduce((a,\
    \ b) => a + +b, 0));\n  }\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((a, b) => a + +b, 0));\n  return sums.sort((a, b) => a -\
    \ b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const\
    \ sum_digits = digits.reduce((acc, x) => acc + x, 0);\n  const sorted_nums = nums.sort((a,\
    \ b) => sum_digits - parseInt(b, 10) - parseInt(a, 10));\n  return sorted_nums;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const sorted = sums.map(d => nums.findIndex(n\
    \ => n.toString() === d.toString()));\n  return sorted.map(i => nums[i]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aDigit\
    \ = digits[a];\n    const bDigit = digits[b];\n    return aDigit - bDigit || sums\
    \ - aDigit - bDigit;\n  });\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  return\
    \ digits.map((d, i) => sums[i] - +d);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).join('');\n\
    \  const keys = new Map<string, number>();\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    const digit = digits[i];\n    const key = digits.slice(0, i).reduce((a,\
    \ b) => a + b);\n    const val = digits.slice(i).reduce((a, b) => a + b);\n  \
    \  keys.set(key, val);\n  }\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const key = keys.get(nums[i].toString());\n    if (key !== undefined)\
    \ {\n      result.push(nums[i]);\n      keys.delete(nums[i].toString());\n   \
    \ }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(n => parseInt(n, 10));\n  const len = sums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const result = [];\n  for (let i\
    \ = 0; i < len; i++) {\n    let sum = 0;\n    for (let j = 0; j < len; j++) {\n\
    \      sum += sums[j];\n      if (sum === sums[i]) {\n        result.push(nums[j]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  const arr = [];\n  let index = 0;\n  while (index < len) {\n    const sum =\
    \ nums[index] + nums[index + 1];\n    if (sum > 0) {\n      arr.push(nums[index]);\n\
    \      index += 1;\n    } else {\n      arr.push(nums[index + 1]);\n      index\
    \ += 1;\n    }\n  }\n  return arr;\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sums = digits.map(x => x * x);\n  const sorted = sums.sort((a,\
    \ b) => a - b);\n  const index = sorted.findIndex(x => x >= 0);\n  return sorted.slice(0,\
    \ index).concat(sorted.slice(index + 1));\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => parseInt(n, 10));\n  const indexes = sums.map((sum,\
    \ i) => sums.indexOf(sum) + i);\n  return indexes.sort((a, b) => a - b);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(x => Math.abs(x));\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i += 1) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n \
    \   } else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(x => Math.abs(x).toString()).sort();\n  const\
    \ sums = digits.map(x => x.split('').reduce((acc, cur) => acc + +cur, 0));\n \
    \ const order = sums.map((sum, i) => sums.indexOf(i) > -1 ? i : sums.length);\n\
    \  return nums.map((x, i) => order[i] === i ? x : NaN);\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const digitSums = digits.map(d => d.split('').map(Number).reduce((acc,\
    \ cur) => acc + cur, 0));\n  const sortedNums = nums.map(n => digitSums.map(d\
    \ => d.indexOf(n)).filter(i => i >= 0).sort((a, b) => a - b).pop());\n  return\
    \ sortedNums;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n  const\
    \ sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((p,\
    \ c) => p + c, 0));\n  const sorted = sums.slice().sort((a, b) => a - b);\n  return\
    \ nums.map(n => sorted[sums.indexOf(n)]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n %\
    \ 10);\n  const sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len\
    \ = digits.length;\n  const sum_digits_len = sum_digits % 10;\n  if (sum_digits_len\
    \ === 0) {\n    return nums;\n  }\n  const digits_len = digits.length;\n  const\
    \ sum_digits_len = sum_digits % 10;\n  const digits_len_sorted = digits_len.sort();\n\
    \  const sum_digits_len_sorted = sum_digits_len.sort();\n  const sum_digits_len_sorted_index\
    \ = sum_digits_len_sorted.indexOf(sum_digits_len);\n  const digits_len_sorted_index\
    \ = digits_len_sorted.indexOf(digits_len);\n  const digits_len_sorted_index_len\
    \ = digits_len_sorted_index - sum_digits_len_sorted_index;\n  const digits_len_sorted_index_len_sorted\
    \ = digits_len_sorted_index_len.sort();\n  const digits_len_sorted_index_len_sorted_index\
    \ = digits_len_sorted_index_len_sorted.indexOf(digits_len_sorted_index_len);\n\
    \  const digits_len_sorted_index_len_sorted_index_len = digits_len_sorted_index_len_sorted_index\
    \ - sum_digits_len_sorted_index_len;\n  const digits_len_sorted_index_len_sorted_index_len_sorted\
    \ = digits_len_sorted_index_len_sorted_index_len.sort();\n  const digits_len_sorted_index_len_sorted_index_len_sorted_index\
    \ = digits_len_sorted_index_len_sorted_index_len_sorted.indexOf(digits_len_sorted_index_len_sorted_index_len);\n\
    \  const digits_len_sorted_index_len_sorted_index_len_sorted_index_len = digits_len_sorted_index_len_sorted_index_len_sorted_index\
    \ - sum_digits_len_sorted_index_len_sorted_index_len;\n  const digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted\
    \ = digits_len_sorted_index_len_sorted_index_len_sorted_index_len.sort();\n  const\
    \ digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len\
    \ = digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted.indexOf(digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len);\n\
    \  const digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted\
    \ = digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len.sort();\n\
    \  const digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len\
    \ = digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted.indexOf(digits_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted_index_len_sorted);\n\
    \  const digits_", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = num / Math.pow(10, digits_len - i);\n    const index = sum_digits - digit;\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n.toString()).map(Number);\n  const sums\
    \ = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const indexes = sums.map((d,\
    \ i) => i);\n  return nums.map((d, i) => indexes[sums.indexOf(d)]);\n}\n", " \
    \ const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b)\
    \ => a + b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const\
    \ sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a +\
    \ b));\n  return sums.sort((a, b) => b - a);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sums = digits.reduce((sum, digit, index) => {\n    return sum + digit;\n\
    \  }, 0);\n  return nums.sort((a, b) => {\n    return sums[a] - sums[b];\n  });\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => Math.abs(x).toString()).sort();\n  const sums\
    \ = digits.map(x => x.split('').map(Number).reduce((acc, x) => acc + x, 0));\n\
    \  return nums.map(x => sums.indexOf(x) > -1 ? x : nums[sums.indexOf(x)]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).sort();\n  let sum = 0;\n  for (let\
    \ i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(nums[i]);\n\
    \    if (sum > 0) {\n      sum -= digits[i];\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const sorted_nums = nums.slice();\n  sorted_nums.sort((a,\
    \ b) => {\n    const a_digit = parseInt(a, 10);\n    const b_digit = parseInt(b,\
    \ 10);\n    if (a_digit === b_digit) {\n      return a_digit - b_digit;\n    }\n\
    \    return sum_digits - a_digit - b_digit;\n  });\n  return sorted_nums;\n}\n",
  "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
    \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
    \ += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n \
    \ }\n  return points.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len\
    \ = digits.length;\n  const min_digit = Math.min(...digits);\n  const max_digit\
    \ = Math.max(...digits);\n  const min_sum_digit = Math.min(sum_digits, max_digit);\n\
    \  const max_sum_digit = Math.max(sum_digits, min_digit);\n  const min_len = Math.min(digits_len,\
    \ len);\n  const max_len = Math.max(digits_len, len);\n  const min_sum_digits\
    \ = digits.slice(0, min_len);\n  const max_sum_digits = digits.slice(0, max_len);\n\
    \  const min_sum_digits_len = min_sum_digits.length;\n  const max_sum_digits_len\
    \ = max_sum_digits.length;\n  const min_digits = min_sum_digits.concat(min_sum_digits_len,\
    \ max_sum_digits, max_sum_digits_len);\n  const max_digits = max_sum_digits.concat(max_sum_digits_len,\
    \ min_sum_digits, min_sum_digits_len);\n  const min_digits_len = min_digits.length;\n\
    \  const max_digits_len = max_digits.length;\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
    \ = Math.max(min_digits_len, max_digits_len);\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
    \ = Math.max(min_digits_len, max_digits_len);\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
    \ = Math.max(min_digits_len, max_digits_len);\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
    \ = Math.max(min_digits_len, max_digits_len);\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_len = Math.min(min_digits_len, max_digits_len);", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((a,\
    \ b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((s, i) => [s, i]);\n  return order.map(([s, i]) => nums[i]);\n\
    }\n", "  const len = nums.length;\n  const points = new Array(len);\n  for (let\
    \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum\
    \ += digits[j] * Math.pow(10, j);\n    }\n    points[i] = sum;\n  }\n  points.sort((a,\
    \ b) => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n   \
    \ result.push(nums[points[i]]);\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ num = nums[i];\n    const digits = String(num).split(\"\");\n    points[digits.length]\
    \ = i;\n  }\n  return points.sort(function (a, b) {\n    return points[a] - points[b];\n\
    \  });\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i += 1) {\n    const num = nums[i];\n    const digit\
    \ = num % 10;\n    const index = sum_digits - digit;\n    if (index >= 0) {\n\
    \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, digit) =>\
    \ sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = num % 10;\n    const index = sum_digits - digit;\n    if (index >= 0) {\n\
    \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((acc,\
    \ n) => acc + n, 0));\n  return sums.map((s, i) => [s, i]).sort((a, b) => a[0]\
    \ - b[0]).map(a => nums[a[1]]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const digit = digits[i];\n    const index = sum_digits - digit;\n    if (index\
    \ >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \  }\n  nums.sort((a, b) => sum - a + b);\n  return nums;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x + '');\n \
    \ const sorted = sums.sort();\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const index = sorted.indexOf(sums[i]);\n    if (index > -1) {\n\
    \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
    \ sum + n);\n  const digits_len = digits.length;\n  const result = [];\n  for\
    \ (let i = 0; i < digits_len; i++) {\n    const index = sum_digits - digits[i];\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n);\n  const digits_len = digits.length;\n  const min_digit = Math.min(...digits);\n\
    \  const max_digit = Math.max(...digits);\n  const min_sum_digit = Math.min(sum_digits,\
    \ max_digit);\n  const max_sum_digit = Math.max(sum_digits, min_digit);\n  const\
    \ min_sum_digit_idx = digits_len - min_sum_digit + 1;\n  const max_sum_digit_idx\
    \ = digits_len - max_sum_digit + 1;\n  const min_sum_digit_idx = Math.max(0, min_sum_digit_idx);\n\
    \  const max_sum_digit_idx = Math.max(0, max_sum_digit_idx);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_sum_digit_idx\
    \ = Math.min(min_sum_digit_idx, len - 1);\n  const max_sum_digit_idx = Math.max(max_sum_digit_idx,\
    \ 0);\n  const min_sum_digit_idx = Math.min(min_sum_digit_idx, len - 1);\n  const\
    \ max_sum_digit_idx = Math.max(max_sum_digit_idx, 0);\n  const min_", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(x => Math.abs(x).toString(10));\n  const sums = digits.map(x => parseInt(x,\
    \ 10));\n  const sorted = sums.sort((a, b) => a - b);\n  const res = [];\n  for\
    \ (let i = 0; i < len; i++) {\n    const index = sorted.indexOf(sums[i]);\n  \
    \  if (index !== -1) {\n      res.push(nums[index]);\n      sorted.splice(index,\
    \ 1);\n    }\n  }\n  return res;\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const\
    \ order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return sums.sort((a,\
    \ b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => Math.abs(n));\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits -\
    \ digit < 0) {\n      result.push(num);\n    } else {\n      result.push(nums[digits_len\
    \ - i - 1]);\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  const\
    \ sorted = sums.map(d => nums.findIndex(n => n.toString() === d));\n  return sorted.map(i\
    \ => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(n\
    \ => parseInt(n, 10));\n  const len = sums.length;\n  const result = [];\n  for\
    \ (let i = 0; i < len; i++) {\n    const index = sums.indexOf(sums[i]);\n    if\
    \ (index > 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n).toString()).sort();\n  const sums\
    \ = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  const order =\
    \ sums.map((s, i) => [s, i]).sort((a, b) => a[0] - b[0]).map(a => a[1]);\n  return\
    \ nums.map(n => order[n]);\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(num => num.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sums = digits.map(d => d.reduce((acc, cur)\
    \ => acc + +cur, 0));\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const index = sums.indexOf(sums[i]);\n    if (index > -1) {\n      sorted.push(nums[index]);\n\
    \      sums.splice(index, 1);\n    }\n  }\n  return sorted;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  const points\
    \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digits = String(num).split(\"\");\n    const point = 0;\n    for (let\
    \ j = 0; j < digits.length; j++) {\n      point += (digits[j] * Math.pow(10, j));\n\
    \    }\n    points[i] = point;\n  }\n  return points.sort((a, b) => a - b);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const len = digits.length;\n\
    \  const map = new Map<number, number>();\n  for (let i = 0; i < len; i++) {\n\
    \    const digit = digits[i];\n    const index = map.get(digit);\n    if (index\
    \ === undefined) {\n      map.set(digit, i);\n    } else {\n      map.set(digit,\
    \ index + 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of\
    \ map) {\n    result.push(nums[value]);\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString()).join('');\n  const sums = digits.split('').reduce((sum,\
    \ digit) => sum + +digit, 0);\n  return nums.sort((a, b) => sums.localeCompare(b.toString()));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n \
    \     continue;\n    }\n    const index = sum_digits - digit;\n    if (index >=\
    \ digits_len) {\n      result.push(num);\n      continue;\n    }\n    const left\
    \ = nums[index];\n    const right = nums[index + 1];\n    if (left < right) {\n\
    \      result.push(num);\n      continue;\n    }\n    if (left > right) {\n  \
    \    result.push(nums[index + 1]);\n      result.push(num);\n      continue;\n\
    \    }\n    result.push(nums[index]);\n  }\n  return result;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s, i) => [s,\
    \ i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
    \  const len = sums.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const index = sums.indexOf(sums[i]);\n    if (index > -1) {\n  \
    \    result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const order = sums.map((sum, index) => [sum, index]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n  return nums.sort((a, b) => {\n    const sumA = sums[a];\n\
    \    const sumB = sums[b];\n    return sumA - sumB;\n  });\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (sum_digits - digit > 0) {\n      result.push(num);\n \
    \     sum_digits -= digit;\n    } else {\n      result.push(digit);\n      sum_digits\
    \ += num;\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n \
    \ if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const\
    \ sorted = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const index = sorted.indexOf(-sums[i]);\n    if (index\
    \ >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
    \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const\
    \ aSum = sum(a);\n    const bSum = sum(b);\n    if (aSum === bSum) {\n      return\
    \ a.localeCompare(b);\n    }\n    return aSum - bSum;\n  });\n  return ret;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n);\n  const sorted_nums = nums.sort((a,\
    \ b) => sum_digits - a);\n  return sorted_nums.map(n => n % 10);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
    \  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ sorted = [];\n  for (let i = 0; i < len; i++) {\n    const sum = sums[i];\n\
    \    const index = sums.indexOf(sum);\n    sorted.push(nums[index]);\n    sums.splice(index,\
    \ 1);\n  }\n  return sorted;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const sorted_nums\
    \ = nums.sort((a, b) => sum_digits - a + b);\n  return sorted_nums.map((n, i)\
    \ => nums[i]);\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = num / Math.pow(10, digits_len - i);\n    const index = sum_digits - digit;\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const indexes = digits.map(digit => sums.indexOf(digit));\n\
    \  return nums.map(num => nums[indexes.indexOf(num)]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(num => parseInt(String(num),\
    \ 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return\
    \ nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const len = digits.length;\n  const maxLen = Math.max(...digits);\n  const\
    \ maxSum = Math.max(...nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0)));\n  const res = [];\n  for (let i = 0; i < len; i++) {\n \
    \   const curSum = digits[i].reduce((a, b) => a + b, 0);\n    const index = digits[i].indexOf(maxSum);\n\
    \    if (index === -1) {\n      res.push(nums[i]);\n    } else {\n      res.push(nums[index]);\n\
    \    }\n  }\n  return res;\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const sorted = sums.map(sums\
    \ => nums.filter(n => sums === n.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0)));\n  return sorted;\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((acc, cur) => acc + cur, 0));\n  const\
    \ sorted = sums.map(d => nums.findIndex(n => n.toString() === d.toString()));\n\
    \  return sorted.map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  const\
    \ indexes = sums.map((s, i) => i);\n  const sorted = indexes.sort((a, b) => sums[a]\
    \ - sums[b]);\n  return nums.map((n, i) => sorted[i]);\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  nums.sort(function\
    \ (a, b) {\n    return sum - a + b;\n  });\n  return nums;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.map(n => sums.indexOf(n));\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
    \ sum + n);\n  const digits_len = digits.length;\n  const sum_digits_len = sum_digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < digits_len; i++) {\n    const index\
    \ = sum_digits - digits[i];\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => Math.abs(n));\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < digits_len; i++) {\n    const index\
    \ = sum_digits - digits[i];\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = num % 10;\n    const index = sum_digits - digit;\n    if (index\
    \ >= 0) {\n      result.push(nums[index]);\n    } else {\n      result.push(num);\n\
    \    }\n  }\n  return result;\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sums = digits.map(n =>\
    \ n * n);\n  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return\
    \ indexes.sort((a, b) => a - b);\n}\n", "  const sums = nums.map(num => num.toString().split('').map(Number).reduce((acc,\
    \ num) => acc + num, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits\
    \ = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n\
    \      continue;\n    }\n    const index = sum_digits - digit;\n    if (index\
    \ >= digits_len) {\n      result.push(num);\n      continue;\n    }\n    const\
    \ left = nums[index];\n    const right = nums[index + 1];\n    const sum = left\
    \ + right;\n    if (sum > 0) {\n      result.push(num);\n      continue;\n   \
    \ }\n    const diff = left - right;\n    if (diff > 0) {\n      result.push(num);\n\
    \      continue;\n    }\n    const sum = digits_len - digit;\n    if (sum > 0)\
    \ {\n      result.push(num);\n      continue;\n    }\n    const diff = sum_digits\
    \ - digit;\n    if (diff > 0) {\n      result.push(num);\n      continue;\n  \
    \  }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => Math.abs(n));\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_sum\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = num / Math.pow(10, digits_sum);\n\
    \    if (digit < 0 || digit > sum_digits) {\n      continue;\n    }\n    const\
    \ index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    if (digit < sum_digits) {\n      result.push(nums[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n  }\n  return nums.sort((a, b) => sum - a + b);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').map(Number).reduce((a, b) => a + b, 0));\n  const sorted = sums.map((s,\
    \ i) => [s, i]);\n  sorted.sort((a, b) => a[0] - b[0]);\n  const sorted = sorted.map(([s,\
    \ i]) => nums[i]);\n  return sorted;\n}\n", "  const sums: number[] = [];\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    const n = nums[i];\n    const digits\
    \ = n.toString().split('');\n    sums.push(digits.reduce((sum, digit) => sum +\
    \ +digit, 0));\n  }\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(num => parseInt(String(num), 10));\n  const sum_digits\
    \ = digits.reduce((sum, digit) => sum + digit, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n\
    \    if (digit < sum_digits) {\n      result.push(nums[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return sums.sort((a,\
    \ b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  return\
    \ sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((sum, index) => [sum, index]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  const\
    \ result: number[] = [];\n  let index = 0;\n  while (index < len) {\n    const\
    \ sum = nums[index] + nums[index + 1];\n    if (sum > 0) {\n      result.push(nums[index]);\n\
    \      index++;\n    } else {\n      result.push(nums[index + 1]);\n      index++;\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => parseInt(n, 10));\n  const len = sums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const maxSum = Math.max(...sums);\n\
    \  const minSum = Math.min(...sums);\n  const maxIndex = sums.indexOf(maxSum);\n\
    \  const minIndex = sums.indexOf(minSum);\n  const result = [];\n  for (let i\
    \ = 0; i < len; i++) {\n    const index = sums.indexOf((sums[i] - minSum) / (maxSum\
    \ - minSum));\n    result.push(nums[index]);\n  }\n  return result;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(num\
    \ => String(num).split('').reduce((acc, cur) => acc + +cur, 0));\n  const sums\
    \ = digits.map(num => nums.reduce((acc, cur) => acc + +cur, 0) + +num);\n  return\
    \ sums.map(sum => nums.findIndex(num => sum === num));\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  nums.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    nums[i] += sum;\n\
    \  }\n  return nums;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(d => d.split('').reduce((acc, c) => acc + +c, 0));\n  return\
    \ sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(num\
    \ => num.toString().split('').reduce((acc, cur) => acc + +cur, 0));\n  const sums\
    \ = digits.map(num => num.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0));\n  const sorted = sums.map((sum, index) => [sum, index]);\n  sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  const sorted = sorted.map(([sum, index]) => nums[index]);\n\
    \  return sorted;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => Math.abs(n).toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n  }\n  nums.sort((a, b) => sum - a + b);\n  return\
    \ nums;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums\
    \ = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(num => num.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0));\n  const sums = digits.map(num => num.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sorted = [];\n  for (let i = 0; i < len; i++)\
    \ {\n    const index = sums.indexOf(sums[i]);\n    if (index > -1) {\n      sorted.push(nums[index]);\n\
    \      sums.splice(index, 1);\n    }\n  }\n  return sorted;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n\
    \  return nums.sort((a, b) => sum - b);\n}\n", "  const len = nums.length;\n \
    \ if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(num => parseInt(String(num),\
    \ 10));\n  const sums = digits.map(num => num.reduce((acc, curr) => acc + curr,\
    \ 0));\n  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return\
    \ nums.map((num, i) => indexes[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').map(Number).reduce((a, b) => a + b));\n\
    \  const indexes = sums.map((s, i) => i);\n  return nums.map((n, i) => indexes[i]).sort();\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(n =>\
    \ n.split('').reduce((acc, c) => acc + +c, 0));\n  return sums.sort((a, b) =>\
    \ a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = num % 10;\n    const index = sum_digits - digit;\n    if (index\
    \ >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (digit === sum_digits) {\n      result.push(num);\n   \
    \   continue;\n    }\n    const index = sum_digits - digit;\n    if (index >=\
    \ digits_len) {\n      result.push(num);\n      continue;\n    }\n    const left\
    \ = nums[index];\n    const right = nums[index + 1];\n    if (left < right) {\n\
    \      result.push(num);\n      continue;\n    }\n    if (left === right) {\n\
    \      result.push(nums[index]);\n      result.push(nums[index + 1]);\n      continue;\n\
    \    }\n    const left_digit = digits[index];\n    const right_digit = digits[index\
    \ + 1];\n    if (left_digit < right_digit) {\n      result.push(num);\n      continue;\n\
    \    }\n    if (left_digit === right_digit) {\n      result.push(nums[index]);\n\
    \      result.push(nums[index + 1]);\n      continue;\n    }\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
    \ digit = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n\
    \      continue;\n    }\n    const index = sum_digits - digit;\n    if (index\
    \ >= digits_len) {\n      result.push(num);\n      continue;\n    }\n    const\
    \ before = nums[index];\n    const after = nums[index + 1];\n    if (before +\
    \ digit < after) {\n      result.push(num);\n      continue;\n    }\n    result.push(before);\n\
    \  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums =\
    \ digits.map(d => digits.reduce((sum, d2) => sum + d2, 0));\n  const sorted =\
    \ sums.map(s => nums.filter(n => sums.includes(n - s)));\n  return sorted;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const len = digits.length;\n  const\
    \ maxLen = Math.max(...digits);\n  const minLen = Math.min(...digits);\n  const\
    \ maxSum = digits.reduce((sum, n) => sum + n, 0);\n  const minSum = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const maxPoint = digits[maxLen - 1];\n  const minPoint\
    \ = digits[minLen - 1];\n  const maxSumPoint = digits.reduce((sum, n) => sum +\
    \ n, 0);\n  const minSumPoint = digits.reduce((sum, n) => sum + n, 0);\n  const\
    \ maxIndex = digits.indexOf(maxPoint);\n  const minIndex = digits.indexOf(minPoint);\n\
    \  const maxSumIndex = digits.indexOf(maxSumPoint);\n  const minSumIndex = digits.indexOf(minSumPoint);\n\
    \  const maxSumDigit = maxSumIndex - minSumIndex + 1;\n  const minSumDigit = minSumIndex\
    \ - maxSumIndex + 1;\n  const maxSumDigitIndex = digits.indexOf(maxSumDigit);\n\
    \  const minSumDigitIndex = digits.indexOf(minSumDigit);\n  const maxSumDigitPoint\
    \ = digits[maxSumDigitIndex];\n  const minSumDigitPoint = digits[minSumDigitIndex];\n\
    \  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex\
    \ = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n\
    \  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex\
    \ = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n\
    \  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex\
    \ = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n\
    \  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex\
    \ = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n\
    \  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex\
    \ = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex = digits.indexOf(maxSumDigitPoint);\n\
    \  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n  const maxSumDigitPointIndex\
    \ = digits.indexOf(maxSumDigitPoint);\n  const minSumDigitPointIndex = digits.indexOf(minSumDigitPoint);\n\
    \  const maxSumDigitPointIndex = ", "  const len = nums.length;\n  const points\
    \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const p = points[i]\
    \ = new Array(len);\n    for (let j = 0; j < len; j++) {\n      p[j] = nums[j]\
    \ - nums[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++)\
    \ {\n    const p = points[i];\n    let sum = 0;\n    for (let j = 0; j < len;\
    \ j++) {\n      sum += p[j];\n    }\n    result.push(sum);\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sums = digits.map(d => digits.reduce((acc, d) => acc + d, 0));\n  return sums.sort((a,\
    \ b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return digits.sort((a,\
    \ b) => sums - digits[a] - digits[b]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const sorted = sums.map((sum, i) => ({ sum, i }));\n  sorted.sort((a, b) =>\
    \ a.sum - b.sum);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n \
    \   result.push(nums[sorted[i].i]);\n  }\n  return result;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => +x);\n  const\
    \ indexes = sums.map((x, i) => i);\n  const sorted = indexes.sort((a, b) => sums[a]\
    \ - sums[b]);\n  return indexes.map(x => nums[sorted[x]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, digit) => sum\
    \ + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for\
    \ (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num\
    \ / Math.pow(10, digits_len - i);\n    if (sum_digits - digit > 0) {\n      result.push(num);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    if (digit < sum_digits) {\n      result.push(nums[i]);\n\
    \    } else if (digit === sum_digits) {\n      result.push(digit);\n    } else\
    \ {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(num => num.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0));\n  const sum = digits.reduce((acc, cur) => acc + cur, 0);\n\
    \  return digits.map((_, i) => sum - digits[i]).sort((a, b) => a - b).map(i =>\
    \ nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((a, b) => a + +b, 0));\n  const indexes = Array.from({\
    \ length: len }).map((_, i) => i);\n  indexes.sort((a, b) => {\n    const sumA\
    \ = sums[a];\n    const sumB = sums[b];\n    if (sumA === sumB) {\n      return\
    \ indexes[a] - indexes[b];\n    }\n    return sumA - sumB;\n  });\n  return indexes.map(i\
    \ => nums[indexes[i]]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n \
    \ const indexes = sums.map((d, i) => i);\n  return nums.map((n, i) => indexes[i]).sort((a,\
    \ b) => a - b);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n  const\
    \ sums = digits.map(d => d.reduce((acc, cur) => acc + cur, 0));\n  const order\
    \ = sums.map((sum, index) => [sum, index]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  const sums: number[] = [];\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    const num = nums[i];\n    const sum = Math.floor(num\
    \ / 10);\n    sums.push(sum);\n  }\n  sums.sort((a, b) => a - b);\n  const result\
    \ = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n\
    \    const sum = Math.floor(num / 10);\n    if (sum === sums[sums.length - 1])\
    \ {\n      result.push(num);\n    } else {\n      result.push(nums[sums.indexOf(sum)]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n \
    \ const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const sorted = sums.map(s => s.toString()).sort();\n  return sorted.map(i =>\
    \ nums[sorted.indexOf(i)]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(num => num.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sum = digits.reduce((acc, cur) => acc + cur,\
    \ 0);\n  const indexs = digits.map(num => num.toString().split('').reduce((acc,\
    \ cur, i) => acc + +cur, 0) + i);\n  return indexs.map(index => nums[index]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((p, c) => p + c, 0));\n  return nums.sort((a, b) => {\n    const\
    \ aSum = sums[a];\n    const bSum = sums[b];\n    return aSum - bSum;\n  });\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.reduce((acc,\
    \ x) => acc + x, 0);\n  const sorted = nums.map(x => parseInt(x, 10)).sort((a,\
    \ b) => sums - a + b);\n  return sorted.map(x => parseInt(x, 10));\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum\
    \ + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n\
    \    const index = sum_digits - digit + digits_len - i;\n    if (index >= 0) {\n\
    \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString()).map(Number);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (digit === sum_digits) {\n      result.push(num);\n   \
    \   continue;\n    }\n    let index = digits_len - 1;\n    while (index >= 0)\
    \ {\n      const left = digits[index];\n      const right = digits[index + 1];\n\
    \      if (left < right && num < left + right) {\n        result.push(num);\n\
    \        break;\n      }\n      index--;\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const len = digits.length;\n  const maxLen = Math.max(...digits);\n  const\
    \ result = [];\n  for (let i = 0; i < len; i++) {\n    const index = digits.indexOf(maxLen);\n\
    \    if (index > -1) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    sum += nums[i];\n  }\n  nums.sort(function (a, b) {\n    return sum - a +\
    \ b;\n  });\n  return nums;\n}\n", "  const sums = nums.map(num => num.toString().split('').map(Number).reduce((a,\
    \ b) => a + b))\n  return nums.sort((a, b) => {\n    const sumA = sums[a]\n  \
    \  const sumB = sums[b]\n    if (sumA === sumB) {\n      return a > b ? 1 : -1\n\
    \    }\n    return sumA > sumB ? 1 : -1\n  })\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ - digit < 0) {\n      result.push(num);\n      continue;\n    }\n    const index\
    \ = sum_digits - digit;\n    result.push(nums[index]);\n    result.push(nums[index\
    \ + 1]);\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + +digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    const index = sum_digits - digit;\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ sorted_nums = nums.sort((a, b) => sum_digits - parseInt(b, 10) - parseInt(a,\
    \ 10));\n  return sorted_nums;\n}\n", "  const len = nums.length;\n  const ret\
    \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    ret[i] = nums[i];\n\
    \  }\n  ret.sort((a, b) => {\n    const aSum = sum_digits(a);\n    const bSum\
    \ = sum_digits(b);\n    if (aSum < bSum) {\n      return -1;\n    }\n    if (aSum\
    \ > bSum) {\n      return 1;\n    }\n    return 0;\n  });\n  return ret;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(num => num.toString().split('').reduce((acc, cur) => acc +\
    \ +cur, 0));\n  const sum = digits.reduce((acc, cur) => acc + cur, 0);\n  return\
    \ digits.sort((a, b) => sum - a + b);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    const index = sum_digits - digit;\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const sorted = sums.slice().sort((a, b)\
    \ => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ index = sorted.indexOf(sums[i]);\n    if (index !== -1) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return\
    \ digits.sort((a, b) => sums - digits[a] - digits[b]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const sorted = sums.map((sum, index) => [sum, index]);\n  sorted.sort((a, b)\
    \ => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const index\
    \ = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).join('');\n\
    \  const sums = digits.split('').reduce((sum, digit) => sum + +digit, 0);\n  return\
    \ nums.sort((a, b) => sums.localeCompare(b.toString()));\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc, cur)\
    \ => acc + +cur, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    result.push(nums[sorted[i]]);\n\
    \  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(n => +n);\n  const len = sums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const sorted = [];\n  let i = len - 1;\n  while (i >=\
    \ 0) {\n    const sum = sums[i];\n    const index = i;\n    while (index >= 0)\
    \ {\n      if (sums[index] > sum) {\n        sorted.push(nums[index]);\n     \
    \   break;\n      }\n      index -= 1;\n    }\n    i -= 1;\n  }\n  return sorted;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const len = digits.length;\n\
    \  const maxLen = Math.max(...digits);\n  const maxLenIndex = digits.indexOf(maxLen);\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n\
    \    const index = digits.indexOf(digit);\n    if (index === -1) {\n      result.push(digit);\n\
    \    } else {\n      const sum = digits.slice(0, index).reduce((acc, cur) => acc\
    \ + cur, 0);\n      if (sum === maxLen) {\n        result.push(digit);\n     \
    \ } else {\n        result.push(digits[index]);\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(n =>\
    \ ~~(n / 10));\n  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n\
    \  return nums.map((n, i) => indexes[i]).sort((a, b) => a - b);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i += 1) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (sum_digits - digit > 0) {\n      result.push(num);\n \
    \   }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n\
    \  const digits_len = digits.length;\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const digit = digits[i];\n    const index = sum_digits\
    \ - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n\
    \  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return [];\n  }\n  const digits = nums.map(num => num.toString().split('').sort());\n\
    \  const sums = digits.map(digits => digits.reduce((acc, cur) => acc + cur, 0));\n\
    \  const order = sums.map((sum, index) => [sum, index]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  return\
    \ digits.map((d, i) => sums[i] - +d);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => Number(n));\n  const sorted = sums.sort((a, b)\
    \ => a - b);\n  return nums.map(n => sorted[nums.indexOf(n)]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const len = digits.length;\n  const arr =\
    \ new Array(len);\n  for (let i = 0; i < len; i++) {\n    arr[i] = digits[i];\n\
    \  }\n  arr.sort((a, b) => {\n    const aSum = a.split('').reduce((acc, n) =>\
    \ acc + +n, 0);\n    const bSum = b.split('').reduce((acc, n) => acc + +n, 0);\n\
    \    return aSum - bSum;\n  });\n  return arr.map(n => +n);\n}\n", "  const sums\
    \ = nums.map(n => n.toString().split('').reduce((acc, c) => acc + +c, 0));\n \
    \ return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((s, i) => [s, i]);\n  return order.map(([s, i]) => nums[i]);\n\
    }\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
