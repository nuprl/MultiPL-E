name: HumanEval_91_is_bored
language: ts
prompt: "//You'll be given a string of words, and your task is to count the number\n\
  // of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunction is_bored(S: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"\
  ),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"\
  I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"\
  I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"\
  You and I are going for a walk\"),0);\n}\n\ntest();"
completions: ["  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n\
    \    if (S[i] === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\n", "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n \
    \   if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\n", "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n \
    \   if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\n", "    let boredoms: number = 0;\n    for (let i = 0; i < S.length; i++) {\n\
    \        if (S[i] === \"I\") {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i <\
    \ S.length; i++) {\n    if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n\
    \  return boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i <\
    \ S.length; i++) {\n    if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n\
    \  return boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i <\
    \ S.length; i++) {\n    if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n\
    \  return boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i <\
    \ S.length; i++) {\n    if (S[i] === \"I\") {\n      boredoms++;\n    }\n  }\n\
    \  return boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i <\
    \ S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'o') {\n      boredoms++;\n\
    \    }\n  }\n  return boredoms;\n}\n", "  const boredoms = S.match(/\\bI\\b/);\n\
    \  return boredoms ? boredoms.length : 0;\n}\n", "    let boredoms: number = 0;\n\
    \    for (let i = 0; i < S.length; i++) {\n        if (S[i] === 'I') {\n     \
    \       boredoms++;\n        }\n    }\n    return boredoms;\n}\n", "  let bored\
    \ = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n  \
    \    bored++;\n    }\n  }\n  return bored;\n}\n", "    let boredoms: number =\
    \ 0;\n    for (let i = 0; i < S.length; i++) {\n        if (S[i] === \"I\") {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\n", "  let\
    \ boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
    \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n", "  let\
    \ bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n\
    \      bored++;\n    }\n  }\n  return bored;\n}\n", "    let boredoms: number\
    \ = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (S[i] === \"I\")\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n", " \
    \ let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
    \ === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n", "   \
    \ let boredoms: number = 0;\n    for (let i = 0; i < S.length; i++) {\n      \
    \  if (S[i] === \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\n", "  let boredoms: number = 0;\n  for (let i = 0; i < S.length;\
    \ i++) {\n    if (S[i] === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\n", "  const boredoms: number[] = [];\n  for (let i = 0; i < S.length; i++)\
    \ {\n    const char = S[i];\n    if (char === \".\" || char === \"?\" || char\
    \ === \"!\") {\n      boredoms.push(char);\n    }\n  }\n  return boredoms.reduce((a,\
    \ b) => a + b, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
