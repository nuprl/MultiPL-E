language: ts
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extensions_count = extensions.length;\n\
    \    let extensions_count_cap = extensions_count.toUpperCase().length;\n    let\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_diff\
    \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_min\
    \ = extensions_count_cap - extensions_count_diff;\n    let extensions_count_max\
    \ = extensions_count_sm;\n    let extensions_count_sum = extensions_count_cap\
    \ + extensions_count_sm;\n    let extensions_count_average = extensions_count_sum\
    \ / extensions_count;\n    let extensions_count_highest = extensions_count_max;\n\
    \    let extensions_count_lowest = extensions_count_min;\n    let extensions_count_middle\
    \ = extensions_count_average - extensions_count_highest;\n    let extensions_count_middle2\
    \ = extensions_count_average - extensions_count_lowest;\n    let extensions_count_middle3\
    \ = extensions_count_average + extensions_count_highest;\n    let extensions_count_middle4\
    \ = extensions_count_average + extensions_count_lowest;\n    let extensions_count_middle5\
    \ = extensions_count_average + extensions_count_middle + extensions_count_middle2\
    \ + extensions_count_middle3 + extensions_count_middle4;\n    let extensions_count_middle6\
    \ = extensions_count_average + extensions_count_middle + extensions_count_middle2\
    \ + extensions_count_middle3 + extensions_count_middle4 + extensions_count_middle5;\n\
    \    let extensions_count_middle7 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6;\n    let extensions_count_middle8\
    \ = extensions_count_average + extensions_count_middle + extensions_count_middle2\
    \ + extensions_count_middle3 + extensions_count_middle4 + extensions_count_middle5\
    \ + extensions_count_middle6 + extensions_count_middle7;\n    let extensions_count_middle9\
    \ = extensions_count_average + extensions_count_middle + extensions_count_middle2\
    \ + extensions_count_middle3 + extensions_count_middle4 + extensions_count_middle5\
    \ + extensions_count_middle6 + extensions_count_middle7 + extensions_count_middle8;\n\
    \    let extensions_count_middle10 = extensions_count_average + extensions_count_middle\
    \ + extensions_count_middle2 + extensions_count_middle3 + extensions_count_middle4\
    \ + extensions_count_middle5 + extensions_count_middle6 + extensions_count_middle7\
    \ + extensions_count_middle8 + extensions_count_middle9;\n    let extensions_count_middle11\
    \ = extensions_count_average + extensions_count_middle + extensions_count_middle2\
    \ + extensions_count_middle3 + extensions_count_middle4 + \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy5foipnn.ts(39,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpy5foipnn.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpylhq862p.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpylhq862p.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = Extension_Strength(extension);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv98v2r2n.ts(22,30): error TS2552: Cannot find name
    ''Extension_Strength''. Did you mean ''extension_strength''?

    '
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppd34amgl.ts(23,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmppd34amgl.ts(23,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength\
    \ > max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension_name;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpirte9gij.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpirte9gij.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let class_name = class_name + extension;\n    let class_name_lower\
    \ = class_name.toLowerCase();\n    let class_name_upper = class_name.toUpperCase();\n\
    \    let class_name_length = class_name_upper.length;\n    let extension_length\
    \ = extension.length;\n    let strength = class_name_length - extension_length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8k980ib.ts(22,22): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ class_name;\n\tlet strongest_extension_strength: number = -1;\n\tfor (let i\
    \ = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'eIGHt8OKe'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpuf4se1eq.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuf4se1eq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'eIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ 0;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_str: string = extensions[i];\n    let extension_str_length:\
    \ number = extension_str.length;\n    let extension_str_upper: number = extension_str_length\
    \ - 1;\n    let extension_str_lower: number = extension_str_length - 2;\n    let\
    \ extension_str_first_upper: number = extension_str_upper - 1;\n    let extension_str_first_lower:\
    \ number = extension_str_lower - 1;\n    let extension_str_first_cap: number =\
    \ extension_str_first_upper - 1;\n    let extension_str_first_sm: number = extension_str_first_lower\
    \ - 1;\n    let extension_str_first_cap_sm: number = extension_str_first_cap -\
    \ 1;\n    let extension_str_first_cap_sm_length: number = extension_str_first_cap_sm\
    \ - extension_str_first_sm;\n    let extension_str_first_cap_sm_strongest: number\
    \ = extension_str_first_cap_sm_length - 1;\n    let extension_str_first_cap_sm_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest - extension_str_first_cap;\n \
    \   let extension_str_first_cap_sm_strongest_strongest: number = extension_str_first_cap_sm_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_length: number\
    \ = extension_str_first_cap_sm_strongest_strongest - extension_str_first_cap_sm;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest: number = extension_str_first_cap_sm_strongest_strongest_length\
    \ - 1;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest - extension_str_first_cap_sm_length;\n\
    \    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest: number\
    \ = extension_str_first_cap_sm_strongest_strongest_strongest_length - 1;\n   \
    \ let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_length:\
    \ number = extension_str_first_cap_sm_strongest_strongest_strongest_strongest\
    \ - extension_str_first_cap_sm_strongest;\n    let extension_str_first_cap_sm_strongest_strongest_strongest_strongest_strongest:\
    \ number = extension_str_first_cap_sm_strongest_str\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpor1kbvda.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length - sm.length;\n\
    \t\tif (strength > strongest_extension.length) {\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpv7zsvuzm.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv7zsvuzm.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppsavoav0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmppsavoav0.js:22:59)\n    at test (/tmp/tmppsavoav0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmppsavoav0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kl1todp.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension_str: string = extensions[i];\n\t\tlet extension_str_length:\
    \ number = extension_str.length;\n\t\tlet extension_str_length_lowercase: number\
    \ = extension_str_length;\n\t\tlet extension_str_length_uppercase: number = extension_str_length;\n\
    \t\tfor (let j = 0; j < extension_str.length; j++) {\n\t\t\tif (extension_str[j]\
    \ === extension_str[j].toUpperCase()) {\n\t\t\t\textension_str_length_uppercase++;\n\
    \t\t\t} else if (extension_str[j] === extension_str[j].toLowerCase()) {\n\t\t\t\
    \textension_str_length_lowercase++;\n\t\t\t}\n\t\t}\n\t\tlet extension_str_length_length_difference:\
    \ number = extension_str_length_lowercase - extension_str_length_uppercase;\n\t\
    \tlet extension_str_length_length_difference_inverse: number = extension_str_length_uppercase\
    \ - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference_fraction:\
    \ number = extension_str_length_length_difference / extension_str_length_length_difference_inverse;\n\
    \t\tlet extension_str_length_length_difference_fraction_inverse: number = extension_str_length_length_difference\
    \ / extension_str_length_length_difference;\n\t\tlet extension_str_length_length_difference_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction / extension_str_length_length_difference_inverse;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_inverse: number\
    \ = extension_str_length_length_difference_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction: number\
    \ = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference_inverse;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_fraction:\
    \ number = extension_str_length_length_difference_fraction_fraction_fraction /\
    \ extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_fraction_fraction_fraction_inverse:\
    \ number = extension_str_length_length_difference_fraction_fraction / extension\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_rej8810.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength: number\
    \ = -1;\n  let max_extension_class: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_class: string = extensions[i];\n    let extension_strength:\
    \ number = extension_class.match(/[A-Z]/g).length - extension_class.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_class = extension_class;\n    }\n\
    \  }\n  return class_name + \".\" + max_extension_class;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1u_14306.js:22\n        var extension_strength = extension_class.match(/[A-Z]/g).length\
    \ - extension_class.match(/[a-z]/g).length;\n                                \
    \                                ^\n\nTypeError: Cannot read properties of null\
    \ (reading 'length')\n    at Strongest_Extension (/tmp/tmp1u_14306.js:22:65)\n\
    \    at test (/tmp/tmp1u_14306.js:34:22)\n    at Object.<anonymous> (/tmp/tmp1u_14306.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = \"\";\n\
    \tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - CAP_SM_RE.exec(extension)[1];\n\
    \t\tif (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzj317thm.ts(23,47): error TS2304: Cannot find name
    ''CAP_SM_RE''.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension.match(/[A-Z]/g).length -\
    \ strongest_extension.match(/[a-z]/g).length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0nmnpy6s.js:22\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length) {\n                          \
    \                                          ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at Strongest_Extension (/tmp/tmp0nmnpy6s.js:22:69)\n\
    \    at test (/tmp/tmp0nmnpy6s.js:32:22)\n    at Object.<anonymous> (/tmp/tmp0nmnpy6s.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkti3fcha.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkti3fcha.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ strongest_extension = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfxzsdpm9.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfxzsdpm9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799188
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ \"\";\n\tlet strongest_extension_strength: number = -1;\n\tfor (let i = 0; i\
    \ < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_5xfht4q.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp_5xfht4q.js:22:59)\n    at test (/tmp/tmp_5xfht4q.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp_5xfht4q.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const cap = extension.charAt(0).toUpperCase();\n    const sm = extension.charAt(0).toLowerCase();\n\
    \    const strength = cap - sm;\n    if (strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7t790is3.ts(23,22): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmp7t790is3.ts(23,28): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppsavoav0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmppsavoav0.js:22:59)\n    at test (/tmp/tmppsavoav0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmppsavoav0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1\n    let\
    \ max_extension = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n  \
    \      let extension = extensions[i]\n        let strength = class_name.split(extension).length\
    \ - 1\n        if (strength > max_strength) {\n            max_strength = strength\n\
    \            max_extension = extension\n        }\n    }\n    return `${class_name}.${max_extension}`\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpi0a3vqx5.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi0a3vqx5.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str_length - 1;\n        let extension_str_lower:\
    \ number = extension_str_length - 2;\n        let extension_str_middle_upper:\
    \ number = extension_str_upper - extension_str_lower;\n        let extension_str_middle_lower:\
    \ number = extension_str_lower - extension_str_upper;\n        let extension_str_middle_strength:\
    \ number = extension_str_middle_upper - extension_str_middle_lower;\n        let\
    \ extension_str_middle_strength_str: string = extension_str_middle_strength.toString();\n\
    \        let extension_str_middle_strength_str_length: number = extension_str_middle_strength_str.length;\n\
    \        let extension_str_middle_strength_str_upper: number = extension_str_middle_strength_str_length\
    \ - 1;\n        let extension_str_middle_strength_str_lower: number = extension_str_middle_strength_str_length\
    \ - 2;\n        let extension_str_middle_strength_str_middle_upper: number = extension_str_middle_strength_str_upper\
    \ - extension_str_middle_strength_str_lower;\n        let extension_str_middle_strength_str_middle_lower:\
    \ number = extension_str_middle_strength_str_lower - extension_str_middle_strength_str_upper;\n\
    \        let extension_str_middle_strength_str_middle_strength: number = extension_str_middle_strength_str_middle_upper\
    \ - extension_str_middle_strength_str_middle_lower;\n        let extension_str_middle_strength_str_middle_strength_str:\
    \ string = extension_str_middle_strength_str_middle_strength.toString();\n   \
    \     let extension_str_middle_strength_str_middle_strength_str_length: number\
    \ = extension_str_middle_strength_str_middle_strength_str.length;\n        let\
    \ extension_str_middle_strength_str_middle_strength_str_upper: number = extension_str_middle_strength_str_middle_strength_str_length\
    \ - 1;\n        let extension_str_middle_strength_str_middle_strength_str_lower:\
    \ number = extension_str_middle_strength_str_middle_strength_str_length - 2;\n\
    \        let extension_str_middle_strength_str_middle_strength_str_middle_upper:\
    \ number = extension_str_middle_strength_str_middle_strength_str_upper - extension_str_middle_strength_str_middle_strength_str_lower;\n\
    \        let extension_str_middle_strength_str_middle_strength_str_middle_lower:\
    \ number = extension_str_middle_strength_str_middle_strength_str_lower - extension_str_middle_strength_str_middle_strength_str_upper;\n\
    \        let extension_str_middle_strength_str_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkv0qkv7b.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = Extension_Strength(class_name, extension);\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoy04jb21.ts(22,18): error TS2304: Cannot find name
    ''Extension_Strength''.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnjiweeaw.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnjiweeaw.js:22:59)\n    at test (/tmp/tmpnjiweeaw.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnjiweeaw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let class_name = class_name + extension;\n    let strength\
    \ = Extension_Strength(class_name);\n    if (strength > max_strength) {\n    \
    \  max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  return\
    \ class_name + max_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpja1uxa56.ts(22,22): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmpja1uxa56.ts(23,20): error TS2304: Cannot find name ''Extension_Strength''.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpodg4u4lt.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpodg4u4lt.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kl1todp.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet extension_length\
    \ = extension.length;\n\t\tlet extension_upper = extension.toUpperCase();\n\t\t\
    let extension_lower = extension.toLowerCase();\n\t\tlet extension_strength = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower.length;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper.length;\n\t\tlet extension_strength_lower = extension_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7q0s3h48.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnp6lr76p.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnp6lr76p.js:22:49)\n    at test (/tmp/tmpnp6lr76p.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnp6lr76p.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ == 0 ? 0 : extensions_count_cap_sm;\n  let extensions_count_cap_sm_min = extensions_count_cap_sm\
    \ == 0 ? 1 : extensions_count_cap_sm;\n  let extensions_count_cap_sm_max_min =\
    \ extensions_count_cap_sm == 0 ? extensions_count_cap_sm_min : extensions_count_cap_sm;\n\
    \  let extensions_count_cap_sm_max_min_max = extensions_count_cap_sm == 0 ? extensions_count_cap_sm_max_min\
    \ : extensions_count_cap_sm_max;\n  let extensions_count_cap_sm_max_min_max_max\
    \ = extensions_count_cap_sm == 0 ? extensions_count_cap_sm_max_min_max : extensions_count_cap_sm_max_min;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max = extensions_count_cap_sm ==\
    \ 0 ? extensions_count_cap_sm_max_min_max_max : extensions_count_cap_sm_max_min_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max : extensions_count_cap_sm_max_min_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max = extensions_count_cap_sm\
    \ == 0 ? extensions_count_cap_sm_max_min_max_max_max_max_max_max : extensions_count_cap_sm_max_min_max_max_max_max_max_max_max;\n\
    \  let extensions_count_cap_sm_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ilnvx2l.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprb0wxb8f.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmprb0wxb8f.js:22:59)\n    at test (/tmp/tmprb0wxb8f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmprb0wxb8f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let class_name = class_name + extension\n    let class_name_lower\
    \ = class_name.toLowerCase()\n    let extension_lower = extension.toLowerCase()\n\
    \    let strength = class_name_lower.length - extension_lower.length\n    if (strength\
    \ > max_strength) {\n      max_strength = strength\n      max_extension = extension\n\
    \    }\n  }\n  return class_name + max_extension\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptjol0omk.ts(22,22): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i];\n    let extension_strength = extension_name.toUpperCase().charCodeAt(0)\
    \ - extension_name.toLowerCase().charCodeAt(0);\n    if (extension_strength >\
    \ max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_name = extension_name;\n    }\n  }\n  return class_name +\
    \ \".\" + max_extension_name;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpimmvwn6i.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpimmvwn6i.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_str: string = \"\";\n\tlet strongest_extension_class:\
    \ string = \"\";\n\tlet strongest_extension_class_str: string = \"\";\n\tlet strongest_extension_class_count:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_class = class_name + extension;\n\t\tlet\
    \ extension_class_str = extension_class.charAt(0).toUpperCase() + extension_class.substring(1);\n\
    \t\tlet extension_class_count = extension_class_str.split(\"\").length;\n\t\t\
    if (extension_class_count > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str\
    \ = extension_class_str;\n\t\t\tstrongest_extension_class_count = extension_class_count;\n\
    \t\t\tstrongest_extension_class = extension_class;\n\t\t\tstrongest_extension\
    \ = -1;\n\t\t} else if (extension_class_count == strongest_extension_class_count)\
    \ {\n\t\t\tif (extension_class_count > strongest_extension_class_count) {\n\t\t\
    \t\tstrongest_extension_class_str = extension_class_str;\n\t\t\t\tstrongest_extension_class_count\
    \ = extension_class_count;\n\t\t\t\tstrongest_extension_class = extension_class;\n\
    \t\t\t\tstrongest_extension = -1;\n\t\t\t}\n\t\t}\n\t}\n\tif (strongest_extension_class_count\
    \ > 0) {\n\t\tlet strongest_extension_class_str: string = strongest_extension_class_str.charAt(0).toUpperCase()\
    \ + strongest_extension_class_str.substring(1);\n\t\tlet strongest_extension_class_count:\
    \ string = strongest_extension_class_str.split(\"\").length;\n\t\tif (strongest_extension_class_count\
    \ > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str =\
    \ strongest_extension_class_str.charAt(0).toUpperCase() + strongest_extension_class_str.substring(1);\n\
    \t\t\tstrongest_extension_class_count = strongest_extension_class_str.split(\"\
    \").length;\n\t\t\tstrongest_extension_class = strongest_extension_class_str;\n\
    \t\t\tstrongest_extension = -1;\n\t\t}\n\t}\n\tif (strongest_extension_class_count\
    \ > 0) {\n\t\tlet strongest_extension_class_str: string = strongest_extension_class_str.charAt(0).toUpperCase()\
    \ + strongest_extension_class_str.substring(1);\n\t\tlet strongest_extension_class_count:\
    \ string = strongest_extension_class_str.split(\"\").length;\n\t\tif (strongest_extension_class_count\
    \ > strongest_extension_class_count) {\n\t\t\tstrongest_extension_class_str =\
    \ strongest_extension_class_str.charAt(0).toUpperCase() + \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk4qc6xy4.ts(57,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk4qc6xy4.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprb0wxb8f.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmprb0wxb8f.js:22:59)\n    at test (/tmp/tmprb0wxb8f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmprb0wxb8f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const extension_length = extension.length;\n    const extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp41kg2_v3.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp41kg2_v3.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kl1todp.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnp6lr76p.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnp6lr76p.js:22:49)\n    at test (/tmp/tmpnp6lr76p.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnp6lr76p.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1\n\
    \  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i]\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength\n      max_extension =\
    \ extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwyztblfp.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwyztblfp.js:22:59)\n    at test (/tmp/tmpwyztblfp.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwyztblfp.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp0qx9yz0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qx9yz0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_classname = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_classname\
    \ = class_name + extension;\n        let extension_strength = Extension_Strength(extension_classname);\n\
    \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_classname = extension_classname;\n\
    \        }\n    }\n    return max_extension_classname;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_pwlgovq.ts(23,34): error TS2552: Cannot find name
    ''Extension_Strength''. Did you mean ''extension_strength''?

    '
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const extension_length = extension.length;\n    const extension_strength\
    \ = extension_length - extension_strength(extension);\n    if (extension_strength\
    \ > strongest_extension.length) {\n      strongest_extension = extension;\n  \
    \  }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfzfu0pp.ts(22,51): error TS2448: Block-scoped variable
    ''extension_strength'' used before its declaration.

    '
  timestamp: 1659799189
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp09ft1m4j.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp09ft1m4j.js:22:49)\n    at test (/tmp/tmp09ft1m4j.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp09ft1m4j.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const extension_length = extension.length;\n    const extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp41kg2_v3.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp41kg2_v3.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ class_name;\n  let strongest_extension_strength: number = -1;\n  for (let i\
    \ = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n   \
    \ let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'eIGHt8OKe'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmprhcgj33x.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmprhcgj33x.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'eIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799189
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpizxsyhp1.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpizxsyhp1.js:22:59)\n    at test (/tmp/tmpizxsyhp1.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpizxsyhp1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.length;\n      \
    \  let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_strength = extension_strength.reduce((a, b) => Math.max(a, b));\n    let\
    \ max_index = extension_strength.indexOf(max_strength);\n    let max_extension\
    \ = extensions[max_index];\n    return class_name + \".\" + max_extension;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ya5fuyt.ts(22,81): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    '
  timestamp: 1659799189
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ \"\";\n\tlet strongest_extension_strength: number = -1;\n\tfor (let i = 0; i\
    \ < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.charCodeAt(0) - 65;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpoxvbexb_.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoxvbexb_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppqdcpj4i.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmppqdcpj4i.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension_str: string = extensions[i];\n\t\tlet extension_str_length:\
    \ number = extension_str.length;\n\t\tlet extension_str_length_lowercase: number\
    \ = extension_str_length.toLowerCase();\n\t\tlet extension_str_length_uppercase:\
    \ number = extension_str_length.toUpperCase();\n\t\tlet extension_str_length_length_difference:\
    \ number = extension_str_length_lowercase - extension_str_length_uppercase;\n\t\
    \tlet extension_str_length_length_difference_inverse: number = extension_str_length_uppercase\
    \ - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference_square:\
    \ number = extension_str_length_length_difference * extension_str_length_length_difference;\n\
    \t\tlet extension_str_length_length_difference_square_inverse: number = extension_str_length_length_difference\
    \ * extension_str_length_length_difference_inverse;\n\t\tlet extension_str_length_length_difference_square_root:\
    \ number = Math.sqrt(extension_str_length_length_difference_square);\n\t\tlet\
    \ extension_str_length_length_difference_square_root_inverse: number = Math.sqrt(extension_str_length_length_difference_square_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse: number\
    \ = Math.sqrt(extension_str_length_length_difference_square_root_inverse);\n\t\
    \tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse_sqrt:\
    \ number = Math.sqrt(extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse);\n\
    \t\tlet extension_str_length_length_difference_square_root_inverse_inverse_sqrt_inverse_sqrt_inverse_sqrt_inverse:\
    \ number = Math.sqrt(extension_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjouixjv8.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjouixjv8.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpjouixjv8.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmphzh33n1c.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmphzh33n1c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -Infinity;\n  let strongest_extension_class: string = class_name;\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension: number = extensions[i].charCodeAt(0)\
    \ - 97;\n    if (extension > strongest_extension) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_class = extensions[i];\n    }\n  }\n\
    \  return strongest_extension_class;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tEN'\n\nshould\
    \ loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpr_fvrr6y.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr_fvrr6y.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tEN',\n \
    \ expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strength: number =\
    \ -1;\n  let extension_strongest: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_upper = extension.toUpperCase();\n\
    \    let extension_lower = extension.toLowerCase();\n    let extension_length\
    \ = extension_upper.length - extension_lower.length;\n    let extension_strength_upper\
    \ = extension_upper.split(\"\").reduce((a, b) => a + b.charCodeAt(0), 0);\n  \
    \  let extension_strength_lower = extension_lower.split(\"\").reduce((a, b) =>\
    \ a + b.charCodeAt(0), 0);\n    let extension_strength_length = extension_strength_upper\
    \ - extension_strength_lower;\n    if (extension_strength_length > extension_strength)\
    \ {\n      extension_strength = extension_strength_length;\n      extension_strongest\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + extension_strongest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp1ajb48d6.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1ajb48d6.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - class_name.split(\"\").reduce((a,\
    \ b) => a + b.toUpperCase().charCodeAt(0) - b.toLowerCase().charCodeAt(0), 0);\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return `${class_name}.${max_extension}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpmkvyr7hl.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmkvyr7hl.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpodg4u4lt.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpodg4u4lt.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let strength = class_name.split(extension).length - 1\n \
    \   if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp1k25kzoz.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1k25kzoz.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkti3fcha.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkti3fcha.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphozu1byq.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmphozu1byq.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -Infinity;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length - sm.length;\n\
    \t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension = strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + extensions[extensions.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmps52grlff.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmps52grlff.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpizxsyhp1.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpizxsyhp1.js:22:59)\n    at test (/tmp/tmpizxsyhp1.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpizxsyhp1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  let strongest_extension_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpszvfmde5.js:23\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpszvfmde5.js:23:59)\n    at test (/tmp/tmpszvfmde5.js:35:22)\n\
    \    at Object.<anonymous> (/tmp/tmpszvfmde5.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -Infinity;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i].toLowerCase();\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[extensions.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmp0vmcmjtx.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0vmcmjtx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0)\
    \ - strongest_extension.charCodeAt(1)) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv7weku8x.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpv7weku8x.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkaefgm4_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpkaefgm4_.js:22:59)\n    at test (/tmp/tmpkaefgm4_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpkaefgm4_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - strongest_extension_str.length;\n\
    \    if (extension_strength > strongest_extension) {\n      strongest_extension\
    \ = extension_strength;\n      strongest_extension_str = extension;\n    }\n \
    \ }\n  return class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl5dw_xtf.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl5dw_xtf.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extensions_count = extensions.length;\n\
    \    let extensions_count_cap = extensions_count.toUpperCase().length;\n    let\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_cap_sm\
    \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_cap_sm_min\
    \ = extensions_count_cap_sm / 2;\n    let extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ / 2;\n    let extensions_count_cap_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm =\
    \ extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm;\n\
    \    let extensions_count_cap_sm_min_max_sm_min = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm_min_max_sm\
    \ = extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max_sm_min = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_min_max_sm_min_max_sm_min_max = extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max + extensions_count_sm + extensions_count_cap_sm_min\
    \ + extensions_count_cap_sm_max;\n    let extensions_count_cap_sm_min_max_sm_min_max_sm_min_max_sm\
    \ = extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + extensions_count_cap_sm_min + extensions_count_cap_sm_max + extensions_count_sm\
    \ + \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6gxnra35.ts(32,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp6gxnra35.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppd34amgl.ts(23,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmppd34amgl.ts(23,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_upper = extension.toUpperCase();\n\t\tlet extension_lower =\
    \ extension.toLowerCase();\n\t\tlet extension_strength = extension_length - extension_upper.length\
    \ - extension_lower.length;\n\t\tlet extension_strength_sign = extension_strength\
    \ < 0 ? -1 : 1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
    \t\tlet extension_strength_abs_sign = Math.abs(extension_strength_sign);\n\t\t\
    let extension_strength_abs_abs = Math.abs(extension_strength_abs);\n\t\tlet extension_strength_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_sign);\n\t\tlet extension_strength_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_sign\
    \ = Math.abs(extension_strength_abs_abs_abs_abs_abs_abs_abs_sign);\n\t\tlet extension_strength_abs_abs_abs_abs_abs_abs_abs_abs_abs\
    \ = Math.abs(extension\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpikmy_me7.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpikmy_me7.ts(48,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpikmy_me7.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm : 1;\n  let extensions_count_cap_sm_min = extensions_count_cap_sm\
    \ > 0 ? 0 : extensions_count_cap_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_min = extensions_count_cap_sm_min < 0 ? 0 : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \  let extensions_count_cap_sm_max = extensions_count_cap_sm_max > extensions_count_cap_sm_min\
    \ ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm_max\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphs2c05q_.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799190
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet extensions_count = extensions.length;\n\
    \tlet extensions_count_cap = extensions_count.toUpperCase().length;\n\tlet extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n\tlet extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n\tlet extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm : 1;\n\tlet extensions_count_cap_sm_min = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm - 1 : -1;\n\tlet extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max =\
    \ extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n\tlet extensions_count_cap_sm_max_min_max_max_max_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpovhjg0xs.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i];\n    let extension_strength = class_name.split(extension_name).length\
    \ - 1;\n    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n \
    \ }\n  return class_name + \".\" + max_extension_name;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpzstsy26s.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzstsy26s.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp75x_pk_o.ts(22,47): error TS2304: Cannot find name
    ''extension_strength_count''.

    ../../../../../tmp/tmp75x_pk_o.ts(23,28): error TS2304: Cannot find name ''strongest_extension_strength''.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp0qx9yz0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qx9yz0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension_strength =\
    \ extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkvoe92bj.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkvoe92bj.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension.match(/[A-Z]/g).length -\
    \ strongest_extension.match(/[a-z]/g).length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0nmnpy6s.js:22\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length) {\n                          \
    \                                          ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at Strongest_Extension (/tmp/tmp0nmnpy6s.js:22:69)\n\
    \    at test (/tmp/tmp0nmnpy6s.js:32:22)\n    at Object.<anonymous> (/tmp/tmp0nmnpy6s.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_classname = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_classname = class_name + extensions[i];\n    let extension_strength\
    \ = Extension_Strength(extension_classname);\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_classname\
    \ = extension_classname;\n    }\n  }\n  return max_extension_classname;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoj4asrbp.ts(22,30): error TS2552: Cannot find name
    ''Extension_Strength''. Did you mean ''extension_strength''?

    '
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + \".\" + extension;\n\t\t\
    let strength = Extension_Strength(class_name);\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj6k12cld.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmpj6k12cld.ts(23,18): error TS2304: Cannot find name ''Extension_Strength''.

    '
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphozu1byq.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmphozu1byq.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnjiweeaw.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnjiweeaw.js:22:59)\n    at test (/tmp/tmpnjiweeaw.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnjiweeaw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp0qx9yz0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qx9yz0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.charCodeAt(0) - extension.charCodeAt(extension.length - 1);\n  \
    \      if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp_x1mlrp5.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_x1mlrp5.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_str: string = \"\";\n\tlet strongest_extension_class:\
    \ string = \"\";\n\tlet strongest_extension_class_str: string = \"\";\n\tlet strongest_extension_class_count:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + \".\" + extension;\n\t\t\
    let class_count: string = class_name.split(\" \").length;\n\t\tlet extension_count:\
    \ string = extension.split(\" \").length;\n\t\tlet extension_strength: string\
    \ = extension_count - class_count;\n\t\tif (extension_strength > strongest_extension)\
    \ {\n\t\t\tstrongest_extension = extension_strength;\n\t\t\tstrongest_extension_class\
    \ = class_name;\n\t\t\tstrongest_extension_class_str = extension;\n\t\t\tstrongest_extension_class_count\
    \ = class_count;\n\t\t}\n\t}\n\treturn strongest_extension_class + \".\" + strongest_extension_class_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0052vt9s.ts(25,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmp0052vt9s.ts(27,7): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmp0052vt9s.ts(28,7): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmp0052vt9s.ts(28,36): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp0052vt9s.ts(28,54): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp0052vt9s.ts(29,7): error TS2365: Operator ''>'' cannot be
    applied to types ''string'' and ''number''.

    ../../../../../tmp/tmp0052vt9s.ts(30,4): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    const extension\
    \ = extensions[i];\n    const extension_length = extension.length;\n    const\
    \ extension_uppercase_count = extension_length / 2;\n    const extension_lowercase_count\
    \ = extension_length - extension_uppercase_count;\n    const extension_strength\
    \ = extension_uppercase_count - extension_lowercase_count;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmprt0riu0c.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmprt0riu0c.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extensions_count = extensions.length;\n\
    \    let extensions_count_cap = extensions_count.toUpperCase().length;\n    let\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_diff\
    \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_max\
    \ = Math.max(extensions_count_cap, extensions_count_sm);\n    let extensions_count_min\
    \ = Math.min(extensions_count_cap, extensions_count_sm);\n    let extensions_count_strength\
    \ = extensions_count_diff / extensions_count_max;\n    let extensions_count_strength_rounded\
    \ = Math.round(extensions_count_strength * 100) / 100;\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_strength_rounded.toString();\n    let extensions_count_strength_rounded_str\
    \ = extensions_count_strength_rounded_str.charAt(0).toUpperCase() + extensions_count_strength_rounded_str.slice(1);\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    \    let extensions_count_strength_rounded_str = extensions_count_min + extensions_count_strength_rounded_str;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpex0hy0or.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpqlh1jyvf.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqlh1jyvf.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799193
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let max_strength = -1;\n  for (let i = 0; i < extensions.length; i++) {\n \
    \   let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      strongest_extension = extension;\n\
    \      max_strength = extension_strength;\n    }\n  }\n  return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy5jq9tz5.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = \"\";\n\
    \tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.charCodeAt(0)\
    \ - extension.charCodeAt(extension.length - 1);\n\t\tif (extension_strength >\
    \ strongest_extension_strength) {\n\t\t\tstrongest_extension = extension;\n\t\t\
    \tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmphw44xc9f.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmphw44xc9f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - 1;\n    let extension_class_name = class_name + extension;\n    let extension_class_name_length\
    \ = extension_class_name.length;\n    let extension_class_name_strength = extension_class_name_length\
    \ - 1;\n    let extension_class_name_strength_fraction = extension_class_name_strength\
    \ / extension_class_name_length;\n    if (extension_strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension_class_name;\n    }\n    if (extension_strength\
    \ > strongest_extension.length && extension_strength > extension_class_name_strength)\
    \ {\n      strongest_extension = extension_class_name;\n    }\n    if (extension_strength\
    \ > strongest_extension.length && extension_strength > extension_class_name_strength\
    \ && extension_strength > extension_class_name_strength_fraction) {\n      strongest_extension\
    \ = extension_class_name;\n    }\n  }\n  return strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpk2ecj7b2.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk2ecj7b2.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_name: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - extension_strength_count(extension);\n\
    \    if (extension_strength > strongest_extension) {\n      strongest_extension\
    \ = extension_strength;\n      strongest_extension_name = extension;\n    }\n\
    \  }\n  return class_name + \".\" + strongest_extension_name;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu1qchcyk.ts(23,49): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = Extension_Strength(class_name,\
    \ extension);\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq3vb28es.ts(22,24): error TS2304: Cannot find name
    ''Extension_Strength''.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i].toLowerCase();\n    let extension_strength\
    \ = extension_name.length - extension_name.match(/[a-z]/g).length;\n    if (extension_strength\
    \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_name = extension_name;\n    }\n  }\n  return class_name +\
    \ \".\" + max_extension_name;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.eight8oke'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5hfat74f.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5hfat74f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.eight8oke',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_name: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n    if (extension > strongest_extension) {\n      strongest_extension\
    \ = extension;\n      strongest_extension_name = extensions[i];\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension_name;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmprv73bq8f.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmprv73bq8f.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_index: number = 0;\n\tlet strongest_extension_strength:\
    \ number = -1;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = i;\n\t\t\tstrongest_extension_index = i;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + extensions[strongest_extension_index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmi0be40l.js:23\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmi0be40l.js:23:59)\n    at test (/tmp/tmpmi0be40l.js:36:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmi0be40l.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799193
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str_length - 1;\n        let extension_str_lower:\
    \ number = extension_str_length - 2;\n        let extension_str_first_upper: number\
    \ = extension_str_upper - 1;\n        let extension_str_first_lower: number =\
    \ extension_str_lower - 1;\n        let extension_str_first_upper_smaller: number\
    \ = extension_str_first_upper - 1;\n        let extension_str_first_lower_smaller:\
    \ number = extension_str_first_lower - 1;\n        let extension_str_first_upper_bigger:\
    \ number = extension_str_first_upper + 1;\n        let extension_str_first_lower_bigger:\
    \ number = extension_str_first_lower + 1;\n        let extension_str_first_upper_smaller2:\
    \ number = extension_str_first_upper + 2;\n        let extension_str_first_lower_smaller2:\
    \ number = extension_str_first_lower + 2;\n        let extension_str_first_upper_bigger2:\
    \ number = extension_str_first_upper + 3;\n        let extension_str_first_lower_bigger2:\
    \ number = extension_str_first_lower + 3;\n        let extension_str_first_upper_smaller3:\
    \ number = extension_str_first_upper + 4;\n        let extension_str_first_lower_smaller3:\
    \ number = extension_str_first_lower + 4;\n        let extension_str_first_upper_bigger3:\
    \ number = extension_str_first_upper + 5;\n        let extension_str_first_lower_bigger3:\
    \ number = extension_str_first_lower + 5;\n        let extension_str_first_upper_smaller4:\
    \ number = extension_str_first_upper + 6;\n        let extension_str_first_lower_smaller4:\
    \ number = extension_str_first_lower + 6;\n        let extension_str_first_upper_bigger4:\
    \ number = extension_str_first_upper + 7;\n        let extension_str_first_lower_bigger4:\
    \ number = extension_str_first_lower + 7;\n        let extension_str_first_upper_smaller5:\
    \ number = extension_str_first_upper + 8;\n        let extension_str_first_lower_smaller5:\
    \ number = extension_str_first_lower + 8;\n        let extension_str_first_upper_bigger5:\
    \ number = extension_str_first_upper + 9;\n        let extension_str_first_lower_bigger5:\
    \ number = extension_str_first_lower + 9;\n        let extension_str_first_upper_smaller6:\
    \ number = extension_str_first_upper + 10;\n        let extension_str_first_lower_smaller6:\
    \ number = extension_str_first_lower + 10;\n        let extension_str_first_upper_big\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1au9v2_8.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strength: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i];\n    let extension_upper = extension.toUpperCase();\n    let\
    \ extension_lower = extension.toLowerCase();\n    let extension_strength_upper\
    \ = extension_upper.charCodeAt(0) - extension_lower.charCodeAt(0);\n    let extension_strength_lower\
    \ = extension_upper.charCodeAt(0) - extension_lower.charCodeAt(0);\n    extension_strength.push(extension_strength_upper);\n\
    \    extension_strength.push(extension_strength_lower);\n  }\n  let max_strength\
    \ = Math.max.apply(null, extension_strength);\n  let max_index = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpbfaxpk_q.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbfaxpk_q.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799193
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnjiweeaw.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnjiweeaw.js:22:59)\n    at test (/tmp/tmpnjiweeaw.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnjiweeaw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str_length - 1;\n        let extension_str_lower:\
    \ number = extension_str_length - 2;\n        let extension_str_first_upper: number\
    \ = extension_str_upper - 1;\n        let extension_str_first_lower: number =\
    \ extension_str_lower - 1;\n        let extension_str_first_cap: number = extension_str_first_upper\
    \ - 1;\n        let extension_str_first_sm: number = extension_str_first_lower\
    \ - 1;\n        let extension_str_first_cap_sm: number = extension_str_first_cap\
    \ - 1;\n        let extension_str_first_cap_sm_lower: number = extension_str_first_cap_sm\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper: number = extension_str_first_cap_sm_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower: number = extension_str_first_cap_sm_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper: number\
    \ = extension_str_first_cap_sm_lower_upper_lower - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper - 1;\n        let\
    \ extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper: number = extension_str_first_cap_sm_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper - 1;\n\
    \        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper:\
    \ number = extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\
    \ - 1;\n        let extension_str_first_cap_sm_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower:\
    \ number = extension_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpid9c26ef.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799192
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.length;\n      \
    \  let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_strength = extension_strength.reduce((a, b) => Math.max(a, b));\n    let\
    \ max_index = extension_strength.indexOf(max_strength);\n    let class_name_with_max_strength\
    \ = class_name + extensions[max_index];\n    return class_name_with_max_strength;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwsbn4xfa.ts(22,81): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    '
  timestamp: 1659799193
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.charCodeAt(0) - extension.charCodeAt(extension.length - 1);\n  \
    \      if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpvjy2fp78.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvjy2fp78.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799194
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.split(\"\");\n \
    \       let extension_letters_count = extension_letters.length;\n        let extension_strength_sum\
    \ = 0;\n        for (let j = 0; j < extension_letters_count; j++) {\n        \
    \    let letter = extension_letters[j];\n            extension_strength_sum +=\
    \ (letter.charCodeAt(0) - 65);\n        }\n        extension_strength[i] = extension_strength_sum;\n\
    \    }\n    let max_strength = extension_strength.indexOf(Math.max(...extension_strength));\n\
    \    return class_name + extensions[max_strength];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashieIGHt8OKe'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpgj07lxpj.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgj07lxpj.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashieIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799194
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - strongest_extension.length;\n\t\tif (extension_strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpglciqsj9.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpglciqsj9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_class: string = class_name;\n  let strongest_extension_strength:\
    \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n    if (extension > strongest_extension)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_class =\
    \ extensions[i];\n      strongest_extension_strength = i;\n    }\n  }\n  return\
    \ strongest_extension_class + \".\" + extensions[strongest_extension_strength];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tEN.tEN'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp7z4rgher.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7z4rgher.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tEN.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength\n      max_extension = extension\n\
    \    }\n  }\n  return class_name + \".\" + max_extension\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpko1f41vg.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpko1f41vg.js:22:59)\n    at test (/tmp/tmpko1f41vg.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpko1f41vg.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_str: string = extensions[i];\n    let extension_str_length:\
    \ number = extension_str.length;\n    let extension_str_lower_case: number = extension_str.toLowerCase();\n\
    \    let extension_str_upper_case: number = extension_str.toUpperCase();\n   \
    \ let extension_str_length_capitalized: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_lowercase: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_uppercase: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_lowercase_capitalized: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_upper_case: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_upper_case_capitalized: number = extension_str_length.toLocaleUpperCase();\n\
    \    let extension_str_length_upper_case_capitalized_lowercase: number = extension_str_length.toLocaleLowerCase();\n\
    \    let extension_str_length_upper_case_capitalized_lowercase_capitalized: number\
    \ = extension_str_length.toLocaleUpperCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase:\
    \ number = extension_str_length.toLocaleLowerCase();\n    let extension_str_length_upper_case_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capitalized_lowercase_capit\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2hiev5g7.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799194
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\n\
    \            strongest_extension = extension;\n    }\n    return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpe771xnmo.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe771xnmo.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ \"\";\n  let strongest_extension_strength: number = -1;\n  for (let i = 0; i\
    \ < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.charCodeAt(0) - extension.charCodeAt(extension.length - 1);\n  \
    \  if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpaodec6q1.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaodec6q1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kl1todp.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  let extension_counter = 0;\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_counter = extension_counter + 1;\n    let extension_strength\
    \ = extension_counter;\n    let extension_class_name = class_name + extension;\n\
    \    let extension_class_name_lower = extension_class_name.toLowerCase();\n  \
    \  for (let j = 0; j < extensions.length; j++) {\n      let extension_counter\
    \ = extension_counter + 1;\n      let extension_strength = extension_counter;\n\
    \      let extension_class_name = class_name + extension;\n      let extension_class_name_lower\
    \ = extension_class_name.toLowerCase();\n      if (extension_strength > strongest_extension_strength)\
    \ {\n        strongest_extension_strength = extension_strength;\n        strongest_extension\
    \ = extension_class_name;\n      }\n    }\n  }\n  return strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1pkx1ih8.ts(23,29): error TS2448: Block-scoped variable
    ''extension_counter'' used before its declaration.

    ../../../../../tmp/tmp1pkx1ih8.ts(28,31): error TS2448: Block-scoped variable
    ''extension_counter'' used before its declaration.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (cap < sm) {\n   \
    \         strength = -1;\n        }\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp2rmktxpq.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2rmktxpq.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet extensions_count = extensions.length;\n\
    \tlet extensions_count_cap = extensions_count - extensions_count.toLocaleLowerCase();\n\
    \tlet extensions_count_sm = extensions_count.toLocaleLowerCase();\n\tlet extensions_count_cap_sm\
    \ = (extensions_count_cap - extensions_count_sm) / extensions_count_cap;\n\tlet\
    \ extensions_count_cap_sm_cap = extensions_count_cap_sm + extensions_count_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm = (extensions_count_cap_sm_cap - extensions_count_sm)\
    \ / extensions_count_cap_sm_cap;\n\tlet extensions_count_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm\
    \ + extensions_count_cap_sm_cap;\n\tlet extensions_count_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm + extensions_count_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm\
    \ + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\t\
    let extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ + extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap;\n\
    \tlet extensions_count_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ = extensions_count_cap_sm_cap_sm_cap_sm_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpasxlif1p.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_of_letter(extension.charAt(0));\n\t\tif (extension_strength\
    \ > strongest_extension_strength) {\n\t\t\tstrongest_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9o2o3wlt.ts(22,47): error TS2304: Cannot find name
    ''extension_strength_of_letter''.

    ../../../../../tmp/tmp9o2o3wlt.ts(23,28): error TS2304: Cannot find name ''strongest_extension_strength''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5zaemc2k.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp5zaemc2k.js:22:59)\n    at test (/tmp/tmp5zaemc2k.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp5zaemc2k.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.length;\n      \
    \  let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_extension_strength = Math.max.apply(null, extension_strength);\n    let\
    \ max_extension_strength_index = extension_strength.indexOf(max_extension_strength);\n\
    \    let max_extension = extensions[max_extension_strength_index];\n    return\
    \ class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbkgzcpe4.ts(22,81): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_name: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_name = extensions[i];\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpqvpggr8e.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqvpggr8e.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6kridzi.ts(22,53): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - class_name.indexOf(extension);\n\t\tif (extension_strength\
    \ > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0a_spc0m.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0a_spc0m.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let max_strength = 0;\n  for (let i = 0; i < extensions.length; i++) {\n  \
    \  let extension = extensions[i];\n    let extension_class = class_name + extension;\n\
    \    let extension_strength = Extension_Strength(extension_class);\n    if (extension_strength\
    \ > max_strength) {\n      strongest_extension = extension_class;\n      max_strength\
    \ = extension_strength;\n    }\n  }\n  return strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkl033ikm.ts(23,30): error TS2552: Cannot find name
    ''Extension_Strength''. Did you mean ''extension_strength''?

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension_strength =\
    \ extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkvoe92bj.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkvoe92bj.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799192
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ \"\";\n  let cap_extensions: number[] = [];\n  let sm_extensions: number[] =\
    \ [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    cap_extensions.push(cap);\n    sm_extensions.push(sm);\n  }\n  let cap_extensions_length\
    \ = cap_extensions.length;\n  let sm_extensions_length = sm_extensions.length;\n\
    \  let max_extension_strength = -1;\n  for (let i = 0; i < cap_extensions_length;\
    \ i++) {\n    for (let j = 0; j < sm_extensions_length; j++) {\n      let cap_extension\
    \ = cap_extensions[i];\n      let sm_extension = sm_extensions[j];\n      let\
    \ cap_extension_strength = cap_extension.charCodeAt(0) - sm_extension.charCodeAt(0);\n\
    \      if (cap_extension_strength > max_extension_strength) {\n        max_extension_strength\
    \ = cap_extension_strength;\n        strongest_extension = class_name + \".\"\
    \ + cap_extension;\n      }\n    }\n  }\n  return strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vz8l4k0.ts(25,25): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_vz8l4k0.ts(26,24): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_vz8l4k0.ts(35,50): error TS2339: Property ''charCodeAt''
    does not exist on type ''number''.

    ../../../../../tmp/tmp_vz8l4k0.ts(35,79): error TS2339: Property ''charCodeAt''
    does not exist on type ''number''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ strongest_extension = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfxzsdpm9.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfxzsdpm9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799188
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -Infinity;\n  let strongest_extension_str: string;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension_str: string = extensions[i];\n    let extension_str_length:\
    \ number = extension_str.length;\n    let extension_str_upper: number = extension_str.toUpperCase().length;\n\
    \    let extension_str_lower: number = extension_str.toLowerCase().length;\n \
    \   let extension_str_length_ratio: number = extension_str_upper / extension_str_length;\n\
    \    let extension_str_lower_ratio: number = extension_str_lower / extension_str_length;\n\
    \    let extension_str_upper_ratio: number = extension_str_upper / extension_str_lower;\n\
    \    let extension_str_lower_ratio: number = extension_str_lower / extension_str_upper;\n\
    \    let extension_str_strength: number = extension_str_length_ratio * extension_str_lower_ratio;\n\
    \    if (extension_str_strength > strongest_extension) {\n      strongest_extension\
    \ = extension_str_strength;\n      strongest_extension_str = extension_str;\n\
    \    }\n  }\n  return class_name + \".\" + strongest_extension_str;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprdej58d2.ts(26,9): error TS2451: Cannot redeclare
    block-scoped variable ''extension_str_lower_ratio''.

    ../../../../../tmp/tmprdej58d2.ts(28,9): error TS2451: Cannot redeclare block-scoped
    variable ''extension_str_lower_ratio''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz5bxo0fm.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz5bxo0fm.js:22:59)\n    at test (/tmp/tmpz5bxo0fm.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz5bxo0fm.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkr3dn3vm.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkr3dn3vm.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpodg4u4lt.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpodg4u4lt.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnjiweeaw.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnjiweeaw.js:22:59)\n    at test (/tmp/tmpnjiweeaw.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnjiweeaw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = \"\";\n\
    \tlet strongest_extension_strength = 0;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - strongest_extension_strength_counter;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength_counter = extension_length;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1h0nrwrq.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1h0nrwrq.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5zaemc2k.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp5zaemc2k.js:22:59)\n    at test (/tmp/tmp5zaemc2k.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp5zaemc2k.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_name: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)]\
    \ - SM_TO_STRONG[extension.charAt(extension_length - 1)];\n\t\tif (extension_strength\
    \ > strongest_extension) {\n\t\t\tstrongest_extension = extension_strength;\n\t\
    \t\tstrongest_extension_name = extension;\n\t\t}\n\t}\n\treturn class_name + \"\
    .\" + strongest_extension_name;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8pi_z9ts.ts(23,47): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    ../../../../../tmp/tmp8pi_z9ts.ts(23,84): error TS2304: Cannot find name ''SM_TO_STRONG''.

    '
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphozu1byq.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmphozu1byq.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n \
    \       let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
    \        let extension_str_length_cap: number = extension_str_length - 1;\n  \
    \      let extension_str_length_lower: number = extension_str_length - 1;\n  \
    \      let extension_str_length_upper: number = extension_str_length - 1;\n  \
    \      let extension_str_length_total: number = extension_str_length_cap + extension_str_length_lower\
    \ + extension_str_length_upper;\n        let extension_str_length_total_cap: number\
    \ = extension_str_length_cap + extension_str_length_upper;\n        let extension_str_length_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper;\n        let\
    \ extension_str_length_total_upper: number = extension_str_length_cap + extension_str_length_lower;\n\
    \        let extension_str_length_total_total: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_cap: number = extension_str_length_cap\
    \ + extension_str_length_upper + extension_str_length_total;\n        let extension_str_length_total_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_upper: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total;\n\
    \        let extension_str_length_total_total_total: number = extension_str_length_cap\
    \ + extension_str_length_lower + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_cap:\
    \ number = extension_str_length_cap + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_lower:\
    \ number = extension_str_length_lower + extension_str_length_upper + extension_str_length_total\
    \ + extension_str_length_total;\n        let extension_str_length_total_total_total_upper:\
    \ number = extension_str_length_cap + extension_str_length_lower + extension_str_length_upper\
    \ + extension_str_length_total + extension_str_length_total;\n        let extension_str_length_total_total_total_total:\
    \ number = extension_str_length_cap + extension_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpckkw55tn.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp0qx9yz0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qx9yz0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kl1todp.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet extension_strength: number[]\
    \ = [];\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet class_name_upper = class_name.charAt(0).toUpperCase() + class_name.slice(1);\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_upper.length;\n\t\tlet class_name_lower = class_name_lower.toLowerCase();\n\
    \t\tlet class_name_length = class_name_lower.length;\n\t\tlet class_name_upper\
    \ = class_name_upper.toLowerCase();\n\t\tlet class_name_length = class_name_upper.length;\n\
    \t\tlet class_name_lower = class_name_lower.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_upper = class_name_upper.toLowerCase();\n\
    \t\tlet class_name_length = class_name_upper.length;\n\t\tlet class_name_lower\
    \ = class_name_lower.toLowerCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
    \t\tlet class_name_upper = class_name_upper.toLowerCase();\n\t\tlet class_name_length\
    \ = class_name_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoohlt333.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_extension_strength) {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5zaemc2k.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp5zaemc2k.js:22:59)\n    at test (/tmp/tmp5zaemc2k.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp5zaemc2k.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799195
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphozu1byq.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmphozu1byq.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ strongest_extension = extension;\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpn7jq7vp1.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn7jq7vp1.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = Extension_Strength(extension);\n    if\
    \ (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp211kqzry.ts(22,20): error TS2304: Cannot find name
    ''Extension_Strength''.

    '
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_diff = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_max = Math.max(extensions_count_cap,\
    \ extensions_count_sm);\n  let extensions_count_min = Math.min(extensions_count_cap,\
    \ extensions_count_sm);\n  let extensions_count_average = Math.round(extensions_count\
    \ / extensions_count_max);\n  let extensions_count_average_cap = Math.round(extensions_count_cap\
    \ / extensions_count_max);\n  let extensions_count_average_sm = Math.round(extensions_count_sm\
    \ / extensions_count_max);\n  let extensions_count_average_diff = Math.round(extensions_count_diff\
    \ / extensions_count_max);\n  let extensions_count_average_max = Math.round(extensions_count_max\
    \ / extensions_count_max);\n  let extensions_count_average_min = Math.round(extensions_count_min\
    \ / extensions_count_max);\n  let extensions_count_average_average = Math.round(extensions_count_average\
    \ / extensions_count_max);\n  let extensions_count_average_average_cap = Math.round(extensions_count_average_cap\
    \ / extensions_count_max);\n  let extensions_count_average_average_sm = Math.round(extensions_count_average_sm\
    \ / extensions_count_max);\n  let extensions_count_average_average_diff = Math.round(extensions_count_average_diff\
    \ / extensions_count_max);\n  let extensions_count_average_average_max = Math.round(extensions_count_average_max\
    \ / extensions_count_max);\n  let extensions_count_average_average_min = Math.round(extensions_count_average_min\
    \ / extensions_count_max);\n  let extensions_count_average_average_average = Math.round(extensions_count_average_average\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_cap\
    \ = Math.round(extensions_count_average_average_cap / extensions_count_max);\n\
    \  let extensions_count_average_average_average_sm = Math.round(extensions_count_average_average_sm\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_diff\
    \ = Math.round(extensions_count_average_average_diff / extensions_count_max);\n\
    \  let extensions_count_average_average_average_max = Math.round(extensions_count_average_average_max\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_min\
    \ = Math.round(extensions_count_average_average_min / extensions_count_max);\n\
    \  let extensions_count_average_average_average_average = Math.round(extensions_count_average_average_average\
    \ / extensions_count_max);\n  let extensions_count_average_average_average_average_cap\
    \ = Math.round(extensions_count_average_average_average_cap / extensions_count_max);\n\
    \  let extensions_count_average_average_average_average_sm = Math.round(extension\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphozz9b9u.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphozz9b9u.ts(45,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphozz9b9u.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6kridzi.ts(22,53): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659799195
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx0jedjyo.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpx0jedjyo.js:22:59)\n    at test (/tmp/tmpx0jedjyo.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpx0jedjyo.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu4yyjyl8.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpu4yyjyl8.js:22:59)\n    at test (/tmp/tmpu4yyjyl8.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu4yyjyl8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - CAP_TO_STRONG(extension);\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkye51mmj.ts(23,53): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_upper: number = extension_str_length.toUpperCase();\n \
    \       let extension_str_length_lower: number = extension_str_length.toLowerCase();\n\
    \        let extension_str_length_upper_sm: number = extension_str_length_upper.length\
    \ - extension_str_length_lower.length;\n        let extension_str_length_lower_sm:\
    \ number = extension_str_length_lower.length - extension_str_length_upper.length;\n\
    \        let extension_str_length_upper_cap: number = extension_str_length_upper.length\
    \ - extension_str_length_lower.length - 1;\n        let extension_str_length_lower_cap:\
    \ number = extension_str_length_lower.length - extension_str_length_upper.length\
    \ - 1;\n        let extension_str_length_upper_smcap: number = extension_str_length_upper_sm\
    \ - extension_str_length_lower_sm;\n        let extension_str_length_lower_smcap:\
    \ number = extension_str_length_lower_sm - extension_str_length_upper_sm;\n  \
    \      let extension_str_length_upper_capsm: number = extension_str_length_upper_cap\
    \ - extension_str_length_lower_cap;\n        let extension_str_length_lower_capsm:\
    \ number = extension_str_length_lower_cap - extension_str_length_upper_cap;\n\
    \        let extension_str_length_upper_smcapsm: number = extension_str_length_upper_smcap\
    \ - extension_str_length_lower_capsm;\n        if (extension_str_length_upper_sm\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_sm;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_sm\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_lower_sm;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_upper_cap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_cap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_cap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_lower_cap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_upper_smcap\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_upper_smcap;\n\
    \            strongest_extension_str = extension_str;\n        }\n        if (extension_str_length_lower_cap\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_akh_s3m.ts(55,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp_akh_s3m.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.charCodeAt(0)\
    \ - extension.charCodeAt(extension.length - 1);\n    if (extension_strength >\
    \ strongest_extension_strength) {\n      strongest_extension = extension;\n  \
    \    strongest_extension_strength = extension_strength;\n    }\n  }\n  return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpybdd2hyw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpybdd2hyw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp0qx9yz0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qx9yz0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpiwuzmxh2.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiwuzmxh2.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - extension_strength_count(extension);\n    if (extension_strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70oi55ts.ts(22,49): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprb0wxb8f.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmprb0wxb8f.js:22:59)\n    at test (/tmp/tmprb0wxb8f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmprb0wxb8f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let max_strength = -1;\n  for (let i = 0; i < extensions.length; i++) {\n \
    \   let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      strongest_extension = extension;\n      max_strength = extension_strength;\n\
    \    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpubw1u56d.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpubw1u56d.js:22:59)\n    at test (/tmp/tmpubw1u56d.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpubw1u56d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprb0wxb8f.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmprb0wxb8f.js:22:59)\n    at test (/tmp/tmprb0wxb8f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmprb0wxb8f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const extension_length = extension.length;\n    const extension_uppercase_count\
    \ = extension_length / 2;\n    const extension_lowercase_count = extension_length\
    \ - extension_uppercase_count;\n    const extension_strength = extension_uppercase_count\
    \ - extension_lowercase_count;\n    if (extension_strength > strongest_extension.strength)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1dky54me.ts(25,50): error TS2339: Property ''strength''
    does not exist on type ''string''.

    '
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = \"\";\n\
    \tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.charCodeAt(0)\
    \ - extension.charCodeAt(extension.length - 1);\n\t\tif (extension_strength >\
    \ strongest_extension_strength) {\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpmxi1npss.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmxi1npss.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799198
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1ass0lo4.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp1ass0lo4.js:22:49)\n    at test (/tmp/tmp1ass0lo4.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1ass0lo4.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnp6lr76p.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpnp6lr76p.js:22:49)\n    at test (/tmp/tmpnp6lr76p.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnp6lr76p.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799187
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_str: string =\
    \ extension.charAt(0).toUpperCase() + extension.slice(1);\n\t\tlet extension_strength\
    \ = extension_str.length - extension_str.toLowerCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension) {\n\t\t\tstrongest_extension = extension_strength;\n\t\
    \t\tstrongest_extension_str = extension_str;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppb_8dl8b.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmppb_8dl8b.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ `${class_name}${strongest_extension}`;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpf8axw2yd.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf8axw2yd.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = \"\";\n\
    \  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppsavoav0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmppsavoav0.js:22:59)\n    at test (/tmp/tmppsavoav0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmppsavoav0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738895
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length\
    \ - sm.length;\n\t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = strength;\n\t\t\tstrongest_extension_str = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpvr05h0b2.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvr05h0b2.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799197
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_class: string = \"\";\n\tlet strongest_extension_name:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n\t\tlet extension_class: string\
    \ = extensions[i].charAt(0).toUpperCase() + extensions[i].slice(1);\n\t\tlet extension_name:\
    \ string = extensions[i].charAt(0).toLowerCase() + extensions[i].slice(1);\n\t\
    \tlet extension_strength: number = extension_class.charCodeAt(0) - extension_name.charCodeAt(0);\n\
    \t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_class = extension_class;\n\t\
    \t\tstrongest_extension_name = extension_name;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension_name + \".\" + strongest_extension_class;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi..'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp0y1nd8wl.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0y1nd8wl.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi..',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799198
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet strength = class_name_length - extension_length;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + max_extension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyr02zgw9.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659799197
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_upper = extension.toUpperCase();\n\t\tlet extension_lower =\
    \ extension.toLowerCase();\n\t\tlet extension_strength = extension_length - extension_upper.length\
    \ - extension_lower.length;\n\t\tlet strength = class_name_length - extension_length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnp2dr8nj.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659799198
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ \"\";\n  let strongest_extension_strength: number = -1;\n  for (let i = 0; i\
    \ < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk5xlbirz.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpk5xlbirz.js:22:59)\n    at test (/tmp/tmpk5xlbirz.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpk5xlbirz.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799198
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppqdcpj4i.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmppqdcpj4i.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799190
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i]\n\t\t\
    let strength = class_name.split(extension).length - 1\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength\n\t\t}\n\t}\n\treturn class_name + extensions[max_strength]\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpvozu227e.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvozu227e.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659799198
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp716p_2v0.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp716p_2v0.js:22:59)\n    at test (/tmp/tmp716p_2v0.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp716p_2v0.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738896
