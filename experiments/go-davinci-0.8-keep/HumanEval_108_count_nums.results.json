{
  "language": "go_test.go",
  "name": "HumanEval_108_count_nums",
  "results": [
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    ans := 0\n    for _, n := range arr {\n        sum := 0\n        for n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n            ans++\n        }\n    }\n    return ans\n}\n\ntype TestCase \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpbqjv7fsp_test.go:30:15: expected type, found newline\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074454
    },
    {
      "exit_code": 2,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    var result int = 0\n    for _,v := range arr {\n        if v != 0 {\n            result += calcSum(v)\n        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfra_0vlt_test.go:19:23: undefined: calcSum\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    sum := 0\n    for _, i := range arr {\n        digits := 0\n        if i < 0 {\n            i = -i\n        }\n        for i > 0 {\n            digits += i % 10\n            i /= 10\n        }\n        if digits > 0 {\n            sum++\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmp3i9j6cse_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp3i9j6cse_test.go:53: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3i9j6cse_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp3i9j6cse_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, elem := range arr {\n        sum := 0\n        if elem == 0 {\n            continue\n        } else if elem < 0 {\n            elem = -elem\n        }\n        for elem > 0 {\n            sum += elem % 10\n            elem /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpiwcpvyzf_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpiwcpvyzf_test.go:55: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpiwcpvyzf_test.go:55: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpiwcpvyzf_test.go:55: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    if arr == nil {\n        return 0\n    }\n    count := 0\n    for _, item := range arr {\n        var sum int\n        for item != 0 {\n            sum += item % 10\n            item /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp_ku7f5a4_test.go:53: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    // \u5148\u904d\u5386\u4e00\u904d\uff0c\u627e\u51fa\u6700\u5927\u6570\u5b57\uff0c\u540e\u9762\u7684\u4f4d\u6570\u6709\u591a\u5c11\uff0c\u5c31\u5206\u914d\u591a\u5c11\u4f4d\u7684\u6570\u7ec4\n    max := 0\n    for _, v := range arr {\n        // \u5982\u679c\u662f\u8d1f\u6570\uff0c\u5219\u9700\u8981\u7ffb\u8f6c\u4e3a\u6b63\u6570\n        if v < 0 {\n            v = -v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    // \u5bf9max\u8fdb\u884c\u4f4d\u6570\u7edf\u8ba1\n    bit := 0\n    for max > 0 {\n        max = max / 10\n        bit++\n    }\n    // \u5206\u914dbit\u4f4d\u7684\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u7ed3\u679c\n    var result [10]int\n    // \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u4e0eresult\u4e2d\u7684\u6570\u5b57\u76f8\u52a0\n    for _, v := range arr {\n        // \u9996\u5148\u5224\u65ad\u6b63\u8d1f\n        if v < 0 {\n            v = -v\n        }\n        // \u904d\u5386\u4f4d\u6570\n        for i := 0; i < bit; i++ {\n            // \u53d6\u51fa\u8be5\u4f4d\u7684\u6570\u5b57\n            x := v % 10\n            v = v / 10\n            // \u5c06\u8be5\u4f4d\u6570\u5b57\u5b58\u50a8\u5230\u5bf9\u5e94\u6570\u7ec4\u7684\u4f4d\u7f6e\n            result[i] += x\n        }\n    }\n    // \u904d\u5386result\u6570\u7ec4\uff0c\u7edf\u8ba1\u6bcf\u4e00\u4f4d\u7684\u548c\u662f\u5426\u5927\u4e8e0\n    count := 0\n    for _, v := range result {\n        if v > 0 {\n            count++\n        }\n    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp_piivpl0_test.go:58:6: expected '(', found TestCount_Nums\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074454
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    sum := 0\n    for _, num := range arr {\n        digits := 0\n        if num < 0 {\n            num = -num\n        }\n        for num > 0 {\n            digits += num % 10\n            num /= 10\n        }\n        if digits > 0 {\n            sum++\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpwh5mris5_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpwh5mris5_test.go:53: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpwh5mris5_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpwh5mris5_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        s := fmt.Sprintf(\"%d\", num)\n        sum := 0\n        for _, c := range s {\n            sum += int(c - '0')\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpuwccjs5g_test.go:50: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpuwccjs5g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 2,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    var count int = 0\n    for _, v := range arr {\n        var sum int = 0\n        for _, d := range abs(v) {\n            sum += d\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp00vfo7gi_test.go:19:27: undefined: abs\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, a := range arr {\n        if a < 0 {\n            a = -a\n        }\n        for a > 0 {\n            count += a % 10\n            a /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpvtufxaik_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpvtufxaik_test.go:49: expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpvtufxaik_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpvtufxaik_test.go:49: expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpvtufxaik_test.go:49: expected '%!s(int=5)', got '%!s(int=35)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    var cnt int\n    for _, v := range arr {\n        v_cnt := 0\n        if v < 0 {\n            v = -v\n        }\n        for v > 0 {\n            v_cnt += v % 10\n            v /= 10\n        }\n        if v_cnt > 0 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpixognu2s_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpixognu2s_test.go:53: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpixognu2s_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpixognu2s_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    var count int\n    for _, i := range arr {\n        var sum int\n        if i < 0 {\n            sum += -i % 10\n            i = -i / 10\n        }\n        for i > 0 {\n            sum += i % 10\n            i /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpv3nwi1s5_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpv3nwi1s5_test.go:54: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpv3nwi1s5_test.go:54: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpv3nwi1s5_test.go:54: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    counter := 0\n    for _, n := range arr {\n        s := 0\n        if n < 0 {\n            n = -n\n        }\n        for n > 0 {\n            s += n % 10\n            n /= 10\n        }\n        if s > 0 {\n            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmp99zmaihw_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp99zmaihw_test.go:53: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp99zmaihw_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp99zmaihw_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, v := range arr {\n        n := v\n        if n < 0 {\n            n = -v\n        }\n        if n > 0 {\n            digits := 0\n            for {\n                if n == 0 {\n                    break\n                }\n                n = n / 10\n                digits++\n            }\n            //if digits > 0 {\n            //    count++\n            //}\n            count += digits\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpabazx475_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpabazx475_test.go:60: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpabazx475_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpabazx475_test.go:60: expected '%!s(int=4)', got '%!s(int=9)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpabazx475_test.go:60: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    fmt.Println(arr)\n    return 1\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "[]\n[-1 -2 0]\n[1 1 2 -2 3 4 5]\n[1 6 9 -6 0 1 5]\n[1 100 98 -7 1 -1]\n[12 23 34 -45 -56 0]\n[0 1]\n[1]\n--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__0 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpfeptdx04_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 2,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, v := range arr {\n        if v == 0 {\n            continue\n        }\n        if sum_digits(v) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsn60cx15_test.go:21:12: undefined: sum_digits\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074296
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    var count int\n    for _, n := range arr {\n        if n < 0 {\n            n = -n\n        }\n        sum := 0\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1 (0.00s)\n        tmp3uqg5g55_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp3uqg5g55_test.go:53: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3uqg5g55_test.go:53: expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp3uqg5g55_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        // num % 10 returns the rightmost digit of a number\n        // (num % 10) + (num / 10 % 10) returns the sum of the rightmost\n        // two digits of a number\n        if (num % 10) + (num / 10 % 10) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpbt4a71ec_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpbt4a71ec_test.go:48: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074455
    },
    {
      "exit_code": 1,
      "program": "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp3t2ihq3j_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074296
    }
  ]
}