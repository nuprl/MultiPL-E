language: go_test.go
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var stones int\n    if n%2 == 0 {\n \
    \       stones = n + 2\n    } else {\n        stones = n + 1\n    }\n    arr :=\
    \ make_a_pile(stones)\n    return append([]int{stones}, arr...)\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0348\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x9d89c0?)\n\
    \t/tmp/tmppckp_z5k_test.go:18 +0x10d fp=0xc0201e0358 sp=0xc0201e0350 pc=0x4ef76d\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e03c0 sp=0xc0201e0358 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.go:28 +0x49 fp=0xc0201e0428 sp=0xc0201e03c0 pc=0x4ef6a9\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e0490 sp=0xc0201e0428 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.go:28 +0x49 fp=0xc0201e04f8 sp=0xc0201e0490 pc=0x4ef6a9\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e0560 sp=0xc0201e04f8 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.go:28 +0x49 fp=0xc0201e05c8 sp=0xc0201e0560 pc=0x4ef6a9\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e0630 sp=0xc0201e05c8 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.go:28 +0x49 fp=0xc0201e0698 sp=0xc0201e0630 pc=0x4ef6a9\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e0700 sp=0xc0201e0698 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.go:28 +0x49 fp=0xc0201e0768 sp=0xc0201e0700 pc=0x4ef6a9\n\
    command-line-arguments_test.make_a_pile(0x0?)\n\t/tmp/tmppckp_z5k_test.go:28 +0x49\
    \ fp=0xc0201e07d0 sp=0xc0201e0768 pc=0x4ef6a9\ncommand-line-arguments_test.make_a_pile(0x0?)\n\
    \t/tmp/tmppckp_z5k_test.g"
  timestamp: 1660073457
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    result :=\
    \ make([]int, n)\n    result[0] = n\n    for i := 1; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result[i] = result[i-1] + 2\n        } else {\n  \
    \          result[i] = result[i-1] + 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpo0ksxu86_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpo0ksxu86_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=8)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpo0ksxu86_test.go:48: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpo0ksxu86_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=9)\
    \ %!s(int=10) %!s(int=12) %!s(int=13)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpo0ksxu86_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=14) %!s(int=15) %!s(int=17) %!s(int=18)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    r := make([]int,\
    \ n)\n    r[0] = n\n    for i := 1; i < n; i++ {\n        if r[i-1] % 2 == 0 {\n\
    \            r[i] = r[i-1] + 1\n        } else {\n            r[i] = r[i-1] +\
    \ 2\n        }\n    }\n    return r\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp9nr4831t_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp9nr4831t_test.go:48: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp9nr4831t_test.go:48:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    result :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        if i == 0 {\n        \
    \    result[i] = n\n        } else {\n            result[i] = next_odd_even(result[i-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0n2eulre_test.go:24:25: undefined: next_odd_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    result :=\
    \ make([]int, n)\n    result[0] = n\n    for i := 1; i < n; i++ {\n        if\
    \ result[i-1] % 2 == 0 {\n            result[i] = result[i-1] + 1\n        } else\
    \ {\n            result[i] = result[i-1] + 2\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd7hzv_mj_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpd7hzv_mj_test.go:48: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpd7hzv_mj_test.go:48:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var odd bool\n\
    \    if n % 2 == 0 {\n        odd = false\n    } else {\n        odd = true\n\
    \    }\n    m := make([]int, n)\n    m[0] = n\n    for i := 1; i < n; i++ {\n\
    \        if odd {\n            m[i] = m[i-1] + 2\n        } else {\n         \
    \   m[i] = m[i-1] + 1\n        }\n        odd = !odd\n    }\n    return m\n}\n\
    \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd323gxcy_test.go:55: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd323gxcy_test.go:55: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=8)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd323gxcy_test.go:55: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=8) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd323gxcy_test.go:55: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=9)\
    \ %!s(int=10) %!s(int=12) %!s(int=13)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd323gxcy_test.go:55: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=11) %!s(int=12) %!s(int=14) %!s(int=15) %!s(int=17) %!s(int=18)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return append([]int{n},\
    \ make_a_pile(n + 1)...)\n    }\n    return append([]int{n}, make_a_pile(n - 1)...)\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmpinfctia4_test.go:18 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpinfctia4_test.go:23 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpinfctia4_test.go:25 +0xe5 fp=0xc"
  timestamp: 1660073457
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    a := make([]int,\
    \ n)\n    var even, odd int\n    if n % 2 == 0 {\n        even = n\n        odd\
    \ = n - 1\n    } else {\n        even = n - 1\n        odd = n\n    }\n    for\
    \ i := 0; i < n; i++ {\n        if i % 2 == 0 {\n            a[i] = even\n   \
    \         even += 2\n        } else {\n            a[i] = odd\n            odd\
    \ += 2\n        }\n    }\n    return a\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzk7sner6_test.go:57: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzk7sner6_test.go:57: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzk7sner6_test.go:57: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzk7sner6_test.go:57: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=8)\
    \ %!s(int=7) %!s(int=10) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzk7sner6_test.go:57: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=10) %!s(int=9) %!s(int=12) %!s(int=11) %!s(int=14) %!s(int=13)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    r := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        r[i] = n + 2*i\n    }\n    return\
    \ r\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var stones\
    \ []int\n    stones = append(stones, n)\n    for i := n; i > 0; i-- {\n      \
    \  if n%2 == 0 {\n            n -= 1\n        } else {\n            n -= 2\n \
    \       }\n        stones = append(stones, n)\n    }\n    return stones\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3rgnchnu_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=-1) %!s(int=-3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3rgnchnu_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=1) %!s(int=-1) %!s(int=-3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3rgnchnu_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=1) %!s(int=-1) %!s(int=-3) %!s(int=-5)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3rgnchnu_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=3)\
    \ %!s(int=1) %!s(int=-1) %!s(int=-3) %!s(int=-5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3rgnchnu_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=5) %!s(int=3) %!s(int=1) %!s(int=-1) %!s(int=-3) %!s(int=-5)\
    \ %!s(int=-7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    result :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        if i == 0 {\n        \
    \    result[i] = n\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    array :=\
    \ make([]int, n)\n    array[0] = n\n    for i := 1; i < n; i++ {\n        if n%2\
    \ == 0 {\n            array[i] = array[i-1] + 2\n        } else {\n          \
    \  array[i] = array[i-1] + 1\n        }\n    }\n    return array\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqlpnvocm_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpqlpnvocm_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    list := make([]int,\
    \ n)\n    list[0] = n\n    next := func(x int) int {\n        if x%2 == 0 {\n\
    \            return x+1\n        }\n        return x+2\n    }\n    for i := 1;\
    \ i < n; i++ {\n        list[i] = next(list[i-1])\n    }\n    return list\n}\n\
    \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6lxfo_fj_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp6lxfo_fj_test.go:50: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp6lxfo_fj_test.go:50:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var result\
    \ []int\n    result = append(result, n)\n    for i := 1; i < n; i++ {\n      \
    \  if result[i-1] % 2 == 0 {\n            result = append(result, result[i-1]+1)\n\
    \        } else {\n            result = append(result, result[i-1]+2)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpc0iiat1d_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpc0iiat1d_test.go:48: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpc0iiat1d_test.go:48:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        // even\n  \
    \      return append([]int{n}, make_a_pile(n+1)...)\n    } else {\n        //\
    \ odd\n        return append([]int{n}, make_a_pile(n+2)...)\n    }\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0xba2e6f?)\n\
    \t/tmp/tmpf34d4ena_test.go:18 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0xba2e6d)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef745\ncommand-line-arguments_test.make_a_pile(0xba2e6b)\n\
    \t/tmp/tmpf34d4ena_test.go:27 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0xba2e69)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef745\ncommand-line-arguments_test.make_a_pile(0xba2e67)\n\
    \t/tmp/tmpf34d4ena_test.go:27 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0xba2e65)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef745\ncommand-line-arguments_test.make_a_pile(0xba2e63)\n\
    \t/tmp/tmpf34d4ena_test.go:27 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0xba2e61)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef745\ncommand-line-arguments_test.make_a_pile(0xba2e5f)\n\
    \t/tmp/tmpf34d4ena_test.go:27 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0xba2e5d)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef745\ncommand-line-arguments_test.make_a_pile(0xba2e5b)\n\
    \t/tmp/tmpf34d4ena_test.go:27 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0xba2e59)\n\t/tmp/tmpf34d4ena_test.go:27\
    \ +0xe5 fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef745\ncommand-line-arguments_tes"
  timestamp: 1660073457
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    // Create\
    \ a list to hold the height of each level.\n    heights := make([]int, n)\n  \
    \  // For each level we make a pile of stones.\n    for i := 0; i < n; i++ {\n\
    \        if i == 0 {\n            // The pile for the first level is n stones.\n\
    \            heights[i] = n\n        } else {\n            // The pile for the\
    \ next level has n+2 stones.\n            heights[i] = heights[i-1] + 2\n    \
    \    }\n    }\n    return heights\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var result\
    \ []int\n    for i := 0; i < n; i++ {\n        var level int\n        if n%2 ==\
    \ 0 {\n            level = n+i\n        } else {\n            level = n+i+1\n\
    \        }\n        result = append(result, level)\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp08y3cla7_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp08y3cla7_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp08y3cla7_test.go:49: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp08y3cla7_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp08y3cla7_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return append(make_a_pile(n-1),\
    \ n+1)\n    }\n    return append(make_a_pile(n-1), n+2)\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmph6r2ft35_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmph6r2ft35_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmph6r2ft35_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmph6r2ft35_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=5) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmph6r2ft35_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var stones\
    \ []int\n    stones = append(stones, n)\n    for i := 1; i < n; i++ {\n      \
    \  if stones[i-1] % 2 == 0 {\n            stones = append(stones, stones[i-1]+2)\n\
    \        } else {\n            stones = append(stones, stones[i-1]+1)\n      \
    \  }\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptgx4hopp_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmptgx4hopp_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// [3, 5, 7]\nfunc make_a_pile(n int) []int {\n    var a []int\n\
    \    for i := 0; i < n; i++ {\n        if i == 0 {\n            a = append(a,\
    \ n)\n        } else {\n            if a[i-1] % 2 == 0 {\n                a =\
    \ append(a, a[i-1]+1)\n            } else {\n                a = append(a, a[i-1]+2)\n\
    \            }\n        }\n    }\n    return a\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmph29u0ah0_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmph29u0ah0_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmph29u0ah0_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
