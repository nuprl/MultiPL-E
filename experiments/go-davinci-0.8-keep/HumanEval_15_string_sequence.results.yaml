language: go_test.go
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var out string\n \
    \   for i := 0; i <= n; i++ {\n        out += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return out\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp9drrx91y_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp9drrx91y_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp9drrx91y_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    seq_list := []string{}\n\
    \    for i := 0; i <= n; i++ {\n        seq_list = append(seq_list, fmt.Sprintf(\"\
    %d\", i))\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(seq_list, \" \"\
    ))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps3c9nf6q_test.go:18:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var retval string\n\
    \    for i := 0; i <= n; i++ {\n        if len(retval) > 0 {\n            retval\
    \ += \" \"\n        }\n        retval += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ retval\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpec3fcz14_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpec3fcz14_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpec3fcz14_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var ret string\n\n\
    \    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \n    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7zgxw9fn_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7zgxw9fn_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7zgxw9fn_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var s string\n   \
    \ // TODO implement this function\n    // hint: strings.Repeat()\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpsa37oguf_test.go:35: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpsa37oguf_test.go:35: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpsa37oguf_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    result := \"\"\n \
    \   for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n   \
    \ }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpg5qwgel5_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpg5qwgel5_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpg5qwgel5_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    if n == 0 {\n    \
    \    return \"0\"\n    }\n    if n < 0 {\n        return \"\"\n    }\n    return\
    \ string_sequence(n-1) + \" \" + fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var s string = fmt.Sprintf(\"\
    %d\", n)\n    for i := 0; i < n; i++ {\n        s = fmt.Sprintf(\"%s %d\", s,\
    \ i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmp8v6n1wf1_test.go:36: expected '0 1 2 3', got '3 0 1 2'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp8v6n1wf1_test.go:36:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10 0 1 2 3 4 5 6 7 8 9'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var result string\n\
    \n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n \
    \   }\n\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpdkb1je2s_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpdkb1je2s_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpdkb1je2s_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var s string\n   \
    \ for i := 0; i <= n; i++ {\n        if i > 0 {\n            s += \" \"\n    \
    \    }\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    var res string = \"\
    \"\n    for i := 0; i <= n; i++ {\n        res += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return res\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvfmah5yv_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvfmah5yv_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvfmah5yv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    res := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        res += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ res\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmppaaqxuri_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmppaaqxuri_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmppaaqxuri_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    // ...\n    fmt.Println(\"\
    Begin test n=\", n)\n    var s string\n    for i := 0; i <= n; i++ {\n       \
    \ s += fmt.Sprintf(\"%d \", i)\n    }\n    fmt.Println(\"End test n=\", n)\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Begin test n= 0\nEnd test n= 0\nBegin test n= 3\nEnd test n= 3\nBegin test\
    \ n= 10\nEnd test n= 10\n--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL:\
    \ TestString_Sequence/test_num__0 (0.00s)\n        tmp9rzofh2p_test.go:39: expected\
    \ '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n     \
    \   tmp9rzofh2p_test.go:39: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp9rzofh2p_test.go:39: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    if n < 0 {\n     \
    \   return \"\"\n    }\n\n    var str string\n    for i := 0; i <= n; i++ {\n\
    \        str += fmt.Sprintf(\"%d \", i)\n    }\n\n    return str\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmptarmkouo_test.go:41: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmptarmkouo_test.go:41: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmptarmkouo_test.go:41: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    // Enter your code\
    \ here...\n    return \"Not yet implemented\"\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpugmiepbj_test.go:33: expected '0', got 'Not yet implemented'\n\
    \    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpugmiepbj_test.go:33:\
    \ expected '0 1 2 3', got 'Not yet implemented'\n    --- FAIL: TestString_Sequence/test_num__2\
    \ (0.00s)\n        tmpugmiepbj_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10',\
    \ got 'Not yet implemented'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    str := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpoux2b7uh_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpoux2b7uh_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpoux2b7uh_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    ret := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpmmwsxpks_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpmmwsxpks_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpmmwsxpks_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    if n < 0 {\n     \
    \   return \"\"\n    }\n    result := make([]string, n+1)\n    for i := 0; i <=\
    \ n; i++ {\n        result[i] = fmt.Sprintf(\"%d\", i)\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawe4ejd4_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunc string_sequence(n int) string {\n    return \"\"\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2r46dy4g_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2r46dy4g_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmp2r46dy4g_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073289
