name: HumanEval_78_hex_key
language: go_test.go
prompt: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ have been tasked to write a function that receives \n// a hexadecimal number as\
  \ a string and counts the number of hexadecimal \n// digits that are primes (prime\
  \ number, or a prime, is a natural number \n// greater than 1 that is not a product\
  \ of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
  // So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B\
  \ (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct\
  \ or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
  // For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should\
  \ be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\"\
  \ the output should be 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num\
  \ string) int {\n"
tests: "func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"\
  ), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n    \
  \ { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"\
  ), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    chars := []rune(num)\n    count := 0\n    for _, v := range chars\
    \ {\n        value := 0\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D'\
    \ || v == 'E' || v == 'F' {\n            value = int(v) - 55\n        } else {\n\
    \            value = int(v) - 48\n        }\n        switch value {\n        case\
    \ 2, 3, 5, 7, 11, 13:\n            count++\n        }\n    }\n    return count\n\
    }\n", "    symbols := \"0123456789ABCDEF\"\n    count := 0\n    for _, char :=\
    \ range num {\n        for i := 0; i < len(symbols); i++ {\n            if string(char)\
    \ == string(symbols[i]) {\n                if i == 1 || i == 3 || i == 5 || i\
    \ == 7 || i == 11 || i == 13 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    var key = map[string]int{\n\
    \        \"0\":0,\n        \"1\":0,\n        \"2\":0,\n        \"3\":0,\n    \
    \    \"4\":0,\n        \"5\":0,\n        \"6\":0,\n        \"7\":0,\n        \"\
    8\":0,\n        \"9\":0,\n        \"A\":0,\n        \"B\":0,\n        \"C\":0,\n\
    \        \"D\":0,\n        \"E\":0,\n        \"F\":0,\n    }\n    var count int\n\
    \    if len(num) == 0 {\n        return 0\n    }\n    for i:=0; i<len(num); i++\
    \ {\n        if _, ok := key[string(num[i])]; ok {\n            count++\n    \
    \    }\n    }\n    return count\n}\n", "    num = \"0\" + num\n    key := map[string]bool\
    \ {\n        \"2\": true,\n        \"3\": true,\n        \"5\": true,\n      \
    \  \"7\": true,\n        \"B\": true,\n        \"D\": true,\n    }\n    count\
    \ := 0\n    for _, n := range num {\n        if _, ok := key[string(n)]; ok {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    primes\
    \ := []int{2, 3, 5, 7, 11, 13}\n    var (\n        digit int\n        result int\n\
    \    )\n    for _, char := range num {\n        switch {\n        case char >=\
    \ '0' && char <= '9':\n            digit = int(char - '0')\n        case char\
    \ >= 'A' && char <= 'F':\n            digit = int(char - 'A') + 10\n        }\n\
    \        for _, prime := range primes {\n            if digit == prime {\n   \
    \             result++\n            }\n        }\n    }\n    return result\n}\n\
    \ntype testpair ", "    primeMap := map[string]bool {\n        \"2\": true,\n\
    \        \"3\": true,\n        \"5\": true,\n        \"7\": true,\n        \"\
    B\": true,\n        \"D\": true,\n    }\n    counter := 0\n    for _, hex := range\
    \ num {\n        if primeMap[string(hex)] {\n            counter++\n        }\n\
    \    }\n    return counter\n}\n", "    var count int = 0\n    var temp int\n \
    \   for _, x := range num {\n        switch {\n        case x == '2' || x == '3'\
    \ || x == '5' || x == '7':\n            count++\n        case x >= 'A' && x <=\
    \ 'F':\n            temp = int(x) - int('A') + 10\n            if temp == 11 ||\
    \ temp == 13 {\n                count++\n            }\n        }\n    }\n   \
    \ return count\n}\n", "    // your code here\n    return 0\n}\n", "    // Write\
    \ the code here\n    return 0\n}\n", "    // Write code here\n    return 0\n}\n",
  "    s := \"2357BD\"\n    count := 0\n    for _, ch := range num {\n        if str_contains(s,\
    \ string(ch)) {\n            count++\n        }\n    }\n    return count\n}\n",
  "    nums := []rune(num)\n    cnt := 0\n    for _, v := range nums {\n        if\
    \ is_prime(int(v)) == true {\n            cnt++\n        }\n    }\n    return\
    \ cnt\n}\n", "    sum := 0\n    for _, val := range num {\n        switch string(val)\
    \ {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n            sum +=\
    \ 1\n        }\n    }\n    return sum\n}\n", "    primes := []string{ \"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\" }\n    count := 0\n    for _, prime := range primes\
    \ {\n        for _, numDigit := range num {\n            if string(numDigit) ==\
    \ prime {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var primes = map[rune]bool{\n        '2': true,\n        '3':\
    \ true,\n        '5': true,\n        '7': true,\n        'B': true,\n        'D':\
    \ true,\n    }\n    var result int\n    for _, digit := range num {\n        if\
    \ primes[digit] {\n            result++\n        }\n    }\n    return result\n\
    }\n", "    n := len(num)\n    if n == 0 {\n        return 0\n    }\n    key :=\
    \ map[string]bool{\n        \"2\": true,\n        \"3\": true,\n        \"5\"\
    : true,\n        \"7\": true,\n        \"B\": true,\n        \"D\": true,\n  \
    \  }\n    var ret int\n    for i := 0; i < n; i++ {\n        if key[string(num[i])]\
    \ {\n            ret++\n        }\n    }\n    return ret\n}\n", "    count :=\
    \ 0\n    for _, c := range num {\n        if c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    if num == \"\" { return 0 }\n    n := 0\n    s :=\
    \ map[string]int{\"2\":0, \"3\":0, \"5\":0, \"7\":0, \"B\":0, \"D\":0}\n    for\
    \ i := 0; i < len(num); i++ {\n        _, ok := s[string(num[i])]\n        if\
    \ ok { n++ }\n    }\n    return n\n}\n", "    // your code here\n    return 0\n\
    }\n", "    s := map[byte]bool{'2': true, '3': true, '5': true, '7': true, 'B':\
    \ true, 'D': true}\n    r := 0\n    for i := 0; i < len(num); i++ {\n        _,\
    \ ok := s[num[i]]\n        if ok {\n            r++\n        }\n    }\n    return\
    \ r\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
