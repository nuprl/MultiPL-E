language: go_test.go
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \  var letter_grades []string\n  var grade_letters = map[float64]string{\n   \
    \ 4.0: \"A+\",\n    3.7: \"A\",\n    3.3: \"A-\",\n    3.0: \"B+\",\n    2.7:\
    \ \"B\",\n    2.3: \"B-\",\n    2.0: \"C+\",\n    1.7: \"C\",\n    1.3: \"C-\"\
    ,\n    1.0: \"D+\",\n    0.7: \"D\",\n    0.0: \"D-\",\n    0.0: \"E\",\n  }\n\
    \  for _, grade := range grades {\n    for key, value := range grade_letters {\n\
    \      if grade >= key {\n        letter_grades = append(letter_grades, value)\n\
    \        break\n      }\n    }\n  }\n  return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajnrw5qe_test.go:44:5: duplicate key 0 in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var g []string\n    for _, x := range grades {\n        switch {\n      \
    \  case x >= 4.0:\n            g = append(g, \"A+\")\n        case x >= 3.7:\n\
    \            g = append(g, \"A\")\n        case x >= 3.3:\n            g = append(g,\
    \ \"A-\")\n        case x >= 3.0:\n            g = append(g, \"B+\")\n       \
    \ case x >= 2.7:\n            g = append(g, \"B\")\n        case x >= 2.3:\n \
    \           g = append(g, \"B-\")\n        case x >= 2.0:\n            g = append(g,\
    \ \"C+\")\n        case x >= 1.7:\n            g = append(g, \"C\")\n        case\
    \ x >= 1.3:\n            g = append(g, \"C-\")\n        case x >= 1.0:\n     \
    \       g = append(g, \"D+\")\n        case x >= 0.7:\n            g = append(g,\
    \ \"D\")\n        case x >= 0.0:\n            g = append(g, \"D-\")\n        default:\n\
    \            g = append(g, \"E\")\n        }\n    }\n    return g\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqhl0dxyu_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpqhl0dxyu_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqhl0dxyu_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqhl0dxyu_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letterGrades []string\n    for _, value := range grades {\n        if\
    \ value >= 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n  \
    \      } else if value >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if value >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if value >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if value >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if value >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if value >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if value >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if value >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if value >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if value >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if value >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptrrcri9a_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmptrrcri9a_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmptrrcri9a_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmptrrcri9a_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    letter_grades := []string{}\n    for _, grade := range grades {\n       \
    \ switch {\n        case grade >= 4.0:\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        case grade >= 3.7:\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        case grade >= 3.3:\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        case grade >= 3.0:\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        case grade >= 2.7:\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        case grade >= 2.3:\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        case grade >= 2.0:\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        case grade >= 1.7:\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        case grade >= 1.3:\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        case grade >= 1.0:\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        case grade >= 0.7:\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        case grade >= 0.0:\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        default:\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp2h4a69tk_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp2h4a69tk_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp2h4a69tk_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp2h4a69tk_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    for i, grade := range grades {\n\
    \        if grade >= 4.0 {\n            result[i] = \"A+\"\n        } else if\
    \ grade >= 3.7 {\n            result[i] = \"A\"\n        } else if grade >= 3.3\
    \ {\n            result[i] = \"A-\"\n        } else if grade >= 3.0 {\n      \
    \      result[i] = \"B+\"\n        } else if grade >= 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grade >= 2.3 {\n            result[i] = \"B-\"\n\
    \        } else if grade >= 2.0 {\n            result[i] = \"C+\"\n        } else\
    \ if grade >= 1.7 {\n            result[i] = \"C\"\n        } else if grade >=\
    \ 1.3 {\n            result[i] = \"C-\"\n        } else if grade >= 1.0 {\n  \
    \          result[i] = \"D+\"\n        } else if grade >= 0.7 {\n            result[i]\
    \ = \"D\"\n        } else if grade >= 0.0 {\n            result[i] = \"D-\"\n\
    \        } else {\n            result[i] = \"E\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpn0tpzf2w_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpn0tpzf2w_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpn0tpzf2w_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpn0tpzf2w_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    letterGrades := []string{}\n    for _, grade := range grades {\n        switch\
    \ {\n        case grade >= 4.0:\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        case grade >= 3.7:\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        case grade >= 3.3:\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        case grade >= 3.0:\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        case grade >= 2.7:\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        case grade >= 2.3:\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        case grade >= 2.0:\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        case grade >= 1.7:\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        case grade >= 1.3:\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        case grade >= 1.0:\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        case grade >= 0.7:\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        case grade >= 0.0:\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        default:\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmporbks5hn_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmporbks5hn_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmporbks5hn_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmporbks5hn_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    letter_grades := []string{}\n    for _, grade := range grades {\n       \
    \ if grade == 4.0 {\n            letter_grades = append(letter_grades, \"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    // your code here!\n    grade_equation := []string{\"E\", \"D-\", \"D\",\
    \ \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"\
    }\n    gpa_boundary := []float64{0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0,\
    \ 3.3, 3.7, 4.0}\n    result := []string{}\n    for _, g := range grades {\n \
    \       for i, b := range gpa_boundary {\n            if g >= b {\n          \
    \      result = append(result, grade_equation[i])\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7405iwl3_test.go:63: expected '[A+ B C- C A-]', got '[E\
    \ E E E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmp7405iwl3_test.go:63: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp7405iwl3_test.go:63: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7405iwl3_test.go:63:\
    \ expected '[D D- C- B B+]', got '[E E E E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp7405iwl3_test.go:63: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    // your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3sticj8p_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp3sticj8p_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp3sticj8p_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3sticj8p_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3sticj8p_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3sticj8p_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var tmp string\n    var ans []string\n    for _, v := range grades {\n  \
    \      if v >= 4.0 {\n            tmp = \"A+\"\n        } else if v >= 3.7 {\n\
    \            tmp = \"A\"\n        } else if v >= 3.3 {\n            tmp = \"A-\"\
    \n        } else if v >= 3.0 {\n            tmp = \"B+\"\n        } else if v\
    \ >= 2.7 {\n            tmp = \"B\"\n        } else if v >= 2.3 {\n          \
    \  tmp = \"B-\"\n        } else if v >= 2.0 {\n            tmp = \"C+\"\n    \
    \    } else if v >= 1.7 {\n            tmp = \"C\"\n        } else if v >= 1.3\
    \ {\n            tmp = \"C-\"\n        } else if v >= 1.0 {\n            tmp =\
    \ \"D+\"\n        } else if v >= 0.7 {\n            tmp = \"D\"\n        } else\
    \ if v >= 0.0 {\n            tmp = \"D-\"\n        } else {\n            tmp =\
    \ \"E\"\n        }\n        ans = append(ans, tmp)\n    }\n    return ans\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpvzzg5gs8_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpvzzg5gs8_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpvzzg5gs8_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpvzzg5gs8_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letter_grades []string\n    for _, i := range grades {\n        if i\
    \ >= 4.0 {\n            letter_grades = append(letter_grades, \"A+\")\n      \
    \  } else if i >= 3.7 {\n            letter_grades = append(letter_grades, \"\
    A\")\n        } else if i >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if i >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if i >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if i >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if i >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if i >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if i >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if i >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if i >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if i >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphvutdt9c_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmphvutdt9c_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphvutdt9c_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmphvutdt9c_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    letter_grades := []string{}\n    mapping := make(map[float64]string)\n  \
    \  mapping[4.0] = \"A+\"\n    mapping[3.7] = \"A\"\n    mapping[3.3] = \"A-\"\n\
    \    mapping[3.0] = \"B+\"\n    mapping[2.7] = \"B\"\n    mapping[2.3] = \"B-\"\
    \n    mapping[2.0] = \"C+\"\n    mapping[1.7] = \"C\"\n    mapping[1.3] = \"C-\"\
    \n    mapping[1.0] = \"D+\"\n    mapping[0.7] = \"D\"\n    mapping[0.0] = \"D-\"\
    \n    for _, grade := range grades {\n        if letter_grade, ok := mapping[grade];\
    \ ok {\n            letter_grades = append(letter_grades, letter_grade)\n    \
    \    } else {\n            letter_grades = append(letter_grades, \"E\")\n    \
    \    }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpho6nfxjx_test.go:72: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpho6nfxjx_test.go:72: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpho6nfxjx_test.go:72: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpho6nfxjx_test.go:72:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpho6nfxjx_test.go:72: expected '[D D- C- B B+]', got '[D+\
    \ E E E A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n \
    \       tmpho6nfxjx_test.go:72: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    letterGrades := []string{}\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n  \
    \      } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpacwqxxun_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpacwqxxun_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpacwqxxun_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpacwqxxun_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \tvar grade_map = map[float64]string{\n\t\t4.0: \"A+\",\n\t\t3.7: \"A\",\n\t\t\
    3.3: \"A-\",\n\t\t3.0: \"B+\",\n\t\t2.7: \"B\",\n\t\t2.3: \"B-\",\n\t\t2.0: \"\
    C+\",\n\t\t1.7: \"C\",\n\t\t1.3: \"C-\",\n\t\t1.0: \"D+\",\n\t\t0.7: \"D\",\n\t\
    \t0.0: \"D-\",\n\t}\n\tvar letter_grades []string\n\tfor _, grade := range grades\
    \ {\n\t\tletter_grade := \"\"\n\t\tfor k, v := range grade_map {\n\t\t\tif grade\
    \ >= k {\n\t\t\t\tletter_grade = v\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif letter_grade\
    \ == \"\" {\n\t\t\tletter_grade = \"E\"\n\t\t}\n\t\tletter_grades = append(letter_grades,\
    \ letter_grade)\n\t}\n\treturn letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxnav7bc5_test.go:79: expected '[A+ B C- C A-]', got '[A-\
    \ C C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpxnav7bc5_test.go:79: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpxnav7bc5_test.go:79: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxnav7bc5_test.go:79:\
    \ expected '[D D- C- B B+]', got '[D D- D B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpxnav7bc5_test.go:79: expected '[E D-]', got '[D- D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    // YOUR CODE HERE\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpddvq6fow_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpddvq6fow_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpddvq6fow_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpddvq6fow_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpddvq6fow_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpddvq6fow_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \  for i, _ := range grades {\n    if grades[i] > 4.0 {\n      grades[i] = 4.0\n\
    \    }\n    if grades[i] < 0.0 {\n      grades[i] = 0.0\n    }\n  }\n  letter_grades\
    \ := []string{\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"\
    B\", \"B+\", \"A-\", \"A\", \"A+\"}\n  letter_grade_points := []float64{0.0, 0.7,\
    \ 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0}\n  letter_grade_points_len\
    \ := len(letter_grade_points)\n  grades_len := len(grades)\n  result := make([]string,\
    \ grades_len)\n  for i := 0; i < grades_len; i++ {\n    for j := 0; j < letter_grade_points_len;\
    \ j++ {\n      if grades[i] >= letter_grade_points[j] {\n        result[i] = letter_grades[j]\n\
    \        break\n      }\n    }\n  }\n  return result\n}\n\ntype TestCase \nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbrrxq7wi_test.go:54:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    // the output array\n    var output []string\n\n    // for each number in\
    \ the input array\n    for _, grade := range grades {\n        // based on the\
    \ grade, add a string to the output array\n        switch {\n        case grade\
    \ >= 4.0:\n            output = append(output, \"A+\")\n        case grade >=\
    \ 3.7:\n            output = append(output, \"A\")\n        case grade >= 3.3:\n\
    \            output = append(output, \"A-\")\n        case grade >= 3.0:\n   \
    \         output = append(output, \"B+\")\n        case grade >= 2.7:\n      \
    \      output = append(output, \"B\")\n        case grade >= 2.3:\n          \
    \  output = append(output, \"B-\")\n        case grade >= 2.0:\n            output\
    \ = append(output, \"C+\")\n        case grade >= 1.7:\n            output = append(output,\
    \ \"C\")\n        case grade >= 1.3:\n            output = append(output, \"C-\"\
    )\n        case grade >= 1.0:\n            output = append(output, \"D+\")\n \
    \       case grade >= 0.7:\n            output = append(output, \"D\")\n     \
    \   case grade >= 0.0:\n            output = append(output, \"D-\")\n        default:\n\
    \            output = append(output, \"E\")\n        }\n    }\n\n    // return\
    \ the output array\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpwjry7734_test.go:88: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpwjry7734_test.go:88: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpwjry7734_test.go:88: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpwjry7734_test.go:88: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letter_grades []string\n    for _, value := range grades {\n        switch\
    \ {\n        case value == 4.0:\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        case value > 3.7:\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        case value > 3.3:\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        case value > 3.0:\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        case value > 2.7:\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        case value > 2.3:\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        case value > 2.0:\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        case value > 1.7:\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        case value > 1.3:\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        case value > 1.0:\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        case value > 0.7:\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        case value > 0.0:\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        case value == 0.0:\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075343
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var output []string\n    for _, val := range grades {\n        switch {\n\
    \        case val == 4.0:\n            output = append(output, \"A+\")\n     \
    \   case val > 3.7:\n            output = append(output, \"A\")\n        case\
    \ val > 3.3:\n            output = append(output, \"A-\")\n        case val >\
    \ 3.0:\n            output = append(output, \"B+\")\n        case val > 2.7:\n\
    \            output = append(output, \"B\")\n        case val > 2.3:\n       \
    \     output = append(output, \"B-\")\n        case val > 2.0:\n            output\
    \ = append(output, \"C+\")\n        case val > 1.7:\n            output = append(output,\
    \ \"C\")\n        case val > 1.3:\n            output = append(output, \"C-\"\
    )\n        case val > 1.0:\n            output = append(output, \"D+\")\n    \
    \    case val > 0.7:\n            output = append(output, \"D\")\n        case\
    \ val > 0.0:\n            output = append(output, \"D-\")\n        case val ==\
    \ 0.0:\n            output = append(output, \"E\")\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letter_grades []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            letter_grades = append(letter_grades, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpn3jlbo3c_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpn3jlbo3c_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpn3jlbo3c_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpn3jlbo3c_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075107
