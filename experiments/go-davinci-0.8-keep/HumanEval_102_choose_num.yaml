name: HumanEval_102_choose_num
language: go_test.go
prompt: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // This function takes two positive numbers x and y and returns the\n// biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
  \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
  \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n"
tests: "func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
  \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
  \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
  \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n    \
  \ { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546, 546),\
  \ expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n   \
    \     return x\n    }\n    return x + 1\n}\n", "    for x <= y {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x += 1\n    }\n    return\
    \ -1\n}\n", "    if x == y {\n        if x % 2 == 0 {\n            return x\n\
    \        } else {\n            return -1\n        }\n    } else if x > y {\n \
    \       fmt.Println(\"X > Y\")\n        if x % 2 == 0 {\n            return x\n\
    \        } else {\n            return choose_num(x - 1, y)\n        }\n    } else\
    \ {\n        fmt.Println(\"X < Y\")\n        if y % 2 == 0 {\n            return\
    \ y\n        } else {\n            return choose_num(x, y - 1)\n        }\n  \
    \  }\n}\n", "    if x > y {\n        x, y = y, x\n    }\n    if x%2 == 0 {\n \
    \       if y%2 == 0 {\n            return y\n        } else {\n            return\
    \ y-1\n        }\n    } else {\n        if y%2 == 0 {\n            return y-2\n\
    \        } else {\n            return y-3\n        }\n    }\n}\n", "    if x %\
    \ 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return -1\n\
    \    } else {\n        return choose_num(x + 1, y)\n    }\n}\n", "    // find\
    \ the maximum value between x and y\n    bigger := x\n    if y > x {\n       \
    \ bigger = y\n    }\n    // start from bigger and go down until finding an even\
    \ number\n    var maxEven int = -1\n    for i := bigger; i >= x; i-- {\n     \
    \   if i % 2 == 0 {\n            maxEven = i\n            break\n        }\n \
    \   }\n    return maxEven\n}\n", "    if x > y {\n        return -1\n    }\n \
    \   if y%2 == 0 {\n        return y\n    }\n    if y-1%2 == 0 {\n        return\
    \ y-1\n    }\n    return -1\n}\n", "    // Write your code here\n    return 0\n\
    }\n", "    if x > y {\n        return -1\n    }\n\n    for i := y; i >= x; i--\
    \ {\n        if i % 2 == 0 {\n            return i\n        }\n    }\n\n    return\
    \ -1\n}\n", "    // YOUR CODE HERE\n    if y < x || y < 0 || x < 0 {\n       \
    \ return -1\n    }\n\n    if x % 2 == 0 {\n        return x\n    } else {\n  \
    \      return x+1\n    }\n}\n", "    // your code here\n    if x > y {\n     \
    \   return -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x +\
    \ 1 <= y {\n        return x + 1\n    }\n    return -1\n}\n", "    for y >= x\
    \ {\n        if y % 2 == 0 {\n            return y\n        }\n        y--\n \
    \   }\n    return -1\n}\n", "    if x % 2 == 0 {\n        if y % 2 == 0 {\n  \
    \          return y\n        } else {\n            return y - 1\n        }\n \
    \   } else {\n        if y % 2 == 0 {\n            return y - 2\n        } else\
    \ {\n            return y - 3\n        }\n    }\n}\n", "    // Your code here.\n\
    \    var num int\n    if y%2 == 0 {\n        num = y\n    } else {\n        num\
    \ = y-1\n    }\n    if x < 2 {\n        return num\n    } else {\n        for\
    \ x < num {\n            if num%2 == 0 {\n                return num\n       \
    \     } else {\n                num = num-1\n            }\n        }\n    }\n\
    \    return -1\n}\n", "  // Write your code here\n  var num int\n  if x <= y &&\
    \ y%2 == 0 {\n    return y\n  } else if x <= y && y%2 != 0 {\n    return y-1\n\
    \  } else if x > y && x%2 == 0 {\n    return x\n  } else if x > y && x%2 != 0\
    \ {\n    return x-1\n  }\n  return num\n}\n", "    var even int\n    var bigger\
    \ int\n    if x > y {\n        bigger = x\n    } else {\n        bigger = y\n\
    \    }\n    for bigger % 2 != 0 {\n        bigger--\n    }\n    if bigger < x\
    \ {\n        even = -1\n    } else {\n        even = bigger\n    }\n    return\
    \ even\n}\n", "    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n\
    \        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return\
    \ -1\n}\n", "    var i int\n    for i = x; i <= y; i++ {\n        if i % 2 ==\
    \ 0 {\n            return i\n        }\n    }\n    return -1\n}\n", "    if x\
    \ > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return x\n   \
    \ }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n", "    var\
    \ max_even int\n    max_even = -1\n    //For loop that starts at the value of\
    \ x and ends at the value of y\n    for i := x; i <= y; i++ {\n    \t//Checks\
    \ if i is even. If i is even, then we check to see if it is bigger than max_even.\n\
    \        if i % 2 == 0 {\n            if i > max_even {\n                max_even\
    \ = i\n            }\n        }\n    }\n    return max_even\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
