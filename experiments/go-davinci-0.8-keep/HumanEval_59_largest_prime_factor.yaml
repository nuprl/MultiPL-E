name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var largest int\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            n /= i\n            for n % i\
    \ == 0 {\n                n /= i\n            }\n        }\n    }\n    return\
    \ largest\n}\n", "    divisor := 2\n    largest := 0\n    if n < 2 {\n       \
    \ return 0\n    }\n    for n > 1 {\n        if n % divisor == 0 {\n          \
    \  largest = divisor\n            n /= divisor\n        } else {\n           \
    \ divisor += 1\n        }\n    }\n    return largest\n}\n", "    for i := 2; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var ret int\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            ret = i\n            // n\
    \ /= i\n            n = n / i\n            i--\n        }\n    }\n    return ret\n\
    }\n", "    ret := 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            ret = i\n            n /= i\n            i = 1\n        }\n    }\n\
    \    return ret\n}\n", "    // Get the prime factorization of n.\n    var pf =\
    \ factorize(n)\n\n    // Return the largest prime factor.\n    return pf[len(pf)\
    \ - 1]\n}\n", "    var largest int\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            largest = i\n            n = n / i\n            i\
    \ = 1\n        }\n    }\n    return largest\n}\n", "    factor := 2\n    for i\
    \ := 2; i <= n; i++ {\n        for n % i == 0 {\n            factor = i\n    \
    \        n /= i\n        }\n    }\n    return factor\n}\n", "    max := 0\n  \
    \  for i := 2; i <= n; i++ {\n        if is_prime(i) && n % i == 0 {\n       \
    \     max = i\n        }\n    }\n    return max\n}\n", "    var largest_prime\
    \ int = 1\n    if n % 2 == 0 {\n        largest_prime = 2\n        for n % 2 ==\
    \ 0 {\n            n /= 2\n        }\n    }\n    for i := 3; i <= n; i += 2 {\n\
    \        if n % i == 0 {\n            largest_prime = i\n            for n % i\
    \ == 0 {\n                n /= i\n            }\n        }\n    }\n    return\
    \ largest_prime\n}\n", "    return n\n}\n", "    // Start with the first prime.\n\
    \    largest_prime := 2\n    for n > largest_prime {\n        // If n is divisible\
    \ by largest_prime, divide it out.\n        if n % largest_prime == 0 {\n    \
    \        n /= largest_prime\n        } else {\n            // If n is not divisible\
    \ by largest_prime, then it must be a\n            // multiple of some other prime.\
    \ Find the next prime to check.\n            largest_prime = next_prime(largest_prime)\n\
    \        }\n    }\n    return largest_prime\n}\n", "    var factor, largest int\n\
    \    for factor = 2; factor < n / 2; factor++ {\n        if n % factor == 0 {\n\
    \            largest = factor\n            n /= factor\n            factor = 1\n\
    \        }\n    }\n    if n != 1 {\n        largest = n\n    }\n    return largest\n\
    }\n", "    var factor = 2\n    for n > 1 {\n        for n % factor == 0 {\n  \
    \          n /= factor\n        }\n        factor++\n    }\n    return factor\
    \ - 1\n}\n", "    var max int\n    if n % 2 == 0 {\n        max = 2\n        n\
    \ /= 2\n    }\n    if n % 3 == 0 {\n        max = 3\n        n /= 3\n    }\n \
    \   for x := 5; x * x <= n; x += 6 {\n        if n % x == 0 {\n            max\
    \ = x\n            n /= x\n        }\n        if n % (x + 2) == 0 {\n        \
    \    max = x + 2\n            n /= x + 2\n        }\n    }\n    if n > max {\n\
    \        max = n\n    }\n    return max\n}\n", "    factors := [2]int{}\n    idx\
    \ := 0\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors[idx]\
    \ = i\n            idx++\n            n /= i\n        }\n    }\n    return factors[idx\
    \ - 1]\n}\n", "    result := 2\n    for n % 2 == 0 {\n        n /= 2\n    }\n\
    \    if n == 1 {\n        return result\n    }\n    for result = 3; result < n;\
    \ result += 2 {\n        for n % result == 0 {\n            n /= result\n    \
    \    }\n        if n == 1 {\n            return result\n        }\n    }\n   \
    \ return n\n}\n", "    i := 2\n    for n > 1 {\n        if n % i == 0 {\n    \
    \        n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ i\n}\n", "    // TODO\n    return 0\n}\n", "    max_prime := 0\n    if (n %\
    \ 2 == 0) {\n        max_prime = 2\n        n = n / 2\n    }\n\n    p := 3\n \
    \   for p <= n {\n        if (n % p == 0) {\n            max_prime = p\n     \
    \       n = n / p\n        } else {\n            p += 2\n        }\n    }\n\n\
    \    return max_prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
