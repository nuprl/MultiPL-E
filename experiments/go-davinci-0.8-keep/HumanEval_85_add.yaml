name: HumanEval_85_add
language: go_test.go
prompt: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
  // Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunc add(lst []int) int {\n"
tests: "func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
  \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}),\
  \ expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if lst == nil {\n        return 0\n    }\n    var result int\n\
    \    for i, v := range lst {\n        if (i % 2 == 1) && (v % 2 == 0) {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n", "    var sum\
    \ int\n    for i, num := range lst {\n        if num % 2 == 0 && i % 2 != 0 {\n\
    \            sum += num\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ int = 0\n    if len(lst) > 0 {\n        for i := 0; i < len(lst); i++ {\n  \
    \          if i % 2 != 0 && lst[i] % 2 == 0 {\n                sum += lst[i]\n\
    \            }\n        }\n    }\n    return sum\n}\n", "\t// Your code here\n\
    \    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i] % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n", "  \
    \  sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n", "    answer\
    \ := 0\n    for i, val := range lst {\n        if i%2 == 1 && val%2 == 0 {\n \
    \           answer += val\n        }\n    }\n    return answer\n}\n", "    sum\
    \ := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n \
    \           sum += v\n        }\n    }\n    return sum\n}\n", "    var sum int\
    \ = 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2 == 0 {\n\
    \            sum += val\n        }\n    }\n    return sum\n}\n", "    return 0\n\
    }\n", "    sum := 0\n    for i, v := range lst {\n        if (i+1)%2 == 0 && v%2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n", "    //\
    \ your code\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i % 2 != 0 && lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n", "    return 0\n}\n", "    var sum int\n    for i, val :=\
    \ range lst {\n        if i % 2 == 1 && val % 2 == 0 {\n            sum += val\n\
    \        }\n    }\n    return sum\n}\n", "    var acc int\n    for index, value\
    \ := range lst {\n        if index%2 != 0 && value%2 == 0 {\n            acc +=\
    \ value\n        }\n    }\n    return acc\n}\n", "    sum := 0\n    for i, v :=\
    \ range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n \
    \       }\n    }\n    return sum\n}\n", "    var sum int\n    for i, e := range\
    \ lst {\n        if i % 2 == 1 && e % 2 == 0 {\n            sum += e\n       \
    \ }\n    }\n    return sum\n}\n", "    var sum int\n    var index int\n    for\
    \ _, number := range lst {\n        if number % 2 == 0 && index % 2 != 0 {\n \
    \           sum += number\n        }\n        index++\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for index, value := range lst {\n        if index % 2\
    \ != 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum\n}\n", "    // Write your code here\n    total := 0\n    for i, v := range\
    \ lst {\n        if v % 2 == 0 && i % 2 != 0 {\n            total += v\n     \
    \   }\n    }\n    return total\n}\n", "    // code\n    var ret int\n    for k,v\
    \ := range lst {\n        if k % 2 == 1 && v % 2 == 0 {\n            ret += v\n\
    \        }\n    }\n    return ret\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
