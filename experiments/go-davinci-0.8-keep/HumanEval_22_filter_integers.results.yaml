language: go_test.go
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, val := range values {\n        switch v := val.(type) {\n   \
    \     case int:\n            result = append(result, v)\n        case int64:\n\
    \            result = append(result, int(v))\n        case float64:\n        \
    \    if float64(int(v)) == v {\n                result = append(result, int(v))\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, val := range values {\n        switch val.(type) {\n        case\
    \ int:\n            result = append(result, val.(int))\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate :=\
    \ filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var ints []int\n\
    \    for _, value := range values {\n        if intValue, ok := value.(int); ok\
    \ {\n            ints = append(ints, intValue)\n        }\n    }\n    return ints\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n    \
    \        result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    int_values :=\
    \ make([]int, 0)\n    for _, v := range values {\n        switch v.(type) {\n\
    \        case int:\n            int_values = append(int_values, v.(int))\n   \
    \     }\n    }\n    return int_values\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    isInt := func(x\
    \ interface{}) bool {\n        _, ok := x.(int)\n        return ok\n    }\n  \
    \  filter := func(f func(interface{}) bool, values []interface{}) []interface{}\
    \ {\n        result := make([]interface{}, 0)\n        for _, x := range values\
    \ {\n            if f(x) {\n                result = append(result, x)\n     \
    \       }\n        }\n        return result\n    }\n    ints := filter(isInt,\
    \ values)\n    out := make([]int, len(ints))\n    for i, x := range ints {\n \
    \       out[i] = x.(int)\n    }\n    return out\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, val := range values {\n        switch val.(type) {\n     \
    \   case int:\n            integers = append(integers, val.(int))\n        }\n\
    \    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n \
    \ candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    ret := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            ret = append(ret, v.(int))\n        }\n    }\n    return ret\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var res []int\n\
    \    for _, v := range values {\n        if num, ok := v.(int); ok {\n       \
    \     res = append(res, num)\n        }\n    }\n    return res\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    ints := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            ints = append(ints, v.(int))\n        }\n    }\n    return\
    \ ints\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var filtered_values\
    \ []int\n    for _, value := range values {\n        if value_int, is_value_int\
    \ := value.(int); is_value_int {\n            filtered_values = append(filtered_values,\
    \ value_int)\n        }\n    }\n    return filtered_values\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            integers = append(integers, value.(int))\n       \
    \ }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n\
    \  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    // \n    // Put\
    \ your code here\n    // \n    var res []int\n    for _, value := range values\
    \ {\n        switch value.(type) {\n        case int:\n            res = append(res,\
    \ value.(int))\n        }\n    }\n    return res\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    integers := make([]int,\
    \ 0)\n    for _, val := range values {\n        switch val.(type) {\n        case\
    \ int:\n            integers = append(integers, val.(int))\n        }\n    }\n\
    \    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, val := range values {\n        if v, ok := val.(int); ok {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    // Create a new\
    \ slice and copy our values into it.\n    var newList []int\n    for _, i := range\
    \ values {\n        // Check if the element's underlying type is int\n       \
    \ if value, ok := i.(int); ok {\n            newList = append(newList, value)\n\
    \        }\n    }\n    return newList\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    ints := make([]int,\
    \ 0)\n    for _,v := range values {\n        if _, ok := v.(int); ok {\n     \
    \       ints = append(ints, v.(int))\n        }\n    }\n    return ints\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var out []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            out = append(out, v.(int))\n        }\n    }\n    return out\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
