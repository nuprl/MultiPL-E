name: HumanEval_100_make_a_pile
language: go_test.go
prompt: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunc make_a_pile(n int) []int {\n"
tests: "func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual:\
  \ candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected:\
  \ []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8,\
  \ 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14,\
  \ 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 1 {\n        return []int{1}\n    }\n    var stones int\n\
    \    if n%2 == 0 {\n        stones = n + 2\n    } else {\n        stones = n +\
    \ 1\n    }\n    arr := make_a_pile(stones)\n    return append([]int{stones}, arr...)\n\
    }\n", "    result := make([]int, n)\n    result[0] = n\n    for i := 1; i < n;\
    \ i++ {\n        if i % 2 == 0 {\n            result[i] = result[i-1] + 2\n  \
    \      } else {\n            result[i] = result[i-1] + 1\n        }\n    }\n \
    \   return result\n}\n", "    r := make([]int, n)\n    r[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if r[i-1] % 2 == 0 {\n            r[i] = r[i-1] + 1\n\
    \        } else {\n            r[i] = r[i-1] + 2\n        }\n    }\n    return\
    \ r\n}\n", "    result := make([]int, n)\n    for i := 0; i < n; i++ {\n     \
    \   if i == 0 {\n            result[i] = n\n        } else {\n            result[i]\
    \ = next_odd_even(result[i-1])\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, n)\n    result[0] = n\n    for i := 1; i < n; i++ {\n\
    \        if result[i-1] % 2 == 0 {\n            result[i] = result[i-1] + 1\n\
    \        } else {\n            result[i] = result[i-1] + 2\n        }\n    }\n\
    \    return result\n}\n", "    var odd bool\n    if n % 2 == 0 {\n        odd\
    \ = false\n    } else {\n        odd = true\n    }\n    m := make([]int, n)\n\
    \    m[0] = n\n    for i := 1; i < n; i++ {\n        if odd {\n            m[i]\
    \ = m[i-1] + 2\n        } else {\n            m[i] = m[i-1] + 1\n        }\n \
    \       odd = !odd\n    }\n    return m\n}\n", "    if n == 1 {\n        return\
    \ []int{1}\n    }\n    if n % 2 == 0 {\n        return append([]int{n}, make_a_pile(n\
    \ + 1)...)\n    }\n    return append([]int{n}, make_a_pile(n - 1)...)\n}\n", " \
    \   a := make([]int, n)\n    var even, odd int\n    if n % 2 == 0 {\n        even\
    \ = n\n        odd = n - 1\n    } else {\n        even = n - 1\n        odd =\
    \ n\n    }\n    for i := 0; i < n; i++ {\n        if i % 2 == 0 {\n          \
    \  a[i] = even\n            even += 2\n        } else {\n            a[i] = odd\n\
    \            odd += 2\n        }\n    }\n    return a\n}\n", "    r := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        r[i] = n + 2*i\n    }\n    return\
    \ r\n}\n", "    var stones []int\n    stones = append(stones, n)\n    for i :=\
    \ n; i > 0; i-- {\n        if n%2 == 0 {\n            n -= 1\n        } else {\n\
    \            n -= 2\n        }\n        stones = append(stones, n)\n    }\n  \
    \  return stones\n}\n", "    result := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        if i == 0 {\n            result[i] = n\n        } else {\n  \
    \          result[i] = result[i-1] + 2\n        }\n    }\n    return result\n\
    }\n", "    array := make([]int, n)\n    array[0] = n\n    for i := 1; i < n; i++\
    \ {\n        if n%2 == 0 {\n            array[i] = array[i-1] + 2\n        } else\
    \ {\n            array[i] = array[i-1] + 1\n        }\n    }\n    return array\n\
    }\n", "    list := make([]int, n)\n    list[0] = n\n    next := func(x int) int\
    \ {\n        if x%2 == 0 {\n            return x+1\n        }\n        return\
    \ x+2\n    }\n    for i := 1; i < n; i++ {\n        list[i] = next(list[i-1])\n\
    \    }\n    return list\n}\n", "    var result []int\n    result = append(result,\
    \ n)\n    for i := 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n      \
    \      result = append(result, result[i-1]+1)\n        } else {\n            result\
    \ = append(result, result[i-1]+2)\n        }\n    }\n    return result\n}\n",
  "    if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        //\
    \ even\n        return append([]int{n}, make_a_pile(n+1)...)\n    } else {\n \
    \       // odd\n        return append([]int{n}, make_a_pile(n+2)...)\n    }\n\
    }\n", "    // Create a list to hold the height of each level.\n    heights :=\
    \ make([]int, n)\n    // For each level we make a pile of stones.\n    for i :=\
    \ 0; i < n; i++ {\n        if i == 0 {\n            // The pile for the first\
    \ level is n stones.\n            heights[i] = n\n        } else {\n         \
    \   // The pile for the next level has n+2 stones.\n            heights[i] = heights[i-1]\
    \ + 2\n        }\n    }\n    return heights\n}\n", "    var result []int\n   \
    \ for i := 0; i < n; i++ {\n        var level int\n        if n%2 == 0 {\n   \
    \         level = n+i\n        } else {\n            level = n+i+1\n        }\n\
    \        result = append(result, level)\n    }\n    return result\n}\n", "   \
    \ if n == 1 {\n        return []int{1}\n    }\n    if n % 2 == 0 {\n        return\
    \ append(make_a_pile(n-1), n+1)\n    }\n    return append(make_a_pile(n-1), n+2)\n\
    }\n", "    var stones []int\n    stones = append(stones, n)\n    for i := 1; i\
    \ < n; i++ {\n        if stones[i-1] % 2 == 0 {\n            stones = append(stones,\
    \ stones[i-1]+2)\n        } else {\n            stones = append(stones, stones[i-1]+1)\n\
    \        }\n    }\n    return stones\n}\n", "    var a []int\n    for i := 0;\
    \ i < n; i++ {\n        if i == 0 {\n            a = append(a, n)\n        } else\
    \ {\n            if a[i-1] % 2 == 0 {\n                a = append(a, a[i-1]+1)\n\
    \            } else {\n                a = append(a, a[i-1]+2)\n            }\n\
    \        }\n    }\n    return a\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
