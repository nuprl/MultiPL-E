language: go_test.go
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    // return len(myString)\n    //\
    \ Or,\n    myLength := 0\n    for range myString {\n        myLength++\n    }\n\
    \    return myLength\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var myLen int = 0\n    for range\
    \ myString {\n        myLen++\n    }\n    return myLen\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int\n    for _, v :=\
    \ range myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt6oe0fc0_test.go:15:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n      \
    \  return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString {\n\
    \        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    length := 0\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n        return\
    \ 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    // TODO: implement me!\n    return\
    \ 0\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__1 (0.00s)\n\
    \        tmp7cb09apf_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestStrlen/test_num__2 (0.00s)\n        tmp7cb09apf_test.go:33: expected\
    \ '%!s(int=9)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int = 0\n    for range\
    \ myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int\n    length = len(myString)\n\
    \    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073241
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
