language: go_test.go
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return\
    \ result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    return nil\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpp13z_u79_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmpp13z_u79_test.go:32:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    l_new := make([]int,\
    \ len(l))\n    for i, elem := range l {\n        l_new[i] = elem + 1\n    }\n\
    \    return l_new\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    r := make([]int, len(l))\n\
    \    for i, v := range l {\n        r[i] = v + 1\n    }\n    return r\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, v := range l\
    \ {\n        l[i] = v + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073827
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, v := range l\
    \ {\n        l[i] = v + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073827
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, _ := range l\
    \ {\n        l[i] += 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073827
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    ret := make([]int, len(l))\n\
    \    for i, v := range l {\n        ret[i] = v + 1\n    }\n    return ret\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, e := range l\
    \ {\n        l[i] = e + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    return nil\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpp13z_u79_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmpp13z_u79_test.go:32:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    var (\n        incr_l\
    \ []int\n        i int\n    )\n    for i = 0; i < len(l); i++ {\n        incr_l\
    \ = append(incr_l, l[i] + 1)\n    }\n    return incr_l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    if l == nil {\n    \
    \    return nil\n    }\n    for i, x := range l {\n        l[i] = x + 1\n    }\n\
    \    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    o := make([]int, len(l))\n\
    \    for i, v := range l {\n        o[i] = v + 1\n    }\n    return o\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, e := range l\
    \ {\n        l[i] = e + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    return nil\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpp13z_u79_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmpp13z_u79_test.go:32:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    for i, _ := range l\
    \ {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073827
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    new_list := make([]int,\
    \ len(l))\n    for i, v := range l {\n        new_list[i] = v + 1\n    }\n   \
    \ return new_list\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    r := make([]int, len(l))\n\
    \    for i, v := range l {\n        r[i] = v + 1\n    }\n    return r\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    incr := func(x int)\
    \ int {\n        return x + 1\n    }\n    return map_list(l, incr)\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk83aafxz_test.go:17:12: undefined: map_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
    // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\nfunc incr_list(l []int) []int {\n    res := make([]int, len(l))\n\
    \    for i, v := range l {\n        res[i] = v + 1\n    }\n    return res\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073936
