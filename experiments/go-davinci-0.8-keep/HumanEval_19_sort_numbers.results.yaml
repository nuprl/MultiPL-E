language: go_test.go
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var nums []int\n\n    nums = append(nums,\
    \ 0)\n    nums = append(nums, 1)\n    nums = append(nums, 2)\n    nums = append(nums,\
    \ 3)\n    nums = append(nums, 4)\n    nums = append(nums, 5)\n    nums = append(nums,\
    \ 6)\n    nums = append(nums, 7)\n    nums = append(nums, 8)\n    nums = append(nums,\
    \ 9)\n\n    var words []string\n    words = append(words, \"zero\")\n    words\
    \ = append(words, \"one\")\n    words = append(words, \"two\")\n    words = append(words,\
    \ \"three\")\n    words = append(words, \"four\")\n    words = append(words, \"\
    five\")\n    words = append(words, \"six\")\n    words = append(words, \"seven\"\
    )\n    words = append(words, \"eight\")\n    words = append(words, \"nine\")\n\
    \n    fmt.Println(numbers)\n    // var split_numbers []string\n    // split_numbers\
    \ = strings.Split(numbers, \" \")\n    // fmt.Println(split_numbers)\n\n    //\
    \ for i := range nums {\n    //     fmt.Println(words[i])\n    // }\n\n    return\
    \ \"done\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\nthree\nthree five nine\nfive zero four seven nine eight\nsix five four\
    \ three two one zero\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmp9ot26_w2_test.go:68: expected '', got 'done'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmp9ot26_w2_test.go:68: expected\
    \ 'three', got 'done'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n  \
    \      tmp9ot26_w2_test.go:68: expected 'three five nine', got 'done'\n    ---\
    \ FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmp9ot26_w2_test.go:68:\
    \ expected 'zero four five seven eight nine', got 'done'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp9ot26_w2_test.go:68: expected 'zero one two three four five\
    \ six', got 'done'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp0x2ldsuo_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp0x2ldsuo_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp0x2ldsuo_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp0x2ldsuo_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var sorted string\n    return sorted\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp_yiiog_p_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp_yiiog_p_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp_yiiog_p_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp_yiiog_p_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp0x2ldsuo_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp0x2ldsuo_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp0x2ldsuo_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp0x2ldsuo_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var dictionary map[string]int = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ sort_list []int\n    var list []string = make([]string, 0)\n    for _, word\
    \ := range strings.Split(numbers, \" \") {\n        if val, ok := dictionary[word];\
    \ ok {\n            sort_list = append(sort_list, val)\n        }\n    }\n   \
    \ sort.Ints(sort_list)\n    for _, val := range sort_list {\n        for key,\
    \ value := range dictionary {\n            if value == val {\n               \
    \ list = append(list, key)\n            }\n        }\n    }\n    return strings.Join(list,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5vlwslf_test.go:28:26: undefined: strings

    /tmp/tmpv5vlwslf_test.go:33:5: undefined: sort

    /tmp/tmpv5vlwslf_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    const zero = 0\n    const one = 1\n\
    \    const two = 2\n    const three = 3\n    const four = 4\n    const five =\
    \ 5\n    const six = 6\n    const seven = 7\n    const eight = 8\n    const nine\
    \ = 9\n\n    var sortedNumbers []int\n\n    numberMap := map[string]int{\n   \
    \     \"zero\": zero,\n        \"one\": one,\n        \"two\": two,\n        \"\
    three\": three,\n        \"four\": four,\n        \"five\": five,\n        \"\
    six\": six,\n        \"seven\": seven,\n        \"eight\": eight,\n        \"\
    nine\": nine,\n    }\n\n    for _, word := range strings.Split(numbers, \" \"\
    ) {\n        sortedNumbers = append(sortedNumbers, numberMap[word])\n    }\n\n\
    \    sort.Ints(sortedNumbers)\n\n    for i, number := range sortedNumbers {\n\
    \        sortedNumbers[i] = numberMap[number]\n    }\n\n    return strings.Join(sortedNumbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7d2i0z_test.go:40:26: undefined: strings

    /tmp/tmpbz7d2i0z_test.go:44:5: undefined: sort

    /tmp/tmpbz7d2i0z_test.go:47:38: cannot use number (variable of type int) as type
    string in map index

    /tmp/tmpbz7d2i0z_test.go:50:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    // Create a map of number names to\
    \ their numeric value\n    numbers_map := map[string]int{\n        \"zero\": \
    \ 0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\": 3,\n  \
    \      \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n        \"\
    seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n\n    // Split\
    \ the string into a list of numbers\n    nums := strings.Split(numbers, \" \"\
    )\n\n    // Iterate through the numbers\n    for index, num := range nums {\n\
    \        // If the number was a valid name, change it to it's numeric value\n\
    \        if val, ok := numbers_map[num]; ok {\n            nums[index] = strconv.Itoa(val)\n\
    \        }\n    }\n\n    // Now we can sort the numbers using Go's sort.Strings()\n\
    \    sort.Strings(nums)\n\n    // Convert the numeric values back to names\n \
    \   for index, num := range nums {\n        value, _ := strconv.Atoi(num)\n  \
    \      nums[index] = numbers_map[value]\n    }\n\n    // Return the sorted string\n\
    \    return strings.Join(nums, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxlbt0cy_test.go:29:13: undefined: strings

    /tmp/tmpqxlbt0cy_test.go:35:27: undefined: strconv

    /tmp/tmpqxlbt0cy_test.go:40:5: undefined: sort

    /tmp/tmpqxlbt0cy_test.go:44:21: undefined: strconv

    /tmp/tmpqxlbt0cy_test.go:49:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    if len(numbers) < 1 {\n        return\
    \ \"\"\n    }\n\n    number_map := map[string]int{\n        \"zero\": 0,\n   \
    \     \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    nums := make([]int, 0)\n\
    \    for _, num := range numbers {\n        if num >= 'a' && num <= 'z' {\n  \
    \          continue\n        }\n        nums = append(nums, number_map[string(num)])\n\
    \    }\n\n    for i := 0; i < len(nums) - 1; i++ {\n        for j := i + 1; j\
    \ < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i],\
    \ nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n\n    fmt.Println(nums)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[0 0]\n[0 0 0 0 0]\n[0 0 0 0 0 0]\n--- FAIL: TestSort_Numbers (0.00s)\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpeqgj_124_test.go:68:\
    \ expected 'three', got ''\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmpeqgj_124_test.go:68: expected 'three five nine', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__3 (0.00s)\n        tmpeqgj_124_test.go:68: expected\
    \ 'zero four five seven eight nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpeqgj_124_test.go:68: expected 'zero one two three four five\
    \ six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    // return \"one three five\"\n  \
    \  return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp0cghz7yh_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp0cghz7yh_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp0cghz7yh_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp0cghz7yh_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var nums = strings.Split(numbers,\
    \ \" \")\n    var numMap = map[string]int{\n        \"zero\": 0,\n        \"one\"\
    : 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n     \
    \   \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\"\
    : 8,\n        \"nine\": 9,\n    }\n    sort.Slice(nums, func(i, j int) bool {\n\
    \        return numMap[nums[i]] < numMap[nums[j]]\n    })\n    return strings.Join(nums,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcxgncdul_test.go:14:16: undefined: strings

    /tmp/tmpcxgncdul_test.go:27:5: undefined: sort

    /tmp/tmpcxgncdul_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    // WRITE YOUR CODE HERE!\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp0tqdkikr_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp0tqdkikr_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp0tqdkikr_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp0tqdkikr_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    nums := map[string]int{\n       \
    \ \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n\
    \        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var result []string\n\
    \    for _, num := range strings.Split(numbers, \" \") {\n        result = append(result,\
    \ num)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return nums[result[i]]\
    \ < nums[result[j]]\n    })\n    return strings.Join(result, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ql9s12p_test.go:27:25: undefined: strings

    /tmp/tmp3ql9s12p_test.go:30:5: undefined: sort

    /tmp/tmp3ql9s12p_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var s map[string]int = map[string]int\
    \ {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n \
    \   var n []int = []int{}\n    for _, str := range strings.Split(numbers, \" \"\
    ) {\n        n = append(n, s[str])\n    }\n    n = merge_sort(n)\n    res := []string{}\n\
    \    for _, i := range n {\n        for k, v := range s {\n            if v ==\
    \ i {\n                res = append(res, k)\n            }\n        }\n    }\n\
    \    return strings.Join(res, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5owv8vp7_test.go:27:25: undefined: strings

    /tmp/tmp5owv8vp7_test.go:30:9: undefined: merge_sort

    /tmp/tmp5owv8vp7_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n\treturn sort_numbers_imp_1(numbers)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabk4hsi4_test.go:14:9: undefined: sort_numbers_imp_1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    var n int\n    var i int\n    var\
    \ list []int\n    var pos int\n\n    list = make([]int, 0)\n    for _,s := range(numbers)\
    \ {\n        switch(s) {\n            case 'o':\n                if pos == 0 {\n\
    \                    pos = 1\n                } else if pos == 2 {\n         \
    \           pos = -1\n                }\n            case 'n':\n             \
    \   if pos == 1 {\n                    pos = 2\n                } else if pos\
    \ == 6 {\n                    pos = -1\n                }\n            case 'e':\n\
    \                if pos == 2 {\n                    pos = 3\n                }\
    \ else if pos == 4 {\n                    pos = -1\n                }\n      \
    \      case 'w':\n                if pos == 3 {\n                    pos = 4\n\
    \                }\n            case 't':\n                if pos == 0 {\n   \
    \                 pos = 5\n                } else if pos == 7 {\n            \
    \        pos = -1\n                }\n            case 'h':\n                if\
    \ pos == 5 {\n                    pos = 6\n                }\n            case\
    \ 'r':\n                if pos == 6 {\n                    pos = 7\n         \
    \       }\n            case 'f':\n                if pos == 0 {\n            \
    \        pos = 8\n                } else if pos == 10 {\n                    pos\
    \ = -1\n                }\n            case 'i':\n                if pos == 8\
    \ {\n                    pos = 9\n                } else if pos == 12 {\n    \
    \                pos = -1\n                }\n            case 'v':\n        \
    \        if pos == 9 {\n                    pos = 10\n                }\n    \
    \        case 's':\n                if pos == 0 {\n                    pos = 11\n\
    \                } else if pos == 13 {\n                    pos = -1\n       \
    \         }\n            case 'x':\n                if pos == 11 {\n         \
    \           pos = 12\n                }\n            case 'g':\n             \
    \   if pos == 13 {\n                    pos = 14\n                }\n        \
    \    case ' ':\n                if pos != -1 {\n                    list = append(list,\
    \ pos)\n                }\n                pos = 0\n            default:\n   \
    \             pos = -1\n        }\n    }\n    if pos != -1 {\n        list = append(list,\
    \ pos)\n    }\n\n    for i = 0; i < len(list)\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwylnunpj_test.go:102:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074301
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    num_to_int := map[string]int {\n\
    \        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n       \
    \ \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\"\
    :   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n\
    \    }\n\n    // Convert to int slice\n    var numbers_int []int\n    for _, num_str\
    \ := range strings.Split(numbers, \" \") {\n        numbers_int = append(numbers_int,\
    \ num_to_int[num_str])\n    }\n\n    // Sort\n    sort.Ints(numbers_int)\n\n \
    \   // Convert back to string\n    var numbers_str []string\n    for _, num_int\
    \ := range numbers_int {\n        for num_str, num_int_i := range num_to_int {\n\
    \            if num_int_i == num_int {\n                numbers_str = append(numbers_str,\
    \ num_str)\n            }\n        }\n    }\n\n    return strings.Join(numbers_str,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq09soath_test.go:29:29: undefined: strings

    /tmp/tmpq09soath_test.go:34:5: undefined: sort

    /tmp/tmpq09soath_test.go:46:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    // Input validation\n    if len(numbers)\
    \ == 0 {\n        return \"\"\n    }\n\n    // Split the string by space and sort\
    \ the array\n    numSlice := strings.Split(numbers, \" \")\n    srt.Strings(numSlice)\n\
    \n    return strings.Join(numSlice, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuemr9bev_test.go:20:17: undefined: strings

    /tmp/tmpuemr9bev_test.go:21:5: undefined: srt

    /tmp/tmpuemr9bev_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    numeral_to_number := map[string]int\
    \ {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n \
    \   number_to_numeral := map[int]string {\n        0: \"zero\",\n        1: \"\
    one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n   \
    \     5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"\
    eight\",\n        9: \"nine\",\n    }\n    numbers_as_ints := []int{}\n    for\
    \ _, numeral := range numbers {\n        numbers_as_ints = append(numbers_as_ints,\
    \ numeral_to_number[string(numeral)])\n    }\n    fmt.Println(numbers_as_ints)\n\
    \    // return \n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvnvugfu_test.go:26:5: number_to_numeral declared but not used

    /tmp/tmpzvnvugfu_test.go:44:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp5jop7fz3_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp5jop7fz3_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp5jop7fz3_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp5jop7fz3_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunc\
    \ sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n        return\
    \ \"\"\n    }\n\n    numMap := map[string]int {\n        \"zero\": 0,\n      \
    \  \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\":\
    \ 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    nums := make([]int, 0)\n\
    \    for _, num := range numbers {\n        if num == ' ' {\n            continue\n\
    \        }\n        nums = append(nums, numMap[string(num)])\n    }\n\n    bubble_sort(nums)\n\
    \n    result := make([]string, 0)\n    for _, num := range nums {\n        for\
    \ k, v := range numMap {\n            if v == num {\n                result =\
    \ append(result, k)\n            }\n        }\n    }\n\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2t7wdsry_test.go:39:5: undefined: bubble_sort

    /tmp/tmp2t7wdsry_test.go:50:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
