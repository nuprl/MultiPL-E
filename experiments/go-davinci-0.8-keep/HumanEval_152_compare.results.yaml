language: go_test.go
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if guess[i] > game[i] {\n     \
    \       result[i] = guess[i] - game[i]\n        } else {\n            result[i]\
    \ = game[i] - guess[i]\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, 0)\n\
    \    for i,_ := range game {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, Abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhl81s_h_test.go:24:37: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    if len(game) != len(guess)\
    \ {\n        return nil\n    }\n    res := make([]int, len(game))\n    for i :=\
    \ 0; i < len(game); i++ {\n        g := guess[i]\n        d := game[i] - g\n \
    \       if d < 0 {\n            d = -d\n        }\n        res[i] = d\n    }\n\
    \    return res\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    scores := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        scores[i] = 0\n        } else {\n            scores[i] = Abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return scores\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8g9sop8_test.go:24:25: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    var distance []int\n    for\
    \ i := 0; i < len(game); i++ {\n        distance = append(distance, abs(game[i]\
    \ - guess[i]))\n    }\n    return distance\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmrprjyv_test.go:21:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    answer := make([]int, len(game))\n\
    \    for i, v := range game {\n        answer[i] = abs(v - guess[i])\n    }\n\
    \    return answer\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddlu1dp6_test.go:21:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i, v := range game {\n        if v == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = int(Abs(float64(v) - float64(guess[i])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pn5oqqd_test.go:24:29: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    diff := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        diff[i] = abs(game[i] - guess[i])\n\
    \    }\n    return diff\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6q3n3ou_test.go:21:19: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    difference := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        difference[i] = game[i] - guess[i]\n\
    \        if difference[i] < 0 {\n            difference[i] = -difference[i]\n\
    \        }\n    }\n    return difference\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    ret := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] > guess[i] {\n     \
    \       ret[i] = game[i] - guess[i]\n        } else {\n            ret[i] = guess[i]\
    \ - game[i]\n        }\n    }\n    return ret\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, 0)\n\
    \    for i := 0; i < len(game); i++ {\n        v := game[i] - guess[i]\n     \
    \   if v < 0 {\n            v = -v\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    var result []int\n    for k,\
    \ v := range game {\n        if game[k] > guess[k] {\n            result = append(result,\
    \ game[k] - guess[k])\n        } else if game[k] < guess[k] {\n            result\
    \ = append(result, guess[k] - game[k])\n        } else {\n            result =\
    \ append(result, 0)\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpj634an_test.go:20:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for idx, element := range game {\n        if element == guess[idx] {\n  \
    \          result[idx] = 0\n        } else {\n            result[idx] = element\
    \ - guess[idx]\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    var result []int\n    for i,\
    \ v := range game {\n        if v < guess[i] {\n            result = append(result,\
    \ guess[i] - v)\n        } else if v > guess[i] {\n            result = append(result,\
    \ v - guess[i])\n        } else {\n            result = append(result, 0)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    var rs []int\n    for i, val\
    \ := range game {\n        if val > guess[i] {\n            rs = append(rs, val\
    \ - guess[i])\n        } else {\n            rs = append(rs, guess[i] - val)\n\
    \        }\n    }\n    return rs\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n    \
    \        result[i] = Abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_4aapaz_test.go:22:25: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    var result []int\n    for i,\
    \ val := range game {\n        var diff int\n        if game[i] < guess[i] {\n\
    \            diff = guess[i] - game[i]\n        } else {\n            diff = game[i]\
    \ - guess[i]\n        }\n        result = append(result, diff)\n    }\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz24dpqi3_test.go:20:12: val declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    res := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n    \
    \        res[i] = abs(game[i] - guess[i])\n        }\n    }\n    return res\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajzgluic_test.go:22:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    res := make([]int, len(game))\n\
    \    for i, _ := range game {\n        if game[i] == guess[i] {\n            res[i]\
    \ = 0\n        } else {\n            res[i] = abs(game[i] - guess[i])\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1u9n9nh_test.go:24:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    func compare(game []int, guess []int) []int {\n    // your code here\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43r3c632_test.go:20:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
