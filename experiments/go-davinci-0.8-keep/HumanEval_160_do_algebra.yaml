name: HumanEval_160_do_algebra
language: go_test.go
prompt: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given two lists operator, and operand. The first list has basic algebra operations,\
  \ and \n// the second list is a list of integers. Use the two given lists to build\
  \ the algebric \n// expression and return the evaluation of this expression.\n//\
  \ The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
  \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
  \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
  // => result = 9\n// Note:\n// The length of operator list is equal to the length\
  \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
  // Operator list has at least one operator, and operand list has at least two operands.\n\
  func do_algebra(operator []string, operand []int) int {\n"
tests: "func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3,\
  \ 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"\
  }, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\"\
  , \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n\
    \    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n \
    \   operands := make([]int, len(operand))\n    copy(operands, operand)\n    //first\
    \ do * and //\n    for i := 0; i < len(operator); i++ {\n        if operator[i]\
    \ == \"*\" {\n            operands[i] = operands[i] * operands[i+1]\n        \
    \    operands = append(operands[:i+1], operands[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            i--\n        } else if\
    \ operator[i] == \"//\" {\n            operands[i] = operands[i] / operands[i+1]\n\
    \            operands = append(operands[:i+1], operands[i+2:]...)\n          \
    \  operator = append(operator[:i], operator[i+1:]...)\n            i--\n     \
    \   }\n    }\n    //do **\n    for i := 0; i < len(operator); i++ {\n        if\
    \ operator[i] == \"**\" {\n            operands[i] = operands[i] ^ operands[i+1]\n\
    \            operands = append(operands[:i+1], operands[i+2:]...)\n          \
    \  operator = append(operator[:i], operator[i+1:]...)\n            i--\n     \
    \   }\n    }\n    //now do + and -\n    result := operands[0]\n    for i := 0;\
    \ i < len(operator); i++ {\n        if operator[i] == \"+\" {\n            result\
    \ += operands[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operands[i+1]\n        }\n    }\n    return result\n}\n", "    var prev,\
    \ curr int\n    prev = operand[0]\n    for i, o := range operator {\n        switch\
    \ o {\n        case \"+\":\n            curr = prev + operand[i+1]\n        case\
    \ \"-\":\n            curr = prev - operand[i+1]\n        case \"*\":\n      \
    \      curr = prev * operand[i+1]\n        case \"//\":\n            curr = prev\
    \ / operand[i+1]\n        case \"**\":\n            curr = prev ** operand[i+1]\n\
    \        }\n        prev = curr\n    }\n    return curr\n}\n", "    var op_stack\
    \ []string\n    var var_stack []int\n    var i int\n    var op string\n    var\
    \ var1, var2 int\n    var res int\n\n    // TODO: Check length\n\n    op_stack\
    \ = append(op_stack, operator[0])\n    var_stack = append(var_stack, operand[0])\n\
    \    var_stack = append(var_stack, operand[1])\n\n    for i = 1; i < len(operator);\
    \ i++ {\n        op = operator[i]\n        if op == \"*\" || op == \"/\" {\n \
    \           for len(op_stack) > 0 && (op_stack[len(op_stack)-1] == \"*\" || op_stack[len(op_stack)-1]\
    \ == \"/\") {\n                var2 = var_stack[len(var_stack)-1]\n          \
    \      var_stack = var_stack[:len(var_stack)-1]\n                var1 = var_stack[len(var_stack)-1]\n\
    \                var_stack = var_stack[:len(var_stack)-1]\n                op\
    \ = op_stack[len(op_stack)-1]\n                op_stack = op_stack[:len(op_stack)-1]\n\
    \                if op == \"*\" {\n                    res = var1 * var2\n   \
    \             } else {\n                    res = var1 / var2\n              \
    \  }\n                var_stack = append(var_stack, res)\n            }\n    \
    \        op_stack = append(op_stack, op)\n        } else {\n            op_stack\
    \ = append(op_stack, op)\n        }\n        var_stack = append(var_stack, operand[i+1])\n\
    \    }\n\n    for len(op_stack) > 0 {\n        var2 = var_stack[len(var_stack)-1]\n\
    \        var_stack = var_stack[:len(var_stack)-1]\n        var1 = var_stack[len(var_stack)-1]\n\
    \        var_stack = var_stack[:len(var_stack)-1]\n        op = op_stack[len(op_stack)-1]\n\
    \        op_stack = op_stack[:len(", "    var result int\n    if len(operator)\
    \ < 1 || len(operand) < 2 {\n        return 0\n    }\n    result = operand[0]\n\
    \    for i, v := range operator {\n        op2 := operand[i+1]\n        switch\
    \ v {\n        case \"+\":\n            result += op2\n        case \"-\":\n \
    \           result -= op2\n        case \"*\":\n            result *= op2\n  \
    \      case \"//\":\n            result /= op2\n        case \"**\":\n       \
    \     result = result ^ op2\n        }\n    }\n    return result\n}\n", "    for\
    \ i, op := range operator {\n        if op == \"**\" {\n            operand[i+1]\
    \ = int(math.Pow(float64(operand[i]), float64(operand[i+1])))\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            operand = append(operand[:i],\
    \ operand[i+1:]...)\n            return do_algebra(operator, operand)\n      \
    \  }\n    }\n    for i, op := range operator {\n        if op == \"//\" {\n  \
    \          operand[i+1] = operand[i] / operand[i+1]\n            operator = append(operator[:i],\
    \ operator[i+1:]...)\n            operand = append(operand[:i], operand[i+1:]...)\n\
    \            return do_algebra(operator, operand)\n        }\n    }\n    for i,\
    \ op := range operator {\n        if op == \"*\" {\n            operand[i+1] =\
    \ operand[i] * operand[i+1]\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \            operand = append(operand[:i], operand[i+1:]...)\n            return\
    \ do_algebra(operator, operand)\n        }\n    }\n    for i, op := range operator\
    \ {\n        if op == \"+\" {\n            operand[i+1] = operand[i] + operand[i+1]\n\
    \            operator = append(operator[:i], operator[i+1:]...)\n            operand\
    \ = append(operand[:i], operand[i+1:]...)\n            return do_algebra(operator,\
    \ operand)\n        }\n    }\n    for i, op := range operator {\n        if op\
    \ == \"-\" {\n            operand[i+1] = operand[i] - operand[i+1]\n         \
    \   operator = append(operator[:i], operator[i+1:]...)\n            operand =\
    \ append(operand[:i], operand[i+1:]...)\n            return do_algebra(operator,\
    \ operand)\n        }\n    }\n", "    for i, op := range operator {\n        switch\
    \ op {\n        case \"+\":\n            operand[i+1] = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            operand[i+1] = operand[i] - operand[i+1]\n \
    \       case \"*\":\n            operand[i+1] = operand[i] * operand[i+1]\n  \
    \      case \"//\":\n            operand[i+1] = operand[i] / operand[i+1]\n  \
    \      case \"**\":\n            operand[i+1] = operand[i] ^ operand[i+1]\n  \
    \      }\n    }\n    return operand[len(operand)-1]\n}\n", "    ln := len(operator)\
    \ + 1\n    result := operand[0]\n    for i := 0; i < ln - 1; i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n \
    \       case \"-\":\n            result -= operand[i + 1]\n        case \"*\"\
    :\n            result *= operand[i + 1]\n        case \"//\":\n            result\
    \ /= operand[i + 1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i + 1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 {\n        return operand[0]\n    }\n\n    n := len(operator)\n\
    \    result := operand[0]\n    for i := 0; i < n; i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var op_idx int\n    for op_idx = 0; op_idx\
    \ < len(operator); op_idx++ {\n        switch operator[op_idx] {\n        case\
    \ \"//\":\n            operand[op_idx + 1] = operand[op_idx] / operand[op_idx\
    \ + 1]\n        case \"**\":\n            operand[op_idx + 1] = operand[op_idx]\
    \ ^ operand[op_idx + 1]\n        }\n    }\n    op_idx = 0\n    for op_idx < len(operator)\
    \ {\n        switch operator[op_idx] {\n        case \"+\":\n            operand[op_idx\
    \ + 1] = operand[op_idx] + operand[op_idx + 1]\n        case \"-\":\n        \
    \    operand[op_idx + 1] = operand[op_idx] - operand[op_idx + 1]\n        case\
    \ \"*\":\n            operand[op_idx + 1] = operand[op_idx] * operand[op_idx +\
    \ 1]\n        }\n        op_idx += 1\n    }\n    return operand[len(operand) -\
    \ 1]\n}\n", "    if len(operator) != len(operand) - 1 {\n        return 0\n  \
    \  }\n    ans := operand[0]\n    for i := 0; i < len(operator); i++ {\n      \
    \  if operator[i] == \"+\" {\n            ans += operand[i+1]\n        } else\
    \ if operator[i] == \"-\" {\n            ans -= operand[i+1]\n        } else if\
    \ operator[i] == \"*\" {\n            ans *= operand[i+1]\n        } else if operator[i]\
    \ == \"//\" {\n            ans /= operand[i+1]\n        } else if operator[i]\
    \ == \"**\" {\n            ans = ans ^ operand[i+1]\n        }\n    }\n    return\
    \ ans\n}\n", "    if operator == nil || operand == nil {\n        return 0\n \
    \   }\n    l := len(operator)\n    r := operand[0]\n    for i := 0; i < l; i++\
    \ {\n        op := operator[i]\n        if op == \"+\" {\n            r += operand[i+1]\n\
    \        } else if op == \"-\" {\n            r -= operand[i+1]\n        } else\
    \ if op == \"*\" {\n            r *= operand[i+1]\n        } else if op == \"\
    //\" {\n            r /= operand[i+1]\n        } else if op == \"**\" {\n    \
    \        r = int(math.Pow(float64(r), float64(operand[i+1])))\n        }\n   \
    \ }\n    return r\n}\n", "    var stack []int\n    for i := 0; i < len(operator);\
    \ i++ {\n        if operator[i] == \"+\" {\n            stack = append(stack,\
    \ operand[i] + operand[i+1])\n        } else if operator[i] == \"-\" {\n     \
    \       stack = append(stack, operand[i] - operand[i+1])\n        } else if operator[i]\
    \ == \"*\" {\n            stack = append(stack, operand[i] * operand[i+1])\n \
    \       } else if operator[i] == \"//\" {\n            stack = append(stack, operand[i]\
    \ / operand[i+1])\n        } else if operator[i] == \"**\" {\n            stack\
    \ = append(stack, pow(operand[i], operand[i+1]))\n        }\n    }\n    return\
    \ stack[0]\n}\n", "    stack := make([]int, 0)\n    for i, x := range operand\
    \ {\n        if i == 0 {\n            stack = append(stack, x)\n        } else\
    \ {\n            op := operator[i-1]\n            switch op {\n            case\
    \ \"+\":\n                stack = append(stack, stack[len(stack)-1] + x)\n   \
    \         case \"-\":\n                stack = append(stack, stack[len(stack)-1]\
    \ - x)\n            case \"*\":\n                stack = append(stack, stack[len(stack)-1]\
    \ * x)\n            case \"//\":\n                stack = append(stack, stack[len(stack)-1]\
    \ / x)\n            case \"**\":\n                stack = append(stack, power(stack[len(stack)-1],\
    \ x))\n            }\n        }\n    }\n    return stack[len(stack)-1]\n}\n",
  "    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) < 2 {\n        return 0\n    }\n    fmt.Println(operand)\n\
    \    for _, op := range operator {\n        switch op {\n        case \"+\":\n\
    \            operand[0] = operand[0] + operand[1]\n            operand = operand[1:]\n\
    \        case \"-\":\n            operand[0] = operand[0] - operand[1]\n     \
    \       operand = operand[1:]\n        case \"*\":\n            operand[0] = operand[0]\
    \ * operand[1]\n            operand = operand[1:]\n        case \"//\":\n    \
    \        operand[0] = operand[0] / operand[1]\n            operand = operand[1:]\n\
    \        case \"**\":\n            operand[0] = operand[0] ^ operand[1]\n    \
    \        operand = operand[1:]\n        }\n        fmt.Println(operand)\n    }\n\
    \    return operand[0]\n}\n", "    index := 0\n    result := operand[index]\n\
    \    index++\n    for ; index < len(operand); index++ {\n        if operator[index\
    \ - 1] == \"+\" {\n            result += operand[index]\n        } else if operator[index\
    \ - 1] == \"-\" {\n            result -= operand[index]\n        } else if operator[index\
    \ - 1] == \"*\" {\n            result *= operand[index]\n        } else if operator[index\
    \ - 1] == \"//\" {\n            result /= operand[index]\n        } else if operator[index\
    \ - 1] == \"**\" {\n            result = int(math.Pow(float64(result), float64(operand[index])))\n\
    \        }\n    }\n    return result\n}\n", "    op := [][]string{{\"**\"}, {\"\
    *\", \"/\", \"//\"}, {\"+\", \"-\"}}\n    result := operand[0]\n    op_index :=\
    \ 0\n    operand_index := 1\n    for _, op_value := range operator {\n       \
    \ if op_value == op[op_index][0] {\n            result = do_operation(result,\
    \ operand[operand_index], op_value)\n            op_index = 0\n            operand_index\
    \ = operand_index + 1\n        } else {\n            for _, op_value_list := range\
    \ op[op_index] {\n                if op_value == op_value_list {\n           \
    \         result = do_operation(result, operand[operand_index], op_value)\n  \
    \                  operand_index = operand_index + 1\n                    break\n\
    \                }\n            }\n            op_index = op_index + 1\n     \
    \   }\n    }\n    return result\n}\n", "    for i := 1; i < len(operator); i++\
    \ {\n        operand[i] = operate(operator[i - 1], operand[i - 1], operand[i])\n\
    \    }\n    return operand[len(operand) - 1]\n}\n", "    operandLen := len(operand)\n\
    \    for i := 0; i < operandLen - 1; i++ {\n        if operator[i] == \"**\" {\n\
    \            operand[i + 1] = int(math.Pow(float64(operand[i]), float64(operand[i\
    \ + 1])))\n        } else if operator[i] == \"//\" {\n            operand[i +\
    \ 1] = operand[i] / operand[i + 1]\n        } else if operator[i] == \"*\" {\n\
    \            operand[i + 1] = operand[i] * operand[i + 1]\n        } else if operator[i]\
    \ == \"-\" {\n            operand[i + 1] = operand[i] - operand[i + 1]\n     \
    \   } else if operator[i] == \"+\" {\n            operand[i + 1] = operand[i]\
    \ + operand[i + 1]\n        }\n    }\n    return operand[operandLen - 1]\n}\n",
  "    if len(operator) != len(operand) - 1 {\n        panic(\"Invalid Input\")\n\
    \    }\n    switch operator[0] {\n        case \"+\":\n            return operand[0]\
    \ + operand[1]\n        case \"-\":\n            return operand[0] - operand[1]\n\
    \        case \"*\":\n            return operand[0] * operand[1]\n        case\
    \ \"//\":\n            return operand[0] / operand[1]\n        case \"**\":\n\
    \            var res int = 1\n            for i := 0; i < operand[1]; i++ {\n\
    \                res *= operand[0]\n            }\n            return res\n  \
    \      default:\n            panic(\"Invalid Input\")\n    }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
