language: go_test.go
name: HumanEval_39_prime_fib
results:
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    pf := []int{2, 3}\n    for i, fib := 0, 0; ; {\n   \
    \     fib = pf[i] + pf[i+1]\n        if is_prime(fib) {\n            pf = append(pf,\
    \ fib)\n            i++\n        }\n        if len(pf) == n {\n            return\
    \ fib\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0nvd9pib_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    res := 1\n    fibo := make([]int, n)\n    for i := range fibo\
    \ {\n        fibo[i] = res\n        res = fibo[i-1] + fibo[i-2]\n    }\n    m\
    \ := n - 2\n    return fibo[m]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(...)\n\t/tmp/tmpnqehzu5r_test.go:24\n\
    command-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmpnqehzu5r_test.go:37\
    \ +0x45\ntesting.tRunner(0xc000118ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    f1, f2 := 2, 3\n    for i := 2; i < n; i++ {\n        f1, f2\
    \ = f2, f1 + f2\n    }\n    return f1\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__1\
    \ (0.00s)\n        tmpaod7q05k_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__2 (0.00s)\n        tmpaod7q05k_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpaod7q05k_test.go:49: expected '%!s(int=13)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpaod7q05k_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=8)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpaod7q05k_test.go:49: expected '%!s(int=233)', got '%!s(int=13)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpaod7q05k_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpaod7q05k_test.go:49: expected '%!s(int=28657)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpaod7q05k_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpaod7q05k_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074515
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    prime_numbers := fibonacci(n)\n    primes := make([]int, 0)\n\
    \    for _, p := range prime_numbers {\n        if is_prime(p) {\n           \
    \ primes = append(primes, p)\n        }\n    }\n    return primes[n-1]\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9cw_2h3_test.go:20:22: undefined: fibonacci

    /tmp/tmpi9cw_2h3_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c, i int\n    a, b = 2, 3\n    i = 2\n    for {\n\
    \        if is_prime(b) {\n            i++\n            if i == n {\n        \
    \        break\n            }\n        }\n        c = a + b\n        a = b\n \
    \       b = c\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50zqx7si_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var array []int\n    var fib_int int\n    var i int\n\n    fib_int\
    \ = 1\n    for i = 0; len(array) != n; i++ {\n        fib_int = fib(i)\n     \
    \   if is_prime(fib_int) {\n            array = append(array, fib_int)\n     \
    \   }\n    }\n    return fib_int\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fjtroel_test.go:26:19: undefined: fib

    /tmp/tmp9fjtroel_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    seq := make([]int, n)\n    seq[0] = 2\n    seq[1] = 3\n    for\
    \ i := 2; i < n; i++ {\n        seq[i] = seq[i-1] + seq[i-2]\n        if is_prime(seq[i])\
    \ {\n            return seq[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk905n74q_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibonacciNumbers []int\n    var primeNumbers []int\n   \
    \ for i := 0; i < n; i++ {\n        if i == 0 {\n            fibonacciNumbers\
    \ = append(fibonacciNumbers, 0)\n        } else if i == 1 {\n            fibonacciNumbers\
    \ = append(fibonacciNumbers, 1)\n        } else {\n            fibonacciNumbers\
    \ = append(fibonacciNumbers, fibonacciNumbers[i-1] + fibonacciNumbers[i-2])\n\
    \        }\n        if fibonacciNumbers[i] == 2 {\n            primeNumbers =\
    \ append(primeNumbers, fibonacciNumbers[i])\n        } else {\n            if\
    \ isPrime(fibonacciNumbers[i]) {\n                primeNumbers = append(primeNumbers,\
    \ fibonacciNumbers[i])\n            }\n        }\n    }\n    return primeNumbers[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3gpk38p_test.go:33:16: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 2\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__1\
    \ (0.00s)\n        tmp2t2hnz92_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__2 (0.00s)\n        tmp2t2hnz92_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp2t2hnz92_test.go:45: expected '%!s(int=13)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp2t2hnz92_test.go:45:\
    \ expected '%!s(int=89)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp2t2hnz92_test.go:45: expected '%!s(int=233)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp2t2hnz92_test.go:45:\
    \ expected '%!s(int=1597)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp2t2hnz92_test.go:45: expected '%!s(int=28657)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp2t2hnz92_test.go:45:\
    \ expected '%!s(int=514229)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp2t2hnz92_test.go:45: expected '%!s(int=433494437)', got\
    \ '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    for i, j, nfib := 2, 3, 1; nfib < n; {\n        i, j = j, i+j\n\
    \        if is_prime(j) {\n            nfib++\n        }\n    }\n    return j\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s_o1kt2_test.go:22:12: undefined: is_prime

    /tmp/tmp5s_o1kt2_test.go:26:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, a, b, t int\n    for i = 0; i < n; i++ {\n        if\
    \ (i <= 1) {\n            t = i\n        } else {\n            t = a + b\n   \
    \         a = b\n            b = t\n        }\n        for t > 1 {\n         \
    \   if (t % 2 == 0) {\n                break\n            }\n            if (t\
    \ % 3 == 0) {\n                break\n            }\n            if (t % 5 ==\
    \ 0) {\n                break\n            }\n            if (t % 7 == 0) {\n\
    \                break\n            }\n            if (t % 11 == 0) {\n      \
    \          break\n            }\n            if (t % 13 == 0) {\n            \
    \    break\n            }\n            if (t % 17 == 0) {\n                break\n\
    \            }\n            if (t % 19 == 0) {\n                break\n      \
    \      }\n            if (t % 23 == 0) {\n                break\n            }\n\
    \            if (t % 29 == 0) {\n                break\n            }\n      \
    \      if (t % 31 == 0) {\n                break\n            }\n            if\
    \ (t % 37 == 0) {\n                break\n            }\n            if (t % 41\
    \ == 0) {\n                break\n            }\n            if (t % 43 == 0)\
    \ {\n                break\n            }\n            if (t % 47 == 0) {\n  \
    \              break\n            }\n            if (t % 53 == 0) {\n        \
    \        break\n            }\n            if (t % 59 == 0) {\n              \
    \  break\n            }\n            if (t % 61 == 0) {\n                break\n\
    \            }\n            if (t % 67 == 0) {\n                break\n      \
    \      }\n            if (t % 71 == 0) {\n                break\n            }\n\
    \            if (t % 73 == 0) {\n                break\n            }\n      \
    \      if (t % 79 == 0) {\n                break\n            }\n            if\
    \ (t % 83 == 0) {\n                break\n            }\n            if (t % 89\
    \ == 0) {\n                break\n            }\n            if (t % 97 == 0)\
    \ {\n                break\n            }\n            return t\n        }\n \
    \   }\n    return -1\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbtn2wqz__test.go:110:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074564
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // Find first n prime numbers\n    primes := []int{2}\n    cur\
    \ := 3\n    for len(primes) < n {\n        prime := true\n        for _, p :=\
    \ range primes {\n            if cur % p == 0 {\n                prime = false\n\
    \                break\n            }\n        }\n        if prime {\n       \
    \     primes = append(primes, cur)\n        }\n        cur += 2\n    }\n\n   \
    \ // Find the prime numbers that are also Fibonacci\n    fibs := []int{0, 1}\n\
    \    for len(fibs) < len(primes) {\n        fibs = append(fibs, fibs[len(fibs)-1]\
    \ + fibs[len(fibs)-2])\n    }\n\n    ans := []int{}\n    for i, f := range fibs\
    \ {\n        for _, p := range primes {\n            if f == p {\n           \
    \     ans = append(ans, f)\n                break\n            }\n        }\n\
    \        if len(ans) == n {\n            break\n        }\n    }\n\n    return\
    \ ans[len(ans)-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cdyf56d_test.go:44:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    first, second := 1, 1\n    for i := 1; i < n; i++ {\n      \
    \  if is_prime(second) {\n            first, second = second, first + second\n\
    \        } else {\n            first, second = second, first + second\n      \
    \      i--\n        }\n    }\n    return first\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xb5gs87_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := fib_generator()\n    for {\n        i := <-fib\n    \
    \    if is_prime(i) {\n            n--\n            if n == 0 {\n            \
    \    return i\n            }\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0h83675w_test.go:20:12: undefined: fib_generator

    /tmp/tmp0h83675w_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // For n = 1, 2, 3, 5, and 13 (so far).\n    return 0\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpwewx0d2r_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpwewx0d2r_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpwewx0d2r_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpwewx0d2r_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpwewx0d2r_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpwewx0d2r_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpwewx0d2r_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpwewx0d2r_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpwewx0d2r_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpwewx0d2r_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 3\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp0v5nh4gf_test.go:45: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__2 (0.00s)\n        tmp0v5nh4gf_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp0v5nh4gf_test.go:45: expected '%!s(int=13)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp0v5nh4gf_test.go:45:\
    \ expected '%!s(int=89)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp0v5nh4gf_test.go:45: expected '%!s(int=233)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp0v5nh4gf_test.go:45:\
    \ expected '%!s(int=1597)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp0v5nh4gf_test.go:45: expected '%!s(int=28657)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp0v5nh4gf_test.go:45:\
    \ expected '%!s(int=514229)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp0v5nh4gf_test.go:45: expected '%!s(int=433494437)', got\
    \ '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := fib_gen()\n    count := 0\n    for f := fib(); ; f =\
    \ fib() {\n        if is_prime(f) {\n            count++\n            if count\
    \ == n {\n                return f\n            }\n        }\n    }\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxbev5yjo_test.go:20:12: undefined: fib_gen

    /tmp/tmpxbev5yjo_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var (\n        f1, f2, f3, c = 2, 3, 5, 2\n    )\n    if n <\
    \ 1 {\n        return -1\n    }\n    if n == 1 {\n        return f1\n    }\n \
    \   if n == 2 {\n        return f2\n    }\n    for c < n {\n        f1, f2, f3\
    \ = f2, f3, f1 + f2 + f3\n        if is_prime(f3) {\n            c++\n       \
    \ }\n    }\n    return f3\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemlb86m8_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074565
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    x, y := 2, 3\n    i := 2\n    var z int\n    for ; i < n; i++\
    \ {\n        z = x + y\n        x = y\n        y = z\n        for j := 2; j <\
    \ y; j++ {\n            if y % j == 0 {\n                break\n            }\n\
    \            if j == y - 1 {\n                i++\n            }\n        }\n\
    \    }\n    return y\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp_0noqfrb_test.go:61: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp_0noqfrb_test.go:61:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp_0noqfrb_test.go:61: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp_0noqfrb_test.go:61:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp_0noqfrb_test.go:61: expected '%!s(int=1597)', got '%!s(int=13)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp_0noqfrb_test.go:61:\
    \ expected '%!s(int=28657)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp_0noqfrb_test.go:61: expected '%!s(int=514229)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp_0noqfrb_test.go:61:\
    \ expected '%!s(int=433494437)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074565
