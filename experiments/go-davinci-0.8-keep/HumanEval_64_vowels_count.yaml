name: HumanEval_64_vowels_count
language: go_test.go
prompt: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function vowels_count which takes a string representing\n// a word as\
  \ input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\n"
tests: "func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
  \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
  \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
  keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n    \
  \ { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    return 0\n}\n", "    count := 0\n    for _, x := range s {\n  \
    \      if x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' {\n       \
    \     count++\n        }\n    }\n    return count\n}\n", "    // Copy and paste\
    \ your code from the previous exercise\n    count := 0\n    s_ := []rune(s)\n\
    \    for i := 0; i < len(s_); i++ {\n        if s_[i] == 'a' || s_[i] == 'e' ||\
    \ s_[i] == 'i' || s_[i] == 'o' || s_[i] == 'u' {\n            count++\n      \
    \  }\n        if s_[i] == 'y' && i == len(s_)-1 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range s\
    \ {\n        lc := string(c)\n        if lc == \"a\" || lc == \"e\" || lc == \"\
    i\" || lc == \"o\" || lc == \"u\" {\n            count++\n        } else if i\
    \ == len(s) - 1 && lc == \"y\" {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for i, _ := range s {\n        c := s[i]\n\
    \        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n\
    \        case 'y':\n            if i == len(s)-1 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    vowel := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true, \"y\": true}\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if (vowel[string(s[i])])\
    \ {\n            count++\n        }\n    }\n    if (vowel[string(s[len(s) - 1])])\
    \ {\n        count++\n    }\n    return count\n}\n", "    c := 0\n    for i :=\
    \ 0; i < len(s); i++ {\n        switch s[i] {\n        case 'a', 'e', 'i', 'o',\
    \ 'u':\n            c++\n        case 'y':\n            if i != len(s) - 1 {\n\
    \                continue\n            }\n            c++\n        }\n    }\n\
    \    return c\n}\n", "    count := 0\n    // Calculate if 'y' is a vowel at the\
    \ end of the string\n    if s[len(s)-1:] == \"y\" {\n        count++\n    }\n\
    \    // Loop through the string and count vowels\n    for _, v := range s {\n\
    \        switch string(v) {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var i, c\
    \ int\n    c = 0\n    l := len(s) - 1\n    for i = 0; i < len(s); i++ {\n    \
    \    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\
    \ {\n            c += 1\n        } else if (s[i] == 'y' && i == l) {\n       \
    \     c += 1\n        }\n    }\n    return c\n}\n", "    var v int = 0\n    var\
    \ vowels map[rune]int = map[rune]int{\n        'a': 1,\n        'e': 1,\n    \
    \    'i': 1,\n        'o': 1,\n        'u': 1,\n        'y': 1,\n    }\n    for\
    \ _, c := range s {\n        if _, ok := vowels[c]; ok {\n            v += 1\n\
    \        }\n    }\n    return v\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for\
    \ _, x := range s {\n        for _, y := range vowels {\n            if x == y\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    c, vowels := 0, 0\n    for i := 0; i < len(s); i++ {\n        c = int(s[i])\n\
    \        if (c == 65 || c == 69 || c == 73 || c == 79 || c == 85 || c == 89) {\n\
    \            vowels += 1\n        }\n    }\n    return vowels\n}\n", "    c, t\
    \ := 0, 0\n    for _, v := range s {\n        t++\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' {\n            c++\n        }\n    }\n\
    \    if s[t-1] == 'y' {\n        c++\n    }\n    return c\n}\n", "    count :=\
    \ 0\n    vowels := map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n   \
    \     \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"y\": 1,\n   \
    \ }\n    for _, v := range s {\n        if _, ok := vowels[string(v)]; ok {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    var c\
    \ int\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' || v == 'y' {\n            c++\n        }\n    }\n \
    \   if c > 0 && s[len(s)-1] != 'y' {\n        c--\n    }\n    return c\n}\n",
  "    vowels := map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1, \"y\"\
    :1}\n    count := 0\n    for i, _ := range s {\n        if _, ok := vowels[string(s[i])];\
    \ ok {\n            count++\n        }\n    }\n    return count\n}\n", "\tcounter\
    \ := 0\n\tfor _, char := range s {\n\t\tif char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u' || char == 'y' {\n\t\t\tcounter++\n\t\t\
    }\n\t}\n\treturn counter\n}\n", "    vowels := map[rune]bool{\n        'a': true,\n\
    \        'e': true,\n        'i': true,\n        'o': true,\n        'u': true,\n\
    \    }\n    count := 0\n    endsWithY := false\n    for _, char := range s {\n\
    \        if char == 'y' {\n            endsWithY = true\n        } else if vowels[char]\
    \ {\n            count++\n        }\n    }\n    if endsWithY {\n        count++\n\
    \    }\n    return count\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    var count int\n    for _, v := range s {\n        for _, w :=\
    \ range vowels {\n            if string(v) == w {\n                count += 1\n\
    \            }\n        }\n    }\n    if string(s[len(s)-1]) == \"y\" {\n    \
    \    count += 1\n    }\n    return count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
