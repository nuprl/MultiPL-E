language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    Circular shift %d by %d\\n\", x, shift)\n    x_string := fmt.Sprintf(\"%d\", x)\n\
    \    x_length := len(x_string)\n    fmt.Printf(\"%d has %d digits\\n\", x, x_length)\n\
    \    if shift > x_length {\n        fmt.Printf(\"%d greater than %d, so reverse\\\
    n\", shift, x_length)\n        for i, j := 0, len(x_string)-1; i < j; i, j = i+1,\
    \ j-1 {\n            x_string[i], x_string[j] = x_string[j], x_string[i]\n   \
    \     }\n        return x_string\n    }\n    // Shift x_string by shift.\n   \
    \ fmt.Printf(\"Shifting %s by %d\\n\", x_string, shift)\n    fmt.Printf(\"Shifted\
    \ x_string is %s\\n\", x_string[shift:] + x_string[:shift])\n    return x_string[shift:]\
    \ + x_string[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo892e7ex_test.go:23:13: cannot assign to x_string[i] (value of type byte)

    /tmp/tmpo892e7ex_test.go:23:26: cannot assign to x_string[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := make([]int,\
    \ 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n\
    \    }\n\n    start := len(digits) - shift % len(digits)\n    if start < 0 {\n\
    \        start += len(digits)\n    }\n\n    for _, digit := range digits[start:]\
    \ {\n        fmt.Printf(\"%d\", digit)\n    }\n    for _, digit := range digits[:start]\
    \ {\n        fmt.Printf(\"%d\", digit)\n    }\n    fmt.Println()\n\n    return\
    \ \"\"\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "010\n21\n79\n12\n11\n--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL:\
    \ TestCircular_Shift/test_num__0 (0.00s)\n        tmpts42rjkp_test.go:59: expected\
    \ '001', got ''\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n      \
    \  tmpts42rjkp_test.go:59: expected '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpts42rjkp_test.go:59: expected '79', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpts42rjkp_test.go:59: expected\
    \ '21', got ''\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n       \
    \ tmpts42rjkp_test.go:59: expected '11', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    x = %d, shift = %d\\n\", x, shift)\n    s := fmt.Sprintf(\"%d\", x)\n    fmt.Printf(\"\
    len(s) = %d\\n\", len(s))\n    if shift < 0 {\n        shift = -shift\n    }\n\
    \    shift = shift % len(s)\n    if shift == 0 {\n        return s\n    }\n  \
    \  if shift > len(s) {\n        s = reverse(s)\n        return s\n    }\n    x1\
    \ := s[:len(s)-shift]\n    x2 := s[len(s)-shift:]\n    fmt.Printf(\"x1 = %s, x2\
    \ = %s\\n\", x1, x2)\n    s = x2 + x1\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbw8pce5q_test.go:27:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_string(int_to_string(x))\n    }\n\
    \    digits := int_to_slice(x)\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[0])\n        digits = digits[1:]\n    }\n    return\
    \ slice_to_string(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygjr1nqm_test.go:16:16: undefined: num_digits

    /tmp/tmpygjr1nqm_test.go:17:16: undefined: reverse_string

    /tmp/tmpygjr1nqm_test.go:17:31: undefined: int_to_string

    /tmp/tmpygjr1nqm_test.go:19:15: undefined: int_to_slice

    /tmp/tmpygjr1nqm_test.go:24:12: undefined: slice_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if len(s) < shift {\n        reverse := make([]rune, len(s))\n \
    \       for i, v := range s {\n            reverse[len(s)-1-i] = v\n        }\n\
    \        return string(reverse)\n    }\n    return s[len(s)-shift:] + s[:len(s)-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_size := len(x_str)\n    if shift > x_size {\n\
    \        // Simply reverse the digits\n        x_rev := \"\"\n        for i :=\
    \ x_size - 1; i >= 0; i-- {\n            x_rev += x_str[i:i+1]\n        }\n  \
    \      return x_rev\n    } else {\n        return x_str[x_size - shift:x_size]\
    \ + x_str[0:x_size - shift]\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    circular_shift(%d, %d)\\n\", x, shift)\n    digits := []int{}\n    for x > 0 {\n\
    \        digits = append(digits, x % 10)\n        x /= 10\n    }\n    if shift\
    \ >= len(digits) {\n        // Just reverse the digits.\n        result := []int{}\n\
    \        for i := len(digits) - 1; i >= 0; i-- {\n            result = append(result,\
    \ digits[i])\n        }\n        digits = result\n    } else {\n        digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result\
    \ = result * 10 + digits[i]\n    }\n    return fmt.Sprintf(\"%d\", result)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "circular_shift(100, 2)\ncircular_shift(12, 2)\ncircular_shift(97, 8)\n\
    circular_shift(12, 1)\ncircular_shift(11, 101)\n--- FAIL: TestCircular_Shift (0.00s)\n\
    \    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp_qsdfyid_test.go:56:\
    \ expected '001', got '10'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n\
    \        tmp_qsdfyid_test.go:56: expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ = make([]int, 0)\n    var len int\n    var i int\n    var n int\n    var err\
    \ error\n\n    // Convert to digits\n    for n = x; n > 0; n /= 10 {\n       \
    \ digits = append(digits, n % 10)\n    }\n    len = len(digits)\n\n    // Reverse\
    \ digits\n    for i = 0; i < len / 2; i++ {\n        digits[i], digits[len - i\
    \ - 1] = digits[len - i - 1], digits[i]\n    }\n\n    // Circular shift the digits\
    \ to the right\n    if shift < len {\n        for i = 0; i < shift; i++ {\n  \
    \          digits = append(digits, digits[0])\n            digits = digits[1:]\n\
    \        }\n    }\n\n    // Convert digits to string\n    n = 0\n    for i = 0;\
    \ i < len; i++ {\n        n *= 10\n        n += digits[i]\n    }\n\n    // Convert\
    \ to string\n    return fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2xryxmez_test.go:20:9: err declared but not used

    /tmp/tmp2xryxmez_test.go:26:11: invalid operation: cannot call non-function len
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Shift\
    \ is negative\n    if shift < 0 {\n        shift = -shift\n    }\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    string_x := fmt.Sprintf(\"\
    %d\", x)\n    // Shift is too large\n    if shift >= len(string_x) {\n       \
    \ reverse_x := make([]rune, len(string_x))\n        for i, v := range string_x\
    \ {\n            reverse_x[len(string_x) - i - 1] = v\n        }\n        return\
    \ string(reverse_x)\n    }\n    return string_x[shift:] + string_x[:shift]\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmphjkm9wvw_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphjkm9wvw_test.go:52:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []rune(fmt.Sprintf(\"\
    %d\", x))\n    shift %= len(digits)\n    //fmt.Printf(\"digits = %v, shift = %d\\\
    n\", digits, shift)\n    reverse(digits)\n    reverse(digits[:shift])\n    reverse(digits[shift:])\n\
    \    return string(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmr36g6e_test.go:22:5: undefined: reverse

    /tmp/tmpmmr36g6e_test.go:23:5: undefined: reverse

    /tmp/tmpmmr36g6e_test.go:24:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    xStr := fmt.Sprintf(\"%d\", x)\n    xLen := len(xStr)\n    if\
    \ shift > xLen {\n        return reverse(xStr)\n    }\n\n    return xStr[xLen-shift:]\
    \ + xStr[:xLen-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78fy5pad_test.go:20:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    y := x %\
    \ 10\n    x = x / 10\n    for i := 0; i < shift; i++ {\n        y = y * 10 + x\
    \ % 10\n        x = x / 10\n    }\n    return fmt.Sprintf(\"%d\", y)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpb0uq1b4m_test.go:42: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpb0uq1b4m_test.go:42: expected\
    \ '12', got '210'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n    \
    \    tmpb0uq1b4m_test.go:42: expected '79', got '790000000'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpb0uq1b4m_test.go:42: expected '11', got '0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ \"\"\n    reversed := \"\"\n    i := 0\n    tmp := x\n    for tmp != 0 {\n \
    \       digits += string(tmp % 10 + 48)\n        tmp /= 10\n        i++\n    }\n\
    \    for j := 0; j < i; j++ {\n        if j + shift < i {\n            reversed\
    \ += string(digits[j + shift])\n        } else {\n            reversed += string(digits[j\
    \ + shift - i])\n        }\n    }\n    return reversed\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpbbuphml3_test.go:21:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x == 0\
    \ {\n        return \"0\"\n    }\n    digits := []rune(fmt.Sprintf(\"%d\", x))\n\
    \    n_digits := len(digits)\n    if shift >= n_digits {\n        for i := 0;\
    \ i < n_digits/2; i++ {\n            digits[i], digits[n_digits-i-1] = digits[n_digits-i-1],\
    \ digits[i]\n        }\n        return string(digits)\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        digits = append(digits, digits[0])\n        digits\
    \ = digits[1:]\n    }\n    return string(digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpp48lz009_test.go:51: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpp48lz009_test.go:51:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    n := len(s)\n    result := \"\"\n    if shift > n {\n        result\
    \ = reverse(s)\n    } else {\n        lhs := s[0:n-shift]\n        rhs := s[n-shift:n]\n\
    \        result = rhs + lhs\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuhbey29t_test.go:20:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if len(s) <= shift {\n        return string(s[0])\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp8zp9n50r_test.go:40: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp8zp9n50r_test.go:40:\
    \ expected '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp8zp9n50r_test.go:40: expected '79', got '9'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp8zp9n50r_test.go:40: expected '11', got '1'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Create\
    \ a string buffer to hold the result.\n    var result string\n    // Get the integer\
    \ value of the number of digits in x.\n    digits := len(fmt.Sprintf(\"%d\", x))\n\
    \    // If shift > number of digits, reverse x.\n    if shift > digits {\n   \
    \     x = x * -1\n    }\n    // Calculate how many digits in x will remain in\
    \ the same place.\n    num_same := digits - shift\n    // Split the x digits into\
    \ two halves.\n    left := x / power(10, num_same)\n    right := x % power(10,\
    \ num_same)\n    // Swap the two digits.\n    left, right = right, left\n    //\
    \ Join the x digits.\n    x = left + right\n    // Assign x to the result.\n \
    \   result = fmt.Sprintf(\"%d\", x)\n    // Return the result.\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppo3mklyi_test.go:27:17: undefined: power

    /tmp/tmppo3mklyi_test.go:28:18: undefined: power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // If shift\
    \ > number of digits, return digits reversed.\n    if shift > len(fmt.Sprintf(\"\
    %d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n    }\n\n    // Normalise\
    \ shift (0 <= shift < num of digits)\n    shift = shift % len(fmt.Sprintf(\"%d\"\
    , x))\n\n    // Take rightmost shift digits.\n    rightmost := fmt.Sprintf(\"\
    %d\", x)[len(fmt.Sprintf(\"%d\", x)) - shift:]\n\n    // Take leftmost shift digits.\n\
    \    leftmost := fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x)) - shift]\n\
    \n    return rightmost + leftmost\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpclq5vsbv_test.go:18:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074799
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x_str := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(x_str) {\n        return string(reverse([]rune(x_str)))\n\
    \    }\n    return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfwxocg8_test.go:21:23: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074799
