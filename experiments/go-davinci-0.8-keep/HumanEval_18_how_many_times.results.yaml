language: go_test.go
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    length := len(substring)\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i:i+length] == substring {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmppuvyz4fe_test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmppuvyz4fe_test.go:38\
    \ +0x37d\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074163
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpd4ybpp09_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpd4ybpp09_test.go:34\
    \ +0x37d\ntesting.tRunner(0xc000120340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074029
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    var result\
    \ int = 0\n    if len(myString) < len(substring) {\n        if myString == substring\
    \ {\n            return 1\n        }\n        return 0\n    }\n    for i:=0; i\
    \ < len(myString); i++ {\n        if myString[i] == substring[0] {\n         \
    \   if len(myString) - i < len(substring) {\n                if myString[i:] ==\
    \ substring {\n                    result += 1\n                }\n          \
    \  } else {\n                if myString[i:i+len(substring)] == substring {\n\
    \                    result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    if len(substring) == 0\
    \ {\n        return count\n    }\n    for i := 0; i <= len(myString) - len(substring);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count = 0\n    for i:=0; i<len(myString);\
    \ i++ {\n        if len(myString[i:]) < len(substring) {\n            break\n\
    \        }\n        if string(myString[i:i+len(substring)]) == substring {\n \
    \           count += 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if myString == \"\" || substring == \"\"\
    \ {\n        return 0\n    }\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if i < len(myString) - len(substring) + 1 {\n            found\
    \ := true\n            for j := 0; j < len(substring); j++ {\n               \
    \ if myString[i + j] != substring[j] {\n                    found = false\n  \
    \                  break\n                }\n            }\n            if found\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    var index int = 0\n    var count int = 0\n    for index = 0; index\
    \ < len(myString); index += 1 {\n        if myString[index] == substring[0] {\n\
    \            var temp_index int = index\n            var temp_count int = 0\n\
    \            for i := 0; i < len(substring); i += 1 {\n                if temp_index\
    \ < len(myString) && myString[temp_index] == substring[i] {\n                \
    \    temp_index += 1\n                    temp_count += 1\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ if temp_count == len(substring) {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    if len(substring) == 0\
    \ {\n        return count\n    }\n    for i := 0; i < len(myString); i++ {\n \
    \       if myString[i] == substring[0] {\n            for j := 0; j < len(substring);\
    \ j++ {\n                if (i + j) == len(myString) {\n                    break\n\
    \                }\n                if myString[i + j] != substring[j] {\n   \
    \                 break\n                }\n                if j == len(substring)\
    \ - 1 {\n                    count++\n                }\n            }\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074163
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if myString == \"\" || substring == \"\"\
    \ {\n        return 0\n    }\n\n    var occurences = 0\n    var j = 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        if myString[i] == substring[j] {\n\
    \            if j == len(substring) - 1 {\n                occurences++\n    \
    \            j = 0\n            } else {\n                j++\n            }\n\
    \        } else {\n            j = 0\n        }\n    }\n\n    return occurences\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpem4ajqrk_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074163
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    slen := len(substring)\n\
    \    for i:=0; i<len(myString); i++ {\n        if myString[i:i+slen] == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmppiurbiig_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmppiurbiig_test.go:35\
    \ +0x37d\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074163
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    x := len(myString)\n    y := len(substring)\n\
    \    var count int\n    for i := 0; i < x; i++ {\n        if x >= y && myString[i:i+y]\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpm7u25tln_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpm7u25tln_test.go:36\
    \ +0x37d\ntesting.tRunner(0xc000119040, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074163
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for strings.Contains(myString,\
    \ substring) {\n        count++\n        myString = strings.Replace(myString,\
    \ substring, \"\", 1)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpin57wl8m_test.go:17:9: undefined: strings

    /tmp/tmpin57wl8m_test.go:19:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i <= len(myString) - len(substring);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074163
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    idx := 0\n    for idx !=\
    \ -1 {\n        idx = strings.Index(myString, substring)\n        if idx != -1\
    \ {\n            count += 1\n            myString = myString[idx+1:]\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n \
    \ candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_re4tns_test.go:19:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074163
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    // if len(substring) == 0 {\n    //   \
    \  return 0\n    // }\n\n    return strings.Count(myString, substring)\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnbvdsqt_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074163
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    lMyString := len(myString)\n    lSubstring\
    \ := len(substring)\n    times := 0\n    for i := 0; i < lMyString - lSubstring\
    \ + 1; i++ {\n        if myString[i:i+lSubstring] == substring {\n           \
    \ times++\n        }\n    }\n    return times\n}\n\ntype testCase \nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo27m3zmf_test.go:27:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    result :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                m :=\
    \ 1\n                for j := 1; j < len(substring); j++ {\n                 \
    \   if myString[i + j] == substring[j] {\n                        m++\n      \
    \              }\n                }\n                if m == len(substring) {\n\
    \                    result++\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var answer int = 0\n    var lenSubString\
    \ int = len(substring)\n    var lenString int = len(myString)\n    for i := 0;\
    \ i < lenString; i++ {\n        if lenString - i < lenSubString {\n          \
    \  return answer\n        }\n        if myString[i] == substring[0] {\n      \
    \      var isMatch bool = true\n            for j := 1; j < lenSubString; j++\
    \ {\n                if myString[i+j] != substring[j] {\n                    isMatch\
    \ = false\n                    break\n                }\n            }\n     \
    \       if isMatch {\n                answer++\n            }\n        }\n   \
    \ }\n    return answer\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074163
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if len(myString) < i + len(substring) {\n            break\n\
    \        }\n        if myString[i : i + len(substring)] == substring {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074163
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return how_many_times_tail(myString, substring,\
    \ 0)\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplum1984o_test.go:16:12: undefined: how_many_times_tail

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074163
