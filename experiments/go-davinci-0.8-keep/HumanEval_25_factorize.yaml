name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5,\
  \ 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    out := []int{}\n    current := n\n    divisor := 2\n    for divisor\
    \ <= current {\n        if current % divisor == 0 {\n            out = append(out,\
    \ divisor)\n            current = current / divisor\n        } else {\n      \
    \      divisor += 1\n        }\n    }\n    return out\n}\n", "    f := make([]int,\
    \ 0)\n    for i := 2; i < n; i++ {\n        for n % i == 0 {\n            f =\
    \ append(f, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n       \
    \ f = append(f, n)\n    }\n    return f\n}\n", "    if n < 0 {\n        return\
    \ []int{}\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n ==\
    \ 1 {\n        return []int{1}\n    }\n    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        for ; n % i == 0; n /= i {\n            factors = append(factors,\
    \ i)\n        }\n    }\n    return factors\n}\n", "    output := []int{}\n   \
    \ for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            output = append(output,\
    \ i)\n            n = n / i\n            i = 1\n        }\n    }\n    return output\n\
    }\n", "    var factors []int\n    for d := 2; d * d <= n; d++ {\n        for n\
    \ % d == 0 {\n            factors = append(factors, d)\n            n /= d\n \
    \       }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n", "    var factors []int\n    for ; n % 2 == 0; n /=\
    \ 2 {\n        factors = append(factors, 2)\n    }\n    for i := 3; i <= n; i\
    \ += 2 {\n        for ; n % i == 0; n /= i {\n            factors = append(factors,\
    \ i)\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n  \
    \  d := 2\n    for n > 1 {\n        for n % d == 0 {\n            factors = append(factors,\
    \ d)\n            n /= d\n        }\n        d += 1\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for d :=\
    \ 2; d < n; d++ {\n        for n % d == 0 {\n            factors = append(factors,\
    \ d)\n            n /= d\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    var res []int\n  \
    \  for i := 2; i * i <= n; i++ {\n        for n % i == 0 {\n            res =\
    \ append(res, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n     \
    \   res = append(res, n)\n    }\n    return res\n}\n", "\tvar res []int\n\ti :=\
    \ 2\n\tfor i <= n {\n\t\tif n % i == 0 {\n\t\t\tres = append(res, i)\n\t\t\tn\
    \ = n / i\n\t\t} else {\n\t\t\ti += 1\n\t\t}\n\t}\n\treturn res\n}\n", "    if\
    \ n == 1 {\n        return []int{}\n    }\n    var factors []int\n    div := 2\n\
    \    for n > 1 {\n        for n % div == 0 {\n            factors = append(factors,\
    \ div)\n            n /= div\n        }\n        div++\n    }\n    return factors\n\
    }\n", "    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    result := []int{}\n    for\
    \ _, p := range primes {\n        if n % p == 0 {\n            result = append(result,\
    \ p)\n            n = n / p\n        }\n    }\n    return result\n}\n", "    primeFactors\
    \ := []int{}\n    potentialPrime := 2\n    for n > 1 {\n        for n % potentialPrime\
    \ == 0 {\n            primeFactors = append(primeFactors, potentialPrime)\n  \
    \          n /= potentialPrime\n        }\n        potentialPrime += 1\n    }\n\
    \    return primeFactors\n}\n", "    if n < 2 {\n        return []int{}\n    }\n\
    \    factors := []int{}\n    factor := 2\n    for n != 1 {\n        if n % factor\
    \ == 0 {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    var res []int\n    for i := 2; i <= n; i++ {\n        for n % i ==\
    \ 0 {\n            res = append(res, i)\n            n /= i\n        }\n    }\n\
    \    return res\n}\n", "    var factors []int\n    var divisor int = 2\n    for\
    \ {\n        for n % divisor == 0 {\n            factors = append(factors, divisor)\n\
    \            n /= divisor\n        }\n        if n <= 1 {\n            break\n\
    \        }\n        divisor++\n    }\n    return factors\n}\n", "    // n = 2^a\
    \ * 3^b * 5^c * ...\n    // 2^a = n / 2^a\n    // 3^b = n / 2^a / 3^b\n    //\
    \ ...\n    factors := []int{}\n    for i := 2; i * i <= n; i++ {\n        for\
    \ n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n", "    if n == 1 {\n        return []int{}\n    }\n \
    \   // Find smallest prime factor\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            // Smallest prime factor is i\n            // Solve\
    \ subproblem of factorizing n/i\n            factors := factorize(n / i)\n   \
    \         // Append i to front of the answer\n            return append([]int{i},\
    \ factors...)\n        }\n    }\n    // If n is prime\n    return []int{n}\n}\n",
  "    primeFactors := []int{}\n    for n > 1 {\n        // TODO: Add code\n    }\n\
    \    return primeFactors\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
