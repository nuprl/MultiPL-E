name: HumanEval_66_digitSum
language: go_test.go
prompt: "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Task\n// Write a function that takes a string as input and returns the sum of\
  \ the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") =>\
  \ 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"\
  helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\n\
  func digitSum(s string) int {\n"
tests: "func TestDigitsum(t *testing.T) {\n  candidate := digitSum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abAB\"\
  ), expected: 131 },\n     { actual: candidate(\"abcCd\"), expected: 67 },\n    \
  \ { actual: candidate(\"helloE\"), expected: 69 },\n     { actual: candidate(\"\
  woArBld\"), expected: 131 },\n     { actual: candidate(\"aAaaaXa\"), expected: 153\
  \ },\n     { actual: candidate(\" How are yOu?\"), expected: 151 },\n     { actual:\
  \ candidate(\"You arE Very Smart\"), expected: 327 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sum := 0\n    for _, ch := range s {\n        if ch >= 'A' && ch\
    \ <= 'Z' {\n            sum += int(ch)\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n  \
    \          sum += int(c)\n        }\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    for _, r := range s {\n        // ASCII codes, upper characters are in\
    \ the range of [65, 90]\n        if r >= 65 && r <= 90 {\n            sum += int(r)\n\
    \        }\n    }\n    return sum\n}\n", "    sum := 0\n    for _, v := range\
    \ s {\n        if v >= 65 && v <= 90 {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n", "    sum := 0\n    if len(s) == 0 {\n        return\
    \ sum\n    }\n\n    for _, v := range s {\n        if v >= 65 && v <= 90 {\n \
    \           sum += int(v)\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ int\n    for _, char := range s {\n        if char >= 'A' && char <= 'Z' {\n\
    \            sum += int(char)\n        }\n    }\n    return sum\n}\n", "    sum\
    \ := 0\n    for _, i := range s {\n        if i >= 65 && i <= 90 {\n         \
    \   sum += int(i)\n        }\n    }\n    return sum\n}\n", "    r := 0\n    for\
    \ _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            r += int(c)\n\
    \        }\n    }\n    return r\n}\n", "    s = upperCase(s)\n    return asciiToSum(s)\n\
    }\n", "    var sum int\n    for _, val := range s {\n        if val > 64 && val\
    \ < 91 {\n            sum += int(val)\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for _, v := range s {\n        if v >= 65 && v <= 90 {\n    \
    \        sum += int(v)\n        }\n    }\n    return sum\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    sum := 0\n    for _, char := range s {\n    \
    \    if char >= 'A' && char <= 'Z' {\n            sum += int(char)\n        }\n\
    \    }\n    return sum\n}\n", "    var count int = 0\n    for _, v := range s\
    \ {\n        if v >= 65 && v <= 90 {\n            count += int(v)\n        }\n\
    \    }\n    return count\n}\n", "    var sum int\n    for _, r := range s {\n\
    \        if r >= 'A' && r <= 'Z' {\n            sum += int(r)\n        }\n   \
    \ }\n    return sum\n}\n", "    var sSum int\n    for _, sCh := range s {\n  \
    \      if (sCh >= 65 && sCh <= 90) {\n            sSum += int(sCh)\n        }\n\
    \    }\n    return sSum\n}\n\ntype Test ", "    sum := 0\n    for _, v := range\
    \ s {\n        if v > 64 && v < 91 {\n            sum += int(v)\n        }\n \
    \   }\n    return sum\n}\n", "    sum := 0\n    for _, r := range s {\n      \
    \  if r >= 'A' && r <= 'Z' {\n            sum += int(r)\n        }\n    }\n  \
    \  return sum\n}\n", "    // write your code here\n    var sum int\n    for _,\
    \ v := range s {\n        if v >= 65 && v <= 90 {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n", "    sum := 0\n    for _, v := range\
    \ s {\n        if v >= 65 && v <= 90 {\n            sum += int(v)\n        }\n\
    \    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
