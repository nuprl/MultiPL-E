name: HumanEval_75_is_multiply_prime
language: go_test.go
prompt: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
  \ is_multiply_prime(a int) bool {\n"
tests: "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual:\
  \ candidate(30), expected: true },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
  \ expected: true },\n     { actual: candidate(105), expected: true },\n     { actual:\
  \ candidate(126), expected: false },\n     { actual: candidate(729), expected: false\
  \ },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001),\
  \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return true\n}\n", "    return true\n}\n", "    var cond = false\n\
    \    // Write code here...\n    for i := 2; i <= a; i++ {\n        for j := 2;\
    \ j <= a; j++ {\n            for k := 2; k <= a; k++ {\n                if a ==\
    \ i * j * k {\n                    cond = true\n                }\n          \
    \  }\n        }\n    }\n    // End of code\n    return cond\n}\n", "    // Write\
    \ your code here\n    return false\n}\n", "\tfor i := 1; i <= a; i++ {\n\t\tif\
    \ a % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "    for\
    \ i := 2; i < a; i++ {\n        for j := 2; j < a; j++ {\n            for k :=\
    \ 2; k < a; k++ {\n                if (i * j * k) == a {\n                   \
    \ return true\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    // your code here\n    return false\n}\n", "    // Write your\
    \ code here\n    return false\n}\n", "    // Write your code here\n    var primes\
    \ []int\n    for i := 2; i < 100; i++ {\n        if is_prime(i) {\n          \
    \  primes = append(primes, i)\n        }\n    }\n    var numbers []int\n    for\
    \ i := 0; i < len(primes); i++ {\n        if a % primes[i] == 0 {\n          \
    \  numbers = append(numbers, primes[i])\n        }\n    }\n    if len(numbers)\
    \ >= 3 {\n        return true\n    }\n    return false\n}\n", "\treturn false\n\
    }\n", "    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            for\
    \ j := 2; j < a; j++ {\n                if a % j == 0 {\n                    for\
    \ k := 2; k < a; k++ {\n                        if a % k == 0 {\n            \
    \                if a == i * j * k {\n                                return true\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false\n}\n",
  "    // YOUR CODE HERE\n    return false\n}\n", "    // Write your code here\n \
    \   // To print results to the standard output you can use fmt.Println()\n   \
    \ // Example: fmt.Println(\"Hello world!\")\n    //fmt.Println(a)\n    if a <=0\
    \ {return false}\n    primes := []int{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \    for _,v := range primes {\n        if a%v == 0 && is_multiply_prime(a/v)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    for\
    \ i := 2; i <= a; i++ {\n        if a % i == 0 {\n            a /= i\n       \
    \     if a == 1 {\n                return true\n            }\n            i--\n\
    \        }\n    }\n    return false\n}\n", "    return false\n}\n", "    var fact\
    \ int = 1\n    for i := 2; i <= a; i++ {\n        if a % i == 0 {\n          \
    \  fact++\n            a = a / i\n            i--\n        }\n        if fact\
    \ > 3 {\n            return false\n        }\n    }\n    if fact == 3 {\n    \
    \    return true\n    }\n    return false\n}\n", "    if a < 6 {\n        return\
    \ false\n    }\n    i := 2\n    for i < a {\n        if a % i == 0 {\n       \
    \     a = a / i\n            continue\n        }\n        i++\n    }\n    return\
    \ true\n}\n", "    if a < 1 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    for i := 2; i <= a; i++ {\n        if a % i ==\
    \ 0 {\n            return is_multiply_prime(a / i)\n        }\n    }\n    return\
    \ false\n}\n", "    //YOUR CODE\n    return false\n}\n", "    // Write your code\
    \ here\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
