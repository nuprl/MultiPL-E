name: HumanEval_46_fib4
language: go_test.go
prompt: "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined\
  \ as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) ->\
  \ 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write\
  \ a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
  // 14\nfunc fib4(n int) int {\n"
tests: "func TestFib4(t *testing.T) {\n  candidate := fib4\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(5), expected: 4 },\n     { actual: candidate(8), expected:\
  \ 28 },\n     { actual: candidate(10), expected: 104 },\n     { actual: candidate(12),\
  \ expected: 386 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return 0\n}\n", "    if n < 0 {\n        return 0\n    }\n    if\
    \ n < 2 {\n        return n\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i :=\
    \ 2; i < n; i++ {\n        e := a + b + c + d\n        a, b, c, d = b, c, d, e\n\
    \    }\n    return a + b + c + d\n}\n", "    if n < 4 {\n        return 0\n  \
    \  }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a,\
    \ b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n}\n", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 1\n    }\n    var n1, n2, n3, n4, n5 int\n    n1\
    \ = 0\n    n2 = 0\n    n3 = 2\n    n4 = 0\n    n5 = 1\n    for i := 5; i <= n;\
    \ i++ {\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n\
    \        n5 = n1 + n2 + n3 + n4\n    }\n    return n5\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for n >= 3 {\n   \
    \     a, b, c, d = b, c, d, a+b+c+d\n        n--\n    }\n    return d\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    a := 0\n    b := 0\n    c := 2\n    d := 0\n    for i := 4; i\
    \ <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n}\n",
  "    if n < 3 {\n        return n\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 3; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n\
    \    return d\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    if n == 0\
    \ {\n        return 0\n    }\n\n    if n == 1 {\n        return 0\n    }\n\n \
    \   if n == 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 0\n\
    \    }\n\n    var sum int\n    var i int\n\n    a := 0\n    b := 0\n    c := 2\n\
    \    d := 0\n\n    for i = 4; i <= n; i++ {\n        sum = a + b + c + d\n   \
    \     a = b\n        b = c\n        c = d\n        d = sum\n    }\n\n    return\
    \ sum\n}\n", "    var last5 [5]int\n    last5[0] = 0\n    last5[1] = 0\n    last5[2]\
    \ = 2\n    last5[3] = 0\n    last5[4] = 0\n    for i := 5; i <= n; i++ {\n   \
    \     last5[4] = last5[0] + last5[1] + last5[2] + last5[3]\n        last5[0] =\
    \ last5[1]\n        last5[1] = last5[2]\n        last5[2] = last5[3]\n       \
    \ last5[3] = last5[4]\n    }\n    return last5[4]\n}\n", "    return 0\n}\n",
  "    if n < 4 {\n        return n\n    }\n    var n0, n1, n2, n3 int\n    n0, n1,\
    \ n2, n3 = 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        tmp := n0 + n1 +\
    \ n2 + n3\n        n0 = n1\n        n1 = n2\n        n2 = n3\n        n3 = tmp\n\
    \    }\n    return n0 + n1 + n2 + n3\n}\n", "    switch n {\n    case 0:\n   \
    \     return 0\n    case 1:\n        return 0\n    case 2:\n        return 2\n\
    \    case 3:\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i\
    \ := 4; i <= n; i++ {\n        e := a + b + c + d\n        a, b, c, d = b, c,\
    \ d, e\n    }\n    return d\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    n1 := 0\n    n2 := 0\n \
    \   n3 := 2\n    n4 := 0\n    n5 := 0\n    for i := 4; i <= n; i++ {\n       \
    \ n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n\
    \        n4 = n5\n    }\n    return n5\n}\n", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    first := 0\n\
    \    second := 0\n    third := 2\n    fourth := 0\n    fifth := 0\n\n    for i\
    \ := 4; i <= n; i++ {\n        fifth = first + second + third + fourth\n     \
    \   first = second\n        second = third\n        third = fourth\n        fourth\
    \ = fifth\n    }\n\n    return fifth\n}\n", "    if n < 2 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", " \
    \   // TODO\n    return n\n}\n", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n  \
    \  } else if n == 3 {\n        return 0\n    } else {\n        return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n", "\tvar result int = 0\n\t\
    var i int = 0\n\tvar arrayA = []int{0,0,2,0}\n\tvar tmp int = 0\n\tif n <= 3 {\n\
    \t\treturn arrayA[n]\n\t}\n\tfor i = 4; i <= n; i++ {\n\t\ttmp = arrayA[0]\n\t\
    \tarrayA[0] = arrayA[1]\n\t\tarrayA[1] = arrayA[2]\n\t\tarrayA[2] = arrayA[3]\n\
    \t\tarrayA[3] = tmp + arrayA[1] + arrayA[2] + arrayA[3]\n\t}\n\tresult = arrayA[3]\n\
    \treturn result\n}\n", "    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n\
    \    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c,\
    \ d = b, c, d, a+b+c+d\n    }\n    return d\n}\n", "    if n < 3 {\n        return\
    \ n\n    }\n    val0, val1, val2, val3 := 0, 0, 2, 0\n    for i := 3; i <= n;\
    \ i++ {\n        val3 = val0 + val1 + val2 + val3\n        val0, val1, val2 =\
    \ val1, val2, val3\n    }\n    return val3\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
