name: HumanEval_122_add_elements
language: go_test.go
prompt: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a non-empty array of integers arr and an integer k, return\n// the sum\
  \ of the elements with at most two digits from the first k elements of arr.\n//\
  \ Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum\
  \ of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
  func add_elements(arr []int, k int) int {\n"
tests: "func TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
  \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
  \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
  \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
  \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var sum int = 0\n    for i:=0; i<k; i++ {\n        if (arr[i] >=\
    \ 10 && arr[i] < 100) {\n            sum += arr[i]\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n        if arr[i] <\
    \ 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n", " \
    \   var sum int\n    for i := 0; i < k; i++ {\n        if arr[i] >= 0 && arr[i]\
    \ < 10 {\n            sum += arr[i]\n        } else if arr[i] >= 10 && arr[i]\
    \ < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for i := 0; i < k; i++ {\n        value := arr[i]\n        if\
    \ value > 99 {\n            sum += value / 100\n        } else if value > 9 {\n\
    \            sum += value / 10\n        } else {\n            sum += value\n \
    \       }\n    }\n    return sum\n}\n", "    s := 0\n    for i := 0; i < k; i++\
    \ {\n        if arr[i] < 10 {\n            s += arr[i]\n        } else if arr[i]\
    \ < 100 {\n            s += arr[i] % 10 + arr[i] / 10\n        } else {\n    \
    \        s += arr[i] % 10 + arr[i] / 10 % 10 + arr[i] / 100\n        }\n    }\n\
    \    return s\n}\n", "    result := 0\n    for i := 0; i < k; i++ {\n        if\
    \ arr[i] > 99 {\n            continue\n        }\n        result += arr[i]\n \
    \   }\n    return result\n}\n", "    var ret int\n    for i := 0; i < k; i++ {\n\
    \        if arr[i] < 100 {\n            ret += arr[i]\n        }\n    }\n    return\
    \ ret\n}\n", "    var result int\n    for i := 0; i < k; i++ {\n        if arr[i]\
    \ <= 99 {\n            result += arr[i]\n        }\n    }\n    return result\n\
    }\n", "    // Runtime: O(n)\n    sum := 0\n    for i := 0; i < k; i++ {\n    \
    \    if arr[i] > 99 {\n            sum += 100\n        } else {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n", "    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] >= 10 && arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n", "    var result int\n   \
    \ var count int\n    for _, val := range arr {\n        if val > 99 {\n      \
    \      continue\n        }\n        result += val\n        count++\n        if\
    \ count == k {\n            break\n        }\n    }\n    return result\n}\n",
  "    sum := 0\n    for i := 0; i < k; i++ {\n        if arr[i] > 99 {\n        \
    \    sum += arr[i] / 100\n        } else if arr[i] > 9 {\n            sum += arr[i]\
    \ / 10\n        } else {\n            sum += arr[i]\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n        if arr[i] >\
    \ 9 && arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n    return\
    \ sum\n}\n", "    var sum int = 0\n    for i:=0; i<k; i++ {\n        if arr[i]\
    \ > 99 {\n            continue\n        }\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n", "    if len(arr) == 0 {\n        return 0\n    }\n    if k > len(arr)\
    \ {\n        k = len(arr)\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n\
    \        if arr[i] > 9 && arr[i] < 100 {\n            sum += arr[i]\n        }\n\
    \    }\n    return sum\n}\n", "    sum := 0\n    for _, v := range arr[:k] {\n\
    \        if v < 10 {\n            sum += v\n        } else if v >= 10 && v < 100\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    for i := 0; i < k; i++ {\n        // I don't understand why < 100 or\
    \ < 1000 doesn't work here\n        if arr[i] < 10 || arr[i] < 100 {\n       \
    \     sum += arr[i]\n        }\n    }\n    return sum\n}\n", "    var ret int\n\
    \    if k <= 0 {\n        return ret\n    }\n    for i := 0; i < k; i++ {\n  \
    \      if arr[i] < 10 {\n            ret += arr[i]\n        } else if arr[i] <\
    \ 100 {\n            ret += arr[i]\n        }\n    }\n    return ret\n}\n", " \
    \   var sum int\n    for i := 0; i < k; i++ {\n        if arr[i] >= 10 && arr[i]\
    \ < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for _, v := range arr[:k] {\n        n := v\n        digit :=\
    \ 0\n        for n > 0 {\n            n /= 10\n            digit++\n        }\n\
    \        if digit < 3 {\n            sum += v\n        }\n    }\n    return sum\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
