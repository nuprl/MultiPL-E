language: go_test.go
name: HumanEval_106_f
results:
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            factorial := 1\n            for j := 1; j <= i; j++ {\n   \
    \             factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            result =\
    \ append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // Write your code here.\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08oe9bc_test.go:17:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075176
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    var res []int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            res = append(res, factorial(i))\n        } else {\n            res\
    \ = append(res, sum(i))\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9bo_3ys1_test.go:19:31: undefined: factorial

    /tmp/tmp9bo_3ys1_test.go:21:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // your code here\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpx1v9r3i6_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpx1v9r3i6_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpx1v9r3i6_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpx1v9r3i6_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    l := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            s := 1\n            for j := 1; j <= i; j++ {\n           \
    \     s *= j\n            }\n            l[i] = s\n        } else {\n        \
    \    l[i] = (i + 1) * i / 2\n        }\n    }\n    return l\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4moin4ud_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4moin4ud_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4moin4ud_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpiuj0jxbh_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpiuj0jxbh_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpiuj0jxbh_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpiuj0jxbh_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // FIXME\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4g_7nhnz_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4g_7nhnz_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4g_7nhnz_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4g_7nhnz_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // Iteration:\n    // r := make([]int, n)\n    // for i := 1; i <= n;\
    \ i++ {\n    //     if i % 2 == 0 {\n    //         r[i-1] = factorial(i)\n  \
    \  //     } else {\n    //         r[i-1] = sum(i)\n    //     }\n    // }\n \
    \   // return r\n\n    // Recursion:\n    r := make([]int, n)\n    f_rec(1, n,\
    \ r)\n    return r\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8p6zhme_test.go:29:5: undefined: f_rec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return []int{0}\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpc8ojuil7_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n\
    \        tmpc8ojuil7_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__2\
    \ (0.00s)\n        tmpc8ojuil7_test.go:35: expected '[%!s(int=1)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpc8ojuil7_test.go:35: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4wrmod00_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4wrmod00_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i % 2 == 0\
    \ {\n\t\t\tresult[i] = 1\n\t\t\tfor j := 1; j <= i; j++ {\n\t\t\t\tresult[i] *=\
    \ j\n\t\t\t}\n\t\t} else {\n\t\t\tresult[i] = i * (i + 1) / 2\n\t\t}\n\t}\n\t\
    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyz_f7eew_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyz_f7eew_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyz_f7eew_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    var res []int\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            res = append(res, factorial(i))\n        } else {\n            res\
    \ = append(res, sum(i))\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9bo_3ys1_test.go:19:31: undefined: factorial

    /tmp/tmp9bo_3ys1_test.go:21:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // Write your code here\n    m := make([]int, n)\n    for i := 1; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            m[i-1] = factorial(i)\n     \
    \   } else {\n            m[i-1] = sum(i)\n        }\n    }\n    return m\n}\n\
    \nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm3brmmcg_test.go:20:22: undefined: factorial

    /tmp/tmpm3brmmcg_test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075176
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n          \
    \  res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj25iv5ld_test.go:19:24: undefined: factorial

    /tmp/tmpj25iv5ld_test.go:21:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    // TODO Write your code here\n    panic(\"Not yet implemented\")\n}\n\
    \nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: Not yet implemented [recovered]\n\tpanic:\
    \ Not yet implemented\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpkukf6dcf_test.go:17\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpkukf6dcf_test.go:27 +0x27\n\
    testing.tRunner(0xc0001321a0, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n          \
    \  res[i-1] = sumFrom1To(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2glkr93_test.go:19:24: undefined: factorial

    /tmp/tmpr2glkr93_test.go:21:24: undefined: sumFrom1To

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075176
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        var sum int\n\
    \        if i % 2 == 0 {\n            sum = 1\n            for k := 1; k <= i;\
    \ k++ {\n                sum *= k\n            }\n        } else {\n         \
    \   sum = 0\n            for k := 1; k <= i; k++ {\n                sum += k\n\
    \            }\n        }\n        a[i-1] = sum\n    }\n    return a\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075176
