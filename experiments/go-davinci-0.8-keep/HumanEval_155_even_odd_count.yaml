name: HumanEval_155_even_odd_count
language: go_test.go
prompt: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123)\
  \ ==> (1, 2)\nfunc even_odd_count(num int) []interface{} {\n"
tests: "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
  \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
  \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
  \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
  \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n  \
  \   { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    var even, odd int\n    numCopy := num\n\
    \    for {\n        last := numCopy % 10\n        if last % 2 == 0 {\n       \
    \     even++\n        } else {\n            odd++\n        }\n        numCopy\
    \ /= 10\n        if numCopy == 0 {\n            break\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    if num < 0 {\n        num = num * -1\n\
    \    }\n    even := 0\n    odd := 0\n    var digits []int\n    for num > 0 {\n\
    \        digits = append(digits, num % 10)\n        num = num / 10\n    }\n  \
    \  for _, value := range digits {\n        if value % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    // Your code here\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    even, odd := 0, 0\n    if num < 0 {\n        num = -num\n  \
    \  }\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n     \
    \   } else {\n            odd++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    even := 0\n    odd := 0\n    if num < 0\
    \ {\n        num = num * -1\n    }\n    for num > 0 {\n        if num % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    \
    \    num = num / 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even\
    \ := 0\n    odd := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", num)); i++ {\n\
    \        digit := int(fmt.Sprintf(\"%d\", num)[i]) - int('0')\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n\
    \    for num != 0 {\n        if num % 2 == 0 {\n            even += 1\n      \
    \  } else {\n            odd += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    var even, odd int\n    for num != 0 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\ntype testCase ", "    var even, odd int\n    if num < 0 {\n        num =\
    \ num * -1\n    }\n    for i := 0; i < 6; i++ {\n        if (num % 10) % 2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \      num = num / 10\n    }\n    return []interface{}{even, odd}\n}\n", "   \
    \ even := 0\n    odd := 0\n    for num != 0 {\n        if num % 2 == 0 {\n   \
    \         even += 1\n        } else {\n            odd += 1\n        }\n     \
    \   num /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    var countEven,\
    \ countOdd int\n    numString := fmt.Sprintf(\"%d\", num)\n    if num < 0 {\n\
    \        numString = numString[1:]\n    }\n    for _, c := range numString {\n\
    \        if c == '0' || c == '2' || c == '4' || c == '6' || c == '8' {\n     \
    \       countEven++\n        } else {\n            countOdd++\n        }\n   \
    \ }\n    return []interface{}{countEven, countOdd}\n}\n", "    // Write your code\
    \ here\n    return nil\n}\n", "    return []interface{}{nil, nil}\n}\n", "   \
    \ // Your code here.\n}\n", "    even := 0\n    odd := 0\n    for num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    var even, odd int\n    for _, num := range fmt.Sprintf(\"%d\"\
    , num) {\n        if num % 2 == 0 {\n            even++\n        } else {\n  \
    \          odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n",
  "    even, odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n        \
    \    even++\n        } else {\n            odd++\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\ntype TestCase ", "    // WRITE\
    \ CODE HERE\n    return nil\n}\n", "    var result []interface{}\n    result =\
    \ append(result, 0)\n    result = append(result, 0)\n    for _, char := range\
    \ fmt.Sprintf(\"%d\", num) {\n        if char == '-' {\n            continue\n\
    \        }\n        digit, _ := strconv.Atoi(string(char))\n        if digit %\
    \ 2 == 0 {\n            result[0] = result[0].(int) + 1\n        } else {\n  \
    \          result[1] = result[1].(int) + 1\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
