name: HumanEval_108_count_nums
language: go_test.go
prompt: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function count_nums which takes an array of integers and returns\n//\
  \ the number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) ==\
  \ 1\n// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr []int) int {\n"
tests: "func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
  \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
  \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
  \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
  \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n    \
  \ { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
  \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    ans := 0\n    for _, n := range arr {\n        sum := 0\n     \
    \   for n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n\
    \        if sum > 0 {\n            ans++\n        }\n    }\n    return ans\n}\n\
    \ntype TestCase ", "    var result int = 0\n    for _,v := range arr {\n     \
    \   if v != 0 {\n            result += calcSum(v)\n        }\n    }\n    return\
    \ result\n}\n", "    sum := 0\n    for _, i := range arr {\n        digits :=\
    \ 0\n        if i < 0 {\n            i = -i\n        }\n        for i > 0 {\n\
    \            digits += i % 10\n            i /= 10\n        }\n        if digits\
    \ > 0 {\n            sum++\n        }\n    }\n    return sum\n}\n", "    count\
    \ := 0\n    for _, elem := range arr {\n        sum := 0\n        if elem == 0\
    \ {\n            continue\n        } else if elem < 0 {\n            elem = -elem\n\
    \        }\n        for elem > 0 {\n            sum += elem % 10\n           \
    \ elem /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    if arr == nil {\n        return 0\n    }\n\
    \    count := 0\n    for _, item := range arr {\n        var sum int\n       \
    \ for item != 0 {\n            sum += item % 10\n            item /= 10\n    \
    \    }\n        if sum > 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    // \u5148\u904D\u5386\u4E00\u904D\uFF0C\u627E\u51FA\u6700\u5927\
    \u6570\u5B57\uFF0C\u540E\u9762\u7684\u4F4D\u6570\u6709\u591A\u5C11\uFF0C\u5C31\
    \u5206\u914D\u591A\u5C11\u4F4D\u7684\u6570\u7EC4\n    max := 0\n    for _, v :=\
    \ range arr {\n        // \u5982\u679C\u662F\u8D1F\u6570\uFF0C\u5219\u9700\u8981\
    \u7FFB\u8F6C\u4E3A\u6B63\u6570\n        if v < 0 {\n            v = -v\n     \
    \   }\n        if v > max {\n            max = v\n        }\n    }\n    // \u5BF9\
    max\u8FDB\u884C\u4F4D\u6570\u7EDF\u8BA1\n    bit := 0\n    for max > 0 {\n   \
    \     max = max / 10\n        bit++\n    }\n    // \u5206\u914Dbit\u4F4D\u7684\
    \u6570\u7EC4\uFF0C\u7528\u4E8E\u5B58\u50A8\u7ED3\u679C\n    var result [10]int\n\
    \    // \u904D\u5386\u6570\u7EC4\uFF0C\u5C06\u6BCF\u4E2A\u6570\u5B57\u7684\u6BCF\
    \u4E00\u4F4D\u4E0Eresult\u4E2D\u7684\u6570\u5B57\u76F8\u52A0\n    for _, v :=\
    \ range arr {\n        // \u9996\u5148\u5224\u65AD\u6B63\u8D1F\n        if v <\
    \ 0 {\n            v = -v\n        }\n        // \u904D\u5386\u4F4D\u6570\n  \
    \      for i := 0; i < bit; i++ {\n            // \u53D6\u51FA\u8BE5\u4F4D\u7684\
    \u6570\u5B57\n            x := v % 10\n            v = v / 10\n            //\
    \ \u5C06\u8BE5\u4F4D\u6570\u5B57\u5B58\u50A8\u5230\u5BF9\u5E94\u6570\u7EC4\u7684\
    \u4F4D\u7F6E\n            result[i] += x\n        }\n    }\n    // \u904D\u5386\
    result\u6570\u7EC4\uFF0C\u7EDF\u8BA1\u6BCF\u4E00\u4F4D\u7684\u548C\u662F\u5426\
    \u5927\u4E8E0\n    count := 0\n    for _, v := range result {\n        if v >\
    \ 0 {\n            count++\n        }\n    }\n", "    sum := 0\n    for _, num\
    \ := range arr {\n        digits := 0\n        if num < 0 {\n            num =\
    \ -num\n        }\n        for num > 0 {\n            digits += num % 10\n   \
    \         num /= 10\n        }\n        if digits > 0 {\n            sum++\n \
    \       }\n    }\n    return sum\n}\n", "    count := 0\n    for _, num := range\
    \ arr {\n        s := fmt.Sprintf(\"%d\", num)\n        sum := 0\n        for\
    \ _, c := range s {\n            sum += int(c - '0')\n        }\n        if sum\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n", "    var\
    \ count int = 0\n    for _, v := range arr {\n        var sum int = 0\n      \
    \  for _, d := range abs(v) {\n            sum += d\n        }\n        if sum\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, a := range arr {\n        if a < 0 {\n            a = -a\n\
    \        }\n        for a > 0 {\n            count += a % 10\n            a /=\
    \ 10\n        }\n    }\n    return count\n}\n", "    var cnt int\n    for _, v\
    \ := range arr {\n        v_cnt := 0\n        if v < 0 {\n            v = -v\n\
    \        }\n        for v > 0 {\n            v_cnt += v % 10\n            v /=\
    \ 10\n        }\n        if v_cnt > 0 {\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n", "    var count int\n    for _, i := range arr {\n     \
    \   var sum int\n        if i < 0 {\n            sum += -i % 10\n            i\
    \ = -i / 10\n        }\n        for i > 0 {\n            sum += i % 10\n     \
    \       i /= 10\n        }\n        if sum > 0 {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    counter := 0\n    for _, n := range\
    \ arr {\n        s := 0\n        if n < 0 {\n            n = -n\n        }\n \
    \       for n > 0 {\n            s += n % 10\n            n /= 10\n        }\n\
    \        if s > 0 {\n            counter++\n        }\n    }\n    return counter\n\
    }\n", "    count := 0\n    for _, v := range arr {\n        n := v\n        if\
    \ n < 0 {\n            n = -v\n        }\n        if n > 0 {\n            digits\
    \ := 0\n            for {\n                if n == 0 {\n                    break\n\
    \                }\n                n = n / 10\n                digits++\n   \
    \         }\n            //if digits > 0 {\n            //    count++\n      \
    \      //}\n            count += digits\n        }\n    }\n    return count\n\
    }\n", "    fmt.Println(arr)\n    return 1\n}\n", "    count := 0\n    for _, v\
    \ := range arr {\n        if v == 0 {\n            continue\n        }\n     \
    \   if sum_digits(v) > 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    var count int\n    for _, n := range\
    \ arr {\n        if n < 0 {\n            n = -n\n        }\n        sum := 0\n\
    \        for n > 0 {\n            sum += n % 10\n            n /= 10\n       \
    \ }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, num := range arr {\n        // num % 10 returns\
    \ the rightmost digit of a number\n        // (num % 10) + (num / 10 % 10) returns\
    \ the sum of the rightmost\n        // two digits of a number\n        if (num\
    \ % 10) + (num / 10 % 10) > 0 {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
