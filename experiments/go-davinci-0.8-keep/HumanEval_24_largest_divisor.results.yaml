language: go_test.go
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    for i := n - 1; i > 1; i--\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    a := 1\n    b := n - 1\n    for ; a < b; {\n        if n % a == 0\
    \ {\n            return a\n        }\n        a += 1\n        b -= 1\n    }\n\
    \    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpd5r5hr83_test.go:41: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpd5r5hr83_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpd5r5hr83_test.go:41: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    //First check whether the input is valid.\n    if n < 2 {\n     \
    \   return n\n    }\n    //Then check whether n is an even number.\n    if n %\
    \ 2 == 0 {\n        return n / 2\n    }\n    //Then check whether n is an odd\
    \ number.\n    var i int\n    for i = 3; i < n / 2; i += 2 {\n        if n % i\
    \ == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    large_divisor := n\n    for i := n - 1; i > 0; i-- {\n        if\
    \ n % i == 0 {\n            large_divisor = i\n            break\n        }\n\
    \    }\n    return large_divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for ; i > 0; i-- {\n        if n % i == 0 {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    max := n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpqdx1c2b2_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpqdx1c2b2_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int\n    for i := n - 1; i > 0; i-- {\n        if n %\
    \ i == 0 {\n            divisor = i\n            break\n        }\n    }\n   \
    \ return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073296
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
