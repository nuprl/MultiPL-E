language: go_test.go
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i]\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, n := range lst {\n     \
    \   if i % 2 == 0 && n % 2 != 0 {\n            sum += n\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n     \
    \   if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int = 0\n    for i, v := range lst {\n\
    \        if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst); i+=2\
    \ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpc6x72bny_test.go:42: expected '%!s(int=12)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpc6x72bny_test.go:42:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpc6x72bny_test.go:42: expected '%!s(int=0)', got '%!s(int=334)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpc6x72bny_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpc6x72bny_test.go:42: expected '%!s(int=23)', got '%!s(int=13)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpc6x72bny_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    //return 0\n    fmt.Println(lst)\n    res :=\
    \ 0\n    for i, v := range lst {\n        if i % 2 == 0 && v % 2 != 0 {\n    \
    \        res += v\n        }\n    }\n    return res\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    // Write your code here\n    return -1\n}\n\n\
    func TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpnh7ruh8f_test.go:37: expected '%!s(int=12)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpnh7ruh8f_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpnh7ruh8f_test.go:37: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpnh7ruh8f_test.go:37:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpnh7ruh8f_test.go:37: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpnh7ruh8f_test.go:37:\
    \ expected '%!s(int=23)', got '%!s(int=-1)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpnh7ruh8f_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, v := range lst {\n  \
    \      if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    return 0\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp99zjqdru_test.go:36: expected '%!s(int=12)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp99zjqdru_test.go:36:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__3\
    \ (0.00s)\n        tmp99zjqdru_test.go:36: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp99zjqdru_test.go:36:\
    \ expected '%!s(int=23)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp99zjqdru_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n\
    \    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 != 0\
    \ && i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var result int\n    for i, elem := range lst\
    \ {\n        if i % 2 == 0 && elem % 2 != 0 {\n            result += elem\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSolution(t *testing.T) {\n \
    \ candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    sum := 0\n    for i, num := range lst {\n   \
    \     if (i % 2 == 0) && (num % 2 != 0) {\n            sum += num\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n\tfmt.Println(lst)\n\treturn 0\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[5 8 7 1]\n[3 3 3 3 3]\n[30 13 24 321]\n[5 9]\n[2 4 8]\n[30 13 23 32]\n\
    [3 13 2 9]\n--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp7i0dnrgg_test.go:37: expected '%!s(int=12)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp7i0dnrgg_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__3\
    \ (0.00s)\n        tmp7i0dnrgg_test.go:37: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp7i0dnrgg_test.go:37:\
    \ expected '%!s(int=23)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp7i0dnrgg_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 2
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var (\n        sum, index int\n    )\n    for\
    \ index, value := range lst {\n        if index % 2 == 0 && value % 2 != 0 {\n\
    \            sum += value\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol2cun8h_test.go:15:14: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 2
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    odd := make([]int, 0)\n    for i, v := range\
    \ lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            odd = append(odd,\
    \ v)\n        }\n    }\n    return sumList(odd)\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq2oalvem_test.go:20:12: undefined: sumList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n\
    // solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc\
    \ solution(lst []int) int {\n    var sum int\n    for i, val := range lst {\n\
    \        if i % 2 == 0 && val % 2 != 0 {\n            sum += val\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
