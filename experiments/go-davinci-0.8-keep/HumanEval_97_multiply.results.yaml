language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return a%10 * b%10\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6vovknr1_test.go:40:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp6vovknr1_test.go:40:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 0
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 {\n        a = a * -1\n    }\n\
    \    if b < 0 {\n        b = b * -1\n    }\n    return (a % 10) * (b % 10)\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return a%10 * b%10\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6vovknr1_test.go:40:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp6vovknr1_test.go:40:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp6vovknr1_test.go:40: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    //your code here\n    return a*b%10\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpb5ciu7u4_test.go:41: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpb5ciu7u4_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb5ciu7u4_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpb5ciu7u4_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpb5ciu7u4_test.go:41: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b < 0 {\n        a, b = b, a\n    }\n\
    \    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpp4cdhjva_test.go:43: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 {\n        a = -a\n    }\n   \
    \ if b < 0 {\n        b = -b\n    }\n    a = a % 10\n    b = b % 10\n    return\
    \ a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a > 0 {\n        a *= -1\n    }\n  \
    \  if b > 0 {\n        b *= -1\n    }\n    return ((a % 10) * (b % 10)) * -1\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuhm88zd3_test.go:46: expected '%!s(int=16)', got '%!s(int=-16)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuhm88zd3_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=-72)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpuhm88zd3_test.go:46: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuhm88zd3_test.go:46:\
    \ expected '%!s(int=42)', got '%!s(int=-42)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpuhm88zd3_test.go:46: expected '%!s(int=49)', got '%!s(int=-49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    aa := a % 10\n    bb := b % 10\n    return\
    \ aa * bb\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpr0gjz8rk_test.go:42: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    aUnit := a % 10\n    bUnit := b % 10\n\
    \    return aUnit * bUnit\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpiuluciic_test.go:42: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    product := a * b\n    productString :=\
    \ fmt.Sprintf(\"%d\", product)\n    var unitDigit int\n    for _, c := range productString\
    \ {\n        digit, _ := fmt.Sscanf(string(c), \"%d\", &unitDigit)\n        if\
    \ digit == 1 {\n            return unitDigit\n        }\n    }\n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpjhr2vqwo_test.go:49: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjhr2vqwo_test.go:49:\
    \ expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpjhr2vqwo_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjhr2vqwo_test.go:49:\
    \ expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpjhr2vqwo_test.go:49: expected '%!s(int=42)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjhr2vqwo_test.go:49:\
    \ expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // return a % 10 * b % 10\n    return (a\
    \ % 10) * (b % 10)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp77uqoj6u_test.go:41: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    a1 := a % 10\n    b1 := b % 10\n    return\
    \ a1 * b1\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpvhhe7fi6_test.go:42: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 0
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    var a1, b1, r int\n\n    a1 = a % 10\n\
    \    b1 = b % 10\n    r = a1 * b1\n\n    if r < 0 {\n        r = r * -1\n    }\n\
    \n    return r\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074638
