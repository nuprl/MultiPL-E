language: go_test.go
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    n := len(arr)\n    if n == 0 {\n        return []int{}\n\
    \    }\n    m := make([]int, n)\n    for i := 0; i < n; i++ {\n        m[i] =\
    \ arr[i]\n    }\n    for i := 0; i < k; i++ {\n        for j := 0; j < n - i -\
    \ 1; j++ {\n            if m[j] < m[j + 1] {\n                m[j], m[j + 1] =\
    \ m[j + 1], m[j]\n            }\n        }\n    }\n    ret := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        ret[i] = m[i]\n    }\n    return ret\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpjqmxas_p_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpjqmxas_p_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpjqmxas_p_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpjqmxas_p_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpjqmxas_p_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=2) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpjqmxas_p_test.go:69: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpjqmxas_p_test.go:69:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpjqmxas_p_test.go:69: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    var idx int\n    for i := 1; i < k; i++ {\n     \
    \   idx = i\n        for j := i; j < len(arr); j++ {\n            if arr[j] >\
    \ arr[idx] {\n                idx = j\n            }\n        }\n        arr[i],\
    \ arr[idx] = arr[idx], arr[i]\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp6eyjw15i_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=5) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp6eyjw15i_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp6eyjw15i_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=20)\
    \ %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp6eyjw15i_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp6eyjw15i_test.go:60: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp6eyjw15i_test.go:60: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp6eyjw15i_test.go:60: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp6eyjw15i_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpy7ahf13p_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpy7ahf13p_test.go:50:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpy7ahf13p_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpy7ahf13p_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpy7ahf13p_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpy7ahf13p_test.go:50: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpy7ahf13p_test.go:50: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpy7ahf13p_test.go:50:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpy7ahf13p_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpy7ahf13p_test.go:50:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    if len(arr) == 0 || k == 0 {\n        return nil\n\
    \    }\n    m := make(map[int]bool)\n    for _, v := range arr {\n        m[v]\
    \ = true\n    }\n    //fmt.Println(m)\n    r := make([]int, len(m))\n    var i\
    \ int\n    for _, v := range m {\n        if v {\n            r[i] = v\n     \
    \       i++\n        }\n    }\n    //fmt.Println(r)\n    //fmt.Println(r[:k])\n\
    \    return r[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsf32cipr_test.go:36:20: cannot use v (variable of type bool) as type int
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    if len(arr) <= k {\n        return arr\n    }\n \
    \   n := len(arr)\n    var stk []int\n    for i := 0; i < n; i++ {\n        for\
    \ len(stk) > 0 && arr[i] > stk[len(stk)-1] && len(stk) + n - i - 1 >= k {\n  \
    \          stk = stk[:len(stk)-1]\n        }\n        if len(stk) < k {\n    \
    \        stk = append(stk, arr[i])\n        }\n    }\n    return stk\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8m9u679u_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8m9u679u_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8m9u679u_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8m9u679u_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp8m9u679u_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp8m9u679u_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    var n = len(arr)\n    if n == k { return arr }\n\
    \    var result = make([]int, k)\n    var idx = 0\n    var j = 0\n    var i =\
    \ 0\n    // skip the first 0 ~ (k - n) elements\n    for j < n {\n        if arr[j]\
    \ < 0 {\n            i++\n            j++\n        } else {\n            break\n\
    \        }\n    }\n    // skip the last (n - k) ~ (n - 1) elements\n    for j\
    \ < n {\n        if arr[n - 1 - j] > 0 {\n            i++\n            j++\n \
    \       } else {\n            break\n        }\n    }\n    // copy the (k - i)\
    \ ~ (n - i - 1) elements to result\n    for idx < k {\n        result[idx] = arr[i]\n\
    \        idx++\n        i++\n    }\n    // sort result\n    for idx = 1; idx <\
    \ k; idx++ {\n        var val = result[idx]\n        var j = idx - 1\n       \
    \ for j >= 0 && result[j] < val {\n            result[j + 1] = result[j]\n   \
    \         j--\n        }\n        result[j + 1] = val\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000162048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000162048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc00014e030?, 0x6, 0x5d42b0?},\
    \ 0x4)\n\t/tmp/tmp82rd74h9_test.go:50 +0x13c\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmp82rd74h9_test.go:78 +0x236\ntesting.tRunner(0xc0001036c0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    n := len(arr)\n    if n == k {\n        return arr\n\
    \    }\n    heap := arr[:k]\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap,\
    \ i, k)\n    }\n    for i := k; i < n; i++ {\n        if arr[i] > heap[0] {\n\
    \            heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n  \
    \  }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdfyubtbn_test.go:30:9: undefined: heapify

    /tmp/tmpdfyubtbn_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    var q []int\n    for i := 0; i < len(arr); i++ {\n\
    \        for len(q) > 0 && q[len(q)-1] < arr[i] && len(q)-1+len(arr)-i >= k {\n\
    \            q = q[:len(q)-1]\n        }\n        if len(q) < k {\n          \
    \  q = append(q, arr[i])\n        }\n    }\n    return q\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp56ntaeti_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp56ntaeti_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp56ntaeti_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp56ntaeti_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp56ntaeti_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp56ntaeti_test.go:59: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // get max K numbers\n    // bubble sort\n    for\
    \ i := 0; i < k; i++ {\n        for j := i; j < len(arr); j++ {\n            if\
    \ arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n       \
    \     }\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp9levno3n_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp9levno3n_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp9levno3n_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp9levno3n_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp9levno3n_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp9levno3n_test.go:59: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp9levno3n_test.go:59: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    n := len(arr)\n    if n == k {\n        return arr\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        max\
    \ := arr[0]\n        for j := 0; j < n; j++ {\n            if arr[j] > max {\n\
    \                max = arr[j]\n            }\n        }\n        result[i] = max\n\
    \        for j := 0; j < n; j++ {\n            if arr[j] == max {\n          \
    \      arr[j] = -1000000000\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0qeuq5gm_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp0qeuq5gm_test.go:70: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0qeuq5gm_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0qeuq5gm_test.go:70: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0qeuq5gm_test.go:70:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0qeuq5gm_test.go:70: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // using merge sort to find the kth largest element\n\
    \    // because it can guarante the kth largest element is smaller than any other\
    \ elements\n    m := mergeSort(arr)\n    return m[len(m)-k:]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yt2avqq_test.go:26:10: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    if len(arr) == k {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        maxIndex := -1\n \
    \       for j := i; j < len(arr); j++ {\n            if maxIndex == -1 || arr[j]\
    \ > arr[maxIndex] {\n                maxIndex = j\n            }\n        }\n\
    \        result = append(result, arr[maxIndex])\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x514820, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514820, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmplo9ue3jn_test.go:35\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmplo9ue3jn_test.go:52 +0x15a5\n\
    testing.tRunner(0xc000103380, 0x52a140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    n := len(arr)\n    if n == 0 {\n        return []int{}\n\
    \    }\n    max := make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i]\
    \ = -1000\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max[0] {\n\
    \            max[0] = arr[i]\n            heapify(max, 0)\n        }\n    }\n\
    \    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqg6czx2n_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // check args\n    if arr == nil || len(arr) == 0\
    \ || k <= 0 || k > len(arr) {\n        return nil\n    }\n    // sort\n    arr\
    \ = maxHeapSort(arr)\n    // return first k elements\n    return arr[:k]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7j7y5cs_test.go:29:11: undefined: maxHeapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // initialize a empty result\n    res := make([]int,\
    \ 0)\n    // traverse the array and add a max number to the result,\n    // and\
    \ the length of result is k\n    for i := 0; i < k; i++ {\n        if len(arr)\
    \ == 0 {\n            break\n        }\n        max := arr[0]\n        start :=\
    \ 0\n        for i := 0; i < len(arr); i++ {\n            if arr[i] > max {\n\
    \                max = arr[i]\n                start = i\n            }\n    \
    \    }\n        res = append(res, max)\n        arr = append(arr[:start], arr[start+1:]...)\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp2ikyntnv_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp2ikyntnv_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp2ikyntnv_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp2ikyntnv_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp2ikyntnv_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp2ikyntnv_test.go:69: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp2ikyntnv_test.go:69: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    var res []int\n    if k == 0 {\n        return res\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        for len(res) > 0 && len(res)\
    \ + len(arr) - i > k && res[len(res) - 1] < arr[i] {\n            res = res[:len(res)\
    \ - 1]\n        }\n        if len(res) < k {\n            res = append(res, arr[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp_zyc18wv_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp_zyc18wv_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp_zyc18wv_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp_zyc18wv_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp_zyc18wv_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp_zyc18wv_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    n := len(arr)\n    if n == 0 {\n        return nil\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == n {\n    \
    \    return arr\n    }\n    if k > n {\n        return nil\n    }\n    var temp\
    \ []int\n    var result []int\n    for i := 0; i < n; i++ {\n        if len(temp)\
    \ < k {\n            temp = append(temp, arr[i])\n            for j := len(temp)\
    \ - 1; j > 0; j-- {\n                if temp[j] > temp[j - 1] {\n            \
    \        temp[j], temp[j - 1] = temp[j - 1], temp[j]\n                } else {\n\
    \                    break\n                }\n            }\n        } else {\n\
    \            if arr[i] > temp[0] {\n                temp[0] = arr[i]\n       \
    \         for j := 1; j < k; j++ {\n                    if temp[j] > temp[j -\
    \ 1] {\n                        temp[j], temp[j - 1] = temp[j - 1], temp[j]\n\
    \                    } else {\n                        break\n               \
    \     }\n                }\n            }\n        }\n    }\n    for i := 0; i\
    \ < k; i++ {\n        result = append(result, temp[i])\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpr7vjd2q4_test.go:91: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpr7vjd2q4_test.go:91: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpr7vjd2q4_test.go:91: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpr7vjd2q4_test.go:91: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=0) %!s(int=-123)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpr7vjd2q4_test.go:91: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpr7vjd2q4_test.go:91:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=-1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpr7vjd2q4_test.go:91: expected\
    \ '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // \u7EF4\u62A4\u4E00\u4E2A\u53EA\u5305\u542B\u6700\
    \u5927\u503C\u7684\u8F85\u52A9\u6570\u7EC4\uFF0C\u7528\u4E8E\u6BD4\u8F83\u5927\
    \u5C0F\n    // \u5177\u4F53\u6765\u8BF4\uFF0C\u6BCF\u4E00\u6B21\u5224\u65AD\u4E00\
    \u4E2A\u65B0\u7684\u6570\uFF0C\u5982\u679C\u8F85\u52A9\u6570\u7EC4\u4E3A\u7A7A\
    \uFF0C\u5C31\u76F4\u63A5\u63D2\u5165\n    // \u5982\u679C\u4E0D\u4E3A\u7A7A\uFF0C\
    \u5C31\u548C\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u6BD4\u8F83\u5927\u5C0F\uFF0C\
    \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u5C0F\u4E8E\u5F53\u524D\u5143\
    \u7D20\uFF0C\n    // \u5C31\u5C06\u8BE5\u5143\u7D20\u63D2\u5165\u5230\u8F85\u52A9\
    \u6570\u7EC4\u4E2D\uFF0C\u7136\u540E\u7EE7\u7EED\u548C\u7B2C\u4E00\u4E2A\u5143\
    \u7D20\u6BD4\u8F83\uFF0C\u76F4\u5230\u8F85\u52A9\u6570\u7EC4\u957F\u5EA6\n   \
    \ // \u5927\u4E8E\u7B49\u4E8Ek\uFF0C\u5219\u8FD4\u56DE\u6570\u7EC4\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    auxiliary := make([]int, 0)\n   \
    \ for i := 0; i < len(arr); i++ {\n        if len(auxiliary) == 0 {\n        \
    \    auxiliary = append(auxiliary, arr[i])\n        } else {\n            if auxiliary[len(auxiliary)\
    \ - 1] < arr[i] {\n                auxiliary = append(auxiliary, arr[i])\n   \
    \         } else {\n                for j := 0; j < len(auxiliary); j++ {\n  \
    \                  if auxiliary[j] > arr[i] {\n                        auxiliary\
    \ = append(auxiliary, 0)\n                        copy(auxiliary[j + 1:], auxiliary[j:])\n\
    \                        auxiliary[j] = arr[i]\n                        break\n\
    \                    }\n                }\n            }\n        }\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiz4nt7y8_test.go:51:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    // TODO\n    return nil\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp_sqnmjv2_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp_sqnmjv2_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp_sqnmjv2_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp_sqnmjv2_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp_sqnmjv2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp_sqnmjv2_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp_sqnmjv2_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp_sqnmjv2_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp_sqnmjv2_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp_sqnmjv2_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
    \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
    \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the\
    \ array will be in the range of [1, 1000].\n// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr\
    \ []int, k int) []int {\n    var (\n        heap []int\n        ret []int\n  \
    \  )\n    for _, v := range arr {\n        if len(heap) < k {\n            heap\
    \ = append(heap, v)\n            siftUp(heap, len(heap) - 1)\n        } else if\
    \ v > heap[0] {\n            heap[0] = v\n            siftDown(heap, 0)\n    \
    \    }\n    }\n    for i := len(heap) - 1; i >= 0; i-- {\n        ret = append(ret,\
    \ heap[0])\n        heap[0] = heap[i]\n        heap = heap[:i]\n        siftDown(heap,\
    \ 0)\n    }\n    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjiz1lwm_test.go:31:13: undefined: siftUp

    /tmp/tmpyjiz1lwm_test.go:34:13: undefined: siftDown

    /tmp/tmpyjiz1lwm_test.go:41:9: undefined: siftDown

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
