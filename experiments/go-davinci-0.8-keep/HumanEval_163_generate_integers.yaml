name: HumanEval_163_generate_integers
language: go_test.go
prompt: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given two positive integers a and b, return the even digits between a\n\
  // and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2,\
  \ 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
  \ 14) => []\nfunc generate_integers(a int, b int) []int {\n"
tests: "func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
  \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     {\
  \ actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17,\
  \ 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    start := a\n    if b < a {\n        start = b\n    }\n    var result\
    \ []int\n    for i := start; i <= a && i <= b; i++ {\n        if i % 2 == 0 {\n\
    \            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    var ret []int\n    if a < b {\n        for i := a; i <= b; i++ {\n\
    \            if i % 2 == 0 {\n                ret = append(ret, i)\n         \
    \   }\n        }\n    } else {\n        for i := b; i <= a; i++ {\n          \
    \  if i % 2 == 0 {\n                ret = append(ret, i)\n            }\n    \
    \    }\n    }\n    return ret\n}\n", "    var result []int\n\n    // Since I just\
    \ need even numbers, I can start at the lowest and\n    // increment by 2's. \
    \ No need to check a,b for evenness.\n    for i := a; i <= b; i += 2 {\n     \
    \   result = append(result, i)\n    }\n\n    return result\n}\n", "    if a >\
    \ b {\n        return generate_integers(b, a)\n    }\n\n    var res []int\n  \
    \  for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n", "    var output []int\n    min :=\
    \ a\n    max := b\n    if min > max {\n        min = b\n        max = a\n    }\n\
    \    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n            output\
    \ = append(output, i)\n        }\n    }\n    return output\n}\n", "    if a >\
    \ b {\n        a, b = b, a\n    }\n    var result []int\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n", "    if a > b {\n        a, b = b,\
    \ a\n    }\n    evens := []int{}\n    for i := a; i <= b; i++ {\n        if i\
    \ % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n    return\
    \ evens\n}\n", "    // your code here\n\n    return nil\n}\n", "    if a > b {\n\
    \        a, b = b, a\n    }\n    var result []int\n    for i := a; i <= b; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n", "    // !!!PLEASE DO NOT CHANGE THE FUNCTION\
    \ HEADER!!!\n    if a == b {\n        if a % 2 == 0 {\n            return []int{a}\n\
    \        } else {\n            return []int{}\n        }\n    }\n\n    var min\
    \ int\n    var max int\n    if a > b {\n        min = b\n        max = a\n   \
    \ } else {\n        min = a\n        max = b\n    }\n\n    if max % 2 == 0 {\n\
    \        max--\n    }\n\n    if min % 2 == 0 {\n        min++\n    }\n\n    var\
    \ result []int\n    for i := min; i <= max; i += 2 {\n        result = append(result,\
    \ i)\n    }\n\n    return result\n}\n", "    var result []int\n\n    // swap if\
    \ a is greater than b\n    if a > b {\n        a, b = b, a\n    }\n\n    // iterate\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n\n    return result\n}\n", "\tvar result\
    \ []int\n\tif a > b {\n\t\ta, b = b, a\n\t}\n\tfor i := a; i <= b; i++ {\n\t\t\
    if i % 2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n\
    }\n", "    if a > b {\n        a, b = b, a\n    }\n    evens := []int{}\n    for\
    \ i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n", "    var result []int\n    if\
    \ a == b {\n        if a % 2 == 0 {\n            result = append(result, a)\n\
    \        }\n        return result\n    }\n\n    if a > b {\n        a, b = b,\
    \ a\n    }\n\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n       \
    \     result = append(result, i)\n        }\n    }\n    return result\n}\n", " \
    \   var results []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n\
    \            results = append(results, i)\n        }\n    }\n    return results\n\
    }\n", "    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    if a > b {\n        return generate_integers(b, a)\n    }\n\n    slice\
    \ := make([]int, 0)\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n\
    \            slice = append(slice, i)\n        }\n    }\n    return slice\n}\n",
  "    // Your code here\n    if a > b {\n        a, b = b, a\n    }\n    res := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\ntype TestCase ", "    var evens []int\n\
    \    if a < b {\n        for i := a; i <= b; i++ {\n            if i % 2 == 0\
    \ {\n                evens = append(evens, i)\n            }\n        }\n    }\
    \ else {\n        for i := b; i <= a; i++ {\n            if i % 2 == 0 {\n   \
    \             evens = append(evens, i)\n            }\n        }\n    }\n    return\
    \ evens\n}\n", "    result := []int{}\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
