language: go_test.go
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return []int{numbers[0]}\n    }\n    result := make([]int, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result[i * 2]\
    \ = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result)\
    \ - 1] = numbers[len(numbers) - 1]\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return []int{numbers[0]}\n    }\n    r := make([]int, 2 * len(numbers)\
    \ - 1)\n    r[0] = numbers[0]\n    r[1] = delimeter\n    for i := 2; i < len(r);\
    \ i += 2 {\n        r[i] = numbers[i / 2]\n        r[i + 1] = delimeter\n    }\n\
    \    return r\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001c6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl08bhm3p_test.go:25\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl08bhm3p_test.go:38\
    \ +0x47f\ntesting.tRunner(0xc000184ea0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return numbers\n    }\n    var result []int\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        result = append(result, numbers[i])\n \
    \       result = append(result, delimeter)\n    }\n    result = append(result,\
    \ numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result :=\
    \ make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n        result[2\
    \ * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    var interspersed []int\n    for i, v := range numbers {\n        interspersed\
    \ = append(interspersed, v)\n        if i+1 < len(numbers) {\n            interspersed\
    \ = append(interspersed, delimeter)\n        }\n    }\n    return interspersed\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    var result []int\n    if numbers == nil || len(numbers) == 0 {\n    \
    \    return result\n    }\n\n    for i, num := range numbers {\n        result\
    \ = append(result, num)\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n    var interspersed\
    \ []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        interspersed = append(interspersed,\
    \ numbers[i])\n        interspersed = append(interspersed, delimeter)\n    }\n\
    \    interspersed = append(interspersed, numbers[len(numbers) - 1])\n    return\
    \ interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    var result []int\n    for i, _ := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    var result []int\n    for i, num := range numbers {\n        result =\
    \ append(result, num)\n        if i < len(numbers) - 1 {\n            result =\
    \ append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    result := make([]int, 0)\n    for i, number := range numbers {\n    \
    \    if i > 0 {\n            result = append(result, delimeter)\n        }\n \
    \       result = append(result, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    length := len(numbers)\n    var newList []int\n    for i := 0; i < length;\
    \ i++ {\n        newList = append(newList, numbers[i])\n        if i != length\
    \ - 1 {\n            newList = append(newList, delimeter)\n        }\n    }\n\
    \    return newList\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    result := make([]int, 0)\n    for i, n := range numbers {\n        result\
    \ = append(result, n)\n        if i != len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    var result []int\n    for i, num := range numbers {\n        result =\
    \ append(result, num)\n        if i < len(numbers) - 1 {\n            result =\
    \ append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result :=\
    \ []int{numbers[0]}\n    for i := 1; i < len(numbers); i++ {\n        result =\
    \ append(result, delimeter)\n        result = append(result, numbers[i])\n   \
    \ }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    for i := len(numbers) - 1; i > 0; i-- {\n        numbers = append(numbers,\
    \ 0)\n        copy(numbers[i+1:], numbers[i:])\n        numbers[i] = delimeter\n\
    \    }\n    return numbers\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    // empty input list\n    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n\n    // set the initial delimeter\n    ret := []int{delimeter}\n    for\
    \ _, num := range numbers {\n        ret = append(ret, num)\n        ret = append(ret,\
    \ delimeter)\n    }\n\n    // remove the last delimeter\n    return ret[:len(ret)-1]\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpwzpen27o_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2\
    \ (0.00s)\n        tmpwzpen27o_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n    res := []int{numbers[0]}\n\
    \    for _, v := range numbers[1:] {\n        res = append(res, delimeter, v)\n\
    \    }\n    return res\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n    result :=\
    \ make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers); i++ {\n\
    \        result[i * 2] = numbers[i]\n        if i != len(numbers) - 1 {\n    \
    \        result[i * 2 + 1] = delimeter\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    new_list := make([]int, 0)\n    for i, number := range numbers {\n  \
    \      new_list = append(new_list, number)\n        if i != len(numbers) - 1 {\n\
    \            new_list = append(new_list, delimeter)\n        }\n    }\n    return\
    \ new_list\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2,\
    \ 3], 4)\n// [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int\
    \ {\n    list := make([]int, 0)\n    for i, value := range numbers {\n       \
    \ list = append(list, value)\n        if i < len(numbers) - 1 {\n            list\
    \ = append(list, delimeter)\n        }\n    }\n    return list\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
