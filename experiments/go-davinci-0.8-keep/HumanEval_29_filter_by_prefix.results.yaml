language: go_test.go
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    matches := []string{}\n    for _, s\
    \ := range strings {\n        if len(s) > 0 && s[0] == prefix[0] {\n         \
    \   matches = append(matches, s)\n        }\n    }\n    return matches\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp8lg1nkbu_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var result []string\n    for _, s :=\
    \ range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073373
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    results := []string{}\n    for _, current_string\
    \ := range strings {\n        if len(current_string) >= len(prefix) && current_string[:len(prefix)]\
    \ == prefix {\n            results = append(results, current_string)\n       \
    \ }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if (s[0:1] == prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpw7gt700j_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var result []string\n    for _, s :=\
    \ range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073373
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var new_list []string\n    for _, word\
    \ := range strings {\n        if word[0:1] == prefix {\n            new_list =\
    \ append(new_list, word)\n        }\n    }\n    return new_list\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpdhz8rorl_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var ret []string\n    for _, v := range\
    \ strings {\n        if len(v) >= len(prefix) && v[:len(prefix)] == prefix {\n\
    \            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, str\
    \ := range strings {\n        if len(str) >= len(prefix) && str[:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var out_strings []string\n    for _,\
    \ s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] ==\
    \ prefix {\n            out_strings = append(out_strings, s)\n        }\n    }\n\
    \    return out_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var output []string\n    for _, v :=\
    \ range strings {\n        if len(v) >= len(prefix) && v[:len(prefix)] == prefix\
    \ {\n            output = append(output, v)\n        }\n    }\n    return output\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if has_prefix(s, prefix) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ta9g44t_test.go:16:12: undefined: has_prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if string(s[0]) == prefix {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpysqvel6l_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var r []string\n    for _, s := range\
    \ strings {\n        if len(s) > 0 && s[0] == prefix[0] {\n            r = append(r,\
    \ s)\n        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpq2kap7s6_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var r []string\n    for _, s := range\
    \ strings {\n        if has_prefix(s, prefix) {\n            r = append(r, s)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n5rreat_test.go:16:12: undefined: has_prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var new_list []string\n    for _, str\
    \ := range strings {\n        if len(str) < len(prefix) {\n            continue\n\
    \        }\n\n        if str[:len(prefix)] == prefix {\n            new_list =\
    \ append(new_list, str)\n        }\n    }\n    return new_list\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    i := 0\n    for _, s := range strings\
    \ {\n        if !strings.HasPrefix(s, prefix) {\n            continue\n      \
    \  }\n        strings[i] = s\n        i++\n    }\n    return strings[:i]\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplytau8kd_test.go:16:21: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    // your code here\n    return []string{}\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpm3a5pumd_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    if len(strings) == 0 {\n        return\
    \ []string{}\n    }\n\n    var new_list []string\n    for _, s := range strings\
    \ {\n        if len(s) > 0 && s[0] == prefix[0] {\n            new_list = append(new_list,\
    \ s)\n        }\n    }\n    return new_list\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp8hfcl5wz_test.go:41: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    var filtered []string\n    for _, value\
    \ := range strings {\n        if len(value) >= len(prefix) && value[:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, value)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings\
    \ []string, prefix string) []string {\n    result := []string{}\n    for _, s\
    \ := range strings {\n        if prefix == s[:len(prefix)] {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073502
