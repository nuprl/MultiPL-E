name: HumanEval_101_words_string
language: go_test.go
prompt: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You will be given a string of words separated by commas or spaces. Your task\
  \ is\n// to split the string into words and return an array of the words.\n// For\
  \ example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
  , \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s string)\
  \ []string {\n"
tests: "func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
  \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
  four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
  \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three,\
  \ four, five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\"\
  , \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
  \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\",\
  \ \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return nil\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    return nil\n}\n", "    // TODO\n    return nil\n}\n",
  "    var r []string\n    for _, w := range(split(s)) {\n        if w != \"\" {\n\
    \            r = append(r, w)\n        }\n    }\n    return r\n}\n", "    return\
    \ []string{}\n}\n", "    return nil\n}\n", "    words := []string{}\n    for _,\
    \ word := range split_on_space(s) {\n        words = append(words, split_on_comma(word)...)\n\
    \    }\n    return words\n}\n", "    var words []string\n    words = nil\n   \
    \ word := \"\"\n    started := false\n    for _, c := range s {\n        if c\
    \ == ' ' || c == ',' {\n            if started {\n                words = append(words,\
    \ word)\n                word = \"\"\n                started = false\n      \
    \      }\n        } else {\n            word += string(c)\n            started\
    \ = true\n        }\n    }\n    if started {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    i := 0\n    l := len(s)\n    var buf []byte\n\
    \    var words []string\n    for i < l {\n        c := s[i]\n        if c != '\
    \ ' && c != ',' {\n            buf = append(buf, c)\n        } else {\n      \
    \      if len(buf) > 0 {\n                words = append(words, string(buf))\n\
    \                buf = []byte{}\n            }\n        }\n        i++\n    }\n\
    \    if len(buf) > 0 {\n        words = append(words, string(buf))\n    }\n  \
    \  return words\n}\n", "    res := make([]string, 0)\n    temp := \"\"\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if temp !=\
    \ \"\" {\n                res = append(res, temp)\n                temp = \"\"\
    \n            }\n        } else {\n            temp += string(c)\n        }\n\
    \    }\n    if temp != \"\" {\n        res = append(res, temp)\n    }\n    return\
    \ res\n}\n", "    return nil\n}\n", "    var words []string\n    return words\n\
    }\n", "    var result []string\n    var word string\n    var n int\n    n = len(s)\n\
    \    for i := 0; i < n; i++ {\n        if s[i] == ' ' || s[i] == ',' {\n     \
    \       if len(word) > 0 {\n                result = append(result, word)\n  \
    \              word = \"\"\n            }\n        } else {\n            word\
    \ += string(s[i])\n        }\n    }\n    if len(word) > 0 {\n        result =\
    \ append(result, word)\n    }\n    return result\n}\n", "    return nil\n}\n",
  "    panic(\"Not implemented\")\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    return words\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
