name: HumanEval_97_multiply
language: go_test.go
prompt: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Complete the function that takes two integers and returns \n// the product of\
  \ their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148,\
  \ 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020,\
  \ 1851) should return 0.\n// multiply(14,-15) should return 20.\nfunc multiply(a\
  \ int, b int) int {\n"
tests: "func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
  \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n \
  \    { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
  \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n    \
  \ { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return (a % 10) * (b % 10)\n}\n", "    return a%10 * b%10\n}\n",
  "    return (a%10)*(b%10)\n}\n", "    return (a%10)*(b%10)\n}\n", "    if a < 0\
    \ {\n        a = a * -1\n    }\n    if b < 0 {\n        b = b * -1\n    }\n  \
    \  return (a % 10) * (b % 10)\n}\n", "    return a%10 * b%10\n}\n", "    //your\
    \ code here\n    return a*b%10\n}\n", "    if b < 0 {\n        a, b = b, a\n \
    \   }\n    return (a%10) * (b%10)\n}\n", "    if a < 0 {\n        a = -a\n   \
    \ }\n    if b < 0 {\n        b = -b\n    }\n    a = a % 10\n    b = b % 10\n \
    \   return a * b\n}\n", "    if a > 0 {\n        a *= -1\n    }\n    if b > 0\
    \ {\n        b *= -1\n    }\n    return ((a % 10) * (b % 10)) * -1\n}\n", "  \
    \  aa := a % 10\n    bb := b % 10\n    return aa * bb\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    aUnit := a % 10\n    bUnit := b % 10\n    return\
    \ aUnit * bUnit\n}\n", "    product := a * b\n    productString := fmt.Sprintf(\"\
    %d\", product)\n    var unitDigit int\n    for _, c := range productString {\n\
    \        digit, _ := fmt.Sscanf(string(c), \"%d\", &unitDigit)\n        if digit\
    \ == 1 {\n            return unitDigit\n        }\n    }\n    return 0\n}\n",
  "    // your code here\n    return 0\n}\n", "    // return a % 10 * b % 10\n   \
    \ return (a % 10) * (b % 10)\n}\n", "    a1 := a % 10\n    b1 := b % 10\n    return\
    \ a1 * b1\n}\n", "    // your code here\n    return 0\n}\n", "    return (a %\
    \ 10) * (b % 10)\n}\n", "    var a1, b1, r int\n\n    a1 = a % 10\n    b1 = b\
    \ % 10\n    r = a1 * b1\n\n    if r < 0 {\n        r = r * -1\n    }\n\n    return\
    \ r\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
