language: go_test.go
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   res := []int{}\n    for _, n := range l {\n        if n > 0 {\n          \
    \  res = append(res, n)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   r := []int{}\n    for _, n := range l {\n        if n > 0 {\n            r\
    \ = append(r, n)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   res := []int{}\n    for _, x := range l {\n        if x > 0 {\n          \
    \  res = append(res, x)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var n []int\n    for _, x := range l {\n        if x > 0 {\n            n\
    \ = append(n, x)\n        }\n    }\n    return n\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var result []int\n    for _, v := range l {\n        if v > 0 {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073177
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   pos := []int{}\n    for _, i := range l {\n        if i > 0 {\n          \
    \  pos = append(pos, i)\n        }\n    }\n    return pos\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   pos := []int{}\n    for _, num := range l {\n        if num > 0 {\n      \
    \      pos = append(pos, num)\n        }\n    }\n    return pos\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   // TODO\n    var r []int\n    for _, n := range l {\n        if n > 0 {\n\
    \            r = append(r, n)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   l_pos := []int{}\n    for _, i := range l {\n        if i > 0 {\n        \
    \    l_pos = append(l_pos, i)\n        }\n    }\n    return l_pos\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   res := []int{}\n    for _, v := range l {\n        if v > 0 {\n          \
    \  res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var ret []int\n    for _, i := range l {\n        if i > 0 {\n           \
    \ ret = append(ret, i)\n        }\n    }\n    return ret\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   res := []int{}\n    for _, value := range l {\n        if value > 0 {\n  \
    \          res = append(res, value)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var res []int\n    for _, num := range l {\n        if num > 0 {\n       \
    \     res = append(res, num)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var res []int\n    for _, v := range l {\n        if v > 0 {\n           \
    \ res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073177
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var res []int\n    for _, i := range l {\n        if i > 0 {\n           \
    \ res = append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   // To find the length of a slice, use the built-in len function.\n    // If\
    \ s is a slice, len(s) is the number of elements in the slice.\n    result :=\
    \ make([]int, 0, len(l))\n    for _, num := range l {\n        if num > 0 {\n\
    \            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   r := []int{}\n    for _, v := range l {\n        if v > 0 {\n            r\
    \ = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   p := []int{}\n    for _, i := range l {\n        if i > 0 {\n            p\
    \ = append(p, i)\n        }\n    }\n    return p\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   var new_list []int\n    for _, v := range l {\n        if v > 0 {\n      \
    \      new_list = append(new_list, v)\n        }\n    }\n    return new_list\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l []int) []int {\n \
    \   result := []int{}\n    for _, n := range l {\n        if n > 0 {\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
