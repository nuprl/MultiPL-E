name: HumanEval_131_digits
language: go_test.go
prompt: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer n, return the product of the odd digits.\n// Return 0 if all\
  \ digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n//\
  \ digits(235) == 15\nfunc digits(n int) int {\n"
tests: "func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
  \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
  \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
  \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    ret := 1\n    for n != 0 {\n        var digit = n % 10\n      \
    \  if digit % 2 != 0 {\n            ret *= digit\n        }\n        n /= 10\n\
    \    }\n    return ret\n}\n\ntype TestCase ", "    return 0\n}\n", "    var prod\
    \ int = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0\
    \ {\n            prod *= digit\n        }\n        n /= 10\n    }\n    return\
    \ prod\n}\n", "    r := 1\n    for n != 0 {\n        d := n % 10\n        if d\
    \ % 2 != 0 {\n            r *= d\n        }\n        n /= 10\n    }\n    return\
    \ r\n}\n", "    c:=1\n    for n>0 {\n        d:=n%10\n        if d%2==1 {\n  \
    \          c=c*d\n        }\n        n=n/10\n    }\n    return c\n}\n", "    var\
    \ product int\n    for n > 0 {\n        digit := n % 10\n        if digit % 2\
    \ != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n  \
    \  return product\n}\n", "    return 0\n}\n", "    digits := 0\n    for {\n  \
    \      if n <= 0 {\n            break\n        }\n        digit := n % 10\n  \
    \      if digit % 2 != 0 {\n            digits += digit\n        }\n        n\
    \ /= 10\n    }\n    return digits\n}\n", "    var r int\n    for n > 0 {\n   \
    \     d := n % 10\n        if d % 2 == 1 {\n            r *= d\n        }\n  \
    \      n /= 10\n    }\n    return r\n}\n", "    m := n\n    p := 1\n    for m\
    \ > 0 {\n        d := m % 10\n        if d % 2 == 1 {\n            p *= d\n  \
    \      }\n        m /= 10\n    }\n    return p\n}\n\ntype test ", "    sum :=\
    \ 1\n    zero := 0\n    for n > 0 {\n        digit := n % 10\n        if digit\
    \ % 2 != 0 {\n            sum *= digit\n        } else if sum == 1 {\n       \
    \     zero = 1\n        }\n        n /= 10\n    }\n    if zero == 1 {\n      \
    \  return 0\n    }\n    return sum\n}\n", "    var p int = 1\n    for n > 0 {\n\
    \        d := n % 10\n        if d % 2 == 1 {\n            p *= d\n        }\n\
    \        n /= 10\n    }\n    return p\n}\n", "\tif n < 0 {\n\t\tn = -n\n\t}\n\t\
    var res int\n\tfor n > 0 {\n\t\td := n % 10\n\t\tif d % 2 == 1 {\n\t\t\tres *=\
    \ d\n\t\t}\n\t\tn /= 10\n\t}\n\treturn res\n}\n\ntype testpair ", "    // your\
    \ code here\n    var prod int = 1\n    for n > 0 {\n        if n % 2 != 0 {\n\
    \            prod *= n % 10\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n", "    var prod int = 1\n    for n > 0 {\n        digit := n % 10\n      \
    \  if digit % 2 != 0 {\n            prod *= digit\n        }\n        n /= 10\n\
    \    }\n    return prod\n}\n", "    prod := 1\n    for n > 0 {\n        digit\
    \ := n % 10\n        if digit % 2 == 1 {\n            prod *= digit\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n", "    var res int\n    for n !=\
    \ 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            res *=\
    \ digit\n        }\n        n /= 10\n    }\n    return res\n}\n", "    product\
    \ := 1\n    for n > 0 {\n        nextDigit := n % 10\n        if nextDigit % 2\
    \ == 1 {\n            product *= nextDigit\n        }\n        n /= 10\n    }\n\
    \    return product\n}\n", "    if n == 0 {\n        return 0\n    }\n    last\
    \ := n % 10\n    if last % 2 == 1 {\n        return last * digits(n / 10)\n  \
    \  }\n    return digits(n / 10)\n}\n", "    var result int\n    for n > 0 {\n\
    \        digit := n % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        n /= 10\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
