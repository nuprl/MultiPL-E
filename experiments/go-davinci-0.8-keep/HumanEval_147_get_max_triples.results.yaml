language: go_test.go
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    sum := 0\n\
    \    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    fmt.Println(i,\
    \ j, k)\n                    sum += 1\n                }\n            }\n    \
    \    }\n    }\n    return sum\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.072s\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    // Write\
    \ your code here\n    res := 0\n    if n < 3 {\n        return res\n    }\n  \
    \  for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n       \
    \         }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkrpghorz_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count :=\
    \ 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if ((i*i - i + 1) + (j*j\
    \ - j + 1) + (k*k - k + 1)) % 3 == 0 {\n                    count++\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp1chwxkqf_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp1chwxkqf_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp1chwxkqf_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var sum\
    \ int\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                sum += 1\n    \
    \        }\n        }\n    }\n    return sum\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmppco4ncyi_test.go:46: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmppco4ncyi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmppco4ncyi_test.go:46: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmppco4ncyi_test.go:46:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var res\
    \ int\n    if n < 3 {\n        return res\n    }\n    var sum int\n    for i :=\
    \ 1; i < n - 1; i++ {\n        sum = i * i - i + 1\n        for j := i + 1; j\
    \ < n; j++ {\n            sum += j * j - j + 1\n            if sum % 3 == 0 {\n\
    \                res++\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpaispt2kg_test.go:52: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpaispt2kg_test.go:52:\
    \ expected '%!s(int=36)', got '%!s(int=9)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpaispt2kg_test.go:52: expected '%!s(int=53361)', got '%!s(int=1584)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3\
    \ {\n        return 0\n    }\n    cnt := 0\n    for i := 1; i < n - 1; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    cnt++\n                }\n            }\n        }\n\
    \    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074344
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var count\
    \ int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074344
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3\
    \ {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    res := 0\n    for i := 0;\
    \ i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    res++\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    ret := 0\n\
    \    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    k := n - (i + j)\n            // fmt.Println(i, j, k)\n            if k >\
    \ j && (i + j + k) % 3 == 0 {\n                ret++\n            }\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7y263eel_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7y263eel_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7y263eel_test.go:48: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7y263eel_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    mod := make([]int,\
    \ 3)\n    for i := 1; i <= n; i++ {\n        mod[((i * i - i + 1) % 3)]++\n  \
    \  }\n    return mod[0] * mod[0] * mod[0] + mod[1] * mod[1] * mod[2] * 2 + mod[2]\
    \ * mod[2] * mod[2]\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpo4qitpjf_test.go:42: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpo4qitpjf_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpo4qitpjf_test.go:42: expected '%!s(int=36)', got '%!s(int=27)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpo4qitpjf_test.go:42:\
    \ expected '%!s(int=53361)', got '%!s(int=35937)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return (n\
    \ - 2) * (n - 1) / 2\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp1g4u8gz6_test.go:38: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp1g4u8gz6_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp1g4u8gz6_test.go:38: expected '%!s(int=53361)', got '%!s(int=4851)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3\
    \ {\n        return 0\n    }\n    var dp [][]int\n    for i := 0; i < 3; i++ {\n\
    \        dp = append(dp, make([]int, n))\n    }\n    for i := 2; i < n; i++ {\n\
    \        for j := 0; j < 3; j++ {\n            dp[j][i] = dp[j][i - 1]\n     \
    \   }\n        v := (i + 1) * (i + 1) - i - 1\n        v2 := v % 3\n        dp[v2][i]++\n\
    \    }\n    var res int\n    for i := 2; i < n; i++ {\n        for j := 0; j <\
    \ 3; j++ {\n            res += dp[j][i] * dp[(3 - j) % 3][i - 1]\n        }\n\
    \    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9ok61khl_test.go:59: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp9ok61khl_test.go:59:\
    \ expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp9ok61khl_test.go:59: expected '%!s(int=36)', got '%!s(int=90)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp9ok61khl_test.go:59:\
    \ expected '%!s(int=53361)', got '%!s(int=141570)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3\
    \ {\n        return 0\n    }\n    // todo\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpd_jfsvh2_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpd_jfsvh2_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpd_jfsvh2_test.go:42: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpd_jfsvh2_test.go:42:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if n < 3\
    \ {\n        return 0\n    }\n    res := 0\n    // \u5982\u679Cn\u4E3A\u5076\u6570\
    \uFF0C\u5219a\u7684\u957F\u5EA6\u4E3A\u5947\u6570\uFF0C\u4E14\u6700\u540E\u4E00\
    \u4E2A\u5143\u7D20\u4E3A21.\n    // \u5982\u679Cn\u4E3A\u5947\u6570\uFF0C\u5219\
    a\u7684\u957F\u5EA6\u4E3A\u5076\u6570\uFF0C\u4E14\u6700\u540E\u4E00\u4E2A\u5143\
    \u7D20\u4E3A1.\n    // \u56E0\u6B64\uFF0C\u82E5n\u4E3A\u5076\u6570\uFF0C\u5219\
    \u6700\u540E\u4E00\u4E2A\u5143\u7D20\u4E0D\u80FD\u4F5C\u4E3A\u6700\u5927\u7684\
    \u4E00\u4E2A\u5143\u7D20\uFF0C\u82E5n\u4E3A\u5947\u6570\uFF0C\u5219\u53EF\u4EE5\
    \u3002\n    // \u6240\u4EE5\uFF0C\u53EA\u8981\u5C06(n+1)/2\u5230n\u4F5C\u4E3A\u6700\
    \u5927\u7684\u4E00\u4E2A\u5143\u7D20\u5373\u53EF\u3002\n    for i := n; i >= (n+1)/2;\
    \ i-- {\n        // \u4EE5i\u4E3A\u6700\u5927\u5143\u7D20\uFF0C\u6C42\u89E3\u53EF\
    \u80FD\u7684\u7EC4\u5408\u3002\n        for j := 1; j < i; j++ {\n           \
    \ for k := j+1; k < i; k++ {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    res++\n                }\n            }\n  \
    \      }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7qkwe8ub_test.go:56: expected '%!s(int=36)', got '%!s(int=35)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7qkwe8ub_test.go:56:\
    \ expected '%!s(int=53361)', got '%!s(int=47345)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    sum_mod\
    \ := 0\n    if n >= 3 {\n        sum_mod = ((n - 2) * (n - 1) * n) / 6 * 2\n \
    \   }\n\n    return sum_mod\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n \
    \ candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkuvbt89m_test.go:43: expected '%!s(int=1)', got '%!s(int=20)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkuvbt89m_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=40)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkuvbt89m_test.go:43: expected '%!s(int=36)', got '%!s(int=240)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkuvbt89m_test.go:43:\
    \ expected '%!s(int=53361)', got '%!s(int=323400)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var count\
    \ int = 0\n\n    for i := 1; i < n; i++ {\n        ai := i * i - i + 1\n     \
    \   for j := i + 1; j < n; j++ {\n            aj := j * j - j + 1\n          \
    \  sum := ai + aj\n            if (sum % 3 == 0) {\n                count += n\
    \ - j\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpbufjx_zx_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpbufjx_zx_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpbufjx_zx_test.go:51: expected '%!s(int=36)', got '%!s(int=9)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpbufjx_zx_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=17424)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var count\
    \ = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            if (i + j) % 3 == 0 {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpx98v59au_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpx98v59au_test.go:46:\
    \ expected '%!s(int=36)', got '%!s(int=12)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpx98v59au_test.go:46: expected '%!s(int=53361)', got '%!s(int=1617)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var table\
    \ = make([]int, n + 1)\n    table[0] = 0\n    table[1] = 1\n    for i := 2; i\
    \ <= n; i++ {\n        if i % 3 == 1 {\n            table[i] = table[i - 1] +\
    \ 1\n        } else {\n            table[i] = table[i - 1]\n        }\n    }\n\
    \    fmt.Println(table)\n    return table[n]\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[0 1 1 1 2 2]\n[0 1 1 1 2 2 2]\n[0 1 1 1 2 2 2 3 3 3 4]\n[0 1 1 1 2 2 2\
    \ 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 10 10 10 11 11 11 12 12 12 13 13 13\
    \ 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22\
    \ 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 29 29 29 30 30 30 31\
    \ 31 31 32 32 32 33 33 33 34]\n--- FAIL: TestGet_Max_Triples (0.00s)\n    ---\
    \ FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmpc7n6m8y4_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpc7n6m8y4_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpc7n6m8y4_test.go:49:\
    \ expected '%!s(int=36)', got '%!s(int=4)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpc7n6m8y4_test.go:49: expected '%!s(int=53361)', got '%!s(int=34)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    c := 0\n\
    \    // \u5168\u6392\u5217\n    for i := 1; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ is_triple(i, j, k) {\n                    c++\n                }\n         \
    \   }\n        }\n    }\n    return c\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8e2pzp0_test.go:24:20: undefined: is_triple

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074343
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    counter\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    counter++\n \
    \               }\n            }\n        }\n    }\n    return counter\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp3nhorxb3_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp3nhorxb3_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp3nhorxb3_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074344
