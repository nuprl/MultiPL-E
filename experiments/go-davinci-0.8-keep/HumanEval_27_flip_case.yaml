name: HumanEval_27_flip_case
language: go_test.go
prompt: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\
  // >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string) string {\n"
tests: "func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
  Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
  \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return \"\"\n}\n", "    myStringRunes := []rune(myString)\n   \
    \ for index, letter := range myStringRunes {\n        if letter >= 'a' && letter\
    \ <= 'z' {\n            myStringRunes[index] = letter - 32\n        } else if\
    \ letter >= 'A' && letter <= 'Z' {\n            myStringRunes[index] = letter\
    \ + 32\n        }\n    }\n    return string(myStringRunes)\n}\n", "    var newString\
    \ string\n    for _, c := range myString {\n        // fmt.Println(c)\n      \
    \  switch {\n        case c >= 'a' && c <= 'z':\n            c = c - 32\n    \
    \    case c >= 'A' && c <= 'Z':\n            c = c + 32\n        }\n        newString\
    \ += string(c)\n    }\n    return newString\n}\n", "    var new_string []rune\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            new_string = append(new_string, unicode.ToUpper(char))\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            new_string = append(new_string,\
    \ unicode.ToLower(char))\n        } else {\n            new_string = append(new_string,\
    \ char)\n        }\n    }\n    return string(new_string)\n}\n", "    runes :=\
    \ []rune(myString)\n    for i, char := range runes {\n        if char == unicode.ToLower(char)\
    \ {\n            runes[i] = unicode.ToUpper(char)\n        } else {\n        \
    \    runes[i] = unicode.ToLower(char)\n        }\n    }\n    return string(runes)\n\
    }\n", "    var result []rune\n    for _, c := range myString {\n        if c >=\
    \ 65 && c <= 90 {\n            result = append(result, rune(c+32))\n        }\
    \ else if c >= 97 && c <= 122 {\n            result = append(result, rune(c-32))\n\
    \        } else {\n            result = append(result, c)\n        }\n    }\n\
    \    return string(result)\n}\n", "    retVal := \"\"\n    for _, char := range\
    \ myString {\n        if char >= 65 && char <= 90 {\n            retVal += string(char\
    \ + 32)\n        } else if char >= 97 && char <= 122 {\n            retVal +=\
    \ string(char - 32)\n        } else {\n            retVal += string(char)\n  \
    \      }\n    }\n    return retVal\n}\n", "    var outputString string\n    for\
    \ _, ch := range myString {\n        if ch >= 'a' && ch <= 'z' {\n           \
    \ outputString += string(ch - 32)\n        } else if ch >= 'A' && ch <= 'Z' {\n\
    \            outputString += string(ch + 32)\n        } else {\n            outputString\
    \ += string(ch)\n        }\n    }\n    return outputString\n}\n", "    // Make\
    \ a buffer of bytes (of type 'uint8') of the same length as the string.\n    newString\
    \ := make([]byte, len(myString))\n    // Loop through each index in the string,\
    \ and access the bytes.\n    for i, c := range myString {\n        // If the byte\
    \ is between 'a' and 'z' (inclusive)...\n        if c >= 'a' && c <= 'z' {\n \
    \           // Subtract 'a' from the byte, and add 'A' to it.\n            newString[i]\
    \ = c - 'a' + 'A'\n        } else if c >= 'A' && c <= 'Z' {\n            // Subtract\
    \ 'A' from the byte, and add 'a' to it.\n            newString[i] = c - 'A' +\
    \ 'a'\n        } else {\n            // If not, leave it alone.\n            newString[i]\
    \ = c\n        }\n    }\n    // Return the string.\n    return string(newString)\n\
    }\n", "    return \"\"\n}\n", "    // YOUR CODE HERE\n    return myString\n}\n",
  "    chars := []rune(myString)\n    for index, letter := range chars {\n       \
    \ if letter >= 'a' && letter <= 'z' {\n            chars[index] = letter - 32\n\
    \        } else if letter >= 'A' && letter <= 'Z' {\n            chars[index]\
    \ = letter + 32\n        }\n    }\n    return string(chars)\n}\n", "    var newString\
    \ string\n    for _, char := range myString {\n        if unicode.IsUpper(char)\
    \ {\n            newString += strings.ToLower(string(char))\n        } else {\n\
    \            newString += strings.ToUpper(string(char))\n        }\n    }\n  \
    \  return newString\n}\n", "    // return \"\"\n    returnRune := []rune(myString)\n\
    \    for i, v := range returnRune {\n        if v >= 65 && v <= 90 {\n       \
    \     returnRune[i] = v + 32\n        } else if v >= 97 && v <= 122 {\n      \
    \      returnRune[i] = v - 32\n        }\n    }\n    return string(returnRune)\n\
    }\n", "    for i := 0; i < len(myString); i++ {\n        myString = string(myString[i]^32)\
    \ + myString[i+1:]\n    }\n    return myString\n}\n", "    newString := \"\"\n\
    \    for _, char := range myString {\n        if char > 64 && char < 91 {\n  \
    \          newString += string(char + 32)\n        } else if char > 96 && char\
    \ < 123 {\n            newString += string(char - 32)\n        } else {\n    \
    \        newString += string(char)\n        }\n    }\n    return newString\n}\n",
  "    var outputString string\n    for _, char := range myString {\n        if char\
    \ == char - 32 {\n            outputString += string(char + 32)\n        } else\
    \ {\n            outputString += string(char - 32)\n        }\n    }\n    return\
    \ outputString\n}\n", "    r := []rune(myString)\n    for i,c := range r {\n \
    \       if c >= 'a' && c <= 'z' {\n            r[i] = 'A' + (c - 'a')\n      \
    \  } else if c >= 'A' && c <= 'Z' {\n            r[i] = 'a' + (c - 'A')\n    \
    \    }\n    }\n    return string(r)\n}\n", "    myStringArray := []rune(myString)\n\
    \    for index, character := range myStringArray {\n        if character >= 'a'\
    \ && character <= 'z' {\n            myStringArray[index] = character - 32\n \
    \       } else if character >= 'A' && character <= 'Z' {\n            myStringArray[index]\
    \ = character + 32\n        }\n    }\n    return string(myStringArray)\n}\n",
  "    newString := \"\"\n    for _, v := range myString {\n        if v > 64 && v\
    \ < 91 {\n            newString += string(v + 32)\n        } else if v > 96 &&\
    \ v < 123 {\n            newString += string(v - 32)\n        } else {\n     \
    \       newString += string(v)\n        }\n    }\n    return newString\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
