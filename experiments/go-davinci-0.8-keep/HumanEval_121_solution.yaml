name: HumanEval_121_solution
language: go_test.go
prompt: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n//\
  \ solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunc solution(lst\
  \ []int) int {\n"
tests: "func TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3,\
  \ 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}),\
  \ expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     {\
  \ actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
  \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected:\
  \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
