name: HumanEval_92_any_int
language: go_test.go
prompt: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create\
  \ a function that takes 3 numbers.\n// Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n// Returns false in\
  \ any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3,\
  \ 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2)\
  \ \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n"
tests: "func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
  \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected: false\
  \ },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual: candidate(4,\
  \ 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false\
  \ },\n     { actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
  \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true },\n\
  \     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    return x == y + z || y == x + z || z == x + y\n}\n", "    if (x\
    \ + y == z) || (x + z == y) || (y + z == x) {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n", "    x_int := int(x)\n    y_int := int(y)\n\
    \    z_int := int(z)\n    switch {\n    case x_int + y_int == z_int:\n       \
    \ return true\n    case x_int + z_int == y_int:\n        return true\n    case\
    \ y_int + z_int == x_int:\n        return true\n    default:\n        return false\n\
    \    }\n}\n", "    if x == y + z {\n        return true\n    } else if y == x\
    \ + z {\n        return true\n    } else if z == x + y {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n", "    return int(x) + int(y)\
    \ == int(z) || int(x) + int(z) == int(y) || int(y) + int(z) == int(x)\n}\n", " \
    \   sum := x + y + z\n    xy := x + y\n    xz := x + z\n    yz := y + z\n    if\
    \ sum == xy || sum == xz || sum == yz {\n        return true\n    }\n    return\
    \ false\n}\n", "\tif x-y-z == 0 || y-x-z == 0 || z-x-y == 0 {\n\t\treturn true\n\
    \t} else {\n\t\treturn false\n\t}\n}\n", "    return int(x) + int(y) == int(z)\
    \ || int(x) + int(z) == int(y) || int(y) + int(z) == int(x)\n}\n", "    if x +\
    \ y == z || x + z == y || y + z == x {\n        return true\n    } else {\n  \
    \      return false\n    }\n}\n", "    if x < 0 || y < 0 || z < 0 {\n        return\
    \ false\n    }\n    if x % 1 != 0 || y % 1 != 0 || z % 1 != 0 {\n        return\
    \ false\n    }\n    if x + y == z || x + z == y || y + z == x {\n        return\
    \ true\n    }\n    return false\n}\n", "    if (x+y==z || x+z==y || y+z==x) &&\
    \ x == float64(int(x)) && y == float64(int(y)) && z == float64(int(z)) {\n   \
    \     return true\n    }\n    return false\n}\n", "    if x == y + z {\n     \
    \   return true\n    }\n    if y == x + z {\n        return true\n    }\n    if\
    \ z == x + y {\n        return true\n    }\n    return false\n}\n", "    arr :=\
    \ []float64{x, y, z}\n    for i := 0; i < len(arr); i++ {\n        sum := 0.0\n\
    \        for j := 0; j < len(arr); j++ {\n            if j != i {\n          \
    \      sum += arr[j]\n            }\n        }\n        if arr[i] == sum {\n \
    \           return true\n        }\n    }\n    return false\n}\n", "    sum :=\
    \ x + y\n    if float64(int(sum)) == sum && float64(int(z)) == z {\n        if\
    \ x == sum - y || y == sum - x || z == sum - x || z == sum - y {\n           \
    \ return true\n        }\n    }\n    return false\n}\n", "    if x == y + z ||\
    \ y == x + z || z == x + y {\n        return true\n    }\n    return false\n}\n",
  "    slice := []float64{x, y, z}\n    for i, s := range slice {\n        fmt.Println(i,\
    \ s)\n        if s == math.Floor(s) {\n            i++\n        } else {\n   \
    \         return false\n        }\n    }\n    return true\n}\n", "    return x\
    \ == y + z || x == y - z || x == z - y || y == x + z || y == x - z || y == z -\
    \ x || z == x + y || z == x - y || z == y - x\n}\n", "    return (x + y == z ||\
    \ x + z == y || y + z == x) && isInt(x) && isInt(y) && isInt(z)\n}\n", "    if\
    \ (x+y == z || x+z == y || y+z == x) && (x == int(x) && y == int(y) && z == int(z))\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n", " \
    \   // check if all numbers are integers\n    if int(x) == x && int(y) == y &&\
    \ int(z) == z {\n        // check if one of the numbers is equal to the sum of\
    \ the other two\n        return x + y == z || x + z == y || y + z == x\n    }\n\
    \    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
