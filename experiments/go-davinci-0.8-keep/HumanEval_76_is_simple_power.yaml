name: HumanEval_76_is_simple_power
language: go_test.go
prompt: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n\
  // is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3,\
  \ 1) => false\n// is_simple_power(5, 3) => false\nfunc is_simple_power(x int, n\
  \ int) bool {\n"
tests: "func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n     {\
  \ actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
  \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n   \
  \  { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24, 2),\
  \ expected: false },\n     { actual: candidate(128, 4), expected: false },\n   \
  \  { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1, 1),\
  \ expected: true },\n     { actual: candidate(1, 12), expected: true },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return false\n}\n", "    for x > 1 {\n        if x % n == 0 {\n\
    \            x /= n\n        } else {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "\tp := 1\n\tfor p <= x {\n\t\tif p == x {\n\t\t\
    \treturn true\n\t\t}\n\t\tp *= n\n\t}\n\treturn false\n}\n", "    for n < x {\n\
    \        n *= n\n    }\n    return n == x\n}\n", "    if x == 1 {\n        return\
    \ true\n    }\n    for i := 1; i <= x / n; i++ {\n        if int(math.Pow(float64(n),\
    \ float64(i))) == x {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    // Good Luck!\n    return false\n}\n", "    ret := false\n    var pow\
    \ int\n    for i := 0; i < x; i++ {\n        pow = n * i\n        if pow == x\
    \ {\n            ret = true\n            break\n        }\n    }\n    return ret\n\
    }\n\ntype SimplePower ", "    if x == 1 {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n     \
    \   res := 1\n        for j := 1; j <= i; j++ {\n            res *= n\n      \
    \  }\n        if res == x {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    return false\n}\n", "    return true\n}\n", "    // your code\
    \ here\n    return false\n}\n", "    return n >= 0 && x == int(math.Pow(float64(n),\
    \ float64(int(math.Log2(float64(x))))))\n}\n", "    if x < 0 || n <= 0 {\n   \
    \     return false\n    }\n\n    if x == 1 && n == 1 {\n        return true\n\
    \    }\n\n    for base := 1; base < x; base *= n {\n        if base == x {\n \
    \           return true\n        }\n    }\n\n    return false\n}\n\ntype test ",
  "    // your code here\n    return false\n}\n", "    return false\n}\n", "    if\
    \ x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if x % n != 0 {\n        return false\n    }\n    if x / n == 1 {\n\
    \        return true\n    }\n    return is_simple_power(x / n, n)\n}\n", "   \
    \ // https://stackoverflow.com/questions/18401847/how-to-square-a-number-in-go\n\
    \    for square := n; square <= x; square *= n {\n        if square == x {\n \
    \           return true\n        }\n    }\n    return false\n}\n", "\tfor i :=\
    \ 2; x > 1; i++ {\n\t\tfmt.Println(i)\n\t\tif x%n != 0 {\n\t\t\treturn false\n\
    \t\t}\n\t\tx /= n\n\t}\n\treturn true\n}\n", "    if n == 1 {\n        return\
    \ x == 1\n    }\n    for i := 0; ; i++ {\n        if n**i == x {\n           \
    \ return true\n        }\n        if n**i > x {\n            return false\n  \
    \      }\n    }\n}\n", "    x_last := 1\n    for i := 0; i < 20; i++ {\n     \
    \   x_last *= n\n        if x_last == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
