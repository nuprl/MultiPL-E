name: HumanEval_42_incr_list
language: go_test.go
prompt: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2,\
  \ 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nfunc incr_list(l []int) []int {\n"
tests: "func TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(l))\n    for i, v := range l {\n    \
    \    result[i] = v + 1\n    }\n    return result\n}\n", "    return nil\n}\n",
  "    l_new := make([]int, len(l))\n    for i, elem := range l {\n        l_new[i]\
    \ = elem + 1\n    }\n    return l_new\n}\n", "    r := make([]int, len(l))\n \
    \   for i, v := range l {\n        r[i] = v + 1\n    }\n    return r\n}\n", " \
    \   for i, v := range l {\n        l[i] = v + 1\n    }\n    return l\n}\n", " \
    \   for i, v := range l {\n        l[i] = v + 1\n    }\n    return l\n}\n", " \
    \   for i, _ := range l {\n        l[i] += 1\n    }\n    return l\n}\n", "   \
    \ ret := make([]int, len(l))\n    for i, v := range l {\n        ret[i] = v +\
    \ 1\n    }\n    return ret\n}\n", "    for i, e := range l {\n        l[i] = e\
    \ + 1\n    }\n    return l\n}\n", "    return nil\n}\n", "    var (\n        incr_l\
    \ []int\n        i int\n    )\n    for i = 0; i < len(l); i++ {\n        incr_l\
    \ = append(incr_l, l[i] + 1)\n    }\n    return incr_l\n}\n", "    if l == nil\
    \ {\n        return nil\n    }\n    for i, x := range l {\n        l[i] = x +\
    \ 1\n    }\n    return l\n}\n", "    o := make([]int, len(l))\n    for i, v :=\
    \ range l {\n        o[i] = v + 1\n    }\n    return o\n}\n", "    for i, e :=\
    \ range l {\n        l[i] = e + 1\n    }\n    return l\n}\n", "    return nil\n\
    }\n", "    for i, _ := range l {\n        l[i]++\n    }\n    return l\n}\n", " \
    \   new_list := make([]int, len(l))\n    for i, v := range l {\n        new_list[i]\
    \ = v + 1\n    }\n    return new_list\n}\n", "    r := make([]int, len(l))\n \
    \   for i, v := range l {\n        r[i] = v + 1\n    }\n    return r\n}\n", " \
    \   incr := func(x int) int {\n        return x + 1\n    }\n    return map_list(l,\
    \ incr)\n}\n", "    res := make([]int, len(l))\n    for i, v := range l {\n  \
    \      res[i] = v + 1\n    }\n    return res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
