language: go_test.go
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    var result string\n\n    for _, ch\
    \ := range s {\n        if ch >= 'A' && ch <= 'Z' {\n            result += string((ch\
    \ - 'A' + 2) % 26 + 'A')\n        } else if ch >= 'a' && ch <= 'z' {\n       \
    \     result += string((ch - 'a' + 2) % 26 + 'a')\n        } else {\n        \
    \    result += string(ch)\n        }\n    }\n\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpq3tygu38_test.go:53: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpq3tygu38_test.go:53: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq3tygu38_test.go:53:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpq3tygu38_test.go:53: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpq3tygu38_test.go:53: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq3tygu38_test.go:53:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpq3tygu38_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpq3tygu38_test.go:53: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"lm\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__1 (0.00s)\n\
    \        tmpt58zfojm_test.go:41: expected 'ewhjklnop', got 'lm'\n    --- FAIL:\
    \ TestEncrypt/test_num__2 (0.00s)\n        tmpt58zfojm_test.go:41: expected 'kj',\
    \ got 'lm'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpt58zfojm_test.go:41:\
    \ expected 'ix', got 'lm'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n   \
    \     tmpt58zfojm_test.go:41: expected 'jeiajeaijeiak', got 'lm'\n    --- FAIL:\
    \ TestEncrypt/test_num__5 (0.00s)\n        tmpt58zfojm_test.go:41: expected 'lippsqcjvmirh',\
    \ got 'lm'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpt58zfojm_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'lm'\n    ---\
    \ FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpt58zfojm_test.go:41: expected\
    \ 'e', got 'lm'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n\t// WRITE YOUR CODE HERE\n\treturn \"\
    \"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpywk8tt4z_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpywk8tt4z_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpywk8tt4z_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpywk8tt4z_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpywk8tt4z_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpywk8tt4z_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpywk8tt4z_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpywk8tt4z_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    sMap := map[string]string {\n   \
    \     \"a\":\"c\",\n        \"b\":\"d\",\n        \"c\":\"e\",\n        \"d\"\
    :\"f\",\n        \"e\":\"g\",\n        \"f\":\"h\",\n        \"g\":\"j\",\n  \
    \      \"h\":\"k\",\n        \"i\":\"l\",\n        \"j\":\"m\",\n        \"k\"\
    :\"n\",\n        \"l\":\"o\",\n        \"m\":\"p\",\n        \"n\":\"q\",\n  \
    \      \"o\":\"r\",\n        \"p\":\"s\",\n        \"q\":\"t\",\n        \"r\"\
    :\"u\",\n        \"s\":\"v\",\n        \"t\":\"w\",\n        \"u\":\"x\",\n  \
    \      \"v\":\"y\",\n        \"w\":\"z\",\n        \"x\":\"a\",\n        \"y\"\
    :\"b\",\n        \"z\":\"c\",\n    }\n    var sEncrypt string\n    for i := 0;\
    \ i < len(s); i++ {\n        sEncrypt += sMap[string(s[i])]\n    }\n    return\
    \ sEncrypt\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpwux85zwg_test.go:73: expected 'lm', got 'kl'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpwux85zwg_test.go:73: expected 'ewhjklnop', got 'cvfhjkmno'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpwux85zwg_test.go:73:\
    \ expected 'kj', got 'jh'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpwux85zwg_test.go:73: expected 'ix', got 'gw'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpwux85zwg_test.go:73: expected 'jeiajeaijeiak', got 'hcgzhczghcgzj'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpwux85zwg_test.go:73:\
    \ expected 'lippsqcjvmirh', got 'kgoorpbhulgqf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpwux85zwg_test.go:73: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'facfopqlohxkploxhkolkxhqpolpqxhkolpqxhkhxexhk'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpwux85zwg_test.go:73: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n\tvar final string\n\tfor _, char :=\
    \ range s {\n\t\tif char >= 'a' && char <= 'y' {\n\t\t\tfinal += string(char +\
    \ 2)\n\t\t} else if char == 'z' {\n\t\t\tfinal += \"b\"\n\t\t} else if char ==\
    \ 'x' {\n\t\t\tfinal += \"a\"\n\t\t} else {\n\t\t\tfinal += string(char)\n\t\t\
    }\n\t}\n\treturn final\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpa5u_ih31_test.go:53: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpa5u_ih31_test.go:53: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpa5u_ih31_test.go:53:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpa5u_ih31_test.go:53: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpa5u_ih31_test.go:53: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpa5u_ih31_test.go:53:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpa5u_ih31_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpa5u_ih31_test.go:53: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmprxox3yfo_test.go:41: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmprxox3yfo_test.go:41: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmprxox3yfo_test.go:41:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmprxox3yfo_test.go:41: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmprxox3yfo_test.go:41: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmprxox3yfo_test.go:41:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmprxox3yfo_test.go:41: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmprxox3yfo_test.go:41: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write code here.\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogouihip_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074144
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write code here\n    return \"\
    \"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpecpsioa__test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpecpsioa__test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpecpsioa__test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpecpsioa__test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpecpsioa__test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpecpsioa__test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpecpsioa__test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpecpsioa__test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    var c, r string\n    for _, c = range\
    \ s {\n        r += string(c + 2 * 2)\n    }\n    return r\n}\n\n//Create a function\
    \ decrypt that takes a string as an argument and\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttrrmykd_test.go:19:12: cannot use c (value of type rune) as type string
    in assignment

    /tmp/tmpttrrmykd_test.go:20:21: invalid operation: c + 2 * 2 (mismatched types
    string and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074144
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var newString string\n    for _, value := range s {\n        var index =\
    \ alphabet.IndexRune(value)\n        var newIndex = index + (index * 2)\n    \
    \    if newIndex > 25 {\n            newIndex = newIndex - 26\n        }\n   \
    \     newString += string(alphabet[newIndex])\n    }\n    return newString\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5az0qt2x_test.go:21:30: alphabet.IndexRune undefined (type string has
    no field or method IndexRune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074144
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    s = \"\"\n    return s\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpqwaiw1ws_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpqwaiw1ws_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpqwaiw1ws_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpqwaiw1ws_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpqwaiw1ws_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpqwaiw1ws_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpqwaiw1ws_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpqwaiw1ws_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"kj\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpu6n0s5a8_test.go:41: expected 'lm', got 'kj'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpu6n0s5a8_test.go:41: expected 'ewhjklnop', got 'kj'\n  \
    \  --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpu6n0s5a8_test.go:41:\
    \ expected 'ix', got 'kj'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n   \
    \     tmpu6n0s5a8_test.go:41: expected 'jeiajeaijeiak', got 'kj'\n    --- FAIL:\
    \ TestEncrypt/test_num__5 (0.00s)\n        tmpu6n0s5a8_test.go:41: expected 'lippsqcjvmirh',\
    \ got 'kj'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpu6n0s5a8_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'kj'\n    ---\
    \ FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpu6n0s5a8_test.go:41: expected\
    \ 'e', got 'kj'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074145
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n\t// Create slice of alphabets\n\talphabets\
    \ := \"abcdefghijklmnopqrstuvwxyz\"\n\t// Create encrypted string\n\tencryptedString\
    \ := \"\"\n\t// Create slice of encrypted alphabets\n\tencryptedAlphabets := []rune(alphabets[2:]\
    \ + alphabets[:2])\n\t// For each letter in string\n\tfor _, letter := range s\
    \ {\n\t\t// Find location of letter\n\t\tlocation := strings.Index(alphabets,\
    \ string(letter))\n\t\t// Set new letter to encrypted letter at same location\n\
    \t\tnewLetter := encryptedAlphabets[location]\n\t\t// Append new letter to encrypted\
    \ string\n\t\tencryptedString += string(newLetter)\n\t}\n\t// Return encrypted\
    \ string\n\treturn encryptedString\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2pim9u9j_test.go:27:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074144
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n\t// Your code here\n\treturn \"\"\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmph0vdoh4a_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmph0vdoh4a_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmph0vdoh4a_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmph0vdoh4a_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmph0vdoh4a_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmph0vdoh4a_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmph0vdoh4a_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmph0vdoh4a_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074145
