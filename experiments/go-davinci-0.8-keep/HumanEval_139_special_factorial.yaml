name: HumanEval_139_special_factorial
language: go_test.go
prompt: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunc special_factorial(n int) int {\n"
tests: "func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
  \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
  \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if n < 1 {\n        return 0\n    }\n\n    var factorial int =\
    \ 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n\n    return\
    \ factorial\n}\n", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    return n * special_factorial(n-1) * special_factorial(n-2)\n\
    }\n", "    var res int = 1\n    for i := 1; i <= n; i++ {\n        res *= i\n\
    \    }\n    return res\n}\n", "    if n == 1 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n", "    var (\n        i int = n\n        j int\
    \ = n - 1\n        k int = n - 2\n        result int = n\n    )\n    for j > 0\
    \ {\n        result *= j\n        for k > 0 {\n            result *= k\n     \
    \       k--\n        }\n        i--\n        j = i - 1\n        k = i - 2\n  \
    \  }\n    return result\n}\n", "    return n\n}\n", "    // your code here\n \
    \   return 0\n}\n", "    result := 1\n    for i := n; i > 0; i-- {\n        result\
    \ *= i\n    }\n    return result\n}\n", "    if n == 1 {\n        return 1\n \
    \   }\n    return n * special_factorial(n-1)\n}\n", "    // Fill this in.\n  \
    \  return 0\n}\n", "    // your code here\n    f := func(n int) int {\n      \
    \  if n <= 1 {\n            return 1\n        }\n        return n * f(n-1)\n \
    \   }\n    r := 1\n    for i := 1; i <= n; i++ {\n        r *= f(i)\n    }\n \
    \   return r\n}\n", "    // PUT YOUR CODE HERE\n    return 0\n}\n", "    prod\
    \ := 1\n    for k := 1; k <= n; k++ {\n        prod *= factorial(k)\n    }\n \
    \   return prod\n}\n", "    if n == 1 {\n        return 1\n    }\n\n    return\
    \ n * special_factorial(n-1)\n}\n", "    if n < 0 {\n        return -1\n    }\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    var i, f int = 0, 1\n    for i = 1; i <= n; i++ {\n        f *= i\n\
    \    }\n    return f\n}\n", "    var r int = 1\n    for i := n; i > 0; i-- {\n\
    \        r *= factorial(i)\n    }\n    return r\n}\n", "    // Your code here!\n\
    }\n", "    if n < 1 {\n        return 0\n    }\n    total := 1\n    factorial\
    \ := 1\n    for i := n; i > 0; i-- {\n        factorial *= i\n        total *=\
    \ factorial\n    }\n    return total\n}\n", "    // start writing your code here\n\
    \    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
