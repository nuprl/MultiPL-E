language: go_test.go
name: HumanEval_146_specialFilter
results:
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, v := range nums {\n        if v > 10 && isOdd(abs(v / 10)) && isOdd(abs(v\
    \ % 10)) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjz4brs4_test.go:17:22: undefined: isOdd

    /tmp/tmpzjz4brs4_test.go:17:28: undefined: abs

    /tmp/tmpzjz4brs4_test.go:17:44: undefined: isOdd

    /tmp/tmpzjz4brs4_test.go:17:50: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074878
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    c := 0\n    for _,\
    \ i := range nums {\n        if first, last := i/10, i%10; i > 10 && (first%2\
    \ == 1) && (last%2 == 1) {\n            c++\n        }\n    }\n    return c\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpz0lco4nw_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpz0lco4nw_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    return 0\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, n := range nums {\n        r := n\n        var d1, d2 int\n        if\
    \ n < 0 {\n            r = -r\n        }\n        d1 = r % 10\n        d2 = r\
    \ / 10\n        if d1 % 2 == 1 && d2 % 2 == 1 && r > 10 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl7oh2n4w_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl7oh2n4w_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl7oh2n4w_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpl7oh2n4w_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastOdd(n) {\n        \
    \    count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqepkbd6i_test.go:17:22: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074878
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var numsCount int\
    \ = 0\n    for _, v := range nums {\n        var i int = v\n        var j int\
    \ = v\n        if i > 10 {\n            if i % 2 != 0 {\n                for j\
    \ > 0 {\n                    if j < 10 {\n                        if j % 2 !=\
    \ 0 {\n                            numsCount = numsCount + 1\n               \
    \         }\n                        break\n                    }\n          \
    \          j = j / 10\n                }\n            }\n        }\n    }\n  \
    \  return numsCount\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num/10%2 != 0 && num%10%2 !=\
    \ 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpqchpxefr_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpqchpxefr_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        first := num / 10 % 10\n        last := num\
    \ % 10\n        if num > 10 && (first%2 != 0 && last%2 != 0) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp12fteyoq_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp12fteyoq_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int = 0\n\
    \    for _, v := range nums {\n        if v > 10 && (v / 10) % 2 == 1 && v % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpbiqpjo67_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpbiqpjo67_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc7ml9hq_test.go:16:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        last := num % 10\n        num = num / 10\n\
    \        first := num % 10\n        if first % 2 != 0 && last % 2 != 0 && num\
    \ > 10 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp4u1p0uw9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp4u1p0uw9_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp4u1p0uw9_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp4u1p0uw9_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    return\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp54uld4fi_test.go:15:5:\
    \ not enough return values\n\thave ()\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var result []int\n\
    \    for _, number := range nums {\n        if number % 2 != 0 && (number / 10)\
    \ % 2 != 0 && number % 10 != 0 {\n            result = append(result, number)\n\
    \        }\n    }\n    return len(result)\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpd_v5v00j_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpd_v5v00j_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpd_v5v00j_test.go:43: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpd_v5v00j_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    counter := 0\n   \
    \ for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzfh5cbw5_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && \n          \
    \  num / 10 % 2 == 1 && num % 10 % 2 == 1 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp2005ztyb_test.go:44: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp2005ztyb_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num%2 == 1 && num/10%2 ==\
    \ 1 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpwl1_oxua_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpwl1_oxua_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, val := range nums {\n        if val > 10 && val%2 != 0 && val/10%2 != 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_ua35snr_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_ua35snr_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, i := range nums {\n        if i > 10 && i/10%2 == 1 && i%10%2 == 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp7cxv4o15_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp7cxv4o15_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    return 0\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
