name: HumanEval_5_intersperse
language: go_test.go
prompt: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Insert a number 'delimeter' between every two consecutive elements of input list\
  \ `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n\
  // [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int {\n"
tests: "func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual:\
  \ candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n   \
  \  { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return []int{numbers[0]}\n    }\n    result := make([]int, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result[i * 2]\
    \ = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result)\
    \ - 1] = numbers[len(numbers) - 1]\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    if len(numbers) == 1 {\n        return\
    \ []int{numbers[0]}\n    }\n    r := make([]int, 2 * len(numbers) - 1)\n    r[0]\
    \ = numbers[0]\n    r[1] = delimeter\n    for i := 2; i < len(r); i += 2 {\n \
    \       r[i] = numbers[i / 2]\n        r[i + 1] = delimeter\n    }\n    return\
    \ r\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    if\
    \ len(numbers) == 1 {\n        return numbers\n    }\n    var result []int\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result, numbers[i])\n\
    \        result = append(result, delimeter)\n    }\n    result = append(result,\
    \ numbers[len(numbers) - 1])\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n\n    result := make([]int, 2 * len(numbers)\
    \ - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[2 * i - 1] = delimeter\n        result[2 * i] = numbers[i]\n \
    \   }\n    return result\n}\n", "    var interspersed []int\n    for i, v := range\
    \ numbers {\n        interspersed = append(interspersed, v)\n        if i+1 <\
    \ len(numbers) {\n            interspersed = append(interspersed, delimeter)\n\
    \        }\n    }\n    return interspersed\n}\n", "    var result []int\n    if\
    \ numbers == nil || len(numbers) == 0 {\n        return result\n    }\n\n    for\
    \ i, num := range numbers {\n        result = append(result, num)\n        if\
    \ i < len(numbers) - 1 {\n            result = append(result, delimeter)\n   \
    \     }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n       \
    \ return numbers\n    }\n\n    var interspersed []int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        interspersed = append(interspersed, numbers[i])\n      \
    \  interspersed = append(interspersed, delimeter)\n    }\n    interspersed = append(interspersed,\
    \ numbers[len(numbers) - 1])\n    return interspersed\n}\n", "    var result []int\n\
    \    for i, _ := range numbers {\n        if i > 0 {\n            result = append(result,\
    \ delimeter)\n        }\n        result = append(result, numbers[i])\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n",
  "    length := len(numbers)\n    var newList []int\n    for i := 0; i < length;\
    \ i++ {\n        newList = append(newList, numbers[i])\n        if i != length\
    \ - 1 {\n            newList = append(newList, delimeter)\n        }\n    }\n\
    \    return newList\n}\n", "    result := make([]int, 0)\n    for i, n := range\
    \ numbers {\n        result = append(result, n)\n        if i != len(numbers)\
    \ - 1 {\n            result = append(result, delimeter)\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := []int{numbers[0]}\n    for i := 1; i < len(numbers); i++ {\n  \
    \      result = append(result, delimeter)\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n", "    for i := len(numbers) - 1; i > 0; i-- {\n\
    \        numbers = append(numbers, 0)\n        copy(numbers[i+1:], numbers[i:])\n\
    \        numbers[i] = delimeter\n    }\n    return numbers\n}\n", "    // empty\
    \ input list\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n  \
    \  // set the initial delimeter\n    ret := []int{delimeter}\n    for _, num :=\
    \ range numbers {\n        ret = append(ret, num)\n        ret = append(ret, delimeter)\n\
    \    }\n\n    // remove the last delimeter\n    return ret[:len(ret)-1]\n}\n",
  "    if len(numbers) <= 1 {\n        return numbers\n    }\n    res := []int{numbers[0]}\n\
    \    for _, v := range numbers[1:] {\n        res = append(res, delimeter, v)\n\
    \    }\n    return res\n}\n", "    if len(numbers) <= 1 {\n        return numbers\n\
    \    }\n    result := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i * 2] = numbers[i]\n        if i != len(numbers) - 1\
    \ {\n            result[i * 2 + 1] = delimeter\n        }\n    }\n    return result\n\
    }\n", "    new_list := make([]int, 0)\n    for i, number := range numbers {\n\
    \        new_list = append(new_list, number)\n        if i != len(numbers) - 1\
    \ {\n            new_list = append(new_list, delimeter)\n        }\n    }\n  \
    \  return new_list\n}\n", "    list := make([]int, 0)\n    for i, value := range\
    \ numbers {\n        list = append(list, value)\n        if i < len(numbers) -\
    \ 1 {\n            list = append(list, delimeter)\n        }\n    }\n    return\
    \ list\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
