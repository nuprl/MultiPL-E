name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n\
  // >>> int_to_mini_roman(426) == 'cdxxvi'\nfunc int_to_mini_roman(number int) string\
  \ {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    roman_numerals := map[int]string{\n        1: \"i\",\n        4:\
    \ \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n       \
    \ 40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n\
    \        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000:\
    \ \"m\",\n    }\n    number_as_string := \"\"\n    for key := 1000; key > 0; key\
    \ = key / 10 {\n        if number / key > 0 {\n            if number / key ==\
    \ 4 {\n                number_as_string += roman_numerals[key] + roman_numerals[5\
    \ * key]\n            } else if number / key == 9 {\n                number_as_string\
    \ += roman_numerals[key] + roman_numerals[10 * key]\n            } else {\n  \
    \              if number / key > 5 {\n                    number_as_string +=\
    \ roman_numerals[5 * key]\n                }\n                for i := 0; i <\
    \ number / key % 5; i++ {\n                    number_as_string += roman_numerals[key]\n\
    \                }\n            }\n            number = number % key\n       \
    \ }\n    }\n    return number_as_string\n}\n", "    // Code here\n    return \"\
    \"\n}\n", "    // your code here\n    return \"\"\n}\n", "    numeral_map := map[int]string{\n\
    \        1:    \"i\",\n        4:    \"iv\",\n        5:    \"v\",\n        9:\
    \    \"ix\",\n        10:   \"x\",\n        40:   \"xl\",\n        50:   \"l\"\
    ,\n        90:   \"xc\",\n        100:  \"c\",\n        400:  \"cd\",\n      \
    \  500:  \"d\",\n        900:  \"cm\",\n        1000: \"m\",\n    }\n\n    keys\
    \ := []int{1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}\n    var numeral\
    \ string\n\n    for i := len(keys) - 1; i >= 0; i-- {\n        div := number /\
    \ keys[i]\n        mod := number % keys[i]\n        if div > 0 {\n           \
    \ numeral += strings.Repeat(numeral_map[keys[i]], div)\n        }\n        number\
    \ = mod\n    }\n\n    return numeral\n}\n", "    romanSymbols := [...]string{\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"}\n    numberValues := [...]int{1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1}\n    roman := \"\"\n    for i := 0; i < len(numberValues);\
    \ i++ {\n        for number >= numberValues[i] {\n            roman += romanSymbols[i]\n\
    \            number -= numberValues[i]\n        }\n    }\n    return roman\n}\n",
  "    // Your code here\n    return \"\"\n}\n", "    return \"\"\n}\n", "    if number\
    \ < 1 || number > 1000 {\n        panic(\"The number must be between 1 and 1000\"\
    )\n    }\n\n    roman := \"\"\n    for number > 0 {\n        if number >= 1000\
    \ {\n            roman += \"m\"\n            number -= 1000\n        } else if\
    \ number >= 900 {\n            roman += \"cm\"\n            number -= 900\n  \
    \      } else if number >= 500 {\n            roman += \"d\"\n            number\
    \ -= 500\n        } else if number >= 400 {\n            roman += \"cd\"\n   \
    \         number -= 400\n        } else if number >= 100 {\n            roman\
    \ += \"c\"\n            number -= 100\n        } else if number >= 90 {\n    \
    \        roman += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            roman += \"l\"\n            number -= 50\n        } else if\
    \ number >= 40 {\n            roman += \"xl\"\n            number -= 40\n    \
    \    } else if number >= 10 {\n            roman += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            roman += \"ix\"\n      \
    \      number -= 9\n        } else if number >= 5 {\n            roman += \"v\"\
    \n            number -= 5\n        } else if number >= 4 {\n            roman\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      roman += \"i\"\n            number -= 1\n        }\n    }\n\n    return\
    \ roman\n}\n", "    var digit = []int{1, 5, 10, 50, 100, 500, 1000}\n    var sym\
    \ = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var c = 0\n\
    \n    for i := len(digit) - 1; i >= 0; i-- {\n        x := number/digit[i]\n \
    \       if x < 4 {\n            for ; x > 0; x-- {\n                c++\n    \
    \            fmt.Print(sym[i])\n            }\n        } else if x == 4 {\n  \
    \          c++\n            fmt.Print(sym[i], sym[i+1])\n        } else if x >\
    \ 4 && x < 9 {\n            c++\n            fmt.Print(sym[i+1])\n           \
    \ for x = x - 5; x > 0; x-- {\n                c++\n                fmt.Print(sym[i])\n\
    \            }\n        } else if x == 9 {\n            c++\n            fmt.Print(sym[i],\
    \ sym[i+2])\n        }\n        number %= digit[i]\n    }\n    return fmt.Sprintf(\"\
    \ (%d)\", c)\n}\n", "    // your code here\n    return \"\"\n}\n", "    if number\
    \ < 1 || number > 1000 {\n        panic(\"Invalid number\")\n    }\n\n    result\
    \ := \"\"\n    for number > 0 {\n        if number >= 1000 {\n            result\
    \ += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n  \
    \          result += \"cm\"\n            number -= 900\n        } else if number\
    \ >= 500 {\n            result += \"d\"\n            number -= 500\n        }\
    \ else if number >= 400 {\n            result += \"cd\"\n            number -=\
    \ 400\n        } else if number >= 100 {\n            result += \"c\"\n      \
    \      number -= 100\n        } else if number >= 90 {\n            result +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     result += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            result += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            result += \"x\"\n            number -= 10\n    \
    \    } else if number >= 9 {\n            result += \"ix\"\n            number\
    \ -= 9\n        } else if number >= 5 {\n            result += \"v\"\n       \
    \     number -= 5\n        } else if number >= 4 {\n            result += \"iv\"\
    \n            number -= 4\n        } else if number >= 1 {\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result\n}\n",
  "    var numeral = \"\"\n    // Use a single function to handle conversion of all\
    \ numerals.\n    // Technically, there is an edge case that should be handled\n\
    \    // (what if the numeral were \"IM\", or \"IC\"? But these are not valid numbers\n\
    \    // since \"M\" or \"C\" can be used only once in a number, and I or X \n\
    \    // cannot precede M or C).\n    appendNumeral := func(numeralChar rune, numeralCount\
    \ int) {\n        for i := 0; i < numeralCount; i++ {\n            numeral +=\
    \ string(numeralChar)\n        }\n    }\n    if number >= 1000 {\n        appendNumeral('m',\
    \ number / 1000)\n        number %= 1000\n    }\n    if number >= 900 {\n    \
    \    appendNumeral('c', 1)\n        appendNumeral('m', 1)\n        number %= 900\n\
    \    }\n    if number >= 500 {\n        appendNumeral('d', 1)\n        number\
    \ %= 500\n    }\n    if number >= 400 {\n        appendNumeral('c', 1)\n     \
    \   appendNumeral('d', 1)\n        number %= 400\n    }\n    if number >= 100\
    \ {\n        appendNumeral('c', number / 100)\n        number %= 100\n    }\n\
    \    if number >= 90 {\n        appendNumeral('x', 1)\n        appendNumeral('c',\
    \ 1)\n        number %= 90\n    }\n    if number >= 50 {\n        appendNumeral('l',\
    \ 1)\n        number %= 50\n    }\n    if number >= 40 {\n        appendNumeral('x',\
    \ 1)\n        appendNumeral('l', 1)\n        number %= 40\n    }\n    if number\
    \ >= 10 {\n        appendNumeral('x', number / 10)\n        number %= 10\n   \
    \ }\n    if number >= 9 {\n        appendNumeral('i', 1)\n        appendNumeral('x',\
    \ 1)\n        number %= 9\n    }\n    if number >= 5 {\n        appendNumeral('v',\
    \ 1)\n        number %= 5\n    }\n    if number >= 4 {\n        appendNumeral('i',\
    \ 1)\n        appendNumeral('", "    roman_str := \"\"\n    for number > 0 {\n\
    \        if number >= 1000 {\n            roman_str += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            roman_str += \"cm\"\n\
    \            number -= 900\n        } else if number >= 500 {\n            roman_str\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         roman_str += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            roman_str += \"c\"\n            number -= 100\n      \
    \  } else if number >= 90 {\n            roman_str += \"xc\"\n            number\
    \ -= 90\n        } else if number >= 50 {\n            roman_str += \"l\"\n  \
    \          number -= 50\n        } else if number >= 40 {\n            roman_str\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        roman_str += \"x\"\n            number -= 10\n        } else if number\
    \ >= 9 {\n            roman_str += \"ix\"\n            number -= 9\n        }\
    \ else if number >= 5 {\n            roman_str += \"v\"\n            number -=\
    \ 5\n        } else if number >= 4 {\n            roman_str += \"iv\"\n      \
    \      number -= 4\n        } else if number >= 1 {\n            roman_str +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    return roman_str\n}\n",
  "    // your code here\n    // return \"\"\n\n    arabic := []int{1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    roman := []string{\"m\", \"cm\",\
    \ \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"}\n\n    output := \"\"\n    for i := 0; i < len(arabic); i++ {\n        for\
    \ number >= arabic[i] {\n            number -= arabic[i]\n            output +=\
    \ roman[i]\n        }\n    }\n    return output\n}\n", "    return \"\"\n}\n",
  "    return \"\"\n}\n", "    var numeral = \"\";\n    var numeral_map = map[int]string{\n\
    \        1:    \"i\",\n        4:    \"iv\",\n        5:    \"v\",\n        9:\
    \    \"ix\",\n        10:   \"x\",\n        40:   \"xl\",\n        50:   \"l\"\
    ,\n        90:   \"xc\",\n        100:  \"c\",\n        400:  \"cd\",\n      \
    \  500:  \"d\",\n        900:  \"cm\",\n        1000: \"m\",\n    }\n    var keys\
    \ []int\n    for key := range numeral_map {\n        keys = append(keys, key)\n\
    \    }\n    sort.Ints(keys)\n    var values = make([]string, len(keys))\n    for\
    \ i, key := range keys {\n        values[i] = numeral_map[key]\n    }\n    for\
    \ i, _ := range keys {\n        for number >= keys[i] {\n            numeral +=\
    \ values[i]\n            number -= keys[i]\n        }\n    }\n    return numeral\n\
    }\n", "    if number < 1 || number > 1000 {\n        return \"\"\n    }\n\n  \
    \  roman := \"\"\n    for number >= 1000 {\n        roman += \"m\"\n        number\
    \ -= 1000\n    }\n    for number >= 900 {\n        roman += \"cm\"\n        number\
    \ -= 900\n    }\n    for number >= 500 {\n        roman += \"d\"\n        number\
    \ -= 500\n    }\n    for number >= 400 {\n        roman += \"cd\"\n        number\
    \ -= 400\n    }\n    for number >= 100 {\n        roman += \"c\"\n        number\
    \ -= 100\n    }\n    for number >= 90 {\n        roman += \"xc\"\n        number\
    \ -= 90\n    }\n    for number >= 50 {\n        roman += \"l\"\n        number\
    \ -= 50\n    }\n    for number >= 40 {\n        roman += \"xl\"\n        number\
    \ -= 40\n    }\n    for number >= 10 {\n        roman += \"x\"\n        number\
    \ -= 10\n    }\n    for number >= 9 {\n        roman += \"ix\"\n        number\
    \ -= 9\n    }\n    for number >= 5 {\n        roman += \"v\"\n        number -=\
    \ 5\n    }\n    for number >= 4 {\n        roman += \"iv\"\n        number -=\
    \ 4\n    }\n    for number >= 1 {\n        roman += \"i\"\n        number -= 1\n\
    \    }\n    return roman\n}\n", "    var str string\n    var nums = []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    var romans = []string{\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"}\n    for i := 0; i < len(nums); i++ {\n        for number >=\
    \ nums[i] {\n            str += romans[i]\n            number -= nums[i]\n   \
    \     }\n    }\n    return str\n}\n", "    var result string\n\n    if number\
    \ >= 1000 {\n        result += \"m\"\n        number -= 1000\n    }\n    if number\
    \ >= 900 {\n        result += \"cm\"\n        number -= 900\n    }\n    if number\
    \ >= 500 {\n        result += \"d\"\n        number -= 500\n    }\n    if number\
    \ >= 400 {\n        result += \"cd\"\n        number -= 400\n    }\n    if number\
    \ >= 100 {\n        result += \"c\"\n        number -= 100\n    }\n    if number\
    \ >= 90 {\n        result += \"xc\"\n        number -= 90\n    }\n    if number\
    \ >= 50 {\n        result += \"l\"\n        number -= 50\n    }\n    if number\
    \ >= 40 {\n        result += \"xl\"\n        number -= 40\n    }\n    if number\
    \ >= 10 {\n        result += \"x\"\n        number -= 10\n    }\n    if number\
    \ >= 9 {\n        result += \"ix\"\n        number -= 9\n    }\n    if number\
    \ >= 5 {\n        result += \"v\"\n        number -= 5\n    }\n    if number >=\
    \ 4 {\n        result += \"iv\"\n        number -= 4\n    }\n    if number >=\
    \ 1 {\n        result += \"i\"\n        number -= 1\n    }\n\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
