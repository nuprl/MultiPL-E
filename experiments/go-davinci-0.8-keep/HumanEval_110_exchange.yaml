name: HumanEval_110_exchange
language: go_test.go
prompt: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ In this problem, you will implement a function that takes two lists of numbers,\n\
  // and determines whether it is possible to perform an exchange of elements\n//\
  \ between them to make lst1 a list of only even numbers.\n// There is no limit on\
  \ the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1,\
  \ 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
  func exchange(lst1 []int, lst2 []int) string {\n"
tests: "func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\"\
  \ },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
  \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
  \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
  \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
  \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5, 1,\
  \ 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
  \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if lst1 == nil || lst2 == nil {\n        return \"NO\"\n    }\n\
    \    if len(lst1) < 1 || len(lst2) < 1 {\n        return \"NO\"\n    }\n    //\
    \ exchange solution\n    var oddCount int\n    for _, n := range lst1 {\n    \
    \    if n % 2 != 0 {\n            oddCount++\n        }\n    }\n    evenCount\
    \ := len(lst1) - oddCount\n    // if evenCount == 0, oddCount must be even\n \
    \   if evenCount == 0 && oddCount % 2 == 0 {\n        return \"YES\"\n    }\n\
    \    if evenCount % 2 == 0 && oddCount % 2 == 0 {\n        return \"YES\"\n  \
    \  }\n    for _, n := range lst2 {\n        if n % 2 != 0 {\n            oddCount++\n\
    \        }\n    }\n    evenCount = len(lst2) - oddCount\n    if evenCount == 0\
    \ && oddCount % 2 == 0 {\n        return \"YES\"\n    }\n    if evenCount % 2\
    \ == 0 && oddCount % 2 == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n", "    even := 0\n    odd := 0\n    for _, v := range lst1 {\n        if\
    \ v % 2 == 0 {\n            even++\n        } else {\n            odd++\n    \
    \    }\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n       \
    \     even--\n        } else {\n            odd--\n        }\n    }\n    if even\
    \ < 0 || odd > 0 {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n", " \
    \   for _, x := range lst1 {\n        if x % 2 != 0 {\n            for _, y :=\
    \ range lst2 {\n                if y % 2 == 0 {\n                    return \"\
    YES\"\n                }\n            }\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n", "    if len(lst1) == 0 || len(lst2) == 0 {\n\
    \        return \"NO\"\n    }\n    for _, num := range lst1 {\n        if num\
    \ % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n", "    for _, v := range lst1 {\n        if v % 2 != 0 {\n            for\
    \ _, v := range lst2 {\n                if v % 2 == 0 {\n                    return\
    \ \"YES\"\n                }\n            }\n            return \"NO\"\n     \
    \   }\n    }\n    return \"YES\"\n}\n", "    // TODO\n    return \"\"\n}\n", " \
    \   evens1 := []int{}\n    evens2 := []int{}\n    odds1 := []int{}\n    odds2\
    \ := []int{}\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n        \
    \    evens1 = append(evens1, n)\n        } else {\n            odds1 = append(odds1,\
    \ n)\n        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n\
    \            evens2 = append(evens2, n)\n        } else {\n            odds2 =\
    \ append(odds2, n)\n        }\n    }\n    if len(evens1) == 0 && len(evens2) ==\
    \ 0 {\n        return \"NO\"\n    }\n    if len(evens1) > len(odds2) {\n     \
    \   return \"NO\"\n    }\n    if len(evens2) > len(odds1) {\n        return \"\
    NO\"\n    }\n    return \"YES\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    // TODO: Add your code here!\n    return \"\"\n}\n", "    numEven1\
    \ := 0\n    for _, val := range lst1 {\n        if val % 2 == 0 {\n          \
    \  numEven1++\n        }\n    }\n    numEven2 := 0\n    for _, val := range lst2\
    \ {\n        if val % 2 == 0 {\n            numEven2++\n        }\n    }\n   \
    \ if numEven1 + numEven2 < len(lst1) + len(lst2) {\n        return \"NO\"\n  \
    \  }\n    return \"YES\"\n}\n", "    evens := 0\n    odds := 0\n    for _, num\
    \ := range lst1 {\n        if num % 2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    for _, num := range lst2 {\n  \
    \      if num % 2 == 0 {\n            evens--\n        } else {\n            odds--\n\
    \        }\n    }\n    if evens == 0 && odds == 0 {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    // count odd numbers in lst1\n    oddNumbersCount\
    \ := 0\n    for _, el := range lst1 {\n        if el % 2 != 0 {\n            oddNumbersCount++\n\
    \        }\n    }\n\n    // count even numbers in lst2\n    evenNumbersCount :=\
    \ 0\n    for _, el := range lst2 {\n        if el % 2 == 0 {\n            evenNumbersCount++\n\
    \        }\n    }\n\n    if oddNumbersCount == evenNumbersCount {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n", "    even := 0\n\
    \    odd := 0\n    for _, value := range lst1 {\n        if value % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    fmt.Println(odd, even)\n    for _, value := range lst2 {\n        if\
    \ value % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n    }\n    fmt.Println(odd, even)\n    if odd == 0 {\n       \
    \ return \"YES\"\n    }\n    if even == 0 {\n        return \"NO\"\n    }\n  \
    \  if odd % 2 == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
  "    // YOUR CODE HERE\n    return \"\"\n}\n", "    var evenCounter, oddCounter\
    \ int\n    var oddFound, evenFound bool\n    for _, v := range lst1 {\n      \
    \  if v % 2 == 0 {\n            evenCounter++\n        } else {\n            oddCounter++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if evenCounter > 0 &&\
    \ v % 2 == 0 {\n            evenFound = true\n        }\n        if oddCounter\
    \ > 0 && v % 2 != 0 {\n            oddFound = true\n        }\n    }\n    if evenFound\
    \ && oddFound {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "   \
    \ // type your answer here\n    return \"\"\n}\n", "    for _, l1 := range lst1\
    \ {\n        if l1 % 2 != 0 {\n            for _, l2 := range lst2 {\n       \
    \         if l2 % 2 == 0 {\n                    return \"YES\"\n             \
    \   }\n            }\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n", "    m := make(map[int]int)\n    for _, val := range lst1 {\n\
    \        if val % 2 == 0 {\n            if _, ok := m[1]; ok {\n             \
    \   m[1]++\n            } else {\n                m[1] = 1\n            }\n  \
    \      } else {\n            if _, ok := m[0]; ok {\n                m[0]++\n\
    \            } else {\n                m[0] = 1\n            }\n        }\n  \
    \  }\n    for _, val := range lst2 {\n        if val % 2 == 0 {\n            if\
    \ _, ok := m[0]; ok {\n                m[0]++\n            } else {\n        \
    \        m[0] = 1\n            }\n        } else {\n            if _, ok := m[1];\
    \ ok {\n                m[1]++\n            } else {\n                m[1] = 1\n\
    \            }\n        }\n    }\n    if (m[0] > 0 && m[1] > 0) {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n", "    // TODO - Add your code here\n\
    \    return \"\"\n}\n", "    evenList := createEvenList(lst1)\n    // fmt.Println(evenList)\n\
    \    for i, _ := range evenList {\n        for j, _ := range lst2 {\n        \
    \    if evenList[i] == lst2[j] {\n                lst2[j] = 0\n              \
    \  break\n            }\n        }\n    }\n    // fmt.Println(lst2)\n    for _,\
    \ value := range lst2 {\n        if value != 0 {\n            return \"NO\"\n\
    \        }\n    }\n    return \"YES\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
