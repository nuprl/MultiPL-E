name: HumanEval_18_how_many_times
language: go_test.go
prompt: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
  \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
  \ string, substring string) int {\n"
tests: "func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n    \
  \ { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"\
  cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"\
  john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(substring) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    length := len(substring)\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i:i+length] == substring {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    if len(substring) == 0 {\n   \
    \     return 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n\
    \    var result int = 0\n    if len(myString) < len(substring) {\n        if myString\
    \ == substring {\n            return 1\n        }\n        return 0\n    }\n \
    \   for i:=0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                if myString[i:]\
    \ == substring {\n                    result += 1\n                }\n       \
    \     } else {\n                if myString[i:i+len(substring)] == substring {\n\
    \                    result += 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n", "    count := 0\n    if len(substring) == 0 {\n\
    \        return count\n    }\n    for i := 0; i <= len(myString) - len(substring);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count = 0\n    for i:=0; i<len(myString);\
    \ i++ {\n        if len(myString[i:]) < len(substring) {\n            break\n\
    \        }\n        if string(myString[i:i+len(substring)]) == substring {\n \
    \           count += 1\n        }\n    }\n    return count\n}\n", "    if myString\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    count := 0\n  \
    \  for i := 0; i < len(myString); i++ {\n        if i < len(myString) - len(substring)\
    \ + 1 {\n            found := true\n            for j := 0; j < len(substring);\
    \ j++ {\n                if myString[i + j] != substring[j] {\n              \
    \      found = false\n                    break\n                }\n         \
    \   }\n            if found {\n                count++\n            }\n      \
    \  }\n    }\n    return count\n}\n", "    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    var index int = 0\n    var count int = 0\n    for index = 0; index\
    \ < len(myString); index += 1 {\n        if myString[index] == substring[0] {\n\
    \            var temp_index int = index\n            var temp_count int = 0\n\
    \            for i := 0; i < len(substring); i += 1 {\n                if temp_index\
    \ < len(myString) && myString[temp_index] == substring[i] {\n                \
    \    temp_index += 1\n                    temp_count += 1\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ if temp_count == len(substring) {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    if len(substring)\
    \ == 0 {\n        return count\n    }\n    for i := 0; i < len(myString); i++\
    \ {\n        if myString[i] == substring[0] {\n            for j := 0; j < len(substring);\
    \ j++ {\n                if (i + j) == len(myString) {\n                    break\n\
    \                }\n                if myString[i + j] != substring[j] {\n   \
    \                 break\n                }\n                if j == len(substring)\
    \ - 1 {\n                    count++\n                }\n            }\n     \
    \   }\n    }\n    return count\n}\n", "    if myString == \"\" || substring ==\
    \ \"\" {\n        return 0\n    }\n\n    var occurences = 0\n    var j = 0\n \
    \   for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[j]\
    \ {\n            if j == len(substring) - 1 {\n                occurences++\n\
    \                j = 0\n            } else {\n                j++\n          \
    \  }\n        } else {\n            j = 0\n        }\n    }\n\n    return occurences\n\
    }\n", "    count := 0\n    slen := len(substring)\n    for i:=0; i<len(myString);\
    \ i++ {\n        if myString[i:i+slen] == substring {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    x := len(myString)\n    y := len(substring)\n\
    \    var count int\n    for i := 0; i < x; i++ {\n        if x >= y && myString[i:i+y]\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n",
  "    var count int\n    for strings.Contains(myString, substring) {\n        count++\n\
    \        myString = strings.Replace(myString, substring, \"\", 1)\n    }\n   \
    \ return count\n}\n", "    if len(substring) == 0 {\n        return 0\n    }\n\
    \    count := 0\n    for i := 0; i <= len(myString) - len(substring); i++ {\n\
    \        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    idx := 0\n   \
    \ for idx != -1 {\n        idx = strings.Index(myString, substring)\n        if\
    \ idx != -1 {\n            count += 1\n            myString = myString[idx+1:]\n\
    \        }\n    }\n    return count\n}\n", "    // if len(substring) == 0 {\n\
    \    //     return 0\n    // }\n\n    return strings.Count(myString, substring)\n\
    }\n", "    lMyString := len(myString)\n    lSubstring := len(substring)\n    times\
    \ := 0\n    for i := 0; i < lMyString - lSubstring + 1; i++ {\n        if myString[i:i+lSubstring]\
    \ == substring {\n            times++\n        }\n    }\n    return times\n}\n\
    \ntype testCase ", "    if len(substring) == 0 {\n        return 0\n    }\n  \
    \  if len(myString) == 0 {\n        return 0\n    }\n    result := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0] {\n\
    \            if len(myString) - i >= len(substring) {\n                m := 1\n\
    \                for j := 1; j < len(substring); j++ {\n                    if\
    \ myString[i + j] == substring[j] {\n                        m++\n           \
    \         }\n                }\n                if m == len(substring) {\n   \
    \                 result++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var answer int = 0\n    var lenSubString int =\
    \ len(substring)\n    var lenString int = len(myString)\n    for i := 0; i < lenString;\
    \ i++ {\n        if lenString - i < lenSubString {\n            return answer\n\
    \        }\n        if myString[i] == substring[0] {\n            var isMatch\
    \ bool = true\n            for j := 1; j < lenSubString; j++ {\n             \
    \   if myString[i+j] != substring[j] {\n                    isMatch = false\n\
    \                    break\n                }\n            }\n            if isMatch\
    \ {\n                answer++\n            }\n        }\n    }\n    return answer\n\
    }\n", "    count := 0\n    for i := 0; i < len(myString); i++ {\n        if len(myString)\
    \ < i + len(substring) {\n            break\n        }\n        if myString[i\
    \ : i + len(substring)] == substring {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    return how_many_times_tail(myString, substring,\
    \ 0)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
