language: go_test.go
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    // your code here\n    fmt.Println(lst)\n    return\
    \ lst\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1234567]\n[3 11111111]\n[271 137 314]\n--- FAIL: TestOdd_Count (0.00s)\n\
    \    --- FAIL: TestOdd_Count/test_num__0 (0.00s)\n        tmpmyh8vfuf_test.go:38:\
    \ expected '[the number of odd elements 4n the str4ng 4 of the 4nput.]', got '[1234567]'\n\
    \    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpmyh8vfuf_test.go:38:\
    \ expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.]', got '[3 11111111]'\n    ---\
    \ FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpmyh8vfuf_test.go:38: expected\
    \ '[the number of odd elements 2n the str2ng 2 of the 2nput. the number of odd\
    \ elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.]', got '[271 137 314]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var oddCount int\n    oddLst := make([]string, len(lst))\n\
    \    for i, s := range lst {\n        oddCount = 0\n        for _, c := range\
    \ s {\n            if (c-'0')%2 == 1 {\n                oddCount++\n         \
    \   }\n        }\n        oddLst[i] = fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount)\n\
    \    }\n    return oddLst\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n\n    for i, value := range lst\
    \ {\n        odd_count := 0\n        for _, ch := range value {\n            if\
    \ uint8(ch) % 2 == 1 {\n                odd_count += 1\n            }\n      \
    \  }\n        result = append(result, fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", odd_count, i, i, i))\n    }\n\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpcomyko7a_test.go:48: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpcomyko7a_test.go:48: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpcomyko7a_test.go:48: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var r []string\n    for _, s := range lst {\n    \
    \    var n int\n        for _, c := range s {\n            n += int(c - '0') &\
    \ 1\n        }\n        r = append(r, fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", n, n, n, n))\n    }\n    return r\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var str string\n    output := make([]string, len(lst))\n\
    \    for i, str := range lst {\n        n := 0\n        fmt.Println(str)\n   \
    \     for _, c := range str {\n            if string(c) == \"1\" || string(c)\
    \ == \"3\" || string(c) == \"5\" || string(c) == \"7\" || string(c) == \"9\" {\n\
    \                n += 1\n            }\n        }\n        str = fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", n, i, i, i)\n\
    \        output[i] = str\n    }\n    return output\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrkps6i6_test.go:18:9: str declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, val\
    \ := range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements\
    \ %d in the string %d of the input.\", odd_count_helper(val), i)\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppbkpuy4_test.go:20:97: undefined: odd_count_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var new_lst []string\n    for _, word := range lst\
    \ {\n        var odd int\n        for _, letter := range word {\n            value\
    \ := string(letter)\n            if value == \"1\" || value == \"3\" || value\
    \ == \"5\" || value == \"7\" || value == \"9\" {\n                odd++\n    \
    \        }\n        }\n        new_word := \"the number of odd elements \" + string(odd)\
    \ + \"n the str\" + string(odd) + \"ng \" + string(odd) + \" of the \" + string(odd)\
    \ + \"nput.\"\n        new_lst = append(new_lst, new_word)\n    }\n    return\
    \ new_lst\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmps_zfwn89_test.go:27:53: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmps_zfwn89_test.go:27:81: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmps_zfwn89_test.go:27:103: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmps_zfwn89_test.go:27:130: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, str := range lst {\n\
    \        var odds int\n        for _, r := range str {\n            d := string(r)\n\
    \            if d == \"1\" || d == \"3\" || d == \"5\" || d == \"7\" || d == \"\
    9\" {\n                odds++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , odds, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp77pdewl4_test.go:47: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp77pdewl4_test.go:47: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp77pdewl4_test.go:47: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        count := 0\n        for _, c := range s {\n           \
    \ if c == '3' || c == '5' || c == '7' {\n                count++\n           \
    \ }\n        }\n        result[i] = fmt.Sprintf(\"the number of odd elements %dn\
    \ the str%dng %d of the %dnput.\", count, i, i, i)\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpi0ct7r32_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 3n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpi0ct7r32_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 0n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpi0ct7r32_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 1n the str0ng 0 of the 0nput. the number of odd elements\
    \ 2n the str1ng 1 of the 1nput. the number of odd elements 1n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    // your code here\n    var result []string\n    for\
    \ i, elem := range lst {\n        oddCounter := 0\n        for _, number := range\
    \ elem {\n            if int(number) % 2 != 0 {\n                oddCounter++\n\
    \            }\n        }\n        tmp := fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", oddCounter, i+1, i+1, i+1)\n        result\
    \ = append(result, tmp)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpazksjb1__test.go:48: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str1ng\
    \ 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpazksjb1__test.go:48: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of\
    \ odd elements 8n the str2ng 2 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpazksjb1__test.go:48: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str1ng 1 of the 1nput. the number of odd elements\
    \ 3n the str2ng 2 of the 2nput. the number of odd elements 2n the str3ng 3 of\
    \ the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    fmt.Println(\"len(lst):\", len(lst))\n    fmt.Println(\"\
    lst[0]:\", lst[0])\n    var out []string\n    odd := 0\n    for _, elem := range\
    \ lst {\n        fmt.Println(\"elem:\", elem)\n        for _, ch := range elem\
    \ {\n            char := string(ch)\n            fmt.Println(\"char:\", char)\n\
    \            if isOdd(char) {\n                odd++\n            }\n        }\n\
    \        fmt.Println(\"odd:\", odd)\n        out = append(out, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd,\
    \ odd))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ddc3_nq_test.go:27:16: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    var current string\n    var\
    \ oCount int\n    for _, num := range lst {\n        current = \"\"\n        oCount\
    \ = 0\n        for _, n := range num {\n            if n - '0' % 2 == 1 {\n  \
    \              oCount++\n            }\n        }\n        current = fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", oCount, oCount,\
    \ oCount, oCount)\n        output = append(output, current)\n    }\n    return\
    \ output\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmphn2hscbl_test.go:50: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 0n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmphn2hscbl_test.go:50: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 0n the str0ng 0 of the 0nput. the number of\
    \ odd elements 0n the str0ng 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmphn2hscbl_test.go:50: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 0n the str0ng 0 of the 0nput. the number of odd elements\
    \ 0n the str0ng 0 of the 0nput. the number of odd elements 0n the str0ng 0 of\
    \ the 0nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    n := len(lst)\n    for i := 0; i < n; i++ {\n    \
    \    v := []rune(lst[i])\n        nv := len(v)\n        cnt := 0\n        for\
    \ j := 0; j < nv; j++ {\n            nj := int(v[j] - '0')\n            if nj\
    \ & 1 == 1 {\n                cnt++\n            }\n        }\n        lst[i]\
    \ = fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , cnt, i, i, i)\n    }\n    return lst\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp7tm165sq_test.go:49: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp7tm165sq_test.go:49: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp7tm165sq_test.go:49: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    res := make([]string, len(lst))\n    for i, item :=\
    \ range lst {\n        oddCount := 0\n        for _, digit := range item {\n \
    \           if (int(digit) - 48) % 2 == 1 {\n                oddCount++\n    \
    \        }\n        }\n        res[i] = fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount)\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        odd_count := 0\n        for _, r := range s {\n       \
    \     if (r - '0') % 2 == 1 {\n                odd_count += 1\n            }\n\
    \        }\n        //fmt.Println(i, s, odd_count)\n        result[i] = fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, i,\
    \ i, i)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n \
    \ candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp81fpa6kj_test.go:47: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp81fpa6kj_test.go:47: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp81fpa6kj_test.go:47: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    res := make([]string, len(lst))\n    for i, v := range\
    \ lst {\n        var odd int\n        for _, n := range v {\n            if n\
    \ & 1 == 1 {\n                odd++\n            }\n        }\n        res[i]\
    \ = fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , odd, i, i, i)\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmppvm_15qi_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmppvm_15qi_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmppvm_15qi_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n\n    for _, v := range lst {\n\
    \        var new_string string\n        var count int\n        for _, c := range\
    \ v {\n            if c == '1' || c == '3' || c == '5' || c == '7' || c == '9'\
    \ {\n                count += 1\n            }\n        }\n        for _, c :=\
    \ range v {\n            if c == '4' {\n                new_string += fmt.Sprintf(\"\
    %d\", count)\n            } else {\n                new_string += string(c)\n\
    \            }\n        }\n        result = append(result, new_string)\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpjzse2pz8_test.go:55: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[1234567]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpjzse2pz8_test.go:55: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[3 11111111]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpjzse2pz8_test.go:55: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[271 137 312]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    out := make([]string, len(lst))\n    for i, s := range\
    \ lst {\n        var c int\n        for _, c1 := range s {\n            c += int(c1-'0')%2\n\
    \        }\n        out[i] = fmt.Sprintf(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", c, c, c, c)\n    }\n    return out\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, v := range lst {\n\
    \        digitCount := 0\n        fmt.Println(v)\n        for _, j := range v\
    \ {\n            // strconv.Atoi(string(j))\n            if string(j) == \"1\"\
    \ || string(j) == \"3\" || string(j) == \"5\" || string(j) == \"7\" || string(j)\
    \ == \"9\" {\n                digitCount += 1\n            }\n        }\n    \
    \    str := fmt.Sprintf(\"the number of odd elements %vn the str%vng %v of the\
    \ %vnput.\", digitCount, digitCount, digitCount, digitCount)\n        output =\
    \ append(output, str)\n    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074005
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var out []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c%2 ==\
    \ 1 {\n                count += 1\n            }\n        }\n        out = append(out,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074005
