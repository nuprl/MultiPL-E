language: go_test.go
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := int(number)\n    decimal_part := number - float64(int_part)\n\
    \    return decimal_part\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    a := int(number)\n    return number - float64(a)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    // Write your code here\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxofxf9cv_test.go:16:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    n := int(number)\n    return number - float64(n)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    if number > 0 {\n        return number - float64(int(number))\n    }\n\
    \    return number\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := int(number)\n    return number - float64(int_part)\n}\n\n\
    func TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075089
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    if number < 0 {\n        return 0\n    }\n    var (\n        number_int\
    \ int = int(number)\n        decimals float64 = number - float64(number_int)\n\
    \    )\n    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n \
    \ candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    // fmt.Printf(\"%T, %v\", number, number)\n    // fmt.Printf(\"%T, %v\"\
    , int(number), int(number))\n    return number - float64(int(number))\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    var integer_part int = int(number)\n    return number - float64(integer_part)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075005
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    truncated := int(number)\n    return number - float64(truncated)\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    if number < 0 {\n        return 0\n    }\n\n    return number - float64(int(number))\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    return number - float64(int(number))\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    integer_part := float64(int(number))\n    return number - integer_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    int_part := int(number)\n    decimals := number - float64(int_part)\n\
    \    return decimals\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate\
    \ := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64\
    \ {\n    n := float64(int(number))\n    return number - n\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075122
