name: HumanEval_77_iscube
language: go_test.go
prompt: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write\
  \ a function that takes an integer a and returns True \n// if this ingeger is a\
  \ cube of some integer number.\n// Note: you may assume the input is always valid.\n\
  // Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n\
  // iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunc iscube(a\
  \ int) bool {\n"
tests: "func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
  \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
  \ expected: true },\n     { actual: candidate(180), expected: false },\n     { actual:\
  \ candidate(1000), expected: true },\n     { actual: candidate(0), expected: true\
  \ },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    for i := 0; i <= a; i++ {\n        if i * i * i == a {\n      \
    \      return true\n        }\n    }\n    return false\n}\n", "    // your code\
    \ here ...\n    if a == 0 {\n        return true\n    }\n    i := 0\n    for i\
    \ * i * i < a {\n        i++\n    }\n    return i * i * i == a\n}\n", "    return\
    \ true\n}\n", "    return a >= 0 && (a == 0 || a == 1 || int(round(pow(float64(a),\
    \ 1/3))) == int(pow(float64(a), 1/3)))\n}\n", "    return false\n}\n", "    return\
    \ a == 0 || int(round(exp(log(float64(a)) / 3))) ** 3 == a\n}\n", "    return\
    \ false\n}\n", "\tif (a < 0) {\n\t\ta = -a\n\t}\n\tx := 1;\n\tfor (x * x * x <=\
    \ a) {\n\t\tif (x * x * x == a) {\n\t\t\treturn true\n\t\t}\n\t\tx += 1\n\t}\n\
    \treturn false\n}\n", "    if a == 0 {\n        return true\n    }\n    if a <\
    \ 0 {\n        a = -a\n    }\n    for i := 1; i * i * i <= a; i++ {\n        if\
    \ i * i * i == a {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    return true\n}\n", "    return a == 0 || (a > 0 && int(float64(a) /\
    \ float64(a)) == a)\n}\n", "    if a == 0 {\n        return true\n    }\n    if\
    \ a < 0 {\n        a = -a\n    }\n    for b := 1; b <= a; b++ {\n        if b\
    \ * b * b == a {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    i := 1\n    for i*i*i <= a {\n        if i*i*i == a {\n           \
    \ return true\n        }\n        i++\n    }\n    return false\n}\n", "    return\
    \ false\n}\n", "    // your code here\n    if a < 0 {\n        a = -a\n    }\n\
    \n    if a == 0 {\n        return true\n    }\n\n    for i := 1; i <= a; i++ {\n\
    \        if i * i * i == a {\n            return true\n        }\n    }\n\n  \
    \  return false\n}\n", "    return a == 0 || (a > 0 && a == int(float64(a) * float64(a)\
    \ * float64(a)))\n}\n", "    if a == 0 {\n        return true\n    }\n    if a\
    \ > 0 {\n        for x := 1; x < (a/3)+1; x++ {\n            if x*x*x == a {\n\
    \                return true\n            }\n        }\n    } else {\n       \
    \ for x := -1; x > (a/3)-1; x-- {\n            if x*x*x == a {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n", "  \
    \  return false\n}\n", "    var b int\n    for i := 1; ; i++ {\n        b = i\
    \ * i * i\n        if b == a {\n            return true\n        } else if b >\
    \ a {\n            return false\n        }\n    }\n}\n", "    b := a\n    if a\
    \ < 0 {\n        b = -a\n    }\n    if a == 0 {\n        return true\n    }\n\
    \    for i := 1; i * i * i <= b; i++ {\n        if i * i * i == b {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\ntype TestCase "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
