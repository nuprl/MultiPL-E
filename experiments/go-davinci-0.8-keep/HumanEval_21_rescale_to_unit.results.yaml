language: go_test.go
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ min, max float64\n    for _, number := range numbers {\n        if number <\
    \ min {\n            min = number\n        }\n        if number > max {\n    \
    \        max = number\n        }\n    }\n    var num_zeroed []float64\n    for\
    \ _, number := range numbers {\n        num_zeroed = append(num_zeroed, number\
    \ - min)\n    }\n    var num_scaled []float64\n    for _, number := range num_zeroed\
    \ {\n        num_scaled = append(num_scaled, number / (max - min))\n    }\n  \
    \  return num_scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpo4otmj39_test.go:50: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpo4otmj39_test.go:50: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpo4otmj39_test.go:50: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpo4otmj39_test.go:50:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpo4otmj39_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    //\
    \ the minimum and maximum numbers in the list\n    minimum, maximum := 0.0, 0.0\n\
    \    // go through the list and find the min and max values\n    for _, value\
    \ := range numbers {\n        if value < minimum {\n            minimum = value\n\
    \        }\n        if value > maximum {\n            maximum = value\n      \
    \  }\n    }\n    // find the range\n    range_ := maximum - minimum\n    // calculate\
    \ the scaling factor that will be applied to each number\n    scaling_factor :=\
    \ 1.0 / range_\n    // rescale each value in the original list\n    // and add\
    \ it to a new list\n    scaled_values := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        scaled_values[i] = (number - minimum)\
    \ * scaling_factor\n    }\n    return scaled_values\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7zvcq8eq_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=0.9999999999999999)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp7zvcq8eq_test.go:54:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1) %!s(float64=0.499)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n        tmp7zvcq8eq_test.go:54:\
    \ expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5) %!s(float64=0.75)\
    \ %!s(float64=1)]', got '[%!s(float64=0.2) %!s(float64=0.4) %!s(float64=0.6000000000000001)\
    \ %!s(float64=0.8) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7zvcq8eq_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.4)\
    \ %!s(float64=0.2) %!s(float64=1) %!s(float64=0.6000000000000001) %!s(float64=0.8)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp7zvcq8eq_test.go:54:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.8) %!s(float64=0.7333333333333333)\
    \ %!s(float64=1) %!s(float64=0.8666666666666667) %!s(float64=0.9333333333333333)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ min, max float64\n    for i, v := range numbers {\n        if i == 0 {\n   \
    \         min = v\n            max = v\n        } else {\n            if v < min\
    \ {\n                min = v\n            }\n            if v > max {\n      \
    \          max = v\n            }\n        }\n    }\n    var result []float64\n\
    \    for _, v := range numbers {\n        result = append(result, (v - min) /\
    \ (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074492
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ min_value, max_value float64\n    min_value = numbers[0]\n    max_value = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min_value {\n     \
    \       min_value = number\n        }\n        if number > max_value {\n     \
    \       max_value = number\n        }\n    }\n    fmt.Printf(\"Max = %f, Min =\
    \ %f\\n\", max_value, min_value)\n    if max_value == min_value {\n        return\
    \ numbers\n    }\n    var zero_to_one_range = max_value - min_value\n    var result\
    \ = make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        result[index] = (number - min_value) / zero_to_one_range\n    }\n   \
    \ return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ normalized_list []float64\n    if len(numbers) == 0 {\n        return normalized_list\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, num := range\
    \ numbers {\n        if num < min {\n            min = num\n        }\n      \
    \  if num > max {\n            max = num\n        }\n    }\n    if min == max\
    \ {\n        min = min - 0.5\n        max = max + 0.5\n    }\n    for _, num :=\
    \ range numbers {\n        normalized_list = append(normalized_list, (num - min)\
    \ / (max - min))\n    }\n    return normalized_list\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    for\
    \ i, num := range numbers {\n        numbers[i] = num / max(numbers)\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9vz139p_test.go:14:28: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    if\
    \ len(numbers) < 2 {\n        return []float64{0.0}\n    }\n    m := numbers[0]\n\
    \    M := numbers[0]\n    for _, n := range numbers {\n        if n < m {\n  \
    \          m = n\n        }\n        if n > M {\n            M = n\n        }\n\
    \    }\n    out := make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        out[i] = (n - m) / (M - m)\n    }\n    return out\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ min, max float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, num\
    \ := range numbers {\n        if num < min {\n            min = num\n        }\n\
    \        if num > max {\n            max = num\n        }\n    }\n    var newValues\
    \ []float64\n    for _, num := range numbers {\n        newValues = append(newValues,\
    \ (num - min) / (max - min))\n    }\n    return newValues\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    //\
    \ 0.0, 0.25, 0.5, 0.75, 1.0\n    // 1.0, 2.0, 3.0, 4.0, 5.0\n    // 5.0, 4.0,\
    \ 3.0, 2.0, 1.0\n    // 1.0, 2.0, 3.0, 4.0, 5.0\n    // 0.0, 0.25, 0.5, 0.75,\
    \ 1.0\n    min := min(numbers)\n    max := max(numbers)\n    scale := max - min\n\
    \    rescaled := make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        rescaled[i] = (n - min) / scale\n    }\n    return rescaled\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgal5iurg_test.go:18:12: undefined: min

    /tmp/tmpgal5iurg_test.go:19:12: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        result[i] = (n - min) / (max - min)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min_number\
    \ := numbers[0]\n    max_number := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min_number {\n            min_number = number\n     \
    \   }\n        if number > max_number {\n            max_number = number\n   \
    \     }\n    }\n    span := max_number - min_number\n    if span <= 0 {\n    \
    \    return numbers\n    }\n    rescaled := make([]float64, len(numbers))\n  \
    \  for i, number := range numbers {\n        rescaled[i] = (number - min_number)\
    \ / span\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min,\
    \ max := numbers[0], numbers[0]\n    for _, number := range numbers {\n      \
    \  if number < min {\n            min = number\n        }\n        if number >\
    \ max {\n            max = number\n        }\n    }\n    fmt.Printf(\"Min: %f,\
    \ Max: %f\\n\", min, max)\n    size := max - min\n    scaled := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        scaled[i] = (number\
    \ - min) / size\n    }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ result []float64\n    size := len(numbers)\n    if size < 2 {\n        return\
    \ result\n    }\n    var smallest float64 = numbers[0]\n    var largest float64\
    \ = numbers[0]\n    for i := 1; i < size; i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    var numerator float64\n\
    \    for i := 0; i < size; i++ {\n        numerator = numbers[i] - smallest\n\
    \        result = append(result, numerator / (largest - smallest))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, val := range numbers {\n  \
    \      if val < min {\n            min = val\n        }\n        if val > max\
    \ {\n            max = val\n        }\n    }\n    diff := max - min\n    var results\
    \ []float64\n    for _, val := range numbers {\n        results = append(results,\
    \ (val - min) / diff)\n    }\n    return results\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    max\
    \ := numbers[0]\n    min := numbers[0]\n    for _, value := range numbers {\n\
    \        if max < value {\n            max = value\n        }\n        if min\
    \ > value {\n            min = value\n        }\n    }\n    size := len(numbers)\n\
    \    newNumbers := make([]float64, size)\n    for i, value := range numbers {\n\
    \        newNumbers[i] = (value - min) / (max - min)\n    }\n    return newNumbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    xMin\
    \ := numbers[0]\n    xMax := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < xMin {\n            xMin = number\n        }\n        if\
    \ number > xMax {\n            xMax = number\n        }\n    }\n    xRange :=\
    \ xMax - xMin\n    var scaledNumbers []float64\n    for _, number := range numbers\
    \ {\n        scaledNumbers = append(scaledNumbers, (number - xMin) / xRange)\n\
    \    }\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    //\
    \ find the largest and smallest numbers in the list\n    max, min := numbers[0],\
    \ numbers[0]\n    for _, num := range numbers {\n        if num > max {\n    \
    \        max = num\n        }\n        if num < min {\n            min = num\n\
    \        }\n    }\n    // a transformation function (see below)\n    transform\
    \ := func(x float64) float64 {\n        return (x - min) / (max - min)\n    }\n\
    \    // apply the transformation to the original list\n    ret := make([]float64,\
    \ len(numbers))\n    for i, num := range numbers {\n        ret[i] = transform(num)\n\
    \    }\n    return ret\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ max, min float64\n    var new_list []float64\n    max = numbers[0]\n    min\
    \ = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n        if numbers[i] < min\
    \ {\n            min = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        new_list = append(new_list, ((numbers[i] - min) / (max - min)))\n\
    \    }\n    return new_list\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    //\
    \ set up loop vars\n    min := numbers[0]\n    max := numbers[0]\n    for _, x\
    \ := range numbers {\n        if x < min {\n            min = x\n        }\n \
    \       if x > max {\n            max = x\n        }\n    }\n    mult := 1.0 /\
    \ (max - min)\n    // make a new list, i guess?\n    out := make([]float64, len(numbers))\n\
    \    for i, x := range numbers {\n        out[i] = (x - min) * mult\n    }\n \
    \   return out\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074633
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers []float64) []float64 {\n    if\
    \ len(numbers) < 2 {\n        panic(\"List should contain at least two elements\"\
    )\n    }\n\n    min := numbers[0]\n    max := numbers[0]\n    for _, val := range\
    \ numbers {\n        if val < min {\n            min = val\n        }\n      \
    \  if val > max {\n            max = val\n        }\n    }\n\n    if max == min\
    \ {\n        panic(\"All values have the same value.\")\n    }\n\n    result :=\
    \ make([]float64, len(numbers))\n    for i, val := range numbers {\n        result[i]\
    \ = (val - min) / (max - min)\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074633
