language: go_test.go
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var c string\
    \ = \"\"\n    var a_i, b_i int\n\n    if len(a) != len(b) {\n        panic(\"\
    strings must be the same length\")\n    }\n\n    for i := 0; i < len(a); i++ {\n\
    \        fmt.Sscanf(string(a[i]), \"%1d\", &a_i)\n        fmt.Sscanf(string(b[i]),\
    \ \"%1d\", &b_i)\n        fmt.Sprintf(c, \"%1d\", a_i ^ b_i)\n    }\n\n    return\
    \ c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpgc7i9vye_test.go:44: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpgc7i9vye_test.go:44: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpgc7i9vye_test.go:44:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var r string\
    \ = \"\"\n    for i := 0; i < len(a); i++ {\n        ai := a[i]\n        bi :=\
    \ b[i]\n        if ai == bi {\n            r += \"0\"\n        } else {\n    \
    \        r += \"1\"\n        }\n    }\n    return r\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    xor_result := \"\"\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            xor_result += \"\
    0\"\n        } else {\n            xor_result += \"1\"\n        }\n    }\n   \
    \ return xor_result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    la := len(a)\n    lb := len(b)\n    if la != lb {\n        return\
    \ result\n    }\n    for i := 0; i < la; i++ {\n        if a[i] == b[i] {\n  \
    \          result += \"0\"\n        } else {\n            result += \"1\"\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"String lengths are different.\"\n    }\n    var\
    \ char string\n    var result string\n    for i := 0; i < len(a); i++ {\n    \
    \    if a[i] == b[i] {\n            char = \"0\"\n        } else {\n         \
    \   char = \"1\"\n        }\n        result += char\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    result :=\
    \ make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result[i] = '0'\n        } else {\n            result[i]\
    \ = '1'\n        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    result :=\
    \ make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result[i] = '0'\n        } else {\n            result[i]\
    \ = '1'\n        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var aInt\
    \ = []byte(a)\n    var bInt = []byte(b)\n    var lenXor = len(aInt)\n    var output\
    \ string\n\n    if len(aInt) > len(bInt) {\n        lenXor = len(bInt)\n    }\n\
    \n    for i := 0; i < lenXor; i++ {\n        var c = aInt[i] ^ bInt[i]\n     \
    \   output += string(c)\n    }\n\n    return output\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpyu06jh0u_test.go:45: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpyu06jh0u_test.go:45:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpyu06jh0u_test.go:45: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    r := make([]byte, len(a))\n   \
    \ for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            r[i] =\
    \ '0'\n        } else {\n            r[i] = '1'\n        }\n    }\n    return\
    \ string(r)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n\tvar xor string\n\
    \tfor i := 0; i < len(a); i++ {\n\t\tif a[i] == b[i] {\n\t\t\txor += \"0\"\n\t\
    \t} else {\n\t\t\txor += \"1\"\n\t\t}\n\t}\n\treturn xor\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i, c := range a {\n        if c == '1' && b[i] == '1' {\n  \
    \          result += \"0\"\n        } else if c == '0' && b[i] == '0' {\n    \
    \        result += \"0\"\n        } else {\n            result += \"1\"\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var ret\
    \ []rune\n    a_runes := []rune(a)\n    b_runes := []rune(b)\n    for i := 0;\
    \ i < len(a_runes); i++ {\n        a_val := a_runes[i] - '0'\n        b_val :=\
    \ b_runes[i] - '0'\n        ret = append(ret, rune((a_val ^ b_val) + '0'))\n \
    \   }\n    return string(ret)\n}\n\ntype XORTest \nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4e5hfm9_test.go:24:14: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075654
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    result :=\
    \ \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n       \
    \     result += \"0\"\n        } else {\n            result += \"1\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    result :=\
    \ \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n       \
    \     result += \"0\"\n        } else {\n            result += \"1\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := make([]byte, len(a))\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result[i]\
    \ = '0'\n        } else {\n            result[i] = '1'\n        }\n    }\n   \
    \ return string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b have different lengths\")\n    }\n    xor_len\
    \ := len(a)\n    xor_array := make([]rune, xor_len)\n    for i := 0; i < xor_len;\
    \ i++ {\n        xor_array[i] = rune(a[i]) ^ rune(b[i])\n    }\n    fmt.Println(xor_array)\n\
    \    return string(xor_array)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[0 1 0 0 1 0]\n[0]\n[0 1 0 1]\n--- FAIL: TestString_Xor (0.00s)\n    ---\
    \ FAIL: TestString_Xor/test_num__0 (0.00s)\n        tmpi0kw54lc_test.go:40: expected\
    \ '010010', got '\0\x01\0\0\x01\0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n\
    \        tmpi0kw54lc_test.go:40: expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2\
    \ (0.00s)\n        tmpi0kw54lc_test.go:40: expected '0101', got '\0\x01\0\x01\
    '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    result :=\
    \ make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        result[i] =\
    \ a[i] ^ b[i]\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpaj5c7gb8_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpaj5c7gb8_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpaj5c7gb8_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // if len(a)\
    \ != len(b) { return \"\" }\n\n    res := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n \
    \           res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075655
