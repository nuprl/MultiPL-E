name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    words := []string{}\n    if len(s) > 0 {\n        // First split\
    \ the string into words\n        w := \"\"\n        for _, c := range s {\n  \
    \          if c == ' ' {\n                words = append(words, w)\n         \
    \       w = \"\"\n            } else {\n                w += string(c)\n     \
    \       }\n        }\n        words = append(words, w)\n        // now check to\
    \ see if each word has n consonants\n        for i, word := range words {\n  \
    \          if n != 0 {\n                nc := 0\n                for _, c := range\
    \ word {\n                    if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                        nc++\n                    }\n       \
    \         }\n                if nc != n {\n                    words[i] = \"\"\
    \n                }\n            } else {\n                // if n == 0 then just\
    \ remove the word\n                words[i] = \"\"\n            }\n        }\n\
    \    }\n    return words\n}\n", "    words := make([]string, 0)\n    word := \"\
    \"\n    consonants := 0\n    for _, letter := range s {\n        if letter ==\
    \ 32 {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(letter)\n            if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \                consonants = 0\n            } else {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    rs := []rune(s)\n    words := []string{}\n\
    \    word := \"\"\n    for _, r := range rs {\n        if r == ' ' {\n       \
    \     if consonants(word) == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ string(r)\n        }\n    }\n    if consonants(word) == n {\n        words =\
    \ append(words, word)\n    }\n    return words\n}\n", "    return []string{}\n\
    }\n", "    consonants := map[string]int{\"B\": 1, \"C\": 1, \"D\": 1, \"F\": 1,\
    \ \"G\": 1, \"H\": 1, \"J\": 1, \"K\": 1, \"L\": 1, \"M\": 1, \"N\": 1, \"P\"\
    : 1, \"Q\": 1, \"R\": 1, \"S\": 1, \"T\": 1, \"V\": 1, \"W\": 1, \"X\": 1, \"\
    Y\": 1, \"Z\": 1}\n    words := []string{}\n    var count int\n    split := Split(s)\n\
    \    for _,v := range split {\n        count = 0\n        for _,letter := range\
    \ v {\n            _,ok := consonants[string(letter)]\n            if ok {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            words = append(words,v)\n        }\n    }\n    return words\n}\n",
  "\treturn []string{}\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ words []string\n    var w string\n    for _, v := range s {\n        if string(v)\
    \ == \" \" {\n            if (isConsonantCount(w, n)) {\n                words\
    \ = append(words, w)\n            }\n            w = \"\"\n        } else {\n\
    \            w += string(v)\n        }\n    }\n    if (isConsonantCount(w, n))\
    \ {\n        words = append(words, w)\n    }\n    return words\n}\n", "\treturn\
    \ nil\n}\n", "    return nil\n}\n", "    fmt.Println(s)\n    fmt.Println(n)\n\
    \    return nil\n}\n", "    words := make([]string, 0)\n    word := \"\"\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if len(word) == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var strWords []string\n    count := 0\n    var i int\n   \
    \ var j int\n    ln := len(s)\n    for i < ln {\n        count = 0\n        for\
    \ j = i; j < ln; j++ {\n            if s[j] == ' ' {\n                break\n\
    \            }\n            if s[j] != 'a' && s[j] != 'e' && s[j] != 'i' && s[j]\
    \ != 'o' && s[j] != 'u' {\n                count++\n            }\n        }\n\
    \        if count == n {\n            strWords = append(strWords, s[i:j])\n  \
    \      }\n        i = j + 1\n    }\n    return strWords\n}\n", "    words := []string{}\n\
    \    for _, word := range(strings.Split(s, \" \")) {\n        consonants := 0\n\
    \        for _, v := range(word) {\n            if isConsonant(v) {\n        \
    \        consonants++\n            }\n        }\n        if consonants == n {\n\
    \            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    var str_list []string\n    var count int\n    var str string\n    words\
    \ := strings.Split(s, \" \")\n    for _, word := range words {\n        count\
    \ = 0\n        for _, char := range word {\n            switch char {\n      \
    \      case 'a', 'e', 'i', 'o', 'u':\n                continue\n            default:\n\
    \                count++\n            }\n        }\n        if count == n {\n\
    \            str_list = append(str_list, word)\n        }\n    }\n    return str_list\n\
    }\n", "    return []string{}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result []string\n    var words []string = strings.Split(s, \" \")\n   \
    \ for _, word := range words {\n        var count int = 0\n        for _, c :=\
    \ range word {\n            switch c {\n            case 'a', 'e', 'i', 'o', 'u':\n\
    \                continue\n            default:\n                count++\n   \
    \         }\n        }\n        if count == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    words := make([]string,\
    \ 0)\n    for _, w := range split(s) {\n        if is_n_consonants(w, n) {\n \
    \           words = append(words, w)\n        }\n    }\n    return words\n}\n",
  "    var result []string\n    if len(s) == 0 {\n        return result\n    }\n \
    \   words := strings.Split(s, \" \")\n    for _, w := range words {\n        if\
    \ CountConsonants(w) == n {\n            result = append(result, w)\n        }\n\
    \    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
