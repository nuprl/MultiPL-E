name: HumanEval_29_filter_by_prefix
language: go_test.go
prompt: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunc filter_by_prefix(strings []string,\
  \ prefix string) []string {\n"
tests: "func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    matches := []string{}\n    for _, s := range strings {\n      \
    \  if len(s) > 0 && s[0] == prefix[0] {\n            matches = append(matches,\
    \ s)\n        }\n    }\n    return matches\n}\n", "    var result []string\n \
    \   for _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    results := []string{}\n    for _, current_string := range\
    \ strings {\n        if len(current_string) >= len(prefix) && current_string[:len(prefix)]\
    \ == prefix {\n            results = append(results, current_string)\n       \
    \ }\n    }\n    return results\n}\n", "    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if (s[0:1] == prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var new_list []string\n    for _,\
    \ word := range strings {\n        if word[0:1] == prefix {\n            new_list\
    \ = append(new_list, word)\n        }\n    }\n    return new_list\n}\n", "   \
    \ var ret []string\n    for _, v := range strings {\n        if len(v) >= len(prefix)\
    \ && v[:len(prefix)] == prefix {\n            ret = append(ret, v)\n        }\n\
    \    }\n    return ret\n}\n", "    result := []string{}\n    for _, str := range\
    \ strings {\n        if len(str) >= len(prefix) && str[:len(prefix)] == prefix\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var out_strings []string\n    for _, s := range strings {\n       \
    \ if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            out_strings\
    \ = append(out_strings, s)\n        }\n    }\n    return out_strings\n}\n", " \
    \   var output []string\n    for _, v := range strings {\n        if len(v) >=\
    \ len(prefix) && v[:len(prefix)] == prefix {\n            output = append(output,\
    \ v)\n        }\n    }\n    return output\n}\n", "    result := []string{}\n \
    \   for _, s := range strings {\n        if has_prefix(s, prefix) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   result := []string{}\n    for _, s := range strings {\n        if string(s[0])\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n", "    var r []string\n    for _, s := range strings {\n       \
    \ if len(s) > 0 && s[0] == prefix[0] {\n            r = append(r, s)\n       \
    \ }\n    }\n    return r\n}\n", "    var r []string\n    for _, s := range strings\
    \ {\n        if has_prefix(s, prefix) {\n            r = append(r, s)\n      \
    \  }\n    }\n    return r\n}\n", "    var new_list []string\n    for _, str :=\
    \ range strings {\n        if len(str) < len(prefix) {\n            continue\n\
    \        }\n\n        if str[:len(prefix)] == prefix {\n            new_list =\
    \ append(new_list, str)\n        }\n    }\n    return new_list\n}\n", "    i :=\
    \ 0\n    for _, s := range strings {\n        if !strings.HasPrefix(s, prefix)\
    \ {\n            continue\n        }\n        strings[i] = s\n        i++\n  \
    \  }\n    return strings[:i]\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    if len(strings) == 0 {\n        return []string{}\n    }\n\n    var\
    \ new_list []string\n    for _, s := range strings {\n        if len(s) > 0 &&\
    \ s[0] == prefix[0] {\n            new_list = append(new_list, s)\n        }\n\
    \    }\n    return new_list\n}\n", "    var filtered []string\n    for _, value\
    \ := range strings {\n        if len(value) >= len(prefix) && value[:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, value)\n        }\n   \
    \ }\n    return filtered\n}\n", "    result := []string{}\n    for _, s := range\
    \ strings {\n        if prefix == s[:len(prefix)] {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
