language: go_test.go
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    order := l[1] > l[0]\n\
    \    for i := 1; i < len(l); i++ {\n        if order && l[i] < l[i-1] {\n    \
    \        return false\n        }\n        if !order && l[i] > l[i-1] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    increasing := l[0]\
    \ < l[1]\n    for i := 2; i < len(l); i++ {\n        if l[i-1] > l[i] && increasing\
    \ {\n            return false\n        }\n        if l[i-1] < l[i] && !increasing\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) < 2 {\n        return true\n    }\n    flag := 0\n    for i,\
    \ j := 0, 1; j < len(l); i, j = i+1, j+1 {\n        if l[i] > l[j] {\n       \
    \     if flag == 1 {\n                return false\n            }\n          \
    \  flag = -1\n        } else if l[i] < l[j] {\n            if flag == -1 {\n \
    \               return false\n            }\n            flag = 1\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0] <= l[1] {\n\
    \        return monotonic(l[1:])\n    }\n    if l[0] >= l[1] {\n        return\
    \ monotonic(l[1:])\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpzsf1zs9q_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpzsf1zs9q_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    // Return true if list is monotonically increasing\n    inc := func(l\
    \ []int) bool {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i]\
    \ > l[i + 1] {\n                return false\n            }\n        }\n     \
    \   return true\n    }\n\n    // Return true if list is monotonically decreasing\n\
    \    dec := func(l []int) bool {\n        for i := 0; i < len(l) - 1; i++ {\n\
    \            if l[i] < l[i + 1] {\n                return false\n            }\n\
    \        }\n        return true\n    }\n\n    return inc(l) || dec(l)\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i-1] < l[i] {\n            for i := i; i < len(l); i++ {\n\
    \                if l[i-1] > l[i] {\n                    return false\n      \
    \          }\n            }\n            return true\n        } else if l[i-1]\
    \ > l[i] {\n            for i := i; i < len(l); i++ {\n                if l[i-1]\
    \ < l[i] {\n                    return false\n                }\n            }\n\
    \            return true\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    ln := len(l)\n    if ln <= 1 {\n        return true\n    }\n    p :=\
    \ l[0]\n    inc := false\n    dec := false\n    for i := 1; i < ln; i++ {\n  \
    \      if l[i] > p {\n            inc = true\n        } else if l[i] < p {\n \
    \           dec = true\n        }\n        if inc && dec {\n            return\
    \ false\n        }\n        p = l[i]\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0] > l[1] {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    } else {\n      \
    \  for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n     \
    \           return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    increasing := l[0] <= l[1]\n    for i := 1; i < len(l) - 1; i++ {\n \
    \       if increasing && l[i] > l[i + 1] {\n            return false\n       \
    \ }\n        if !increasing && l[i] < l[i + 1] {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    r := make([]int, len(l)-1)\n\
    \    for i := range r {\n        r[i] = l[i+1] - l[i]\n    }\n    if r[0] > 0\
    \ {\n        return isPositive(r)\n    } else if r[0] < 0 {\n        return isNegative(r)\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7nhrle7_test.go:24:16: undefined: isPositive

    /tmp/tmpv7nhrle7_test.go:26:16: undefined: isNegative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0] > l[1] {\n\
    \        for i := 1; i < len(l); i++ {\n            if l[i] > l[i-1] {\n     \
    \           return false\n            }\n        }\n    } else {\n        for\
    \ i := 1; i < len(l); i++ {\n            if l[i] < l[i-1] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074620
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    var b = true\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1]\
    \ {\n            if b {\n                b = true\n            } else {\n    \
    \            return false\n            }\n        } else if l[i] < l[i-1] {\n\
    \            if b {\n                b = false\n            } else {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp15jwme7j_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp15jwme7j_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    // first we need to check if array is empty\n    if len(l) == 0 {\n \
    \       return true\n    }\n    // then we need to see which direction it's going\n\
    \    isMonotonicInc := true\n    isMonotonicDec := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            isMonotonicInc = false\n    \
    \    }\n        if l[i] > l[i-1] {\n            isMonotonicDec = false\n     \
    \   }\n    }\n    return isMonotonicInc || isMonotonicDec\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    // Make list l length at least 2.\n    if len(l) < 2 {\n        l = append(l,\
    \ l[0])\n    }\n    // Returns True if int a is between ints b and c.\n    isBetween\
    \ := func(a, b, c int) bool {\n        if a > b && a < c {\n            return\
    \ true\n        }\n        if a < b && a > c {\n            return true\n    \
    \    }\n        return false\n    }\n    // Returns True if ints a and b are the\
    \ same sign.\n    sameSign := func(a, b int) bool {\n        if a > 0 && b > 0\
    \ {\n            return true\n        }\n        if a < 0 && b < 0 {\n       \
    \     return true\n        }\n        return false\n    }\n    // Returns True\
    \ if ints a and b are the same sign and a is between them.\n    sameSignIsBetween\
    \ := func(a, b, c int) bool {\n        if sameSign(a, b) && isBetween(a, b, c)\
    \ {\n            return true\n        }\n        return false\n    }\n    if len(l)\
    \ == 2 {\n        return true\n    }\n    for i := 1; i < len(l) - 1; i++ {\n\
    \        if !sameSignIsBetween(l[i], l[i - 1], l[i + 1]) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpsqz0h651_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpsqz0h651_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpsqz0h651_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074749
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpylkwri99_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpylkwri99_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    increasing := true\n    decreasing := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n\
    \        if l[i] > l[i-1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    increasing := true\n    decreasing := true\n    for i := 0; i < len(l)\
    \ - 1; i++ {\n        if l[i] < l[i + 1] {\n            decreasing = false\n \
    \       }\n        if l[i] > l[i + 1] {\n            increasing = false\n    \
    \    }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    inc := true\n    dec := true\n    for i := 1; i < len(l); i++ {\n   \
    \     inc = inc && l[i] >= l[i-1]\n        dec = dec && l[i] <= l[i-1]\n    }\n\
    \    return inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074750
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    if len(l) < 2 {\n        return true\n    }\n    i := 1\n    prev :=\
    \ l[0]\n    for {\n        if l[i] > prev {\n            for j := i + 1; j < len(l);\
    \ j++ {\n                if l[j] < l[j - 1] {\n                    return false\n\
    \                }\n            }\n            return true\n        } else if\
    \ l[i] < prev {\n            for j := i + 1; j < len(l); j++ {\n             \
    \   if l[j] > l[j - 1] {\n                    return false\n                }\n\
    \            }\n            return true\n        }\n        i++\n        if i\
    \ == len(l) {\n            return true\n        }\n        prev = l[i - 1]\n \
    \   }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074749
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunc monotonic(l []int) bool\
    \ {\n    increasing := true\n    decreasing := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i-1] < l[i] {\n            decreasing = false\n        }\n\
    \        if l[i-1] > l[i] {\n            increasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074749
