language: go_test.go
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var s string\n\
    \    var i int\n    var x int\n    count := 0\n    for i = 1; i < n; i++ {\n \
    \       s = fmt.Sprintf(\"%d\", i)\n        if (i % 11 == 0) || (i % 13 == 0)\
    \ {\n            for x = 0; x < len(s); x++ {\n                if s[x] == '7'\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.019s\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ has_digit(i, 7) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjodud8q5_test.go:18:44: undefined: has_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  j := 0\n    sevenCount := 0\n    for i < n {\n        if i % 11 == 0 || i %\
    \ 13 == 0 {\n            sevenCount += j\n        }\n        j++\n        i++\n\
    \    }\n    return sevenCount\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpd9w_vh3d_test.go:49: expected '%!s(int=0)', got '%!s(int=188)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpd9w_vh3d_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=503)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpd9w_vh3d_test.go:49: expected '%!s(int=3)', got '%!s(int=581)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpd9w_vh3d_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=859)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpd9w_vh3d_test.go:49: expected '%!s(int=6)', got '%!s(int=3298)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpd9w_vh3d_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=1287286)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpd9w_vh3d_test.go:49: expected '%!s(int=639)', got '%!s(int=8053045)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpd9w_vh3d_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=804154209)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // as we're\
    \ checking for divisibility by 11 or 13, we can initially check only multiples\
    \ of 143\n    // if n < 143, no solution\n    if n < 143 {\n        return 0\n\
    \    }\n    // if n >=143, then there's at least 1 multiple of 143\n    cnt :=\
    \ 1\n    // first multiple of 143 less than n\n    next := 143\n    for next <\
    \ n {\n        cnt += check_sevens(next)\n        next += 143\n    }\n    return\
    \ cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi989052e_test.go:26:16: undefined: check_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7'\
    \ {\n                    total++\n                }\n            }\n        }\n\
    \    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075192
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := n\n  \
    \  count := 0\n    for {\n        if i <= 0 {\n            break\n        }\n\
    \        for j := i; j > 0; j /= 10 {\n            if j % 10 == 7 {\n        \
    \        count++\n            }\n        }\n        i--\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmph37uwo8s_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmph37uwo8s_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmph37uwo8s_test.go:52: expected '%!s(int=3)', got '%!s(int=18)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmph37uwo8s_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=20)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmph37uwo8s_test.go:52: expected '%!s(int=6)', got '%!s(int=40)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmph37uwo8s_test.go:52:\
    \ expected '%!s(int=192)', got '%!s(int=1200)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmph37uwo8s_test.go:52: expected '%!s(int=639)', got '%!s(int=4000)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmph37uwo8s_test.go:52:\
    \ expected '%!s(int=8026)', got '%!s(int=50000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7'\
    \ {\n                    result++\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for d := i; d > 0; d /= 10 {\n                if d % 10 == 7 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count =\
    \ 0\n    var tmp = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0) ||\
    \ (i % 13 == 0) {\n            tmp = i\n            for tmp > 0 {\n          \
    \      if tmp % 10 == 7 {\n                    count++\n                }\n  \
    \              tmp /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, s := range fmt.Sprintf(\"%d\", i) {\n                if s == '7'\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tvar result =\
    \ 0\n\tfor i := 0; i < n; i++ {\n\t\tif (i % 11 == 0 || i % 13 == 0) && count7(i)\
    \ > 0 {\n\t\t\tresult++\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoeo6dvnz_test.go:18:38: undefined: count7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpq__eb0fc_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpq__eb0fc_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpq__eb0fc_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpq__eb0fc_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpq__eb0fc_test.go:45: expected '%!s(int=192)', got '%!s(int=91)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpq__eb0fc_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpq__eb0fc_test.go:45: expected '%!s(int=8026)', got '%!s(int=2297)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // All numbers\
    \ which are both divisible by 11 and 13 are also divisible by 143\n    // so we\
    \ can use 143 as the lowest common multiple\n    // >>> 143 % 11\n    // 0\n \
    \   // >>> 143 % 13\n    // 0\n    // >>> 143 % 7\n    // 1\n    // >>> 143 %\
    \ 11 == 0 && 143 % 13 == 0\n    // True\n    // >>> 143 % 11 == 0 && 143 % 13\
    \ == 0 && 143 % 7 == 0\n    // False\n    // >>> 143 % 11 == 0 || 143 % 13 ==\
    \ 0\n    // True\n    count := 0\n    for i := 0; i < n; i++ {\n        if i %\
    \ 143 == 0 {\n            continue\n        } else if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            count += count_7(i)\n        }\n    }\n    return count\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbulosixq_test.go:35:22: undefined: count_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    counter :=\
    \ 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           counter += count_sevens(i)\n        }\n    }\n    return counter\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsayq2s1b_test.go:19:24: undefined: count_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum = 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for b := i; b > 0; b /= 10 {\n                if b % 10 == 7 {\n     \
    \               sum++\n                }\n            }\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            c := 0\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n\
    \                if string(c) == \"7\" {\n                    count += 1\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8919jh_t_test.go:19:13: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_digit(i,\
    \ 7) {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3xcszil_test.go:18:44: undefined: contains_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var x, y, r\
    \ int\n    for i := 1; i < n; i++ {\n        x = i / 11\n        y = i / 13\n\
    \        if x * 11 == i {\n            r += count_7(x)\n        }\n        if\
    \ y * 13 == i {\n            r += count_7(y)\n        }\n    }\n    return r\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqi4qgmb_test.go:21:18: undefined: count_7

    /tmp/tmpdqi4qgmb_test.go:24:18: undefined: count_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075192
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            if i % 10 == 7 {\n                result++\n            }\n \
    \           if i / 10 == 7 {\n                result++\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpieripk2f_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpieripk2f_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpieripk2f_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpieripk2f_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075192
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return -1\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=639)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075138
