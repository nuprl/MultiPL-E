name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653,\
  \ 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8],\
  \ [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    set1 := make(map[int]bool)\n    set2 := make(map[int]bool)\n  \
    \  for _, v := range l1 {\n        set1[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        set2[v] = true\n    }\n    common := make([]int, 0)\n    for v,\
    \ _ := range set1 {\n        if set2[v] {\n            common = append(common,\
    \ v)\n        }\n    }\n    return common\n}\n", "    var ret []int\n    l :=\
    \ len(l1)\n    if len(l2) < l {\n        l = len(l2)\n    }\n    prev := 0\n \
    \   for i := 0; i < l; i++ {\n        if l1[i] == l2[i] {\n            if l1[i]\
    \ != prev {\n                ret = append(ret, l1[i])\n                prev =\
    \ l1[i]\n            }\n        } else if l1[i] < l2[i] {\n            l1 = l1[i:]\n\
    \            l2 = l2[i-1:]\n            break\n        } else {\n            l1\
    \ = l1[i-1:]\n            l2 = l2[i:]\n            break\n        }\n    }\n \
    \   for i := 0; i < len(l1); i++ {\n        if l1[i] == l2[i] {\n            if\
    \ l1[i] != prev {\n                ret = append(ret, l1[i])\n                prev\
    \ = l1[i]\n            }\n        } else if l1[i] < l2[i] {\n            l1 =\
    \ l1[i:]\n            l2 = l2[i-1:]\n            break\n        } else {\n   \
    \         l1 = l1[i-1:]\n            l2 = l2[i:]\n            break\n        }\n\
    \    }\n    return ret\n}\n", "    if len(l1) == 0 || len(l2) == 0 {\n       \
    \ return []int{}\n    }\n    sort(l1)\n    sort(l2)\n    var result []int\n  \
    \  i := 0\n    j := 0\n    for i < len(l1) && j < len(l2) {\n        if l1[i]\
    \ == l2[j] {\n            result = append(result, l1[i])\n            i++\n  \
    \          j++\n        } else if l1[i] < l2[j] {\n            i++\n        }\
    \ else {\n            j++\n        }\n    }\n    return result\n}\n", "    m :=\
    \ make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n    }\n\
    \    out := make([]int, 0)\n    for _, v := range l2 {\n        if m[v] {\n  \
    \          out = append(out, v)\n        }\n    }\n    return out\n}\n", "   \
    \ m := make(map[int]int)\n    for _, e := range l1 {\n        m[e] = 1\n    }\n\
    \    result := make([]int, 0)\n    for _, e := range l2 {\n        if m[e] ==\
    \ 1 {\n            result = append(result, e)\n            m[e] = 0\n        }\n\
    \    }\n    return result\n}\n", "    if len(l1) == 0 || len(l2) == 0 {\n    \
    \    return []int{}\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    var common []int\n    for k, v := range m {\n        if v > 1 {\n  \
    \          common = append(common, k)\n        }\n    }\n    fmt.Println(common)\n\
    \    return common\n}\n", "    m := make(map[int]bool)\n    for _, l := range\
    \ [][]int{l1, l2} {\n        for _, v := range l {\n            m[v] = true\n\
    \        }\n    }\n    var res []int\n    for k := range m {\n        res = append(res,\
    \ k)\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    r := make([]int,\
    \ 0)\n    // add l1 to map\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    // check if l2 elements are in l1\n    for _, v := range l2 {\n  \
    \      if m[v] {\n            r = append(r, v)\n        }\n    }\n    return r\n\
    }\n", "    result := []int{}\n    for i, e := range l1 {\n        for j, f :=\
    \ range l2 {\n            if e == f {\n                result = append(result,\
    \ e)\n                l1 = append(l1[:i], l1[i+1:]...)\n                l2 = append(l2[:j],\
    \ l2[j+1:]...)\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO\n    return []int{}\n}\n", "    result := []int{}\n\
    \    // Given list1: [1, 4, 3, 34, 653, 2, 5]\n    // Given list2: [5, 7, 1, 5,\
    \ 9, 653, 121]\n    // Check if element in list1 exists in list2.\n    // \n \
    \   //\n    // Add element to result set if it doesn't already exist in it.\n\
    \    // \n    // Sort result set.\n    return result\n}\n", "    var res []int\n\
    \    m := make(map[int]bool)\n    for _, elem := range l1 {\n        m[elem] =\
    \ true\n    }\n    for _, elem := range l2 {\n        if m[elem] {\n         \
    \   res = append(res, elem)\n        }\n    }\n    return res\n}\n", "    m :=\
    \ make(map[int]int)\n    for _, l := range l1 {\n        m[l] = 1\n    }\n   \
    \ for _, l := range l2 {\n        if v, ok := m[l]; ok {\n            m[l] = v\
    \ + 1\n        }\n    }\n    ret := make([]int, 0)\n    for k, v := range m {\n\
    \        if v == 2 {\n            ret = append(ret, k)\n        }\n    }\n   \
    \ return ret\n}\n", "    var m1 = make(map[int]int)\n    var m2 = make(map[int]int)\n\
    \    var common []int\n    for _, v := range l1 {\n        m1[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m2[v]++\n    }\n    for k, _ := range m1 {\n\
    \        if _, ok := m2[k]; ok {\n            common = append(common, k)\n   \
    \     }\n    }\n    return common\n}\n", "    var result []int\n    var i1, i2\
    \ int\n    for {\n        if i1 >= len(l1) || i2 >= len(l2) {\n            break\n\
    \        }\n        if l1[i1] == l2[i2] {\n            result = append(result,\
    \ l1[i1])\n            i1 += 1\n            i2 += 1\n        } else if l1[i1]\
    \ < l2[i2] {\n            i1 += 1\n        } else {\n            i2 += 1\n   \
    \     }\n    }\n    return result\n}\n", "    uniques := make(map[int]bool)\n\
    \    for _, i := range l1 {\n        uniques[i] = true\n    }\n    for _, i :=\
    \ range l2 {\n        uniques[i] = true\n    }\n    var result []int\n    for\
    \ k := range uniques {\n        result = append(result, k)\n    }\n    return\
    \ result\n}\n", "    res := []int{}\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                res = append(res,\
    \ v1)\n            }\n        }\n    }\n    return res\n}\n", "    hm := make(map[int]bool)\n\
    \    // put elements of l1 into hashmap\n    for _, v := range l1 {\n        hm[v]\
    \ = true\n    }\n    var common []int\n    // find duplicates\n    for _, v :=\
    \ range l2 {\n        if _, ok := hm[v]; ok {\n            common = append(common,\
    \ v)\n        }\n    }\n    return common\n}\n", "    var m1 map[int]bool\n  \
    \  var m2 map[int]bool\n    var l3 []int\n\n    m1 = make(map[int]bool)\n    m2\
    \ = make(map[int]bool)\n\n    for _, i := range l1 {\n        m1[i] = true\n \
    \   }\n    for _, i := range l2 {\n        m2[i] = true\n    }\n\n    for i, _\
    \ := range m1 {\n        if m2[i] {\n            l3 = append(l3, i)\n        }\n\
    \    }\n\n    for i, _ := range m2 {\n        if m1[i] {\n            l3 = append(l3,\
    \ i)\n        }\n    }\n\n    return l3\n}\n", "    if len(l1) > len(l2) {\n \
    \       l1, l2 = l2, l1\n    }\n    // always l1 <= l2\n    res := make([]int,\
    \ 0, len(l1))\n    m := make(map[int]bool)\n    for _, v := range l1 {\n     \
    \   m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v] {\n      \
    \      res = append(res, v)\n            m[v] = false\n        }\n    }\n    return\
    \ res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
