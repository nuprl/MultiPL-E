name: HumanEval_49_modp
language: go_test.go
prompt: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
  \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
  \ 101)\n// 1\nfunc modp(n int, p int) int {\n"
tests: "func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
  \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
  \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
  \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
  \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    r := 1\n    for n > 0 {\n        if n & 1 == 1 {\n            r\
    \ = (r * n) % p\n        }\n        n >>= 1\n    }\n    return r\n}\n", "    m\
    \ := 1\n    for i := 0; i < n; i++ {\n        m = (m * 2) % p\n    }\n    return\
    \ m\n}\n", "    var prod = 1\n    for i := 0; i < n; i++ {\n        prod = (prod\
    \ * 2) % p\n    }\n    return prod\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n\
    \    }\n    return (modp(n/2, p) * modp(n/2, p) * 2) % p\n}\n", "    if n == 0\
    \ {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n    if\
    \ n%2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ modp(n/2, p) * modp(n/2, p) * n % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    r := modp(n/2, p)\n    r = (r * r) % p\n    if n & 1 == 1 {\n\
    \        r = (r * 2) % p\n    }\n    return r\n}\n", "    return 1\n}\n", "  \
    \  // If p is prime, then there exists some k such that\n    // 2^k = 1 (mod p).\n\
    \    // Write n as the sum of m such k's.\n    // Then 2^n = 2^(m*k) = (2^k)^m\
    \ = 1^m = 1 (mod p).\n    for n >= p {\n        n -= p\n    }\n    if n < 0 {\n\
    \        return p + n\n    }\n    return n\n}\n", "    var res int\n    var i\
    \ int\n    res = 1\n    for i = 0; i < n; i++ {\n        res = (res * 2) % p\n\
    \    }\n    return res\n}\n", "    if p == 1 {\n        return 0\n    }\n    res\
    \ := 1\n    for n > 0 {\n        if n & 1 == 1 {\n            res = (res * 2)\
    \ % p\n        }\n        n >>= 1\n    }\n    return res\n}\n", "    if n == 0\
    \ {\n        return 1\n    }\n    r := 1\n    for n > 0 {\n        if n & 1 ==\
    \ 1 {\n            r = (r * n) % p\n        }\n        n = n >> 1\n    }\n   \
    \ return r\n}\n", "    r := 1\n    for {\n        if n == 0 {\n            break\n\
    \        }\n        if n % 2 == 1 {\n            r = (r * 2) % p\n        }\n\
    \        n = n / 2\n        if n == 0 {\n            break\n        }\n      \
    \  r = (r * r) % p\n    }\n    return r\n}\n", "    r := 1\n    for n > 0 {\n\
    \        if n & 1 != 0 {\n            r = (r * n) % p\n        }\n        n =\
    \ n >> 1\n    }\n    return r\n}\n", "    return int(modp_32(uint32(n), uint32(p)))\n\
    }\n", "    var res int = 1\n    for n > 0 {\n        if n & 1 != 0 {\n       \
    \     res = (res * n) % p\n        }\n        n = n >> 1\n    }\n    return res\n\
    }\n", "    r := 1\n    for n > 0 {\n        if n & 1 == 1 {\n            r = (r\
    \ * n) % p\n        }\n        n = n >> 1\n    }\n    return r\n}\n", "    var\
    \ r int\n    r = 1\n    for {\n        if n == 0 {\n            break\n      \
    \  }\n        if n & 1 == 1 {\n            r = (r * n) % p\n        }\n      \
    \  n = n >> 1\n        n = (n * n) % p\n    }\n    return r\n}\n", "    result\
    \ := 1\n    for i := 0; i < n; i++ {\n        result = (result * 2) % p\n    }\n\
    \    return result\n}\n", "    if n == 0 {\n        return 1\n    }\n    pow :=\
    \ modp(n/2, p)\n    if n % 2 == 0 {\n        return (pow * pow) % p\n    }\n \
    \   return (pow * pow * n) % p\n}\n", "    if n < p {\n        return n\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * 2 % p\n    }\n    return (modp(n/2,\
    \ p) * 2 + 1) % p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
