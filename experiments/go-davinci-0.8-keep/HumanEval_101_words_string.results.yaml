language: go_test.go
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // TODO: implement\n    return nil\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpbqnzdeto_test.go:36: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpbqnzdeto_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpbqnzdeto_test.go:36: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpbqnzdeto_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpbqnzdeto_test.go:36: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // TODO\n    return nil\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpfqb48wrr_test.go:36: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpfqb48wrr_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpfqb48wrr_test.go:36: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpfqb48wrr_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpfqb48wrr_test.go:36: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var r []string\n    for _, w := range(split(s)) {\n\
    \        if w != \"\" {\n            r = append(r, w)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgtusw1z_test.go:15:23: undefined: split

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return []string{}\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpu2qjclod_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpu2qjclod_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpu2qjclod_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpu2qjclod_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpu2qjclod_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := []string{}\n    for _, word := range split_on_space(s)\
    \ {\n        words = append(words, split_on_comma(word)...)\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ft24i8x_test.go:15:26: undefined: split_on_space

    /tmp/tmp5ft24i8x_test.go:16:31: undefined: split_on_comma

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words = nil\n    word := \"\"\
    \n    started := false\n    for _, c := range s {\n        if c == ' ' || c ==\
    \ ',' {\n            if started {\n                words = append(words, word)\n\
    \                word = \"\"\n                started = false\n            }\n\
    \        } else {\n            word += string(c)\n            started = true\n\
    \        }\n    }\n    if started {\n        words = append(words, word)\n   \
    \ }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    i := 0\n    l := len(s)\n    var buf []byte\n    var\
    \ words []string\n    for i < l {\n        c := s[i]\n        if c != ' ' && c\
    \ != ',' {\n            buf = append(buf, c)\n        } else {\n            if\
    \ len(buf) > 0 {\n                words = append(words, string(buf))\n       \
    \         buf = []byte{}\n            }\n        }\n        i++\n    }\n    if\
    \ len(buf) > 0 {\n        words = append(words, string(buf))\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    res := make([]string, 0)\n    temp := \"\"\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if temp !=\
    \ \"\" {\n                res = append(res, temp)\n                temp = \"\"\
    \n            }\n        } else {\n            temp += string(c)\n        }\n\
    \    }\n    if temp != \"\" {\n        res = append(res, temp)\n    }\n    return\
    \ res\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpc6vqvd8c_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpc6vqvd8c_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var result []string\n    var word string\n    var n\
    \ int\n    n = len(s)\n    for i := 0; i < n; i++ {\n        if s[i] == ' ' ||\
    \ s[i] == ',' {\n            if len(word) > 0 {\n                result = append(result,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(s[i])\n        }\n    }\n    if len(word) > 0 {\n      \
    \  result = append(result, word)\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    panic(\"Not implemented\")\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\npanic: Not implemented [recovered]\n\
    \tpanic: Not implemented\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_string(...)\n\t/tmp/tmptohs3frh_test.go:14\n\
    command-line-arguments_test.TestWords_String(0x0?)\n\t/tmp/tmptohs3frh_test.go:24\
    \ +0x27\ntesting.tRunner(0xc0001a0340, 0x527d50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    return nil\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpa33u__58_test.go:35:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpa33u__58_test.go:35: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpc6vqvd8c_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpc6vqvd8c_test.go:36:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpc6vqvd8c_test.go:36: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
