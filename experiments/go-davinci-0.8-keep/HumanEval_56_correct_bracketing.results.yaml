language: go_test.go
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if brackets == \"\" {\n        return true\n    }\n\n  \
    \  if brackets[0] == '>' {\n        return false\n    }\n\n    if len(brackets)\
    \ == 1 {\n        return false\n    }\n\n    return correct_bracketing(brackets[1:])\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp10pt6mqr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp10pt6mqr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp10pt6mqr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp10pt6mqr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, br := range brackets {\n        if\
    \ br == '<' {\n            count += 1\n        } else {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openNum := 0\n    for _, bracket := range brackets {\n \
    \       if bracket == '<' {\n            openNum += 1\n        } else {\n    \
    \        openNum -= 1\n        }\n        if openNum < 0 {\n            return\
    \ false\n        }\n    }\n    return openNum == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, v := range brackets {\n  \
    \      if v == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  switch string(b) {\n        case \"<\":\n            count++\n        case\
    \ \">\":\n            count--\n        }\n        if count < 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmp69tds86a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmp69tds86a_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__9\
    \ (0.00s)\n        tmp69tds86a_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Fill in code here\n    count := 0\n    for _, v := range\
    \ brackets {\n        if v == '<' {\n            count += 1\n        } else {\n\
    \            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if (len(brackets) % 2 != 0) {\n        return false\n  \
    \  }\n    balance := 0\n    for _, ch := range brackets {\n        if (ch == '<')\
    \ {\n            balance += 1\n        } else {\n            balance -= 1\n  \
    \      }\n        if (balance < 0) {\n            return false\n        }\n  \
    \  }\n    return balance == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Write your code here.\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp9qogkd29_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp9qogkd29_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp9qogkd29_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp9qogkd29_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, r := range brackets {\n  \
    \      if len(stack) == 0 && r == '>' {\n            return false\n        } else\
    \ if r == '<' {\n            stack = append(stack, r)\n        } else if r ==\
    \ '>' {\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    fmt.Println(brackets)\n    left := 0\n    for _, ch := range\
    \ brackets {\n        if ch == '<' {\n            left++\n        } else {\n \
    \           left--\n        }\n        if left < 0 {\n            return false\n\
    \        }\n    }\n    return left == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if brackets == \"\" {\n        return true\n    }\n\n  \
    \  opens := 0\n    for _, char := range brackets {\n        if char == '<' {\n\
    \            opens += 1\n        } else if char == '>' {\n            opens -=\
    \ 1\n        }\n\n        if opens < 0 {\n            return false\n        }\n\
    \    }\n\n    return opens == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    counter := 0\n    for _, s := range brackets {\n       \
    \ if s == '<' {\n            counter++\n        } else {\n            counter--\n\
    \        }\n        if counter < 0 {\n            return false\n        }\n  \
    \  }\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Write your code here\n    level := 0\n    for _, c :=\
    \ range brackets {\n        if c == '<' {\n            level++\n        } else\
    \ {\n            level--\n        }\n        if level < 0 {\n            return\
    \ false\n        }\n    }\n    return level == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var c, o int\n    for _, b := range brackets {\n       \
    \ if b == '<' {\n            c++\n        } else {\n            o++\n        }\n\
    \        if o > c {\n            return false\n        }\n    }\n    return c\
    \ == o\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    n := 0\n    for _, v := range brackets {\n        if string(v)\
    \ == \"<\" {\n            n++\n        } else {\n            n--\n        }\n\
    \        if n < 0 {\n            return false\n        }\n    }\n    return n\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    left := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            left++\n        } else {\n            left--\n     \
    \   }\n        if left < 0 {\n            return false\n        }\n    }\n   \
    \ return left == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]byte, 0)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            stack = append(stack, byte(c))\n     \
    \   } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var cnt int = 0\n    for _, v := range brackets {\n    \
    \    if v == '<' {\n            cnt += 1\n        } else {\n            cnt -=\
    \ 1\n        }\n        if cnt < 0 {\n            return false\n        }\n  \
    \  }\n    return cnt == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: Implement me\n    left := 0\n    right := 0\n \
    \   for _, v := range brackets {\n        if string(v) == \"<\" {\n          \
    \  left += 1\n        } else {\n            right += 1\n        }\n        if\
    \ right > left {\n            return false\n        }\n    }\n    if left == right\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // +++your code here+++\n    var count int = 0\n    for\
    \ _, v := range brackets {\n        if v == '<' {\n            count += 1\n  \
    \      } else if v == '>' {\n            count -= 1\n        }\n        if count\
    \ < 0 {\n            return false\n        }\n    }\n    return count == 0\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074952
