name: HumanEval_94_skjkasdkd
language: go_test.go
prompt: "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a list of integers.\n// You need to find the largest prime value\
  \ and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfunc skjkasdkd(lst []int) int\
  \ {\n"
tests: "func TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
  \ 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n   \
  \  { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0,\
  \ 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2,\
  \ 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n\
  \     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     {\
  \ actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var max, sum int\n\n    for _, v := range lst {\n        if isPrime(v)\
    \ && v > max {\n            max = v\n        }\n    }\n\n    for max > 0 {\n \
    \       sum += max % 10\n        max /= 10\n    }\n\n    return sum\n}\n", " \
    \   sum := 0\n    for _, i := range lst {\n        sum += i\n    }\n    return\
    \ sum\n}\n", "    return -1\n}\n", "    //Write your code here\n    primeList\
    \ := lst[0]\n    for _,v := range lst{\n        if primeList < v {\n         \
    \   primeList = v\n        }\n    }\n    fmt.Println(primeList)\n    // check\
    \ prime number\n    for i := 2; i < primeList ; i++ {\n        if primeList %\
    \ i == 0 {\n            return -1\n        }\n    }\n    // convert prime number\
    \ to string\n    str := fmt.Sprintf(\"%d\", primeList)\n    sum := 0\n    for\
    \ _,v := range str{\n        sum += int(v - '0')\n    }\n    return sum\n}\n",
  "    var prime, sum int\n    for _, v := range lst {\n        if v > prime && isPrime(v)\
    \ {\n            prime = v\n        }\n    }\n    for prime > 0 {\n        sum\
    \ += prime % 10\n        prime /= 10\n    }\n    return sum\n}\n", "    if len(lst)\
    \ == 0 {\n        return 0\n    }\n    mp := map[int]int{}\n    for _, l := range\
    \ lst {\n        if _, ok := mp[l]; !ok {\n            mp[l] = 1\n        } else\
    \ {\n            mp[l] += 1\n        }\n    }\n    values := []int{}\n    for\
    \ k, v := range mp {\n        if v > 1 {\n            values = append(values,\
    \ k)\n        }\n    }\n    // Now we have a list of non-prime numbers.\n    //\
    \ We need to find the largest prime number from these numbers.\n    // The simple\
    \ way is to find the largest number from the number list,\n    // and check if\
    \ it is a prime number. If it is not a prime number,\n    // then find the next\
    \ largest number.\n    // If the next largest number is also not a prime number,\n\
    \    // then continue to find the next largest number.\n    max := -1\n    for\
    \ {\n        if len(values) == 0 {\n            break\n        }\n        if len(values)\
    \ == 1 {\n            max = values[0]\n            break\n        }\n        cur\
    \ := values[0]\n        for _, v := range values {\n            if v > cur {\n\
    \                cur = v\n            }\n        }\n        // check if cur is\
    \ a prime number\n        isPrime := true\n        for j := 2; j < cur; j++ {\n\
    \            if cur % j == 0 {\n                isPrime = false\n            \
    \    break\n            }\n        }\n        if isPrime {\n            max =\
    \ cur\n            break\n        }\n        idx := -1\n        for i, v := range\
    \ values {\n            if v == cur {\n                idx = i\n             \
    \   break\n            }\n        }\n        if idx >= 0 {\n            values\
    \ = append(values[:idx], values[idx+1:]...)\n        }\n    }\n    // now we have\
    \ the largest prime number.\n    // we need to find the sum of its digits.\n \
    \   digits := []int{}\n    for {\n        if max == 0 {\n            break\n \
    \       }\n        digits = append(digits", "    var maxPrime int\n    for _,\
    \ num := range lst {\n        isPrime := true\n        if num <= 1 {\n       \
    \     continue\n        }\n        for i := 2; i < num; i++ {\n            if\
    \ num % i == 0 {\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if isPrime && num > maxPrime {\n            maxPrime\
    \ = num\n        }\n    }\n    fmt.Println(maxPrime)\n    var sum int\n    for\
    \ maxPrime > 0 {\n        sum += maxPrime % 10\n        maxPrime /= 10\n    }\n\
    \    return sum\n}\n", "    // first find largest prime\n    var (\n        largestPrime\
    \ int\n        largestPrimeDigitSum int\n    )\n    for _, v := range lst {\n\
    \        if largestPrime < v && isPrime(v) {\n            largestPrime = v\n \
    \       }\n    }\n    fmt.Println(\"largest prime:\", largestPrime)\n    // then\
    \ find sum of its digits\n    for largestPrime > 0 {\n        largestPrimeDigitSum\
    \ += largestPrime % 10\n        largestPrime /= 10\n    }\n    return largestPrimeDigitSum\n\
    }\n", "    // get the largest prime of the list\n    // sum of its digits\n  \
    \  // return the sum\n    return 0\n}\n", "    var sum int = 0\n    var primes\
    \ []int\n    for _, value := range lst {\n        if isPrime(value) {\n      \
    \      primes = append(primes, value)\n        }\n    }\n    largest := getLargestPrime(primes)\n\
    \    for _, digit := range intToDigits(largest) {\n        sum += digit\n    }\n\
    \    return sum\n}\n", "    // Checking the first if the list is empty\n    if\
    \ len(lst) == 0 {\n        return 0\n    }\n    // Finding the largest prime number\
    \ in the list\n    var largest_prime int\n    var largest_prime_temp int\n   \
    \ for _, num := range lst {\n        if isPrime(num) {\n            largest_prime_temp\
    \ = num\n            if largest_prime_temp > largest_prime {\n               \
    \ largest_prime = largest_prime_temp\n            }\n        }\n    }\n    //\
    \ If the largest prime was not found, return 0\n    if largest_prime == 0 {\n\
    \        return 0\n    }\n    // Finding the sum of the digits\n    var list_of_digits\
    \ []int\n    var n int = largest_prime\n    for n > 0 {\n        list_of_digits\
    \ = append(list_of_digits, n % 10)\n        n = n / 10\n    }\n    var sum int\n\
    \    for _, digit := range list_of_digits {\n        sum += digit\n    }\n   \
    \ return sum\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    var sum int\n\
    \    var max int\n    for _, num := range lst {\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for i := 2; i <= max; i++ {\n      \
    \  if isPrime(i) {\n            for _, num := range numToDigits(i) {\n       \
    \         sum += num\n            }\n        }\n    }\n    return sum\n}\n", " \
    \   var primes []int\n\n    for _, x := range lst {\n        if isPrime(x) {\n\
    \            primes = append(primes, x)\n        }\n    }\n\n    largestPrime\
    \ := largest(primes)\n    sum := 0\n\n    for largestPrime > 0 {\n        sum\
    \ += largestPrime % 10\n        largestPrime /= 10\n    }\n\n    return sum\n\
    }\n", "    largestPrime := 0\n    for _,val := range lst {\n        if isPrime(val)\
    \ && val > largestPrime {\n            largestPrime = val\n        }\n    }\n\
    \    retVal := 0\n    for largestPrime > 0 {\n        rem := largestPrime % 10\n\
    \        retVal += rem\n        largestPrime = largestPrime / 10\n    }\n    return\
    \ retVal\n}\n", "    // your code here\n    return 0\n}\n", "    max := lst[0]\n\
    \    for _, item := range lst {\n        if item > max {\n            max = item\n\
    \        }\n    }\n    fmt.Println(max)\n    for i := max; i > 0; i-- {\n    \
    \    if isPrime(i) {\n            fmt.Println(i)\n            return sumOfIntDigits(i)\n\
    \        }\n    }\n    return 0\n}\n", "    primeVal := 0\n    for _, num := range\
    \ lst {\n        if primeVal < num && isPrime(num) {\n            primeVal = num\n\
    \        }\n    }\n    return sumDigits(primeVal)\n}\n", "    sum := 0\n    max\
    \ := 0\n    for _, v := range lst {\n        if isPrime(v) {\n            if v\
    \ > max {\n                max = v\n            }\n        }\n    }\n    for max\
    \ > 0 {\n        sum += max % 10\n        max /= 10\n    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
