name: HumanEval_149_sorted_list_sum
language: go_test.go
prompt: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// assert list_sort([\"\
  aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\"\
  , \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string) []string {\n"
tests: "func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}),\
  \ expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"\
  AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n \
  \    { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{}\
  \ },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
  \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
  ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual:\
  \ candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"\
  cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement this function\n    return lst\n}\n", "    var\
    \ res []string\n    m := make(map[int][]string)\n    for _, v := range lst {\n\
    \        m[len(v)] = append(m[len(v)], v)\n    }\n    for k, v := range m {\n\
    \        fmt.Println(k, v)\n    }\n    for k, _ := range m {\n        for _, v\
    \ := range m[k] {\n            if k % 2 == 0 {\n                res = append(res,\
    \ v)\n            }\n        }\n    }\n    return res\n}\n", "    l := len(lst)\n\
    \    if l == 0 {\n        return lst\n    }\n    if l == 1 {\n        if len(lst[0])%2\
    \ == 0 {\n            return lst\n        } else {\n            return []string{}\n\
    \        }\n    }\n    mid := int(l/2)\n    a1 := sorted_list_sum(lst[:mid])\n\
    \    a2 := sorted_list_sum(lst[mid:])\n    var r []string\n    for i, j := 0,\
    \ 0; i < len(a1) || j < len(a2); {\n        if i == len(a1) {\n            r =\
    \ append(r, a2[j])\n            j++\n        } else if j == len(a2) {\n      \
    \      r = append(r, a1[i])\n            i++\n        } else if len(a1[i])%2 ==\
    \ 0 && len(a2[j])%2 == 0 {\n            if len(a1[i]) == len(a2[j]) {\n      \
    \          if a1[i] < a2[j] {\n                    r = append(r, a1[i])\n    \
    \                i++\n                } else {\n                    r = append(r,\
    \ a2[j])\n                    j++\n                }\n            } else if len(a1[i])\
    \ < len(a2[j]) {\n                r = append(r, a1[i])\n                i++\n\
    \            } else {\n                r = append(r, a2[j])\n                j++\n\
    \            }\n        } else if len(a1[i])%2 == 0 {\n            r = append(r,\
    \ a1[i])\n            i++\n        } else if len(a2[j])%2 == 0 {\n           \
    \ r = append(r, a2[j])\n            j++\n        } else {\n            i++\n \
    \           j++\n        }\n    }\n    return r\n}\n", "    if len(lst) == 0 {\n\
    \        return []string{}\n    }\n    odd := map[string]bool{}\n    for _, e\
    \ := range lst {\n        if len(e) % 2 == 1 {\n            odd[e] = true\n  \
    \      }\n    }\n    l := 0\n    for _, e := range lst {\n        if _, ok :=\
    \ odd[e]; !ok {\n            lst[l] = e\n            l++\n        }\n    }\n \
    \   lst = lst[:l]\n    return lst\n}\n", "    var sum []string\n    for _, value\
    \ := range lst {\n        if len(value) % 2 == 0 {\n            sum = append(sum,\
    \ value)\n        }\n    }\n    return sum\n}\n", "    var result []string\n \
    \   for _, elem := range lst {\n        if len(elem) % 2 == 0 {\n            result\
    \ = append(result, elem)\n        }\n    }\n    return result\n}\n", "    // your\
    \ code here\n    return lst\n}\n", "    var result []string\n    var lenMap =\
    \ make(map[int][]string)\n    for _, val := range lst {\n        if len(val) %\
    \ 2 == 0 {\n            _, ok := lenMap[len(val)]\n            if !ok {\n    \
    \            lenMap[len(val)] = []string{val}\n            } else {\n        \
    \        lenMap[len(val)] = append(lenMap[len(val)], val)\n            }\n   \
    \     }\n    }\n    var sortedLen []int\n    for key, _ := range lenMap {\n  \
    \      sortedLen = append(sortedLen, key)\n    }\n    for i := 0; i < len(sortedLen);\
    \ i++ {\n        for j := 0; j < len(sortedLen)-1; j++ {\n            if sortedLen[j]\
    \ > sortedLen[j+1] {\n                tmp := sortedLen[j]\n                sortedLen[j]\
    \ = sortedLen[j+1]\n                sortedLen[j+1] = tmp\n            }\n    \
    \    }\n    }\n    for _, key := range sortedLen {\n        //sorted\n       \
    \ for i := 0; i < len(lenMap[key]); i++ {\n            for j := 0; j < len(lenMap[key])-1;\
    \ j++ {\n                if lenMap[key][j] > lenMap[key][j+1] {\n            \
    \        tmp := lenMap[key][j]\n                    lenMap[key][j] = lenMap[key][j+1]\n\
    \                    lenMap[key][j+1] = tmp\n                }\n            }\n\
    \        }\n        result = append(result, lenMap[key]...)\n    }\n    return\
    \ result\n}\n", "    // YOUR CODE HERE\n    return lst\n}\n", "    result := []string{}\n\
    \    for _, str := range lst {\n        if len(str) % 2 == 0 {\n            result\
    \ = append(result, str)\n        }\n    }\n    for i := 0; i < len(result); i++\
    \ {\n        for j := i + 1; j < len(result); j++ {\n            if len(result[i])\
    \ > len(result[j]) {\n                result[i], result[j] = result[j], result[i]\n\
    \            } else if len(result[i]) == len(result[j]) {\n                if\
    \ result[i] > result[j] {\n                    result[i], result[j] = result[j],\
    \ result[i]\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return []string{}\n    }\n    result :=\
    \ []string{}\n    for _, item := range lst {\n        if len(item) % 2 == 0 {\n\
    \            result = append(result, item)\n        }\n    }\n    return result\n\
    }\n", "    fmt.Println(\"input list: \", lst)\n    i := 0\n    for _, elem :=\
    \ range lst {\n        if len(elem) % 2 == 0 {\n            lst[i] = elem\n  \
    \          i++\n        }\n    }\n    lst = lst[:i]\n    fmt.Println(\"trimmed\
    \ list: \", lst)\n    fmt.Println(\"----------------------\")\n    return lst\n\
    }\n", "    odd_count := 0\n    for _, str := range lst {\n        if len(str)\
    \ % 2 == 1 {\n            odd_count += 1\n        }\n    }\n    if odd_count %\
    \ 2 == 1 {\n        return []string{}\n    }\n    lst_map := make(map[string]int)\n\
    \    for _, str := range lst {\n        if len(str) % 2 == 1 {\n            continue\n\
    \        }\n        lst_map[str] = len(str)\n    }\n    sorted_map := sort_map(lst_map)\n\
    \    return map_to_list(sorted_map)\n}\n", "    var out_lst []string\n    for\
    \ _, val := range lst {\n        if len(val) % 2 == 0 {\n            out_lst =\
    \ append(out_lst, val)\n        }\n    }\n    return out_lst\n}\n", "    // TODO:\
    \ Implement me\n    return []string{}\n}\n", "    even_list := make([]string,\
    \ 0)\n    odd_list := make([]string, 0)\n    for _, val := range lst {\n     \
    \   if len(val) % 2 == 0 {\n            even_list = append(even_list, val)\n \
    \       } else {\n            odd_list = append(odd_list, val)\n        }\n  \
    \  }\n    even_list = append(even_list, odd_list...)\n    return even_list\n}\n",
  "    var res []string\n    words := make(map[int][]string)\n    for _, word := range\
    \ lst {\n        words[len(word)] = append(words[len(word)], word)\n    }\n  \
    \  for _, ws := range words {\n        res = append(res, ws...)\n    }\n    return\
    \ res\n}\n", "    var res []string\n    m := make(map[int][]string)\n    for _,\
    \ v := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    var keys\
    \ []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n\
    \    for _, k := range keys {\n        for _, v := range m[k] {\n            res\
    \ = append(res, v)\n        }\n    }\n    return res\n}\n", "    var new_lst []string\n\
    \    for _, word := range lst {\n        if len(word) % 2 == 0 {\n           \
    \ new_lst = append(new_lst, word)\n        }\n    }\n    return new_lst\n}\n",
  "    var i int\n    var res []string\n    var tmp string\n    var cnt int\n    res\
    \ = make([]string, len(lst))\n    copy(res, lst)\n    for i = 0; i < len(res);\
    \ i++ {\n        if len(res[i]) % 2 == 1 {\n            res = append(res[:i],\
    \ res[i+1:]...)\n            i--\n        }\n    }\n    for i = 0; i < len(res);\
    \ i++ {\n        for j := i + 1; j < len(res); j++ {\n            if len(res[i])\
    \ > len(res[j]) {\n                tmp = res[i]\n                res[i] = res[j]\n\
    \                res[j] = tmp\n            } else if len(res[i]) == len(res[j])\
    \ {\n                if res[i] > res[j] {\n                    tmp = res[i]\n\
    \                    res[i] = res[j]\n                    res[j] = tmp\n     \
    \           }\n            }\n        }\n    }\n    fmt.Println(res)\n    cnt\
    \ = 1\n    for i = 1; i < len(res); i++ {\n        if res[i] != res[i-1] {\n \
    \           res[cnt] = res[i]\n            cnt++\n        }\n    }\n    return\
    \ res[:cnt]\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
