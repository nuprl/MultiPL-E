language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    for x <= y {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x += 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp79rx75xt_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp79rx75xt_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp79rx75xt_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x == y {\n        if x % 2 == 0 {\n            return x\n        } else\
    \ {\n            return -1\n        }\n    } else if x > y {\n        fmt.Println(\"\
    X > Y\")\n        if x % 2 == 0 {\n            return x\n        } else {\n  \
    \          return choose_num(x - 1, y)\n        }\n    } else {\n        fmt.Println(\"\
    X < Y\")\n        if y % 2 == 0 {\n            return y\n        } else {\n  \
    \          return choose_num(x, y - 1)\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "X < Y\nX < Y\nX > Y\nX < Y\nX > Y\nX < Y\nX < Y\nX > Y\nX > Y\n--- FAIL:\
    \ TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n \
    \       tmpzu954gqi_test.go:58: expected '%!s(int=-1)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpzu954gqi_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpzu954gqi_test.go:58: expected '%!s(int=-1)', got '%!s(int=26)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    if x%2 == 0 {\n        if y%2\
    \ == 0 {\n            return y\n        } else {\n            return y-1\n   \
    \     }\n    } else {\n        if y%2 == 0 {\n            return y-2\n       \
    \ } else {\n            return y-3\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__1\
    \ (0.00s)\n        tmpty6w7pi4_test.go:53: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpty6w7pi4_test.go:53:\
    \ expected '%!s(int=12354)', got '%!s(int=12352)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpty6w7pi4_test.go:53: expected '%!s(int=-1)', got '%!s(int=5232)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpty6w7pi4_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpty6w7pi4_test.go:53: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // find the maximum value between x and y\n    bigger := x\n    if y > x\
    \ {\n        bigger = y\n    }\n    // start from bigger and go down until finding\
    \ an even number\n    var maxEven int = -1\n    for i := bigger; i >= x; i-- {\n\
    \        if i % 2 == 0 {\n            maxEven = i\n            break\n       \
    \ }\n    }\n    return maxEven\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmp5oa2lyg6_test.go:51: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n\
    \    }\n    if y-1%2 == 0 {\n        return y-1\n    }\n    return -1\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjooaz8ad_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpjooaz8ad_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // Write your code here\n    return 0\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp73fbf7iz_test.go:39: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp73fbf7iz_test.go:39:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp73fbf7iz_test.go:39: expected '%!s(int=12354)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp73fbf7iz_test.go:39:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp73fbf7iz_test.go:39: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp73fbf7iz_test.go:39:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp73fbf7iz_test.go:39: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp73fbf7iz_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n\n    for i := y; i >= x; i-- {\n \
    \       if i % 2 == 0 {\n            return i\n        }\n    }\n\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // YOUR CODE HERE\n    if y < x || y < 0 || x < 0 {\n        return -1\n\
    \    }\n\n    if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x+1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptbcekb17_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptbcekb17_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptbcekb17_test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptbcekb17_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // your code here\n    if x > y {\n        return -1\n    }\n    if x % 2\
    \ == 0 {\n        return x\n    }\n    if x + 1 <= y {\n        return x + 1\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmps8m94ujq_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmps8m94ujq_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmps8m94ujq_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    for y >= x {\n        if y % 2 == 0 {\n            return y\n        }\n\
    \        y--\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        if y % 2 == 0 {\n            return y\n        }\
    \ else {\n            return y - 1\n        }\n    } else {\n        if y % 2\
    \ == 0 {\n            return y - 2\n        } else {\n            return y - 3\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__1\
    \ (0.00s)\n        tmpmrhk0_wf_test.go:50: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpmrhk0_wf_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=12352)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpmrhk0_wf_test.go:50: expected '%!s(int=-1)', got '%!s(int=5232)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmrhk0_wf_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmrhk0_wf_test.go:50: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // Your code here.\n    var num int\n    if y%2 == 0 {\n        num = y\n\
    \    } else {\n        num = y-1\n    }\n    if x < 2 {\n        return num\n\
    \    } else {\n        for x < num {\n            if num%2 == 0 {\n          \
    \      return num\n            } else {\n                num = num-1\n       \
    \     }\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpqgjw4zl0_test.go:56: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \  // Write your code here\n  var num int\n  if x <= y && y%2 == 0 {\n    return\
    \ y\n  } else if x <= y && y%2 != 0 {\n    return y-1\n  } else if x > y && x%2\
    \ == 0 {\n    return x\n  } else if x > y && x%2 != 0 {\n    return x-1\n  }\n\
    \  return num\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__1\
    \ (0.00s)\n        tmpk72gcqpx_test.go:49: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpk72gcqpx_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpk72gcqpx_test.go:49: expected '%!s(int=-1)', got '%!s(int=26)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpk72gcqpx_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var even int\n    var bigger int\n    if x > y {\n        bigger = x\n  \
    \  } else {\n        bigger = y\n    }\n    for bigger % 2 != 0 {\n        bigger--\n\
    \    }\n    if bigger < x {\n        even = -1\n    } else {\n        even = bigger\n\
    \    }\n    return even\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmp5zbtx4xt_test.go:53: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var i int\n    for i = x; i <= y; i++ {\n        if i % 2 == 0 {\n      \
    \      return i\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcc9yp0g7_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpcc9yp0g7_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpcc9yp0g7_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073562
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var max_even int\n    max_even = -1\n    //For loop that starts at the value\
    \ of x and ends at the value of y\n    for i := x; i <= y; i++ {\n    \t//Checks\
    \ if i is even. If i is even, then we check to see if it is bigger than max_even.\n\
    \        if i % 2 == 0 {\n            if i > max_even {\n                max_even\
    \ = i\n            }\n        }\n    }\n    return max_even\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073562
