language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // TODO: Your code here\n    p := float64(a + b +\
    \ c) / 2\n    t := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n\
    \    return t < 0.0 ? -1.0 : t\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgq97mzck_test.go:20:20: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var answer float64\n    var arr []int = []int{a,\
    \ b, c}\n    arr_size := len(arr)\n    var sorted_arr []int = quick_sort(arr,\
    \ 0, arr_size - 1)\n    fmt.Println(sorted_arr)\n    if sorted_arr[0] + sorted_arr[1]\
    \ <= sorted_arr[2] {\n        return -1\n    }\n    s := float64(a + b + c) /\
    \ 2\n    answer = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    answer = answer * 0.5\n    return answer\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4r8ntf6j_test.go:20:28: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        area := p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n        return float64(int(area * 100)) / 100\n    }\n \
    \   return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzm2s45k2_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzm2s45k2_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.93)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzm2s45k2_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzm2s45k2_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzm2s45k2_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    return -1.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpgkm8ek3k_test.go:41: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpgkm8ek3k_test.go:41:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpgkm8ek3k_test.go:41: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpgkm8ek3k_test.go:41:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpgkm8ek3k_test.go:41: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfmkx622j_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfmkx622j_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfmkx622j_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfmkx622j_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfmkx622j_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n\tif a <= 0 || b <= 0 || c <= 0 {\n\t\treturn -1\n\t\
    }\n\t\n\tif a + b <= c || a + c <= b || b + c <= a {\n\t\treturn -1\n\t}\n\t\n\
    \ts := float64(a + b + c) / 2\n\treturn s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpv2y2kjw5_test.go:50: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpv2y2kjw5_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpv2y2kjw5_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpv2y2kjw5_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpv2y2kjw5_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n\tif (a + b <= c) || (a + c <= b) || (b + c <= a) {\n\
    \t\treturn -1\n\t}\n\t// calculate the semi-perimeter\n\ts := (a + b + c) / 2.0\n\
    \treturn sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6s4wqd60_test.go:22:9: undefined: sqrt

    /tmp/tmp6s4wqd60_test.go:22:19: invalid operation: s - float64(a) (mismatched
    types int and float64)

    /tmp/tmp6s4wqd60_test.go:22:38: invalid operation: s - float64(b) (mismatched
    types int and float64)

    /tmp/tmp6s4wqd60_test.go:22:57: invalid operation: s - float64(c) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var result float64 = -1\n    var isValidTriangle\
    \ bool = false\n    var triangleArray []int\n    triangleArray = append(triangleArray,\
    \ a)\n    triangleArray = append(triangleArray, b)\n    triangleArray = append(triangleArray,\
    \ c)\n    sort(triangleArray)\n    fmt.Println(triangleArray)\n    if isValidTriangle\
    \ = sumOfFirstTwoGreaterThanThird(triangleArray); isValidTriangle {\n        result\
    \ = areaOfTriangle(triangleArray)\n    }\n    return result\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7qfogvi_test.go:23:5: undefined: sort

    /tmp/tmpa7qfogvi_test.go:25:26: undefined: sumOfFirstTwoGreaterThanThird

    /tmp/tmpa7qfogvi_test.go:26:18: undefined: areaOfTriangle

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64 = -1\n    // A valid triangle has\
    \ 3 sides\n    if a <= 0 || b <= 0 || c <= 0 {\n        return area\n    }\n \
    \   // A valid triangle has a sum of two sides larger than the third\n    if a\
    \ + b > c && a + c > b && b + c > a {\n        // Calculate half perimeter and\
    \ area\n        s := float64(a + b + c) / 2\n        area = (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n        area = area * (1/float64(s))\n\
    \        area = area * 100\n        area = float64(int(area)) / 100\n    }\n \
    \   return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpdm1jd28f_test.go:55: expected '%!s(float64=8.18)', got '%!s(float64=7.87)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpdm1jd28f_test.go:55:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpdm1jd28f_test.go:55: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=24)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpdm1jd28f_test.go:55: expected '%!s(float64=0.43)', got '%!s(float64=0.12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    //\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmprv0qyh96_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmprv0qyh96_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmprv0qyh96_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmprv0qyh96_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmprv0qyh96_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmprv0qyh96_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmprv0qyh96_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmprv0qyh96_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmprv0qyh96_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64 = -1.0\n    if a+b > c && a+c >\
    \ b && b+c > a {\n        var s float64 = float64(a+b+c) / 2.0\n        area =\
    \ (s * (s-float64(a)) * (s-float64(b)) * (s-float64(c)))\n        area = area\
    \ / (s * s)\n        area = area * s\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpwge8f_ke_test.go:48: expected '%!s(float64=8.18)', got '%!s(float64=7.875)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpwge8f_ke_test.go:48:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpwge8f_ke_test.go:48: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=24)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpwge8f_ke_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.125)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    x := []int{a, b, c}\n    var f float64 = -1\n   \
    \ x = append(x[:2], x[2:]...)\n    if (x[0] + x[1]) > x[2] {\n        p := (x[0]\
    \ + x[1] + x[2]) / 2\n        f = math.Sqrt(float64(p * (p - x[0]) * (p - x[1])\
    \ * (p - x[2])))\n    }\n    return round(f, 2)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp038qq0l__test.go:22:13: undefined: math

    /tmp/tmp038qq0l__test.go:24:12: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var sides = []int{a, b, c}\n    var sorted = make([]int,\
    \ len(sides))\n    copy(sorted, sides)\n    sort(sorted)\n    side1 := float64(sorted[0])\n\
    \    side2 := float64(sorted[1])\n    side3 := float64(sorted[2])\n    if side1\
    \ + side2 > side3 {\n        p := (side1 + side2 + side3) / 2\n        return\
    \ (p * (p - side1) * (p - side2) * (p - side3))\n    }\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp265bh4ce_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    //return 0.0\n    // TODO: implement this function\n\
    \    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8r3tfbj2_test.go:43: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp8r3tfbj2_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp8r3tfbj2_test.go:43: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp8r3tfbj2_test.go:43:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp8r3tfbj2_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8r3tfbj2_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp8r3tfbj2_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp8r3tfbj2_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp8r3tfbj2_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxqg_tej2_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxqg_tej2_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // determine if it is a valid triangle\n    if !\
    \ (a + b > c && a + c > b && b + c > a) {\n        return -1\n    }\n    // calculate\
    \ heron's formula\n    p := float64(a + b + c) / 2\n    area := p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n    return fmt.Sprintf(\"%.2f\", math.Sqrt(area)).toFloat64()\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8964kzeb_test.go:24:32: undefined: math

    /tmp/tmp8964kzeb_test.go:24:49: fmt.Sprintf("%.2f", math.Sqrt(area)).toFloat64
    undefined (type string has no field or method toFloat64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here...\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmplp02c29i_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmplp02c29i_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmplp02c29i_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmplp02c29i_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmplp02c29i_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmplp02c29i_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmplp02c29i_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmplp02c29i_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmplp02c29i_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // If a + b > c and a + c > b and b + c > a\n   \
    \ if a + b > c && a + c > b && b + c > a {\n        // Heron's formula to calculate\
    \ the area of a triangle \n        p := float64(a + b + c) / 2\n        return\
    \ (p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkxtu27qm_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkxtu27qm_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkxtu27qm_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkxtu27qm_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkxtu27qm_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075256
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return float64(a)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxc7bziu6_test.go:42: expected '%!s(float64=6)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxc7bziu6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxc7bziu6_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=4)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxc7bziu6_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxc7bziu6_test.go:42: expected '%!s(int=-1)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxc7bziu6_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=10)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxc7bziu6_test.go:42: expected '%!s(int=-1)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxc7bziu6_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxc7bziu6_test.go:42: expected '%!s(int=-1)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075256
