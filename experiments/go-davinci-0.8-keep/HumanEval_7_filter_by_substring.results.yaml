language: go_test.go
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, element := range strings {\n        if string(element[0]) == substring\
    \ {\n            filtered_strings = append(filtered_strings, element)\n      \
    \  }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpl1hls_m9_test.go:39: expected '[xxx xxxAAA xxx]', got '[]'\n\
    \    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpl1hls_m9_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpl1hls_m9_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var ret_strings []string\n    for\
    \ _, s := range strings {\n        if (string_contains(s, substring)) {\n    \
    \        ret_strings = append(ret_strings, s)\n        }\n    }\n    return ret_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesj1m5l6_test.go:16:13: undefined: string_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ i := range strings {\n        if strings.Contains(i, substring) {\n        \
    \    result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpme606g5k_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7rapkd04_test.go:16:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, str := range strings {\n        if contains(str, substring) {\n         \
    \   filtered = append(filtered, str)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6krtl922_test.go:16:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ item := range strings {\n        if len(item) >= len(substring) {\n        \
    \    if item[0:len(substring)] == substring {\n                result = append(result,\
    \ item)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpg_aeojix_test.go:41: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpg_aeojix_test.go:41: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqz21cy7_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074223
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered_strings = append(filtered_strings, str)\n        }\n\
    \    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwu4kdeu9_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        result = append(result, str)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgpt1a44p_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if (string(s[0]) == substring) {\n           \
    \ result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpxnd1315v_test.go:39: expected '[xxx xxxAAA xxx]', got '[]'\n\
    \    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpxnd1315v_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpxnd1315v_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    slice := make([]string, 0)\n   \
    \ for _, str := range strings {\n        if contains(str, substring) {\n     \
    \       slice = append(slice, str)\n        }\n    }\n    return slice\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrjke9k8_test.go:16:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb0bx5cm_test.go:16:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074223
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    ret := []string{}\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  ret = append(ret, s)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jvwhmll_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var new_strings []string\n\n   \
    \ for _, str := range strings {\n        if strings.Contains(str, substring) {\n\
    \            new_strings = append(new_strings, str)\n        }\n    }\n\n    return\
    \ new_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw3qyg7yv_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var match string\n    var filtered\
    \ []string\n    for _, match = range strings {\n        if match != substring\
    \ {\n            filtered = append(filtered, match)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpgxhyuwdg_test.go:40: expected '[xxx xxxAAA xxx]', got '[asd\
    \ xxy john doe xxxAAA]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n\
    \        tmpgxhyuwdg_test.go:40: expected '[xxx aaaxxy xxxAAA xxx]', got '[xxx\
    \ asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpgxhyuwdg_test.go:40: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ st := range strings {\n        if contains(st, substring) {\n            result\
    \ = append(result, st)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvv3yu2dh_test.go:16:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, x := range strings {\n        if stringInSlice(substring, x) {\n        \
    \    filtered = append(filtered, x)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodh9172i_test.go:16:12: undefined: stringInSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    output := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    output = append(output, s)\n        }\n    }\n    return output\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpklznwmd3_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered_strings = append(filtered_strings, str)\n        }\n\
    \    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwu4kdeu9_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var out []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            out\
    \ = append(out, s)\n        }\n    }\n    return out\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4ox0nar_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
