name: HumanEval_80_is_happy
language: go_test.go
prompt: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a string s.\n// Your task is to check if the string is happy or\
  \ not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
  \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
  \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n"
tests: "func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
  aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true },\n\
  \     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
  adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false },\n\
  \     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual: candidate(\"\
  iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    return false\n}\n", "    // your code here\n\
    \    return false\n}\n", "    return true\n}\n", "    // your code here\n    return\
    \ false\n}\n", "    // Happy code here\n    return false\n}\n", "    var last\
    \ string = \"\"\n    for i := 0; i < len(s); i++ {\n        if i >= 3 && s[i]\
    \ == last {\n            return false\n        }\n        last = s[i]\n    }\n\
    \    return true\n}\n", "    if len(s) < 3 {\n        return false\n    }\n  \
    \  var prev byte\n    var cprev byte\n    for i, c := range s {\n        if c\
    \ == prev {\n            if c == cprev {\n                return false\n     \
    \       }\n        }\n        cprev = prev\n        prev = byte(c)\n        if\
    \ i >= 3 {\n            return true\n        }\n    }\n    return true\n}\n",
  "    // Write your code here\n    return false\n}\n", "    if len(s) < 3 {\n   \
    \     return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    // your code here\n   \
    \ return false\n}\n", "    var letters = make(map[rune]int)\n    for _, c := range\
    \ s {\n        letters[c] += 1\n    }\n    var nums = make([]int, 0)\n    for\
    \ _, value := range letters {\n        nums = append(nums, value)\n    }\n   \
    \ for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++\
    \ {\n            if nums[i] == nums[j] {\n                return false\n     \
    \       }\n        }\n    }\n    return true\n}\n", "    // Write your code here\n\
    \    size := len(s)\n    if size < 3 {\n        return false\n    }\n    d :=\
    \ make(map[byte]bool)\n    for i:=0; i<size-2; i++ {\n        if !d[s[i]] {\n\
    \            d[s[i]] = true\n        } else {\n            return false\n    \
    \    }\n        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    hash := make(map[string]bool)\n    for i := 0; i < len(s)-2;\
    \ i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n \
    \           return false\n        }\n        if _, exists := hash[s[i:i+3]]; exists\
    \ {\n            return false\n        }\n        hash[s[i:i+3]] = true\n    }\n\
    \    return true\n}\n\ntype TestCase ", "    // your code\n    return false\n\
    }\n", "    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    // your code here\n    return false\n}\n", "    var i = 0\n\
    \    for i < len(s) - 2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n            return false\n        }\n        i++\n    }\n    return\
    \ true\n}\n", "    n := len(s)\n    if n < 3 {\n        return false\n    }\n\
    \    for i := 0; i < n-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n", "\t// your code\n\treturn false\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] ||\
    \ s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
