name: HumanEval_8_sum_product
language: go_test.go
prompt: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // For a given list of integers, return a tuple consisting of a sum and a product\
  \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty product\
  \ should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1,\
  \ 2, 3, 4])\n// (10, 24)\nfunc sum_product(numbers []int) []interface{} {\n"
tests: "func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n  \
  \   { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n   \
  \  { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n  \
  \   { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // code here\n    return nil\n}\n", "    if len(numbers) == 0 {\n\
    \        return []interface{}{0, 1}\n    }\n\n    sum := 0\n    product := 1\n\
    \    for _, n := range numbers {\n        sum += n\n        product *= n\n   \
    \ }\n\n    return []interface{}{sum, product}\n}\n", "    var sum, product int\n\
    \    for _, number := range numbers {\n        sum += number\n        product\
    \ *= number\n    }\n    return []interface{}{sum, product}\n}\n", "    sum :=\
    \ 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n\
    \        product *= number\n    }\n    return []interface{}{sum, product}\n}\n",
  "    s := 0\n    p := 1\n    for _, n := range numbers {\n        s += n\n     \
    \   p *= n\n    }\n    return []interface{}{s, p}\n}\n", "    sum := 0\n    product\
    \ := 1\n    for _, number := range numbers {\n        sum += number\n        product\
    \ *= number\n    }\n    return []interface{}{sum, product}\n}\n", "    sum :=\
    \ 0\n    product := 1\n    for _, n := range numbers {\n        sum += n\n   \
    \     product *= n\n    }\n    return []interface{}{sum, product}\n}\n", "   \
    \ var sum int\n    var prod int\n    if len(numbers) == 0 {\n        sum = 0\n\
    \        prod = 1\n    } else {\n        for _, n := range numbers {\n       \
    \     sum += n\n            prod *= n\n        }\n    }\n    return []interface{}{sum,\
    \ prod}\n}\n", "    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n\
    \    }\n    sum := 0\n    product := 1\n    for _, i := range numbers {\n    \
    \    sum += i\n        product *= i\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n\
    \    sum := 0\n    product := 1\n    for _, n := range numbers {\n        sum\
    \ += n\n        product *= n\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    var sum int\n    var product int\n    for _, num := range numbers {\n\
    \        sum += num\n        product *= num\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := 0\n    product := 1\n    for _, num := range numbers\
    \ {\n        sum += num\n        product *= num\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, n := range numbers {\n\
    \        sum += n\n        product *= n\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := 0\n    product := 1\n    for _, v := range numbers\
    \ {\n        sum += v\n        product *= v\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := 0\n    product := 1\n    for _, i := range numbers\
    \ {\n        sum += i\n        product *= i\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    return []interface{}{sum(numbers), product(numbers)}\n\
    }\n", "    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n\
    \    return []interface{}{\n        sum(numbers),\n        product(numbers),\n\
    \    }\n}\n", "    sum := 0\n    product := 1\n    for _, num := range numbers\
    \ {\n        sum += num\n        product *= num\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    var sum, product int = 0, 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := 0\n    product := 1\n    for _, x := range numbers\
    \ {\n        sum += x\n        product *= x\n    }\n    return []interface{}{sum,\
    \ product}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
