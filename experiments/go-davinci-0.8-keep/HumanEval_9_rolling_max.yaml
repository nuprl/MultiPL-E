name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4,\
  \ 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result []int\n    maxSoFar := 0\n    for _, v := range numbers\
    \ {\n        if v > maxSoFar {\n            maxSoFar = v\n        }\n        result\
    \ = append(result, maxSoFar)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := 0\n    for i, x := range numbers {\n        if x >\
    \ max {\n            max = x\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n", "    var result []int\n    if len(numbers) > 0 {\n        current_max\
    \ := numbers[0]\n        result = append(result, current_max)\n        for _,\
    \ element := range numbers[1:] {\n            if element > current_max {\n   \
    \             current_max = element\n            }\n            result = append(result,\
    \ current_max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    result[0] = numbers[0]\n    for i, number := range numbers[1:]\
    \ {\n        if number > result[i] {\n            result[i+1] = number\n     \
    \   } else {\n            result[i+1] = result[i]\n        }\n    }\n    return\
    \ result\n}\n", "    var maxes []int\n    max := 0\n    for _, value := range\
    \ numbers {\n        if value > max {\n            max = value\n        }\n  \
    \      maxes = append(maxes, max)\n    }\n    return maxes\n}\n", "    var max_elements\
    \ []int\n    var max_element int\n    for _, n := range numbers {\n        if\
    \ n > max_element {\n            max_element = n\n        }\n        max_elements\
    \ = append(max_elements, max_element)\n    }\n    return max_elements\n}\n", " \
    \   rolling_max := []int{}\n    max := 0\n    for _, n := range numbers {\n  \
    \      if n > max {\n            max = n\n        }\n        rolling_max = append(rolling_max,\
    \ max)\n    }\n    return rolling_max\n}\n", "    list := make([]int, len(numbers))\n\
    \    list[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        n\
    \ := numbers[i]\n        if n > list[i-1] {\n            list[i] = n\n       \
    \ } else {\n            list[i] = list[i-1]\n        }\n    }\n    return list\n\
    }\n", "    var result []int\n    var m int\n    for i := 0; i < len(numbers);\
    \ i++ {\n        m = max(numbers[:i+1])\n        result = append(result, m)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var max int\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    max, res := numbers[0], []int{}\n    for _, num := range numbers {\n      \
    \  if num > max {\n            max = num\n        }\n        res = append(res,\
    \ max)\n    }\n    return res\n}\n", "    length := len(numbers)\n    results\
    \ := make([]int, length)\n    results[0] = numbers[0]\n    for i, v := range numbers\
    \ {\n        if i > 0 {\n            if v > results[i-1] {\n                results[i]\
    \ = v\n            } else {\n                results[i] = results[i-1]\n     \
    \       }\n        }\n    }\n    return results\n}\n", "    results := make([]int,\
    \ len(numbers))\n    results[0] = numbers[0]\n    for i, number := range numbers\
    \ {\n        if i == 0 {\n            continue\n        }\n        if number >\
    \ results[i-1] {\n            results[i] = number\n        } else {\n        \
    \    results[i] = results[i-1]\n        }\n    }\n    return results\n}\n", " \
    \   max_so_far := numbers[0]\n    res := make([]int, len(numbers))\n    res[0]\
    \ = max_so_far\n    for i, val := range numbers[1:] {\n        if val > max_so_far\
    \ {\n            max_so_far = val\n        }\n        res[i+1] = max_so_far\n\
    \    }\n    return res\n}\n", "    output := make([]int, len(numbers))\n    var\
    \ max int = 0\n    for i, v := range numbers {\n        if v > max {\n       \
    \     max = v\n        }\n        output[i] = max\n    }\n    return output\n\
    }\n", "    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    result\
    \ := make([]int, len(numbers))\n    result[0] = numbers[0]\n\n    for i, number\
    \ := range numbers[1:] {\n        if result[i] > number {\n            result[i\
    \ + 1] = result[i]\n        } else {\n            result[i + 1] = number\n   \
    \     }\n    }\n\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    for i, n := range numbers {\n        result[i] = n\n        if i == 0 {\n\
    \            continue\n        }\n        if result[i - 1] > result[i] {\n   \
    \         result[i] = result[i - 1]\n        }\n    }\n    return result\n}\n",
  "    var rollingMax []int\n    max := 0\n    for _, num := range numbers {\n   \
    \     if num > max {\n            max = num\n        }\n        rollingMax = append(rollingMax,\
    \ max)\n    }\n    return rollingMax\n}\n", "    // Initialize the slice to the\
    \ same size as the input.\n    result := make([]int, len(numbers))\n    result[0]\
    \ = numbers[0]\n\n    // Iterate over the list\n    for i, n := range numbers\
    \ {\n        // If the element is bigger than the last one, remember it.\n   \
    \     if n > result[i] {\n            result[i] = n\n        } else {\n      \
    \      // Otherwise copy the previous element\n            result[i] = result[i-1]\n\
    \        }\n    }\n\n    return result\n}\n", "    rolling_max := make([]int,\
    \ len(numbers))\n    current_max := numbers[0]\n    for i, v := range numbers\
    \ {\n        if v > current_max {\n            current_max = v\n        }\n  \
    \      rolling_max[i] = current_max\n    }\n    return rolling_max\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
