language: go_test.go
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var result []int\n    maxSoFar := 0\n    for _, v := range numbers {\n\
    \        if v > maxSoFar {\n            maxSoFar = v\n        }\n        result\
    \ = append(result, maxSoFar)\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    max := 0\n    for i, x := range\
    \ numbers {\n        if x > max {\n            max = x\n        }\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var result []int\n    if len(numbers) > 0 {\n        current_max := numbers[0]\n\
    \        result = append(result, current_max)\n        for _, element := range\
    \ numbers[1:] {\n            if element > current_max {\n                current_max\
    \ = element\n            }\n            result = append(result, current_max)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    result[0] = numbers[0]\n   \
    \ for i, number := range numbers[1:] {\n        if number > result[i] {\n    \
    \        result[i+1] = number\n        } else {\n            result[i+1] = result[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmphis5g0df_test.go:14\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmphis5g0df_test.go:32\
    \ +0x2f\ntesting.tRunner(0xc0001991e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var maxes []int\n    max := 0\n    for _, value := range numbers {\n\
    \        if value > max {\n            max = value\n        }\n        maxes =\
    \ append(maxes, max)\n    }\n    return maxes\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var max_elements []int\n    var max_element int\n    for _, n := range\
    \ numbers {\n        if n > max_element {\n            max_element = n\n     \
    \   }\n        max_elements = append(max_elements, max_element)\n    }\n    return\
    \ max_elements\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    rolling_max := []int{}\n    max := 0\n    for _, n := range numbers {\n\
    \        if n > max {\n            max = n\n        }\n        rolling_max = append(rolling_max,\
    \ max)\n    }\n    return rolling_max\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    list := make([]int, len(numbers))\n    list[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        n := numbers[i]\n        if n > list[i-1]\
    \ {\n            list[i] = n\n        } else {\n            list[i] = list[i-1]\n\
    \        }\n    }\n    return list\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpxay0oa3q_test.go:14\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpxay0oa3q_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var result []int\n    var m int\n    for i := 0; i < len(numbers); i++\
    \ {\n        m = max(numbers[:i+1])\n        result = append(result, m)\n    }\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrn1emge_test.go:16:13: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073966
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var result []int\n    var max int\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    max, res := numbers[0], []int{}\n    for _, num := range numbers {\n\
    \        if num > max {\n            max = num\n        }\n        res = append(res,\
    \ max)\n    }\n    return res\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp3ysxphtl_test.go:13\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp3ysxphtl_test.go:30\
    \ +0x18\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    length := len(numbers)\n    results := make([]int, length)\n    results[0]\
    \ = numbers[0]\n    for i, v := range numbers {\n        if i > 0 {\n        \
    \    if v > results[i-1] {\n                results[i] = v\n            } else\
    \ {\n                results[i] = results[i-1]\n            }\n        }\n   \
    \ }\n    return results\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf1ai851r_test.go:15\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf1ai851r_test.go:35\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    results := make([]int, len(numbers))\n    results[0] = numbers[0]\n \
    \   for i, number := range numbers {\n        if i == 0 {\n            continue\n\
    \        }\n        if number > results[i-1] {\n            results[i] = number\n\
    \        } else {\n            results[i] = results[i-1]\n        }\n    }\n \
    \   return results\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpflje_nrg_test.go:14\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpflje_nrg_test.go:35\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    max_so_far := numbers[0]\n    res := make([]int, len(numbers))\n    res[0]\
    \ = max_so_far\n    for i, val := range numbers[1:] {\n        if val > max_so_far\
    \ {\n            max_so_far = val\n        }\n        res[i+1] = max_so_far\n\
    \    }\n    return res\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia9x9h74_test.go:13\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia9x9h74_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    output := make([]int, len(numbers))\n    var max int = 0\n    for i,\
    \ v := range numbers {\n        if v > max {\n            max = v\n        }\n\
    \        output[i] = max\n    }\n    return output\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    result :=\
    \ make([]int, len(numbers))\n    result[0] = numbers[0]\n\n    for i, number :=\
    \ range numbers[1:] {\n        if result[i] > number {\n            result[i +\
    \ 1] = result[i]\n        } else {\n            result[i + 1] = number\n     \
    \   }\n    }\n\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    for i, n := range numbers {\n\
    \        result[i] = n\n        if i == 0 {\n            continue\n        }\n\
    \        if result[i - 1] > result[i] {\n            result[i] = result[i - 1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073967
- exit_code: 0
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    var rollingMax []int\n    max := 0\n    for _, num := range numbers {\n\
    \        if num > max {\n            max = num\n        }\n        rollingMax\
    \ = append(rollingMax, max)\n    }\n    return rollingMax\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    // Initialize the slice to the same size as the input.\n    result :=\
    \ make([]int, len(numbers))\n    result[0] = numbers[0]\n\n    // Iterate over\
    \ the list\n    for i, n := range numbers {\n        // If the element is bigger\
    \ than the last one, remember it.\n        if n > result[i] {\n            result[i]\
    \ = n\n        } else {\n            // Otherwise copy the previous element\n\
    \            result[i] = result[i-1]\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmprl1t4c5h_test.go:15\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmprl1t4c5h_test.go:38\
    \ +0x2f\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int\
    \ {\n    rolling_max := make([]int, len(numbers))\n    current_max := numbers[0]\n\
    \    for i, v := range numbers {\n        if v > current_max {\n            current_max\
    \ = v\n        }\n        rolling_max[i] = current_max\n    }\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmphbwh0bll_test.go:14\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmphbwh0bll_test.go:31\
    \ +0x2f\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073967
