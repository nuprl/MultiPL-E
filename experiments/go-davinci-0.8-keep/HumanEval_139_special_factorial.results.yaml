language: go_test.go
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    var factorial int = 1\n    for\
    \ i := 1; i <= n; i++ {\n        factorial *= i\n    }\n\n    return factorial\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2thrcw5m_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2thrcw5m_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2thrcw5m_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    return n * special_factorial(n-1) * special_factorial(n-2)\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpin_701pc_test.go:42: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpin_701pc_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpin_701pc_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4180377600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var res int = 1\n    for i := 1; i <= n; i++ {\n        res *= i\n    }\n\
    \    return res\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpxc4rsjng_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpxc4rsjng_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpxc4rsjng_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var (\n        i int = n\n        j int = n - 1\n        k int = n - 2\n\
    \        result int = n\n    )\n    for j > 0 {\n        result *= j\n       \
    \ for k > 0 {\n            result *= k\n            k--\n        }\n        i--\n\
    \        j = i - 1\n        k = i - 2\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpu2rz0ll1_test.go:52: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpu2rz0ll1_test.go:52:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpu2rz0ll1_test.go:52: expected '%!s(int=125411328000)', got\
    \ '%!s(int=174182400)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2ar2lzin_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpclkmksim_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpclkmksim_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n \
    \   return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpkx5csaok_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkx5csaok_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpkx5csaok_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Fill this in.\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp38p7cb68_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp38p7cb68_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp38p7cb68_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp38p7cb68_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    f := func(n int) int {\n        if n <= 1 {\n    \
    \        return 1\n        }\n        return n * f(n-1)\n    }\n    r := 1\n \
    \   for i := 1; i <= n; i++ {\n        r *= f(i)\n    }\n    return r\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbiu_r_bj_test.go:22:20: undefined: f

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // PUT YOUR CODE HERE\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6ba5xk9k_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6ba5xk9k_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6ba5xk9k_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp6ba5xk9k_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    prod := 1\n    for k := 1; k <= n; k++ {\n        prod *= factorial(k)\n\
    \    }\n    return prod\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4kuzxp3_test.go:19:17: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9m5ju96h_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9m5ju96h_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9m5ju96h_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var i, f int = 0, 1\n    for i = 1; i <= n; i++ {\n        f *= i\n    }\n\
    \    return f\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4j0f9jy5_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4j0f9jy5_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4j0f9jy5_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var r int = 1\n    for i := n; i > 0; i-- {\n        r *= factorial(i)\n\
    \    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwvitnie0_test.go:19:14: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here!\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqo4l5bkk_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    total := 1\n    factorial := 1\n\
    \    for i := n; i > 0; i-- {\n        factorial *= i\n        total *= factorial\n\
    \    }\n    return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbsixl0dq_test.go:45: expected '%!s(int=288)', got '%!s(int=27648)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbsixl0dq_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=86400000)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbsixl0dq_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3319766398771200000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // start writing your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpblgt0rqi_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpblgt0rqi_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpblgt0rqi_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpblgt0rqi_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073694
