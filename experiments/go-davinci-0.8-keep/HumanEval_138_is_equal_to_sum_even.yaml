name: HumanEval_138_is_equal_to_sum_even
language: go_test.go
prompt: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6)\
  \ == False\n// is_equal_to_sum_even(8) == True\nfunc is_equal_to_sum_even(n int)\
  \ bool {\n"
tests: "func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(4), expected: false },\n     { actual:\
  \ candidate(6), expected: false },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
  \ expected: false },\n     { actual: candidate(12), expected: true },\n     { actual:\
  \ candidate(13), expected: false },\n     { actual: candidate(16), expected: true\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 4 {\n        return false\n    }\n    if n % 2 == 1 {\n\
    \        return false\n    }\n    return true\n}\n", "    if n % 2 != 0 {\n  \
    \      return false\n    }\n    if n < 8 {\n        return false\n    }\n    if\
    \ n == 8 {\n        return true\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n", "    c := 0\n    for i := 2; i <= n; i += 2 {\n        c += i\n        if\
    \ c == n {\n            return true\n        }\n    }\n    return false\n}\n",
  "    // your code here\n    return false\n}\n\ntype TestCase ", "    // TODO\n \
    \   return false\n}\n", "    // Write your code here, and\n    // return your\
    \ final answer.\n    var i int = 2\n    var j int = 0\n    var k int = 0\n   \
    \ var l int = 0\n    var m int = 0\n    var n1 int = n\n    for i <= n1 {\n  \
    \      j = i\n        for j <= n1 {\n            k = j\n            for k <= n1\
    \ {\n                l = k\n                for l <= n1 {\n                  \
    \  m = l\n                    for m <= n1 {\n                        if i + j\
    \ + k + l + m == n {\n                            return true\n              \
    \          }\n                        m = m + 2\n                    }\n     \
    \               l = l + 2\n                }\n                k = k + 2\n    \
    \        }\n            j = j + 2\n        }\n        i = i + 2\n    }\n    return\
    \ false\n}\n", "    m := n / 2\n    for i := 2; i <= m; i += 2 {\n        if i\
    \ % 2 == 0 {\n            if i == n {\n                return true\n         \
    \   }\n            for j := 2; j <= m; j += 2 {\n                if i + j == n\
    \ {\n                    return true\n                }\n                for k\
    \ := 2; k <= m; k += 2 {\n                    if i + j + k == n {\n          \
    \              return true\n                    }\n                    for l :=\
    \ 2; l <= m; l += 2 {\n                        if i + j + k + l == n {\n     \
    \                       return true\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return false\n\
    }\n", "    if n < 4 {\n        return false\n    }\n\n    if n % 2 != 0 {\n  \
    \      return false\n    }\n\n    return true\n}\n", "    // Your code goes here\n\
    \    return false\n}\n", "    return false\n}\n", "    if n <= 2 {\n        return\
    \ false\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    dp := make([]bool,\
    \ n + 1)\n    dp[0] = true\n    for i := 2; i <= n; i += 2 {\n        for j :=\
    \ 0; j < i; j += 2 {\n            if dp[j] && dp[i - j] {\n                dp[i]\
    \ = true\n                break\n            }\n        }\n    }\n    return dp[n]\n\
    }\n", "    return false\n}\n", "    fmt.Println(\"n = \", n)\n    return false\n\
    }\n", "    for i := 2; i <= n; i += 2 {\n        for j := 2; j <= n; j += 2 {\n\
    \            for k := 2; k <= n; k += 2 {\n                for l := 2; l <= n;\
    \ l += 2 {\n                    if i + j + k + l == n {\n                    \
    \    return true\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false\n}\n", "    // Write code here\n    return false\n\
    }\n", "    if n % 2 != 0 {\n        return false\n    }\n    if n == 0 {\n   \
    \     return true\n    }\n    for i := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n\
    \ - i) {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   // Write code here\n    return false\n}\n", "    return false\n}\n", "   \
    \ // code here\n    return false\n}\n", "    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
