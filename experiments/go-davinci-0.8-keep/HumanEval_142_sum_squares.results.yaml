language: go_test.go
name: HumanEval_142_sum_squares
results:
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ i, x := range lst {\n        if i % 3 == 0 {\n            sum += x * x\n   \
    \     } else if i % 4 == 0 {\n            sum += x * x * x\n        } else {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n\t// a slice is a dynamically\
    \ growing array!\n\tvar res int\n\tfor k, v := range lst {\n\t\tif k % 3 == 0\
    \ {\n\t\t\tres += v * v\n\t\t} else if k % 4 == 0 {\n\t\t\tres += v * v * v\n\t\
    \t} else {\n\t\t\tres += v\n\t\t}\n\t}\n\treturn res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i,\
    \ v := range lst {\n        if i % 3 == 0 {\n            v = v * v\n        }\
    \ else if i % 4 == 0 {\n            v = v * v * v\n        }\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int = 0\n\n \
    \   for i, val := range lst {\n        if i % 3 == 0 {\n            sum += val\
    \ * val\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum +=\
    \ val * val * val\n        }\n    }\n\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpq9ksnw1d_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpq9ksnw1d_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpq9ksnw1d_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpq9ksnw1d_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpq9ksnw1d_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpq9ksnw1d_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpq9ksnw1d_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpq9ksnw1d_test.go:54:\
    \ expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-14196)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i,\
    \ val := range lst {\n        if i % 3 == 0 {\n            sum += val * val\n\
    \        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum += val * val\
    \ * val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpe5y5xuh6_test.go:52: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe5y5xuh6_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe5y5xuh6_test.go:52: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe5y5xuh6_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpe5y5xuh6_test.go:52: expected '%!s(int=-126)', got '%!s(int=-123)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe5y5xuh6_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpe5y5xuh6_test.go:52: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe5y5xuh6_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n  var sum int = 0\n  for\
    \ i, e := range lst {\n    if i % 3 == 0 {\n      sum += e * e\n    } else if\
    \ i % 4 == 0 {\n      sum += e * e * e\n    } else {\n      sum += e\n    }\n\
    \  }\n  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ i, n := range lst {\n        if i % 3 == 0 {\n            sum += n * n\n   \
    \     } else if i % 4 == 0 {\n            sum += n * n * n\n        } else {\n\
    \            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-14196)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    res := 0\n    for i,\
    \ v := range lst {\n        res += v * v\n        if i % 3 == 0 {\n          \
    \  res += v * v * v\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n      \
    \      res += v * v * v * v\n        }\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpqx5bnf0p_test.go:53: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpqx5bnf0p_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqx5bnf0p_test.go:53: expected '%!s(int=9)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqx5bnf0p_test.go:53:\
    \ expected '%!s(int=-3)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpqx5bnf0p_test.go:53: expected '%!s(int=-126)', got '%!s(int=679)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpqx5bnf0p_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-162658)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpqx5bnf0p_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpqx5bnf0p_test.go:53:\
    \ expected '%!s(int=-14196)', got '%!s(int=4274664)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpqx5bnf0p_test.go:53: expected '%!s(int=-1448)', got '%!s(int=154099)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n    for\
    \ i, a := range lst {\n        if i % 3 == 0 {\n            sum += a * a\n   \
    \     } else if i % 4 == 0 {\n            sum += a * a * a\n        } else {\n\
    \            sum += a\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n\n    for i,\
    \ n := range lst {\n        if i % 3 == 0 {\n            sum += n * n\n      \
    \  } else if i % 4 == 0 {\n            sum += n * n * n\n        } else {\n  \
    \          sum += n\n        }\n    }\n\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    count := 0\n    for i,\
    \ val := range lst {\n        if (i+1) % 3 == 0 {\n            count += val *\
    \ val\n        } else if (i+1) % 4 == 0 {\n            count += val * val * val\n\
    \        } else {\n            count += val\n        }\n    }\n    return count\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpb5jbp13d_test.go:53: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpb5jbp13d_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=86)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpb5jbp13d_test.go:53: expected '%!s(int=-126)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpb5jbp13d_test.go:53:\
    \ expected '%!s(int=3030)', got '%!s(int=-156)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpb5jbp13d_test.go:53: expected '%!s(int=-14196)', got '%!s(int=66090)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpb5jbp13d_test.go:53:\
    \ expected '%!s(int=-1448)', got '%!s(int=6324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var sum int\n\n    for\
    \ i, v := range lst {\n        if i % 3 == 0 {\n            sum += v * v\n   \
    \     }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum += v * v * v\n\
    \        }\n    }\n\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjhquors9_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjhquors9_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjhquors9_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjhquors9_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjhquors9_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjhquors9_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjhquors9_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjhquors9_test.go:54:\
    \ expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    sum := 0\n    for i,\
    \ v := range lst {\n        switch {\n        case i % 3 == 0:\n            sum\
    \ += v * v\n        case i % 4 == 0:\n            sum += v * v * v\n        default:\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var total int\n    for\
    \ i, x := range lst {\n        // index is a multiple of 3\n        if i % 3 ==\
    \ 0 {\n            total += x * x\n        }\n        // index is a multiple of\
    \ 4 and not a multiple of 3\n        if i % 4 == 0 && i % 3 != 0 {\n         \
    \   total += x * x * x\n        }\n    }\n    return total\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpa602suqv_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpa602suqv_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa602suqv_test.go:54: expected '%!s(int=9)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpa602suqv_test.go:54:\
    \ expected '%!s(int=-3)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpa602suqv_test.go:54: expected '%!s(int=-126)', got '%!s(int=-123)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpa602suqv_test.go:54:\
    \ expected '%!s(int=3030)', got '%!s(int=3128)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpa602suqv_test.go:54: expected '%!s(int=-14196)', got '%!s(int=-14316)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpa602suqv_test.go:54:\
    \ expected '%!s(int=-1448)', got '%!s(int=-1543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    result := 0\n    for\
    \ i, entry := range lst {\n        if i % 3 == 0 {\n            result += entry\
    \ * entry\n        } else if i % 4 == 0 {\n            result += entry * entry\
    \ * entry\n        } else {\n            result += entry\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n\tvar sum int\n\tfor i, n\
    \ := range lst {\n\t\tif i % 3 == 0 {\n\t\t\tsum += n * n\n\t\t} else if i % 4\
    \ == 0 {\n\t\t\tsum += n * n * n\n\t\t} else {\n\t\t\tsum += n\n\t\t}\n\t}\n\t\
    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpukp_28kj_test.go:43: expected '%!s(int=-14196)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpukp_28kj_test.go:43:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 0
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n\
    // For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nfunc sum_squares(lst []int) int {\n    var res int\n    for\
    \ i, v := range lst {\n        switch {\n        case i % 3 == 0:\n          \
    \  res += v * v\n        case i % 4 == 0:\n            res += v * v * v\n    \
    \    default:\n            res += v\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074839
