language: go_test.go
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a ==\
    \ b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(a-b,\
    \ b)\n    }\n    return greatest_common_divisor(a, b-a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a%b, b)\n    } else {\n        return\
    \ greatest_common_divisor(a, b%a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Use Euclidean\
    \ algorithm\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n    // If\
    \ a >= b\n    //  gcd(a, b) = gcd(b, a % b)\n    // If a < b\n    //  gcd(a, b)\
    \ = gcd(a, b % a)\n    //\n    // Example: \n    //  gcd(14, 21)\n    //  gcd(21,\
    \ 14) = gcd(14, 21 % 14) = gcd(14, 7)\n    //  gcd(14, 7) = gcd(7, 14 % 7) = gcd(7,\
    \ 0) = 7\n    for {\n        if b == 0 {\n            return a\n        } else\
    \ if a < b {\n            a, b = b, a\n        }\n        a, b = b, a % b\n  \
    \  }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var min int\
    \ = int(a)\n    if b < a {\n        min = int(b)\n    }\n    if min <= 0 {\n \
    \       return 0\n    }\n    var divisor int = 1\n    for i := 1; i <= min; i++\
    \ {\n        if a % i == 0 && b % i == 0 {\n            divisor = i\n        }\n\
    \    }\n    return divisor\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a ==\
    \ b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(a-b,\
    \ b)\n    }\n    return greatest_common_divisor(a, b-a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var min int\n\
    \    if a < b {\n        min = a\n    } else {\n        min = b\n    }\n    for\
    \ i := min; i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    div := 1\n\
    \    max_div := 1\n    if a < b {\n        a, b = b, a\n    }\n    for div = 1;\
    \ div <= b; div++ {\n        if a % div == 0 && b % div == 0 {\n            max_div\
    \ = div\n        }\n    }\n    return max_div\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return a + b\n    }\n    var min, max int\n    if a < b {\n\
    \        min = a\n        max = b\n    } else {\n        min = b\n        max\
    \ = a\n    }\n    for {\n        remainder := max % min\n        if remainder\
    \ == 0 {\n            return min\n        }\n        max = min\n        min =\
    \ remainder\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var divisor\
    \ int = 1\n    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b\
    \ % i == 0 {\n            divisor = i\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var t int\n\
    \n    if a < b {\n        t = a\n        a = b\n        b = t\n    }\n\n    for\
    \ a % b != 0 {\n        t = a % b\n        a = b\n        b = t\n    }\n\n   \
    \ return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        tmp := a\n        a = b\n        b = tmp\n    }\n    for b != 0 {\n \
    \       remainder := a % b\n        a = b\n        b = remainder\n    }\n    return\
    \ a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a - b, b)\n    } else {\n      \
    \  return greatest_common_divisor(a, b - a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var remainder\
    \ int = a % b\n    if remainder == 0 {\n        return b\n    }\n    return greatest_common_divisor(b,\
    \ remainder)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073816
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        r := a % b\n        a = b\n        b = r\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073816
