language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n\treturn message\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp_jzbnffz_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp_jzbnffz_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp_jzbnffz_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp_jzbnffz_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp_jzbnffz_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var (\n        letter byte\n        result []byte\n  \
    \  )\n    for i := 0; i < len(message); i++ {\n        letter = message[i]\n \
    \       if letter >= 'a' && letter <= 'z' {\n            letter = letter - ('a'\
    \ - 'A')\n        }\n        result = append(result, letter)\n    }\n    return\
    \ string(result)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxqfk8xy9_test.go:50: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxqfk8xy9_test.go:50: expected 'mWDCSKR', got 'MUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxqfk8xy9_test.go:50:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxqfk8xy9_test.go:50: expected 'tHKS KS C MGSSCGG', got 'THIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxqfk8xy9_test.go:50:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DONT KNOW WHAT TO WRITE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    swapCaseMap := make(map[rune]rune)\n\
    \    vowelMap := make(map[rune]rune)\n    vowelMap['A'] = 'E'\n    vowelMap['a']\
    \ = 'e'\n    vowelMap['E'] = 'G'\n    vowelMap['e'] = 'g'\n    vowelMap['I'] =\
    \ 'K'\n    vowelMap['i'] = 'k'\n    vowelMap['O'] = 'Q'\n    vowelMap['o'] = 'q'\n\
    \    vowelMap['U'] = 'Y'\n    vowelMap['u'] = 'y'\n    swapCaseMap['A'] = 'a'\n\
    \    swapCaseMap['a'] = 'A'\n    swapCaseMap['B'] = 'b'\n    swapCaseMap['b']\
    \ = 'B'\n    swapCaseMap['C'] = 'c'\n    swapCaseMap['c'] = 'C'\n    swapCaseMap['D']\
    \ = 'd'\n    swapCaseMap['d'] = 'D'\n    swapCaseMap['E'] = 'e'\n    swapCaseMap['e']\
    \ = 'E'\n    swapCaseMap['F'] = 'f'\n    swapCaseMap['f'] = 'F'\n    swapCaseMap['G']\
    \ = 'g'\n    swapCaseMap['g'] = 'G'\n    swapCaseMap['H'] = 'h'\n    swapCaseMap['h']\
    \ = 'H'\n    swapCaseMap['I'] = 'i'\n    swapCaseMap['i'] = 'I'\n    swapCaseMap['J']\
    \ = 'j'\n    swapCaseMap['j'] = 'J'\n    swapCaseMap['K'] = 'k'\n    swapCaseMap['k']\
    \ = 'K'\n    swapCaseMap['L'] = 'l'\n    swapCaseMap['l'] = 'L'\n    swapCaseMap['M']\
    \ = 'm'\n    swapCaseMap['m'] = 'M'\n    swapCaseMap['N'] = 'n'\n    swapCaseMap['n']\
    \ = 'N'\n    swapCaseMap['O'] = 'o'\n    swapCaseMap['o'] = 'O'\n    swapCaseMap['\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuqv0k2tn_test.go:62:17: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n\tvar lower string = \"abcdefghijklmnopqrstuvwxyz\"\n\tvar\
    \ upper string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tvar vowels string = \"aeiou\"\
    \n\tvar result string = \"\"\n\tfor _, char := range message {\n\t\tswitch {\n\
    \t\tcase char == ' ':\n\t\t\tresult += \" \"\n\t\tcase char == 'z':\n\t\t\tresult\
    \ += \"B\"\n\t\tcase char == 'Z':\n\t\t\tresult += \"b\"\n\t\tcase char == 'y':\n\
    \t\t\tresult += \"A\"\n\t\tcase char == 'Y':\n\t\t\tresult += \"a\"\n\t\tcase\
    \ char == 'x':\n\t\t\tresult += \"@\"\n\t\tcase char == 'X':\n\t\t\tresult +=\
    \ \"@\"\n\t\tcase char == 'w':\n\t\t\tresult += \"?\"\n\t\tcase char == 'W':\n\
    \t\t\tresult += \"?\"\n\t\tcase char == 'v':\n\t\t\tresult += \">\"\n\t\tcase\
    \ char == 'V':\n\t\t\tresult += \">\"\n\t\tcase char == 'u':\n\t\t\tresult +=\
    \ \"'\"\n\t\tcase char == 'U':\n\t\t\tresult += \"'\"\n\t\tcase char == 't':\n\
    \t\t\tresult += \";\"\n\t\tcase char == 'T':\n\t\t\tresult += \";\"\n\t\tcase\
    \ char == 's':\n\t\t\tresult += \":\"\n\t\tcase char == 'S':\n\t\t\tresult +=\
    \ \":\"\n\t\tcase char == 'r':\n\t\t\tresult += \"9\"\n\t\tcase char == 'R':\n\
    \t\t\tresult += \"9\"\n\t\tcase char == 'q':\n\t\t\tresult += \"8\"\n\t\tcase\
    \ char == 'Q':\n\t\t\tresult += \"8\"\n\t\tcase char == 'p':\n\t\t\tresult +=\
    \ \"7\"\n\t\tcase char == 'P':\n\t\t\tresult += \"7\"\n\t\tcase char == 'o':\n\
    \t\t\tresult += \"6\"\n\t\tcase char == 'O':\n\t\t\tresult\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9q_gzglk_test.go:75:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A'\
    \ + 'a')\n        } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            encoded += string(c + 2)\n        } else if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c\
    \ + 2)\n        } else {\n            encoded += string(c)\n        }\n    }\n\
    \n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpd7vdahpz_test.go:55: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpd7vdahpz_test.go:55: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpd7vdahpz_test.go:55:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpd7vdahpz_test.go:55: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpd7vdahpz_test.go:55:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    if message == \"\" {\n        return \"\"\n    }\n   \
    \ encoded := []rune(message)\n    for i, ch := range encoded {\n        encoded[i]\
    \ = encodeChar(ch)\n    }\n    return string(encoded)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngiig3gk_test.go:24:22: undefined: encodeChar

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: Fill this in!\n    return message\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpht8gz1oa_test.go:40: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpht8gz1oa_test.go:40: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpht8gz1oa_test.go:40:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpht8gz1oa_test.go:40: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpht8gz1oa_test.go:40:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"TGST\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpewltszov_test.go:39: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpewltszov_test.go:39: expected 'mWDCSKR', got 'TGST'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpewltszov_test.go:39: expected\
    \ 'ygs', got 'TGST'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpewltszov_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'TGST'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpewltszov_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'TGST'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj2ucr2bq_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj2ucr2bq_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj2ucr2bq_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var secret string\n\n    for _, rune := range message\
    \ {\n        lower := rune >= 'a' && rune <= 'z'\n        switch {\n        case\
    \ rune == ' ':\n            secret += \" \"\n        case lower:\n           \
    \ secret += string(rune - 32)\n        case rune == 'A' || rune == 'E' || rune\
    \ == 'I' || rune == 'O' || rune == 'U':\n            // All vowels are in upper\
    \ case\n            if rune == 'U' {\n                secret += \"A\"\n      \
    \      } else {\n                secret += string(rune + 2)\n            }\n \
    \       default:\n            secret += string(rune)\n        }\n    }\n\n   \
    \ return secret\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxf0x_wly_test.go:60: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxf0x_wly_test.go:60: expected 'mWDCSKR', got 'MUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxf0x_wly_test.go:60:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxf0x_wly_test.go:60: expected 'tHKS KS C MGSSCGG', got 'THIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxf0x_wly_test.go:60:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DONT KNQW WHCT TQ WRKTG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    arr := []byte(message)\n    for i, c := range arr {\n\
    \        n := c + 2\n        fmt.Println(string(n))\n        if n > 'Z' && n <\
    \ 'a' || n > 'z' {\n            n -= 26\n        }\n        arr[i] = n\n    }\n\
    \    return string(arr)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "V\nG\nU\nV\nO\nw\nf\nc\nu\nk\nt\n[\nG\nU\nV\nj\nk\nu\n\"\nk\nu\n\"\nc\n\
    \"\no\ng\nu\nu\nc\ni\ng\nK\n\"\nF\nq\nP\nv\n\"\nM\np\nQ\ny\n\"\nY\nj\nC\nv\n\"\
    \nv\nQ\n\"\nY\nt\nK\nv\nG\n--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0\
    \ (0.00s)\n        tmp92k9b48s_test.go:48: expected 'tgst', got 'VGUV'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmp92k9b48s_test.go:48: expected\
    \ 'mWDCSKR', got 'Owfcukt'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n   \
    \     tmp92k9b48s_test.go:48: expected 'ygs', got 'AGU'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmp92k9b48s_test.go:48: expected 'tHKS KS C MGSSCGG', got 'Vjku\"\
    ku\"c\"oguucig'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp92k9b48s_test.go:48:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K\"FqPv\"MpQy\"YjCv\"vQ\"YtKvG'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj2ucr2bq_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj2ucr2bq_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj2ucr2bq_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    enc := make([]byte, len(message))\n    for i, b := range\
    \ message {\n        switch {\n        case b > 'Z':\n            enc[i] = b -\
    \ 'a' + 'A'\n        case b >= 'A':\n            enc[i] = b - 'A' + 'a'\n    \
    \    default:\n            enc[i] = b\n        }\n        if b == 'a' {\n    \
    \        enc[i] = 'c'\n        } else if b == 'e' {\n            enc[i] = 'g'\n\
    \        } else if b == 'i' {\n            enc[i] = 'k'\n        } else if b ==\
    \ 'o' {\n            enc[i] = 'q'\n        } else if b == 'u' {\n            enc[i]\
    \ = 'y'\n        }\n    }\n    return string(enc)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03udsde0_test.go:23:22: cannot use b - ''a'' + ''A'' (value of type rune)
    as type byte in assignment

    /tmp/tmp03udsde0_test.go:25:22: cannot use b - ''A'' + ''a'' (value of type rune)
    as type byte in assignment

    /tmp/tmp03udsde0_test.go:27:22: cannot use b (variable of type rune) as type byte
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxz429mtj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxz429mtj_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxz429mtj_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpxz429mtj_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpxz429mtj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // Result will be the encoded message.\n    var result\
    \ string\n\n    // Iterate over characters in message\n    for _, char := range\
    \ message {\n        // Check if char is upper or lowercase letter\n        if\
    \ (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n           \
    \ // Encode letter\n            result += encodeLetter(char)\n        } else {\n\
    \            // Keep non-letter characters as-is\n            result += string(char)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvj67ch40_test.go:27:23: undefined: encodeLetter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // Add your code here\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels := \"aeiou\"\n    var encoded string\n    for _, c := range message\
    \ {\n        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    for\
    \ i, c := range encoded {\n        if c >= 'a' && c <= 'z' {\n            j :=\
    \ 0\n            for j < 2 {\n                c++\n                if c == 'z'\
    \ + 1 {\n                    c = 'a'\n                }\n                j++\n\
    \            }\n            encoded = encoded[:i] + string(c) + encoded[i+1:]\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            j := 0\n            for\
    \ j < 2 {\n                c++\n                if c == 'Z' + 1 {\n          \
    \          c = 'A'\n                }\n                j++\n            }\n  \
    \          encoded = encoded[:i] + string(c) + encoded[i+1:]\n        }\n    }\n\
    \    for i, c := range encoded {\n        if c >= 'a' && c <= 'z' {\n        \
    \    if vowels[0] <= c && c <= vowels[4] {\n                encoded = encoded[:i]\
    \ + alphabet[c-'a'+2:c-'a'+3] + encoded[i+1:]\n            }\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            if vowels[0] - 32 <= c && c <= vowels[4]\
    \ - 32 {\n                encoded = encoded[:i] + alphabet[c-'A'+2:c-'A'+3] +\
    \ encoded[i+1:]\n            }\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp4ennkj_test.go:57:29: invalid operation: vowels[0] <= c (mismatched
    types byte and rune)

    /tmp/tmpkp4ennkj_test.go:57:39: invalid operation: c <= vowels[4] (mismatched
    types rune and byte)

    /tmp/tmpkp4ennkj_test.go:61:34: invalid operation: vowels[0] - 32 <= c (mismatched
    types byte and rune)

    /tmp/tmpkp4ennkj_test.go:61:44: invalid operation: c <= vowels[4] - 32 (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    m := make([]rune, len(message))\n    for i, letter :=\
    \ range message {\n        if letter >= 65 && letter <= 90 {\n            m[i]\
    \ = 97 + letter - 65\n        } else if letter >= 97 && letter <= 122 {\n    \
    \        m[i] = 65 + letter - 97\n        } else {\n            m[i] = letter\n\
    \        }\n    }\n    message = string(m)\n    encoded := make([]rune, len(message))\n\
    \    for i, letter := range message {\n        switch letter {\n        case 'a':\n\
    \            encoded[i] = 'c'\n        case 'e':\n            encoded[i] = 'g'\n\
    \        case 'i':\n            encoded[i] = 'k'\n        case 'o':\n        \
    \    encoded[i] = 'q'\n        case 'u':\n            encoded[i] = 'y'\n     \
    \   default:\n            encoded[i] = letter\n        }\n    }\n    return string(encoded)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmp7bx2pqdx_test.go:67: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmp7bx2pqdx_test.go:67: expected 'tHKS\
    \ KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp7bx2pqdx_test.go:67: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'k dOnT kNqW wHcT Tq wRkTg'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075696
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var ret string\n    var err error\n    for _, char :=\
    \ range message {\n        if unicode.IsLower(char) {\n            ret += strings.ToUpper(string(char))\n\
    \        } else if unicode.IsUpper(char) {\n            ret += strings.ToLower(string(char))\n\
    \        } else {\n            ret += string(char)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1j4n98l7_test.go:20:9: err declared but not used

    /tmp/tmp1j4n98l7_test.go:22:12: undefined: unicode

    /tmp/tmp1j4n98l7_test.go:23:20: undefined: strings

    /tmp/tmp1j4n98l7_test.go:24:19: undefined: unicode

    /tmp/tmp1j4n98l7_test.go:25:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075695
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj2ucr2bq_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj2ucr2bq_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj2ucr2bq_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj2ucr2bq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    const vowels = \"aeiou\"\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpexss49ky_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpexss49ky_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpexss49ky_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpexss49ky_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpexss49ky_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075696
