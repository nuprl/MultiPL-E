name: HumanEval_150_x_or_y
language: go_test.go
prompt: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A\
  \ simple program which should return the value of x if n is \n// a prime number\
  \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34,\
  \ 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int) int\
  \ {\n"
tests: "func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
  \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
  \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
  \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
  \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
  \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
  \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Check if n is even\n    if n % 2 == 0 {\n        return y\n\
    \    }\n\n    // Check if n is divisible by any odd number\n    for i := 3; i\
    \ < n; i += 2 {\n        if n % i == 0 {\n            return y\n        }\n  \
    \  }\n\n    return x\n}\n", "  var result int\n  // TODO: Write your code here\n\
    \  for i := 2; i < n; i++ {\n    if n % i == 0 {\n      result = y\n      break\n\
    \    } else {\n      result = x\n    }\n  }\n  return result\n}\n", "    if isPrime(n)\
    \ {\n        return x\n    }\n    return y\n}\n", "\tisPrime := true\n\tfor i\
    \ := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\tisPrime = false\n\t\t\tbreak\n\
    \t\t}\n\t}\n\tif isPrime {\n\t\treturn x\n\t}\n\treturn y\n}\n", "    if n % 2\
    \ == 0 {\n        return y\n    }\n    return x\n}\n", "    if (isPrime(n)) {\n\
    \        return x\n    } else {\n        return y\n    }\n}\n", "    r := n %\
    \ 2\n    if r == 0 {\n        return y\n    }\n    r = n % 3\n    if r == 0 {\n\
    \        return y\n    }\n    r = n % 5\n    if r == 0 {\n        return y\n \
    \   }\n    r = n % 7\n    if r == 0 {\n        return y\n    }\n    return x\n\
    }\n", "    is_prime := true\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            is_prime = false\n            break\n        }\n    }\n   \
    \ if is_prime {\n        return x\n    } else {\n        return y\n    }\n}\n",
  "    if (n <= 1) {\n        return y\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n\
    }\n", "\tif isPrime(n) {\n\t\treturn x\n\t} else {\n\t\treturn y\n\t}\n}\n", " \
    \   // As we are already given the n so we can directly decide\n    // whether\
    \ n is prime or not\n    if n % 2 == 0 {\n        return y\n    } else {\n   \
    \     return x\n    }\n}\n", "    var result int\n    if isPrime(n) {\n      \
    \  result = x\n    } else {\n        result = y\n    }\n    return result\n}\n",
  "    if n % 2 == 0 || n % 3 == 0 {\n        return y\n    }\n    return x\n}\n",
  "\treturn 0\n}\n", "    //TODO: Implement this\n    return 0\n}\n", "    if isPrime(n)\
    \ {\n        return x\n    }\n    return y\n}\n", "    return 0\n}\n", "    var\
    \ k int = 1\n    for k=2; k < n; k++ {\n        if n % k == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n", "\tif n % 2 == 0 {\n\t\treturn y\n\t\
    } else {\n\t\tfor i := 2; i < n; i++ {\n\t\t\tif n % i == 0 {\n\t\t\t\treturn\
    \ y\n\t\t\t}\n\t\t}\n\t\treturn x\n\t}\n}\n", "    /* Add your code here */\n\
    \    if (isPrime(n)) {\n        return x\n    } else {\n        return y\n   \
    \ }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
