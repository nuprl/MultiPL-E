name: HumanEval_151_double_the_difference
language: go_test.go
prompt: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n//\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
  \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
  \ == 0  \n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
  \ []float64) int {\n"
tests: "func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n  \
  \   { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1,\
  \ 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}),\
  \ expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected:\
  \ 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n  \
  \   { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0,\
  \ 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    r := 0\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            if int(v) % 2 == 1 {\n                r += int(v * v)\n     \
    \       }\n        }\n    }\n    return r\n}\n", "    sum := 0\n    for _, value\
    \ := range lst {\n        if value > 0 && value == float64(int(value)) {\n   \
    \         sum += int(value) * int(value)\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for _, v := range lst {\n        if int(v) % 2 == 1 {\n     \
    \       sum += int(v) * int(v)\n        }\n    }\n    return sum\n}\n", "    total\
    \ := 0\n    for _, n := range lst {\n        n = n * n\n        if n >= 0 && n\
    \ == float64(int(n)) {\n            total += int(n)\n        }\n    }\n    return\
    \ total\n}\n", "    return 0\n}\n", "    var sum int = 0\n    var negativeNums\
    \ int = 0\n    var notIntegers int = 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            negativeNums++\n        } else if v != float64(int(v))\
    \ {\n            notIntegers++\n        } else if v%2 != 0 {\n            sum\
    \ += int(v*v)\n        }\n    }\n    fmt.Println(\"Sum:\", sum)\n    fmt.Println(\"\
    Negative Nums:\", negativeNums)\n    fmt.Println(\"Not Integers:\", notIntegers)\n\
    \    if sum == 0 {\n        return 0\n    }\n    return sum + ((negativeNums -\
    \ notIntegers) * 2)\n}\n", "    // write your code here\n    return 0\n}\n", " \
    \   // your code here\n    return 0\n}\n", "    // Your code here\n\n    return\
    \ 0;\n}\n", "    return 42\n}\n", "    return 0\n}\n", "    sum := 0\n    for\
    \ _, item := range lst {\n        if int(item) > 0 && int(item) % 2 != 0 {\n \
    \           sum += int(item * item)\n        }\n    }\n    return sum\n}\n", " \
    \   // TODO\n    return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", " \
    \   return 0\n}\n", "    res := 0\n    for _, v := range lst {\n        if int(v)\
    \ % 2 == 1 {\n            res += int(v * v)\n        }\n    }\n    return res\n\
    }\n", "    return 0\n}\n", "    return 0\n}\n", "    // Write your code here\n\
    \    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
