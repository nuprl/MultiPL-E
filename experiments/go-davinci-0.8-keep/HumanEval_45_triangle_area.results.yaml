language: go_test.go
name: HumanEval_45_triangle_area
results:
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    //TODO\n    return\
    \ 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpm1z66f7d_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpm1z66f7d_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpm1z66f7d_test.go:31: expected '%!s(float64=40)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return 0.5 * float64(a)\
    \ * float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return 0.5 * float64(a)\
    \ * float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
