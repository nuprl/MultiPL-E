name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc\
  \ numerical_letter_grade(grades []float64) []string {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["  var letter_grades []string\n  var grade_letters = map[float64]string{\n\
    \    4.0: \"A+\",\n    3.7: \"A\",\n    3.3: \"A-\",\n    3.0: \"B+\",\n    2.7:\
    \ \"B\",\n    2.3: \"B-\",\n    2.0: \"C+\",\n    1.7: \"C\",\n    1.3: \"C-\"\
    ,\n    1.0: \"D+\",\n    0.7: \"D\",\n    0.0: \"D-\",\n    0.0: \"E\",\n  }\n\
    \  for _, grade := range grades {\n    for key, value := range grade_letters {\n\
    \      if grade >= key {\n        letter_grades = append(letter_grades, value)\n\
    \        break\n      }\n    }\n  }\n  return letter_grades\n}\n", "    var g\
    \ []string\n    for _, x := range grades {\n        switch {\n        case x >=\
    \ 4.0:\n            g = append(g, \"A+\")\n        case x >= 3.7:\n          \
    \  g = append(g, \"A\")\n        case x >= 3.3:\n            g = append(g, \"\
    A-\")\n        case x >= 3.0:\n            g = append(g, \"B+\")\n        case\
    \ x >= 2.7:\n            g = append(g, \"B\")\n        case x >= 2.3:\n      \
    \      g = append(g, \"B-\")\n        case x >= 2.0:\n            g = append(g,\
    \ \"C+\")\n        case x >= 1.7:\n            g = append(g, \"C\")\n        case\
    \ x >= 1.3:\n            g = append(g, \"C-\")\n        case x >= 1.0:\n     \
    \       g = append(g, \"D+\")\n        case x >= 0.7:\n            g = append(g,\
    \ \"D\")\n        case x >= 0.0:\n            g = append(g, \"D-\")\n        default:\n\
    \            g = append(g, \"E\")\n        }\n    }\n    return g\n}\n", "   \
    \ var letterGrades []string\n    for _, value := range grades {\n        if value\
    \ >= 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n        }\
    \ else if value >= 3.7 {\n            letterGrades = append(letterGrades, \"A\"\
    )\n        } else if value >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if value >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if value >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if value >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if value >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if value >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if value >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if value >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if value >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if value >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    letter_grades := []string{}\n\
    \    for _, grade := range grades {\n        switch {\n        case grade >= 4.0:\n\
    \            letter_grades = append(letter_grades, \"A+\")\n        case grade\
    \ >= 3.7:\n            letter_grades = append(letter_grades, \"A\")\n        case\
    \ grade >= 3.3:\n            letter_grades = append(letter_grades, \"A-\")\n \
    \       case grade >= 3.0:\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        case grade >= 2.7:\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        case grade >= 2.3:\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        case grade >= 2.0:\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        case grade >= 1.7:\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        case grade >= 1.3:\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        case grade >= 1.0:\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        case grade >= 0.7:\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        case grade >= 0.0:\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        default:\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i, grade := range grades {\n        if grade >= 4.0 {\n\
    \            result[i] = \"A+\"\n        } else if grade >= 3.7 {\n          \
    \  result[i] = \"A\"\n        } else if grade >= 3.3 {\n            result[i]\
    \ = \"A-\"\n        } else if grade >= 3.0 {\n            result[i] = \"B+\"\n\
    \        } else if grade >= 2.7 {\n            result[i] = \"B\"\n        } else\
    \ if grade >= 2.3 {\n            result[i] = \"B-\"\n        } else if grade >=\
    \ 2.0 {\n            result[i] = \"C+\"\n        } else if grade >= 1.7 {\n  \
    \          result[i] = \"C\"\n        } else if grade >= 1.3 {\n            result[i]\
    \ = \"C-\"\n        } else if grade >= 1.0 {\n            result[i] = \"D+\"\n\
    \        } else if grade >= 0.7 {\n            result[i] = \"D\"\n        } else\
    \ if grade >= 0.0 {\n            result[i] = \"D-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    return result\n}\n", "    letterGrades\
    \ := []string{}\n    for _, grade := range grades {\n        switch {\n      \
    \  case grade >= 4.0:\n            letterGrades = append(letterGrades, \"A+\"\
    )\n        case grade >= 3.7:\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        case grade >= 3.3:\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        case grade >= 3.0:\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        case grade >= 2.7:\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        case grade >= 2.3:\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        case grade >= 2.0:\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        case grade >= 1.7:\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        case grade >= 1.3:\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        case grade >= 1.0:\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        case grade >= 0.7:\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        case grade >= 0.0:\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        default:\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    letter_grades := []string{}\n\
    \    for _, grade := range grades {\n        if grade == 4.0 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if grade > 3.7 {\n         \
    \   letter_grades = append(letter_grades, \"A\")\n        } else if grade > 3.3\
    \ {\n            letter_grades = append(letter_grades, \"A-\")\n        } else\
    \ if grade > 3.0 {\n            letter_grades = append(letter_grades, \"B+\")\n\
    \        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n", "    // your code\
    \ here!\n    grade_equation := []string{\"E\", \"D-\", \"D\", \"D+\", \"C-\",\
    \ \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"}\n    gpa_boundary\
    \ := []float64{0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0}\n \
    \   result := []string{}\n    for _, g := range grades {\n        for i, b :=\
    \ range gpa_boundary {\n            if g >= b {\n                result = append(result,\
    \ grade_equation[i])\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ tmp string\n    var ans []string\n    for _, v := range grades {\n        if\
    \ v >= 4.0 {\n            tmp = \"A+\"\n        } else if v >= 3.7 {\n       \
    \     tmp = \"A\"\n        } else if v >= 3.3 {\n            tmp = \"A-\"\n  \
    \      } else if v >= 3.0 {\n            tmp = \"B+\"\n        } else if v >=\
    \ 2.7 {\n            tmp = \"B\"\n        } else if v >= 2.3 {\n            tmp\
    \ = \"B-\"\n        } else if v >= 2.0 {\n            tmp = \"C+\"\n        }\
    \ else if v >= 1.7 {\n            tmp = \"C\"\n        } else if v >= 1.3 {\n\
    \            tmp = \"C-\"\n        } else if v >= 1.0 {\n            tmp = \"\
    D+\"\n        } else if v >= 0.7 {\n            tmp = \"D\"\n        } else if\
    \ v >= 0.0 {\n            tmp = \"D-\"\n        } else {\n            tmp = \"\
    E\"\n        }\n        ans = append(ans, tmp)\n    }\n    return ans\n}\n", " \
    \   var letter_grades []string\n    for _, i := range grades {\n        if i >=\
    \ 4.0 {\n            letter_grades = append(letter_grades, \"A+\")\n        }\
    \ else if i >= 3.7 {\n            letter_grades = append(letter_grades, \"A\"\
    )\n        } else if i >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if i >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if i >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if i >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if i >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if i >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if i >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if i >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if i >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if i >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n", "    letter_grades\
    \ := []string{}\n    mapping := make(map[float64]string)\n    mapping[4.0] = \"\
    A+\"\n    mapping[3.7] = \"A\"\n    mapping[3.3] = \"A-\"\n    mapping[3.0] =\
    \ \"B+\"\n    mapping[2.7] = \"B\"\n    mapping[2.3] = \"B-\"\n    mapping[2.0]\
    \ = \"C+\"\n    mapping[1.7] = \"C\"\n    mapping[1.3] = \"C-\"\n    mapping[1.0]\
    \ = \"D+\"\n    mapping[0.7] = \"D\"\n    mapping[0.0] = \"D-\"\n    for _, grade\
    \ := range grades {\n        if letter_grade, ok := mapping[grade]; ok {\n   \
    \         letter_grades = append(letter_grades, letter_grade)\n        } else\
    \ {\n            letter_grades = append(letter_grades, \"E\")\n        }\n   \
    \ }\n    return letter_grades\n}\n", "    letterGrades := []string{}\n    for\
    \ _, grade := range grades {\n        if grade >= 4.0 {\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        } else if grade >= 3.7 {\n         \
    \   letterGrades = append(letterGrades, \"A\")\n        } else if grade >= 3.3\
    \ {\n            letterGrades = append(letterGrades, \"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "\tvar grade_map = map[float64]string{\n\
    \t\t4.0: \"A+\",\n\t\t3.7: \"A\",\n\t\t3.3: \"A-\",\n\t\t3.0: \"B+\",\n\t\t2.7:\
    \ \"B\",\n\t\t2.3: \"B-\",\n\t\t2.0: \"C+\",\n\t\t1.7: \"C\",\n\t\t1.3: \"C-\"\
    ,\n\t\t1.0: \"D+\",\n\t\t0.7: \"D\",\n\t\t0.0: \"D-\",\n\t}\n\tvar letter_grades\
    \ []string\n\tfor _, grade := range grades {\n\t\tletter_grade := \"\"\n\t\tfor\
    \ k, v := range grade_map {\n\t\t\tif grade >= k {\n\t\t\t\tletter_grade = v\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif letter_grade == \"\" {\n\t\t\tletter_grade\
    \ = \"E\"\n\t\t}\n\t\tletter_grades = append(letter_grades, letter_grade)\n\t\
    }\n\treturn letter_grades\n}\n", "    // YOUR CODE HERE\n    return []string{}\n\
    }\n", "  for i, _ := range grades {\n    if grades[i] > 4.0 {\n      grades[i]\
    \ = 4.0\n    }\n    if grades[i] < 0.0 {\n      grades[i] = 0.0\n    }\n  }\n\
    \  letter_grades := []string{\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\"\
    , \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"}\n  letter_grade_points := []float64{0.0,\
    \ 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0}\n  letter_grade_points_len\
    \ := len(letter_grade_points)\n  grades_len := len(grades)\n  result := make([]string,\
    \ grades_len)\n  for i := 0; i < grades_len; i++ {\n    for j := 0; j < letter_grade_points_len;\
    \ j++ {\n      if grades[i] >= letter_grade_points[j] {\n        result[i] = letter_grades[j]\n\
    \        break\n      }\n    }\n  }\n  return result\n}\n\ntype TestCase ", " \
    \   // the output array\n    var output []string\n\n    // for each number in\
    \ the input array\n    for _, grade := range grades {\n        // based on the\
    \ grade, add a string to the output array\n        switch {\n        case grade\
    \ >= 4.0:\n            output = append(output, \"A+\")\n        case grade >=\
    \ 3.7:\n            output = append(output, \"A\")\n        case grade >= 3.3:\n\
    \            output = append(output, \"A-\")\n        case grade >= 3.0:\n   \
    \         output = append(output, \"B+\")\n        case grade >= 2.7:\n      \
    \      output = append(output, \"B\")\n        case grade >= 2.3:\n          \
    \  output = append(output, \"B-\")\n        case grade >= 2.0:\n            output\
    \ = append(output, \"C+\")\n        case grade >= 1.7:\n            output = append(output,\
    \ \"C\")\n        case grade >= 1.3:\n            output = append(output, \"C-\"\
    )\n        case grade >= 1.0:\n            output = append(output, \"D+\")\n \
    \       case grade >= 0.7:\n            output = append(output, \"D\")\n     \
    \   case grade >= 0.0:\n            output = append(output, \"D-\")\n        default:\n\
    \            output = append(output, \"E\")\n        }\n    }\n\n    // return\
    \ the output array\n    return output\n}\n", "    var letter_grades []string\n\
    \    for _, value := range grades {\n        switch {\n        case value == 4.0:\n\
    \            letter_grades = append(letter_grades, \"A+\")\n        case value\
    \ > 3.7:\n            letter_grades = append(letter_grades, \"A\")\n        case\
    \ value > 3.3:\n            letter_grades = append(letter_grades, \"A-\")\n  \
    \      case value > 3.0:\n            letter_grades = append(letter_grades, \"\
    B+\")\n        case value > 2.7:\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        case value > 2.3:\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        case value > 2.0:\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        case value > 1.7:\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        case value > 1.3:\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        case value > 1.0:\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        case value > 0.7:\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        case value > 0.0:\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        case value == 0.0:\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n", "    var output []string\n\
    \    for _, val := range grades {\n        switch {\n        case val == 4.0:\n\
    \            output = append(output, \"A+\")\n        case val > 3.7:\n      \
    \      output = append(output, \"A\")\n        case val > 3.3:\n            output\
    \ = append(output, \"A-\")\n        case val > 3.0:\n            output = append(output,\
    \ \"B+\")\n        case val > 2.7:\n            output = append(output, \"B\"\
    )\n        case val > 2.3:\n            output = append(output, \"B-\")\n    \
    \    case val > 2.0:\n            output = append(output, \"C+\")\n        case\
    \ val > 1.7:\n            output = append(output, \"C\")\n        case val > 1.3:\n\
    \            output = append(output, \"C-\")\n        case val > 1.0:\n      \
    \      output = append(output, \"D+\")\n        case val > 0.7:\n            output\
    \ = append(output, \"D\")\n        case val > 0.0:\n            output = append(output,\
    \ \"D-\")\n        case val == 0.0:\n            output = append(output, \"E\"\
    )\n        }\n    }\n    return output\n}\n", "    var letter_grades []string\n\
    \    for _, grade := range grades {\n        if grade >= 4.0 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if grade >= 3.7 {\n        \
    \    letter_grades = append(letter_grades, \"A\")\n        } else if grade >=\
    \ 3.3 {\n            letter_grades = append(letter_grades, \"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades = append(letter_grades, \"\
    B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
