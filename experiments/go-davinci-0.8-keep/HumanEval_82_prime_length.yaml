name: HumanEval_82_prime_length
language: go_test.go
prompt: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that takes a string and returns True if the string\n// length\
  \ is a prime number or False otherwise\n// Examples\n// prime_length('Hello') ==\
  \ True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
  // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n"
tests: "func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
  \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
  ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
  \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
  world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
  \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
  \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n \
  \    { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
  gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
  \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
  \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
  \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    length := len(myString)\n    for i := 2; i < length; i++ {\n  \
    \      if length % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(myString) == 2 || len(myString) == 3 || len(myString)\
    \ == 5 || len(myString) == 7 {\n        return true\n    }\n    return false\n\
    }\n", "  length := len(myString)\n  if length <= 1 {\n    return false\n  }\n\
    \  for i := 2; i < length; i++ {\n    if length % i == 0 {\n      return false\n\
    \    }\n  }\n  return true\n}\n", "    var result bool\n    lenString := len(myString)\n\
    \    if lenString == 2 || lenString == 3 || lenString == 5 || lenString == 7 {\n\
    \        result = true\n    } else {\n        result = false\n    }\n    return\
    \ result\n}\n", "    length := len(myString)\n    i := 2\n    for i < length {\n\
    \        if length % i == 0 {\n            return false\n        }\n        i\
    \ += 1\n    }\n    return true\n}\n", "    var stringLength = len(myString)\n\
    \    var isPrime = true\n    var divisorCount = 0\n    var i = 1\n    for ; i\
    \ <= stringLength; i++ {\n        if stringLength % i == 0 {\n            divisorCount++\n\
    \        }\n    }\n    if divisorCount != 2 {\n        isPrime = false\n    }\n\
    \    return isPrime\n}\n", "    var i int = 2\n    for i = 2; i < len(myString);\
    \ i++ {\n        if len(myString) % i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    if isPrime(len(myString)) {\n      \
    \  return true\n    } else {\n        return false\n    }\n}\n", "    isPrime\
    \ := true\n    var i int\n    size := len(myString)\n    if size < 2 {\n     \
    \   return false\n    }\n    for i = 2; i < size; i++ {\n        if size % i ==\
    \ 0 {\n            isPrime = false\n            break\n        }\n    }\n    return\
    \ isPrime\n}\n", "    var number int = len(myString)\n    if (number == 2) {\n\
    \        return true\n    }\n    for i := 2; i < number; i++ {\n        if (number\
    \ % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
  "    return true\n}\n", "    length := len(myString)\n    for i := 2; i < length;\
    \ i++ {\n        if length % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    length := len(myString)\n    if (length ==\
    \ 1) {\n        return false\n    } else if (length == 2) {\n        return true\n\
    \    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    // get length\n\
    \    length := len(myString)\n    // check if prime\n    return length > 1 &&\
    \ all(map(func(x int) bool { return length % x != 0 }, range(2, length)))\n}\n",
  "    // Your Code Here\n\n    return false\n}\n", "    myInt := len(myString)\n\
    \    if myInt == 1 {\n        return false\n    } else if myInt == 2 {\n     \
    \   return true\n    }\n    for i := 2; i < myInt; i++ {\n        if myInt % i\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \ if len(myString) <= 1 {\n    return false\n  }\n\n  for i := 2; i < len(myString);\
    \ i++ {\n    if len(myString) % i == 0 {\n      return false\n    }\n  }\n\n \
    \ return true\n}\n", "    length := len(myString)\n    for i := 2; i < length;\
    \ i++ {\n        if length % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "  // Your code here\n  return false\n}\n", "  \
    \  myStringLength := len(myString)\n    if myStringLength < 2 {\n        return\
    \ false\n    }\n    var i uint\n    for i = 2; i < uint(myStringLength); i++ {\n\
    \        if (uint(myStringLength) % i) == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
