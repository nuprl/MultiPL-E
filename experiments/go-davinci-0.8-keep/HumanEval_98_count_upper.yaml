name: HumanEval_98_count_upper
language: go_test.go
prompt: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s, count the number of uppercase vowels in even indices.\n// For\
  \ example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns\
  \ 0\n// count_upper('dBBE') returns 0\nfunc count_upper(s string) int {\n"
tests: "func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
  \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected:\
  \ 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
  U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["\treturn 0\n}\n", "    var vcount int = 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] >= 'A' && s[i] <= 'Z' && i % 2 == 0 {\n            vcount++\n\
    \        }\n    }\n    return vcount\n}\n", "    var counter int\n    for i, char\
    \ := range s {\n        if (i % 2 == 0) && (char >= 'A') && (char <= 'Z') {\n\
    \            counter++\n        }\n    }\n    return counter\n}\n", "    count\
    \ := 0\n    for i, c := range s {\n        // even indices\n        if i % 2 ==\
    \ 0 {\n            if c >= 'A' && c <= 'Z' {\n                count++\n      \
    \      }\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i,\
    \ v := range s {\n        if i % 2 == 0 && is_upper(v) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i, ch := range\
    \ s {\n        if i % 2 == 0 && (ch == 'A' || ch == 'E' || ch == 'I' || ch ==\
    \ 'O' || ch == 'U') {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && (r\
    \ == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U') {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int = 0\n    for i,\
    \ r := range s {\n        if i % 2 == 0 && r >= 'A' && r <= 'Z' {\n          \
    \  count++\n        }\n    }\n    return count\n}\n", "    count := 0\n    //\
    \ iterate over the string\n    for idx, char := range s {\n        // if the letter\
    \ is an uppercase vowel and the index is even (0 based)\n        if char == 'A'\
    \ || char == 'E' || char == 'I' || char == 'O' || char == 'U' && idx % 2 == 0\
    \ {\n            // increment the counter\n            count++\n        }\n  \
    \  }\n    return count\n}\n", "    var count int = 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n", "    // your code here\n    count :=\
    \ 0\n    for i, letter := range s {\n        if i % 2 == 0 && letter == 'A' ||\
    \ letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n       \
    \     count++\n        }\n    }\n    return count\n}\n", "    res := 0\n    for\
    \ i, s := range s {\n        if (i % 2 == 0) && (s >= 'A') && (s <= 'Z') {\n \
    \           res += 1\n        }\n    }\n    return res\n}\n", "    count := 0\n\
    \    for i, c := range s {\n        if i % 2 == 0 && is_upper(c) {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    counter := 0\n   \
    \ for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n   \
    \         counter++\n        }\n    }\n    return counter\n}\n", "    // TODO:\
    \ implement count_upper\n    return 0\n}\n", "    // Your code here\n    return\
    \ 0\n}\n", "    var count = 0\n    for i, r := range s {\n        if i % 2 ==\
    \ 0 && 'A' <= r && r <= 'Z' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var count int\n    for i, v := range s {\n        if i % 2\
    \ == 0 && v >= 'A' && v <= 'Z' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    return 1\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
