name: HumanEval_7_filter_by_substring
language: go_test.go
prompt: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings\
  \ []string, substring string) []string {\n"
tests: "func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\"\
  , \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var filtered_strings []string\n    for _, element := range strings\
    \ {\n        if string(element[0]) == substring {\n            filtered_strings\
    \ = append(filtered_strings, element)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var ret_strings []string\n    for _, s := range strings {\n       \
    \ if (string_contains(s, substring)) {\n            ret_strings = append(ret_strings,\
    \ s)\n        }\n    }\n    return ret_strings\n}\n", "    result := []string{}\n\
    \    for _, i := range strings {\n        if strings.Contains(i, substring) {\n\
    \            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    filtered := []string{}\n    for _, str := range strings\
    \ {\n        if contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n", "    result := []string{}\n\
    \    for _, item := range strings {\n        if len(item) >= len(substring) {\n\
    \            if item[0:len(substring)] == substring {\n                result\
    \ = append(result, item)\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var filtered_strings []string\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    result := []string{}\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    result := []string{}\n    for\
    \ _, s := range strings {\n        if (string(s[0]) == substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   slice := make([]string, 0)\n    for _, str := range strings {\n        if\
    \ contains(str, substring) {\n            slice = append(slice, str)\n       \
    \ }\n    }\n    return slice\n}\n", "    var result []string\n    for _, s :=\
    \ range strings {\n        if contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    ret := []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       ret = append(ret, s)\n        }\n    }\n    return ret\n}\n", "    var\
    \ new_strings []string\n\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            new_strings = append(new_strings, str)\n        }\n\
    \    }\n\n    return new_strings\n}\n", "    var match string\n    var filtered\
    \ []string\n    for _, match = range strings {\n        if match != substring\
    \ {\n            filtered = append(filtered, match)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []string\n    for _, st := range strings {\n\
    \        if contains(st, substring) {\n            result = append(result, st)\n\
    \        }\n    }\n    return result\n}\n", "    filtered := []string{}\n    for\
    \ _, x := range strings {\n        if stringInSlice(substring, x) {\n        \
    \    filtered = append(filtered, x)\n        }\n    }\n    return filtered\n}\n",
  "    output := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            output = append(output, s)\n        }\n    }\n   \
    \ return output\n}\n", "    var filtered_strings []string\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var out []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            out = append(out, s)\n        }\n    }\n    return\
    \ out\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
