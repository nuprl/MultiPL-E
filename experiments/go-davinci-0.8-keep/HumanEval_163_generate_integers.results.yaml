language: go_test.go
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    start := a\n  \
    \  if b < a {\n        start = b\n    }\n    var result []int\n    for i := start;\
    \ i <= a && i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpbck38j9__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpbck38j9__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpbck38j9__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var ret []int\n\
    \    if a < b {\n        for i := a; i <= b; i++ {\n            if i % 2 == 0\
    \ {\n                ret = append(ret, i)\n            }\n        }\n    } else\
    \ {\n        for i := b; i <= a; i++ {\n            if i % 2 == 0 {\n        \
    \        ret = append(ret, i)\n            }\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpw_pzzre1_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpw_pzzre1_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpw_pzzre1_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpw_pzzre1_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var result []int\n\
    \n    // Since I just need even numbers, I can start at the lowest and\n    //\
    \ increment by 2's.  No need to check a,b for evenness.\n    for i := a; i <=\
    \ b; i += 2 {\n        result = append(result, i)\n    }\n\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_5d3jx1z_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_5d3jx1z_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp_5d3jx1z_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp_5d3jx1z_test.go:42:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      return generate_integers(b, a)\n    }\n\n    var res []int\n    for i :=\
    \ a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkbfgjs6l_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpkbfgjs6l_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpkbfgjs6l_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpkbfgjs6l_test.go:44: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var output []int\n\
    \    min := a\n    max := b\n    if min > max {\n        min = b\n        max\
    \ = a\n    }\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n   \
    \         output = append(output, i)\n        }\n    }\n    return output\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpco0mg4tv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpco0mg4tv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpco0mg4tv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpco0mg4tv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      a, b = b, a\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpw701zzxg_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpw701zzxg_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpw701zzxg_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpw701zzxg_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      a, b = b, a\n    }\n    evens := []int{}\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n  \
    \  }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptnf0ch4__test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptnf0ch4__test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptnf0ch4__test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptnf0ch4__test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    // your code here\n\
    \n    return nil\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprmwt0gin_test.go:36: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmprmwt0gin_test.go:36: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmprmwt0gin_test.go:36:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      a, b = b, a\n    }\n    var result []int\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpw701zzxg_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpw701zzxg_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpw701zzxg_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpw701zzxg_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    // !!!PLEASE DO\
    \ NOT CHANGE THE FUNCTION HEADER!!!\n    if a == b {\n        if a % 2 == 0 {\n\
    \            return []int{a}\n        } else {\n            return []int{}\n \
    \       }\n    }\n\n    var min int\n    var max int\n    if a > b {\n       \
    \ min = b\n        max = a\n    } else {\n        min = a\n        max = b\n \
    \   }\n\n    if max % 2 == 0 {\n        max--\n    }\n\n    if min % 2 == 0 {\n\
    \        min++\n    }\n\n    var result []int\n    for i := min; i <= max; i +=\
    \ 2 {\n        result = append(result, i)\n    }\n\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxlw4hmwi_test.go:66: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxlw4hmwi_test.go:66: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpxlw4hmwi_test.go:66: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)\
    \ %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29)\
    \ %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43)\
    \ %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57)\
    \ %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71)\
    \ %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85)\
    \ %!s(int=87) %!s(int=89) %!s(int=91) %!s(int=93) %!s(int=95) %!s(int=97) %!s(int=99)\
    \ %!s(int=101) %!s(int=103) %!s(int=105) %!s(int=107) %!s(int=109) %!s(int=111)\
    \ %!s(int=113) %!s(int=115) %!s(int=117) %!s(int=119) %!s(int=121) %!s(int=123)\
    \ %!s(int=125) %!s(int=127) %!s(int=129) %!s(int=131)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpxlw4hmwi_test.go:66: expected '[]', got '[%!s(int=17) %!s(int=19)\
    \ %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33)\
    \ %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47)\
    \ %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61)\
    \ %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75)\
    \ %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var result []int\n\
    \n    // swap if a is greater than b\n    if a > b {\n        a, b = b, a\n  \
    \  }\n\n    // iterate\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n\
    \            result = append(result, i)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_8rziapm_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_8rziapm_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_8rziapm_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp_8rziapm_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n\tvar result []int\n\
    \tif a > b {\n\t\ta, b = b, a\n\t}\n\tfor i := a; i <= b; i++ {\n\t\tif i % 2\
    \ == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_fwbyab2_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_fwbyab2_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_fwbyab2_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp_fwbyab2_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      a, b = b, a\n    }\n    evens := []int{}\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n  \
    \  }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptnf0ch4__test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptnf0ch4__test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptnf0ch4__test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptnf0ch4__test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var result []int\n\
    \    if a == b {\n        if a % 2 == 0 {\n            result = append(result,\
    \ a)\n        }\n        return result\n    }\n\n    if a > b {\n        a, b\
    \ = b, a\n    }\n\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n  \
    \          result = append(result, i)\n        }\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpy5mykmla_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpy5mykmla_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpy5mykmla_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpy5mykmla_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var results []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            results =\
    \ append(results, i)\n        }\n    }\n    return results\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3gntbodq_test.go:40: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3gntbodq_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp3gntbodq_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp3gntbodq_test.go:40:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpyyb0_3oj_test.go:40: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpyyb0_3oj_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpyyb0_3oj_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpyyb0_3oj_test.go:40:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    if a > b {\n  \
    \      return generate_integers(b, a)\n    }\n\n    slice := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            slice = append(slice,\
    \ i)\n        }\n    }\n    return slice\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzrmab7fb_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzrmab7fb_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpzrmab7fb_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpzrmab7fb_test.go:44: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    // Your code here\n\
    \    if a > b {\n        a, b = b, a\n    }\n    res := []int{}\n    for i :=\
    \ a; i <= b; i++ {\n        if i%2 == 0 {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n\ntype TestCase \nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyv83iemh_test.go:28:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    var evens []int\n\
    \    if a < b {\n        for i := a; i <= b; i++ {\n            if i % 2 == 0\
    \ {\n                evens = append(evens, i)\n            }\n        }\n    }\
    \ else {\n        for i := b; i <= a; i++ {\n            if i % 2 == 0 {\n   \
    \             evens = append(evens, i)\n            }\n        }\n    }\n    return\
    \ evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2firvfqa_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2firvfqa_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2firvfqa_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2firvfqa_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8)\
    \ => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10,\
    \ 14) => []\nfunc generate_integers(a int, b int) []int {\n    result := []int{}\n\
    \    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n \
    \       if i % 2 == 0 {\n            result = append(result, i)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpiw8qjh8g_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpiw8qjh8g_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpiw8qjh8g_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpiw8qjh8g_test.go:43: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073980
