name: HumanEval_35_max_element
language: go_test.go
prompt: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n//\
  \ >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunc max_element(l\
  \ []int) int {\n"
tests: "func TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual:\
  \ candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var max = l[0]\n    for _, elem := range l {\n        if elem >\
    \ max {\n            max = elem\n        }\n    }\n    return max\n}\n", "   \
    \ var result int = 0\n    for _, element := range l {\n        if element > result\
    \ {\n            result = element\n        }\n    }\n    return result\n}\n",
  "    // 0 to start with\n    max := 0\n    for _, n := range l {\n        if n >\
    \ max {\n            max = n\n        }\n    }\n    return max\n}\n", "    //\
    \ TODO...\n    max := 0\n    for _, v := range l {\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    return max\n}\n", "    if len(l) == 0\
    \ {\n        return 0\n    }\n    max := l[0]\n    for _, e := range l {\n   \
    \     if e > max {\n            max = e\n        }\n    }\n    return max\n}\n",
  "    if len(l) == 0 {\n        return 0\n    }\n    m := l[0]\n    for _, v := range\
    \ l {\n        if v > m {\n            m = v\n        }\n    }\n    return m\n\
    }\n", "    var max int\n    for _, e := range l {\n        if e > max {\n    \
    \        max = e\n        }\n    }\n    return max\n}\n", "    max_elem := l[0]\n\
    \    for _, elem := range l {\n        if elem > max_elem {\n            max_elem\
    \ = elem\n        }\n    }\n    return max_elem\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    m := l[0]\n    for _, value := range l {\n     \
    \   if value > m {\n            m = value\n        }\n    }\n    return m\n}\n",
  "    result := l[0]\n    for _, v := range l {\n        if v > result {\n      \
    \      result = v\n        }\n    }\n    return result\n}\n", "    max := l[0]\n\
    \    for _, i := range l {\n        if i > max {\n            max = i\n      \
    \  }\n    }\n    return max\n}\n", "    max := l[0]\n    for _, n := range l {\n\
    \        if n > max {\n            max = n\n        }\n    }\n    return max\n\
    }\n", "    m := l[0]\n    for _, num := range l {\n        if num > m {\n    \
    \        m = num\n        }\n    }\n    return m\n}\n", "    max := 0\n    for\
    \ _, v := range l {\n        if v > max {\n            max = v\n        }\n  \
    \  }\n    return max\n}\n", "    max := l[0]\n    for _, elem := range l {\n \
    \       if elem > max {\n            max = elem\n        }\n    }\n    return\
    \ max\n}\n", "    var max int = l[0]\n    for _, value := range l {\n        if\
    \ value > max {\n            max = value\n        }\n    }\n    return max\n}\n",
  "    max := 0\n    if len(l) > 0 {\n        max = l[0]\n    }\n    for _, e := range\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n", "    max := 0\n    for _, i := range l {\n        if i > max {\n\
    \            max = i\n        }\n    }\n    return max\n}\n", "    max := l[0]\n\
    \    for _, v := range l {\n        if v > max {\n            max = v\n      \
    \  }\n    }\n    return max\n}\n", "    m := l[0]\n    for _, v := range l {\n\
    \        if v > m {\n            m = v\n        }\n    }\n    return m\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
