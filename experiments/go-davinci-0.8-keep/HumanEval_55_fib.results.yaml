language: go_test.go
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // TODO: Replace me with a real implementation\n\
    \    return 0\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp431gn4xt_test.go:37: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp431gn4xt_test.go:37: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp431gn4xt_test.go:37: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp431gn4xt_test.go:37: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp431gn4xt_test.go:37: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073248
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    a,\
    \ b := 0, 1\n    for i := 0; i < n; i++ {\n        a, b = b, a + b\n    }\n  \
    \  return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073248
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
