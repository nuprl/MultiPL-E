language: go_test.go
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpuynowbsq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpuynowbsq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpl6r47id3_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpl6r47id3_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpl6r47id3_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpl6r47id3_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpl6r47id3_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpuynowbsq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // Happy\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp_8774wpz_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp_8774wpz_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp_8774wpz_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    var\
    \ last string = \"\"\n    for i := 0; i < len(s); i++ {\n        if i >= 3 &&\
    \ s[i] == last {\n            return false\n        }\n        last = s[i]\n \
    \   }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0dxtdxf4_test.go:21:30: invalid operation: s[i] == last (mismatched types
    byte and string)

    /tmp/tmp0dxtdxf4_test.go:24:16: cannot use s[i] (value of type byte) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    var prev byte\n    var cprev byte\n\
    \    for i, c := range s {\n        if c == prev {\n            if c == cprev\
    \ {\n                return false\n            }\n        }\n        cprev = prev\n\
    \        prev = byte(c)\n        if i >= 3 {\n            return true\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2ta7n65_test.go:25:17: invalid operation: c == prev (mismatched types
    rune and byte)

    /tmp/tmpb2ta7n65_test.go:26:21: invalid operation: c == cprev (mismatched types
    rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // Write\
    \ your code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpztebe7ra_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpztebe7ra_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpztebe7ra_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n\
    \        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpuynowbsq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    var\
    \ letters = make(map[rune]int)\n    for _, c := range s {\n        letters[c]\
    \ += 1\n    }\n    var nums = make([]int, 0)\n    for _, value := range letters\
    \ {\n        nums = append(nums, value)\n    }\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i]\
    \ == nums[j] {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpxa5d2arf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpxa5d2arf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpxa5d2arf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpxa5d2arf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpxa5d2arf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpxa5d2arf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // Write\
    \ your code here\n    size := len(s)\n    if size < 3 {\n        return false\n\
    \    }\n    d := make(map[byte]bool)\n    for i:=0; i<size-2; i++ {\n        if\
    \ !d[s[i]] {\n            d[s[i]] = true\n        } else {\n            return\
    \ false\n        }\n        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpl5j02tn0_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpl5j02tn0_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    hash := make(map[string]bool)\n    for\
    \ i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n        if _, exists\
    \ := hash[s[i:i+3]]; exists {\n            return false\n        }\n        hash[s[i:i+3]]\
    \ = true\n    }\n    return true\n}\n\ntype TestCase \nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbh8irvmn_test.go:35:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpr6xeb_0l_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpr6xeb_0l_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpr6xeb_0l_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    for\
    \ i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpjnqv40ym_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpjnqv40ym_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpuynowbsq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpuynowbsq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    var\
    \ i = 0\n    for i < len(s) - 2 {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n        i++\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpho_qn47t_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpho_qn47t_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    n :=\
    \ len(s)\n    if n < 3 {\n        return false\n    }\n    for i := 0; i < n-2;\
    \ i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n\t// your\
    \ code\n\treturn false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpo8vxzv4k_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpo8vxzv4k_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpo8vxzv4k_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    for i:=0; i<len(s)-2; i++ {\n      \
    \  if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075124
