language: go_test.go
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    collatz := make([]int, 0)\n    current := n\n \
    \   for {\n        collatz = append(collatz, current)\n        if current == 1\
    \ {\n            break\n        }\n        if current % 2 == 0 {\n           \
    \ current = current / 2\n        } else {\n            current = 3 * current +\
    \ 1\n        }\n    }\n    return collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp0_j7lrac_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp0_j7lrac_test.go:55: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp0_j7lrac_test.go:55: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n != 1 {\n        result = append(result, n)\n        if n & 1 == 0 {\n\
    \            n = n >> 1\n        } else {\n            n = n * 3 + 1\n       \
    \ }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8uccqvp1_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp8uccqvp1_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp8uccqvp1_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    var inner func(n int)\n    inner = func(n int) {\n        if n == 1 {\n \
    \           return\n        }\n        if n & 1 == 1 {\n            result = append(result,\
    \ n)\n        }\n        inner(n/2)\n    }\n    inner(n)\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpzeo2m99z_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpzeo2m99z_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpzeo2m99z_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n\
    \        tmpzeo2m99z_test.go:51: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_nums := []int{n}\n\
    \    for n != 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n            odd_nums = append(odd_nums, n)\n \
    \       }\n    }\n    return odd_nums\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpv9wxcd40_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpv9wxcd40_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpv9wxcd40_test.go:48: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    seq := make([]int,\
    \ 0)\n    seq = append(seq, n)\n    for n != 1 {\n        if n % 2 == 0 {\n  \
    \          n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \        seq = append(seq, n)\n    }\n    //fmt.Println(seq)\n    odd := make([]int,\
    \ 0)\n    for _, v := range seq {\n        if v % 2 == 1 {\n            odd =\
    \ append(odd, v)\n        }\n    }\n    //fmt.Println(odd)\n    return odd\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeo_8kpaf_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpeo_8kpaf_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpeo_8kpaf_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    collatz := make([]int, 0)\n    for n > 1 {\n \
    \       collatz = append(collatz, n)\n        if n % 2 == 0 {\n            n =\
    \ n / 2\n        } else {\n            n = n * 3 + 1\n        }\n    }\n    collatz\
    \ = append(collatz, 1)\n    odd_collatz := make([]int, 0)\n    for _, num := range\
    \ collatz {\n        if num % 2 == 1 {\n            odd_collatz = append(odd_collatz,\
    \ num)\n        }\n    }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpyetkf3ke_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpyetkf3ke_test.go:58: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpyetkf3ke_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n != 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = n * 3 + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmplvmeebmj_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmplvmeebmj_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmplvmeebmj_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    r := []int { n }\n\
    \    for r[len(r)-1] != 1 {\n        if r[len(r)-1] % 2 == 0 {\n            r\
    \ = append(r, r[len(r)-1] / 2)\n        } else {\n            r = append(r, 3\
    \ * r[len(r)-1] + 1)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp_4g5zsc__test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp_4g5zsc__test.go:47: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp_4g5zsc__test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    v := []int{}\n    for\
    \ n > 1 {\n        v = append(v, n)\n        if n % 2 == 0 {\n            n =\
    \ n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    v\
    \ = append(v, 1)\n    return v\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpph3b_0ry_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpph3b_0ry_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpph3b_0ry_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    collatz := make([]int, 1)\n    collatz[0] = n\n\
    \    for n != 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n        if n % 2 != 0 {\n         \
    \   collatz = append(collatz, n)\n        }\n    }\n    return collatz\n}\n\n\
    func TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpvw922l8f_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=11)\
    \ %!s(int=17) %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpvw922l8f_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpvw922l8f_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    r, m := []int{}, make(map[int]bool)\n\
    \    for i := 1; i < n; i++ {\n        c := []int{i}\n        for {\n        \
    \    if len(c) == 1 || c[len(c)-1] == 1 {\n                break\n           \
    \ }\n            c = append(c, c[len(c)-1]/2)\n            if c[len(c)-1]%2 ==\
    \ 1 {\n                if c[len(c)-1] == 1 {\n                    c = append(c,\
    \ 1)\n                } else {\n                    c = append(c, c[len(c)-1]*3+1)\n\
    \                }\n            }\n        }\n        for _, v := range c {\n\
    \            if v%2 == 1 {\n                m[v] = true\n            }\n     \
    \   }\n    }\n    for k, _ := range m {\n        r = append(r, k)\n    }\n   \
    \ return r\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgs7ez1ix_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=13) %!s(int=1) %!s(int=3)\
    \ %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgs7ez1ix_test.go:64: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=3)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgs7ez1ix_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=7) %!s(int=9) %!s(int=11) %!s(int=1) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n        tmpgs7ez1ix_test.go:64:\
    \ expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // Write your code\
    \ here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6p0v199f_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6p0v199f_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp6p0v199f_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp6p0v199f_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    fmt.Printf(\"get_odd_collatz(%d)\\\
    n\", n)\n    result := make([]int, 0)\n    for ; n != 1; {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "get_odd_collatz(14)\nget_odd_collatz(5)\nget_odd_collatz(12)\nget_odd_collatz(1)\n\
    --- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpk2xuy0c5_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpk2xuy0c5_test.go:50: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpk2xuy0c5_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    lst := make([]int, 0)\n    odd := false\n    for\
    \ {\n        if n % 2 == 1 {\n            odd = true\n        }\n        lst =\
    \ append(lst, n)\n        if n == 1 {\n            break\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    if odd {\n        return append([]int{1}, lst...)\n\
    \    }\n    return lst\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8tb6hrvy_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=14) %!s(int=7)\
    \ %!s(int=22) %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13)\
    \ %!s(int=40) %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n\
    \        tmp8tb6hrvy_test.go:61: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp8tb6hrvy_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=12)\
    \ %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4)\
    \ %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   collatz := []int{n}\n    for n != 1 {\n        if n % 2 == 0 {\n         \
    \   n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n      \
    \  collatz = append(collatz, n)\n    }\n    odd := []int{}\n    for _, num :=\
    \ range collatz {\n        if num % 2 == 1 {\n            odd = append(odd, num)\n\
    \        }\n    }\n    return odd\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpbp1u6375_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpbp1u6375_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpbp1u6375_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    tmp := n\n    seq :=\
    \ []int{}\n    for tmp != 1 {\n        seq = append(seq, tmp)\n        if tmp\
    \ % 2 == 0 {\n            tmp = tmp / 2\n        } else {\n            tmp = 3\
    \ * tmp + 1\n        }\n    }\n    seq = append(seq, 1)\n    odd := []int{}\n\
    \    for _, x := range seq {\n        if x % 2 == 1 {\n            odd = append(odd,\
    \ x)\n        }\n    }\n    return odd\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpv8v56bsy_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpv8v56bsy_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpv8v56bsy_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO\n    return\
    \ []int{}\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp25mjuj7w_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp25mjuj7w_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp25mjuj7w_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp25mjuj7w_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = n * 3 + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp0vbrtx25_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp0vbrtx25_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp0vbrtx25_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\n\
    \    for n != 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp_8i_81se_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp_8i_81se_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp_8i_81se_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074295
