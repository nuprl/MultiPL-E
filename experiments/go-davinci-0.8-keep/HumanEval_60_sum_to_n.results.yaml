language: go_test.go
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    n = n + 1\n \
    \   return n * (n - 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate\
    \ := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((n *\
    \ (n + 1)) / 2)\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    i := 0\n    s\
    \ := 0\n    for i <= n {\n        s += i\n        i += 1\n    }\n    return s\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Calculate\
    \ sum_to_n by Gauss\n    return (n * (n + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\treturn (n*(n+1))/2\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((n *\
    \ (n + 1)) / 2)\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
