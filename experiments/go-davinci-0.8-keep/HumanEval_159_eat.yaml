name: HumanEval_159_eat
language: go_test.go
prompt: "package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're\
  \ a hungry rabbit, and you already have eaten a certain number of carrots,\n// but\
  \ now you need to eat more carrots to complete the day's meals.\n// you should return\
  \ an array of [ total number of eaten carrots after your meals,\n// the number of\
  \ carrots left after your meals ]\n// if there are not enough remaining carrots,\
  \ you will eat all remaining carrots, but will still be hungry.\n// Example:\n//\
  \ * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10)\
  \ -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n\
  // the number of carrots that you have eaten.\n// @need : integer\n// the number\
  \ of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining\
  \ carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <=\
  \ need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int,\
  \ need int, remaining int) []int {\n"
tests: "func TestEat(t *testing.T) {\n  candidate := eat\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate(5, 6, 10), expected: []int{11, 4} },\n     { actual: candidate(4,\
  \ 8, 9), expected: []int{12, 1} },\n     { actual: candidate(1, 10, 10), expected:\
  \ []int{11, 0} },\n     { actual: candidate(2, 11, 5), expected: []int{7, 0} },\n\
  \     { actual: candidate(4, 5, 7), expected: []int{9, 2} },\n     { actual: candidate(4,\
  \ 5, 1), expected: []int{5, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
