language: go_test.go
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n < 2\
    \ {\n        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n \
    \   // Initialized with the first 3 values of the FibFib number sequence.\n  \
    \  ns := []int{0, 0, 1}\n\n    for i := 3; i <= n; i++ {\n        ns = append(ns,\
    \ ns[i-1] + ns[i-2] + ns[i-3])\n    }\n\n    return ns[n]\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074845
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // write your code here\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5wm6hhko_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp5wm6hhko_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp5wm6hhko_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp5wm6hhko_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp5wm6hhko_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp5wm6hhko_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    return fibfibSub(n,\
    \ 0, 0, 1)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmua17mpk_test.go:24:12: undefined: fibfibSub

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmphdglh88z_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmphdglh88z_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmphdglh88z_test.go:47: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmphdglh88z_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmphdglh88z_test.go:47: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    } else if n == 3\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp4gi165hq_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp4gi165hq_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp4gi165hq_test.go:49: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp4gi165hq_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp4gi165hq_test.go:49: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp4gi165hq_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Your code here\n    if n < 0 {\n        return 0\n\
    \    }\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074845
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var f1, f2, f3 int\n    if n <= 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    f1, f2, f3 = 0, 0, 1\n\
    \    for i := 3; i <= n; i++ {\n        f1, f2, f3 = f2, f3, f1 + f2 + f3\n  \
    \  }\n    return f3\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074845
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpo8uvei4l_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpo8uvei4l_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpo8uvei4l_test.go:46: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpo8uvei4l_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpo8uvei4l_test.go:46: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return fibfib_recursive(n)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8odzkv4_test.go:21:12: undefined: fibfib_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
