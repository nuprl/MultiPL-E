language: go_test.go
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    var sum int\n    for _, v := range q {\n        sum += v\n\
    \    }\n    fmt.Println(sum)\n    if sum > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    // code\n    // get the sum of the array\n    sum := 0\n  \
    \  for _, v := range q {\n        sum += v\n    }\n    // sum < w\n    // compare\
    \ first and last elements, if they are the same remove the first and last element\
    \ and repeat until the array is empty or there is only one element left.\n   \
    \ // if the array is empty or there is only one element left, return true, else\
    \ return false\n    for len(q) > 1 {\n        if q[0] != q[len(q)-1] {\n     \
    \       return false\n        }\n        q = q[1:len(q)-1]\n    }\n    if sum\
    \ <= w {\n        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp1a1wfr4j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp1a1wfr4j_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp1a1wfr4j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074969
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    max_w := 0\n    for _,v := range q {\n        max_w += v\n\
    \    }\n    if max_w > w {\n        return false\n    }\n    for i := 0; i < len(q)\
    \ / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    var elems = 0\n    for i := 0; i < len(q); i++ {\n        elems\
    \ += q[i]\n    }\n    if elems > w {\n        return false\n    }\n    for i :=\
    \ 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n\thalf := len(q) / 2\n\tfor i := 0; i < half; i++ {\n\t\tif q[i]\
    \ != q[len(q)-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\tsum := 0\n\tfor _, v :=\
    \ range q {\n\t\tsum += v\n\t}\n\treturn sum <= w\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    if len(q) == 0 { return false }\n    if len(q) % 2 == 0 { return\
    \ false }\n    l := len(q)\n    n := (l - 1) / 2\n    c := 0\n    for i := 0;\
    \ i < n; i++ {\n        if q[i] != q[l - i - 1] {\n            return false\n\
    \        }\n        c += q[i]\n    }\n    c += q[n]\n    return c <= w\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    n := len(q)\n    if n == 0 { return false }\n    if n == 1\
    \ { return true }\n    var s int\n    for _, v := range q {\n        s += v\n\
    \    }\n    if s > w { return false }\n    if n == 2 { return true }\n    for\
    \ i := 0; i < n / 2; i++ {\n        if q[i] != q[n - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmp15tjg4c8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    sum, half := 0, 0\n    for _, val := range q {\n        sum\
    \ += val\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds2obc4i_test.go:20:10: half declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n \
    \ candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmptcgq9suw_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmptcgq9suw_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmptcgq9suw_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074969
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    for _, v := range q {\n        if v > w {\n            return\
    \ false\n        }\n    }\n    if len(q) == 1 {\n        return true\n    }\n\
    \    for i, j := 0, len(q)-1; i <= j; i, j = i+1, j-1 {\n        if q[i] != q[j]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    left_sum := 0\n    right_sum := 0\n    for i := 0; i < len(q)\
    \ / 2; i++ {\n        left_sum += q[i]\n        right_sum += q[len(q) - 1 - i]\n\
    \    }\n    if left_sum == right_sum && left_sum <= w {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    var sum int\n    for _, v := range q {\n        sum += v\n\
    \    }\n    fmt.Println(sum)\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "8\n3\n3\n8\n6\n5\n--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp2gxqles2_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp2gxqles2_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp2gxqles2_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n    var total\
    \ int\n    for _, v := range q {\n        total += v\n    }\n\n    if total >\
    \ w {\n        return false\n    }\n\n    for i := 0; i < len(q) / 2; i++ {\n\
    \        if q[i] != q[len(q) - 1 - i] {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    // Write your code here\n    fmt.Println(q)\n    fmt.Println(w)\n\
    \    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[3 2 3]\n9\n[1 2]\n5\n[3]\n5\n[3 2 3]\n1\n[1 2 3]\n6\n[5]\n5\n--- FAIL:\
    \ TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0 (0.00s)\n\
    \        tmpi9c8lcc9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpi9c8lcc9_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpi9c8lcc9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n    if len(q)\
    \ == 1 {\n        return q[0] <= w\n    }\n\n    sum := 0\n    for _, v := range\
    \ q {\n        sum += v\n    }\n\n    if sum > w {\n        return false\n   \
    \ }\n\n    head := q[0]\n    tail := q[len(q)-1]\n    if head != tail {\n    \
    \    return false\n    }\n\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\nfunc\
    \ TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual:\
    \ candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
    \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n\
    \     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    var p []int\n    for i := 0; i < len(q); i++ {\n        p =\
    \ append(p, q[len(q)-i-1])\n    }\n    var sum int\n    for i := 0; i < len(q);\
    \ i++ {\n        sum += q[i]\n    }\n    return sum <= w && fmt.Sprint(q) == fmt.Sprint(p)\n\
    }\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    isPalindrome := false\n    var sum int = 0\n    for i, v :=\
    \ range q {\n        sum += v\n        if i >= len(q)/2 && q[i] == q[len(q)-i-1]\
    \ {\n            isPalindrome = true\n        }\n    }\n    return sum <= w &&\
    \ isPalindrome\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmprh8v14xe_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    if is_balanced(q) && is_less_than_max_weight(q, w) {\n    \
    \    return true\n    } else {\n        return false\n    }\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiggd1iso_test.go:20:8: undefined: is_balanced

    /tmp/tmpiggd1iso_test.go:20:26: undefined: is_less_than_max_weight

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // will_it_fly([1, 2], 5) \u279E False \n// # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279E False\n//\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3,\
    \ 2, 3], 9) \u279E True\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// will_it_fly([3], 5) \u279E True\n// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w\
    \ int) bool {\n    sum := 0\n    for _, v := range q {\n        sum += v\n   \
    \ }\n    fmt.Println(sum, w)\n    if sum <= w {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "8 9\n3 5\n3 5\n8 1\n6 6\n5 5\n--- FAIL: TestWill_It_Fly (0.00s)\n    ---\
    \ FAIL: TestWill_It_Fly/test_num__1 (0.00s)\n        tmp909jpddf_test.go:49: expected\
    \ '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmp909jpddf_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075141
