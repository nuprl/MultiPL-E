name: HumanEval_31_is_prime
language: go_test.go
prompt: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
  // False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
  // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
  // False\nfunc is_prime(n int) bool {\n"
tests: "func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
  \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
  \ candidate(13441), expected: true },\n     { actual: candidate(61), expected: true\
  \ },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
  \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
  \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
  \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
  \ expected: false },\n     { actual: candidate(255379), expected: false },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 2 {\n        return false\n    }\n    for i := 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "\tif n == 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i\
    \ < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n", "    if n == 1 {\n        return false\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if n <= 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if n <= 1 {\n        return\
    \ false\n    }\n    for i := 2; i <= n / 2; i++ {\n        if n % i == 0 {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "\tif n < 2\
    \ {\n\t\treturn false\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\
    \t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    if n < 1 {\n        return false\n    }\n    if n ==\
    \ 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n   \
    \ }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if n <= 1 {\n        return\
    \ false\n    }\n\n    if n == 2 {\n        return true\n    }\n\n    if n % 2\
    \ == 0 {\n        return false\n    }\n\n    for i := 3; i < n; i += 2 {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n", "    if n <= 1 {\n        return false\n    }\n    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    if n == 1 {\n        return false\n    }\n\n\
    \    if n == 2 {\n        return true\n    }\n\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n", "    if n == 1 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i := 3; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if n == 1 {\n        return false\n\
    \    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n", "  \
    \  if n < 2 {\n        return false\n    }\n    // Go through numbers, skipping\
    \ even numbers and only looking up to\n    // the square root of the number we're\
    \ checking.\n    for i := 3; i*i <= n; i += 2 {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n", "    for d :=\
    \ 2; d * d <= n; d++ {\n        if n % d == 0 {\n            return false\n  \
    \      }\n    }\n    return n > 1\n}\n", "    for i := 2; i < n; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n", "\tif n == 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t\
    }\n\tif n % 2 == 0 {\n\t\treturn false\n\t}\n\tfor i := 3; i <= n / 2; i += 2\
    \ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if n < 2 {\n        return false\n\
    \    }\n\n    // We only need to go as far as the sqrt of n, because anything\
    \ larger would have\n    // already been divisible by something smaller.\n   \
    \ i := 2\n    for i * i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 1\n    }\n\n    return true\n}\n", "    if n <= 1 {\n\
    \        return false\n    }\n\n    for i := 2; i <= n - 1; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
