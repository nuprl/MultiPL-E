name: HumanEval_67_fruit_distribution
language: go_test.go
prompt: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// In this task, you will be given a string that represents a number of apples\
  \ and oranges \n// that are distributed in a basket of fruit this basket contains\
  \ \n// apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n// the oranges and apples and an integer that represent the total\
  \ number of the fruits \n// in the basket return the number of the mango fruits\
  \ in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\"\
  , 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\
  \ - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2\
  \ - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100\
  \ - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n"
tests: "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
  \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
  \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n\
  \     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     {\
  \ actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual:\
  \ candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"\
  1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // Write your code here\n    return 0\n}\n", "    // Write your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n", "    // Write your code\
    \ here\n    return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", "\t// Write\
    \ your code here\n\treturn 0\n}\n", "    nums := make([]int, 0)\n    x := 0\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] >= '0' && s[i] <= '9' {\n\
    \            x = x * 10 + int(s[i] - '0')\n        } else {\n            nums\
    \ = append(nums, x)\n            x = 0\n        }\n    }\n    nums = append(nums,\
    \ x)\n    total := 0\n    for _, v := range nums {\n        total += v\n    }\n\
    \    return n - total\n}\n", "    return 0\n}\n", "\tfmt.Println(s, n)\n\treturn\
    \ 0\n}\n", "\tpanic(\"Not Implemented Yet\")\n}\n", "    var fruitLeft int = n\n\
    \    for i:=0; i<len(s); i++ {\n        if (s[i] == ' ') {\n            j := i\
    \ + 1\n            for s[j] != ' ' {\n                j++\n            }\n   \
    \         fruitLeft -= stringToInt(s[i+1:j])\n        }\n    }\n    return fruitLeft\n\
    }\n", "    res, r := 0, 0\n    format := \" apples and %d oranges\"\n    fmt.Sscanf(s,\
    \ format, &r)\n    res = n - r\n    fmt.Sscanf(s, \"%d\" + format, &r)\n    res\
    \ -= r\n    return res\n}\n", "    // Write your code here\n    count:=0\n   \
    \ for _,r := range s{\n        if r>=48 && r<=57{\n            count=count*10+(int(r)-48)\n\
    \        }\n    }\n    return n-count\n}\n", "    return 0\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    var apples, oranges int\n    count, _ :=\
    \ fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    if count\
    \ != 2 {\n        return 0\n    }\n    return n - apples - oranges\n}\n", "  \
    \  // your code here\n    return n\n}\n", "    s = s[len(s)-1:]\n\n    if s ==\
    \ \"o\" {\n        return n - 1\n    } else if s == \"p\" {\n        return n\
    \ - 1\n    } else {\n        return n\n    }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
