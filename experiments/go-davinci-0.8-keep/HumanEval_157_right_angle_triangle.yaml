name: HumanEval_157_right_angle_triangle
language: go_test.go
prompt: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunc right_angle_triangle(a int, b int, c int) bool {\n"
tests: "func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n   \
  \  { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
  \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false },\n\
  \     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
  \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
  \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
  \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
  \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Your code here\n    return false\n}\n", "    return a*a + b*b\
    \ == c*c\n}\n", "    return a*a + b*b == c*c\n}\n", "    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    nums := []int{a, b, c}\n    index\
    \ := 1\n    for i := 1; i < len(nums); i++ {\n        if nums[i] > nums[index]\
    \ {\n            index = i\n        }\n    }\n    a = nums[index]\n    nums =\
    \ append(nums[:index], nums[index+1:]...)\n    b = nums[0]\n    c = nums[1]\n\
    \    return a*a == b*b + c*c\n}\n", "    return a * a + b * b == c * c || b *\
    \ b + c * c == a * a || c * c + a * a == b * b\n}\n", "    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}\n", "    // your code here\n\
    \    return true\n}\n", "    return false\n}\n", "    // Write your code here.\n\
    \n    return false\n}\n", "    var tmp []int\n    tmp = append(tmp, a, b, c)\n\
    \    if tmp[0]*tmp[0]+tmp[1]*tmp[1] == tmp[2]*tmp[2] {\n        return true\n\
    \    }\n    return false\n}\n", "    var x, y, z int\n    if a > b {\n       \
    \ x = a\n        y = b\n    } else {\n        x = b\n        y = a\n    }\n  \
    \  if x > c {\n        z = x\n        x = c\n    } else {\n        z = c\n   \
    \ }\n    return x*x + y*y == z*z\n}\n", "    // Write your code here\n}\n", " \
    \   var hypo int\n    //find the largest side\n    if a > b && a > c {\n     \
    \   hypo = a\n    } else if b > a && b > c {\n        hypo = b\n    } else {\n\
    \        hypo = c\n    }\n    //hypotenuse\n    var x, y int\n    if hypo == a\
    \ {\n        x = b\n        y = c\n    } else if hypo == b {\n        x = a\n\
    \        y = c\n    } else {\n        x = a\n        y = b\n    }\n    if x*x\
    \ + y*y == hypo*hypo {\n        return true\n    }\n    return false\n}\n", " \
    \   return false\n}\n", "    if a*a + b*b == c*c {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n", "    if a == 0 || b == 0 || c ==\
    \ 0 {\n        return false\n    }\n    ls := []int{a, b, c}\n    max_idx := 0\n\
    \    for i := 1; i < len(ls); i++ {\n        if ls[i] > ls[max_idx] {\n      \
    \      max_idx = i\n        }\n    }\n    sum := 0\n    for i := 0; i < len(ls);\
    \ i++ {\n        if i != max_idx {\n            sum += ls[i] * ls[i]\n       \
    \ }\n    }\n    return ls[max_idx] * ls[max_idx] == sum\n}\n", "    // Fill this\
    \ in.\n    return true\n}\n", "    // your code here\n    return false\n}\n",
  "    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    if a >\
    \ b && a > c {\n        return a * a == b * b + c * c\n    }\n\n    if b > a &&\
    \ b > c {\n        return b * b == a * a + c * c\n    }\n\n    if c > a && c >\
    \ b {\n        return c * c == a * a + b * b\n    }\n\n    return false\n}\n",
  "    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a < 0\
    \ || b < 0 || c < 0 {\n        return false\n    }\n    if a*a + b*b == c*c {\n\
    \        return true\n    }\n    if a*a + c*c == b*b {\n        return true\n\
    \    }\n    if b*b + c*c == a*a {\n        return true\n    }\n    return false\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
