name: HumanEval_43_pairs_sum_to_zero
language: go_test.go
prompt: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns True\
  \ if there are two distinct elements in the list that\n// sum to zero, and False\
  \ otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
  // False\nfunc pairs_sum_to_zero(l []int) bool {\n"
tests: "func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
  \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
  \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
  \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
  \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n    \
  \ { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if l[i] + l[j] == 0 {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n", "    //TODO: Implement the\
    \ method\n    return false\n}\n", "    // create a hashset to store the elements\n\
    \    dict := make(map[int]bool)\n    for _, v := range l {\n        if _, ok :=\
    \ dict[-v]; ok {\n            return true\n        }\n        dict[v] = true\n\
    \    }\n    return false\n}\n", "    m := make(map[int]bool)\n    for _, n :=\
    \ range l {\n        if m[-n] {\n            return true\n        }\n        m[n]\
    \ = true\n    }\n    return false\n}\n", "    var pairs []pair\n    for i, v :=\
    \ range l {\n        for j, v1 := range l {\n            if j > i {\n        \
    \        pairs = append(pairs, pair{v, v1})\n            }\n        }\n    }\n\
    \    for _, p := range pairs {\n        if p.first + p.second == 0 {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\ntype pair ", "   \
    \ if len(l) == 0 {\n        return false\n    }\n\n    m := make(map[int]bool)\n\
    \    for _, e := range l {\n        if _, exists := m[-e]; exists {\n        \
    \    return true\n        }\n        m[e] = true\n    }\n    return false\n}\n",
  "    for i, x := range l {\n        for j, y := range l {\n            if i != j\
    \ && x + y == 0 {\n                return true\n            }\n        }\n   \
    \ }\n    return false\n}\n", "    for i, v := range l {\n        for j, u := range\
    \ l {\n            if i != j && v + u == 0 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n", "    for i, v := range\
    \ l {\n        for j, vv := range l {\n            if j == i {\n             \
    \   continue\n            }\n            if v + vv == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n", "    if len(l)\
    \ == 0 {\n        return false\n    }\n\n    // create a hash table\n    // ht\
    \ = {\n    //     'key': 'value',\n    //     2: 5,\n    //     3: 5,\n    //\
    \     -2: 3,\n    //     -5: 2,\n    //     5: 2,\n    //     -3: 1,\n    // \
    \    7: 1,\n    // }\n    ht := make(map[int]int)\n    for _, v := range l {\n\
    \        if _, ok := ht[v]; ok {\n            ht[v] += 1\n        } else {\n \
    \           ht[v] = 1\n        }\n    }\n\n    // Check every number in the input\
    \ list to see if\n    // it has a matching zero pair in the hash table.\n    for\
    \ _, v := range l {\n        if _, ok := ht[v]; ok {\n            // if it's v\
    \ itself, we need to check if\n            // the number of zeros are at least\
    \ 2.\n            if v == 0 {\n                if ht[v] >= 2 {\n             \
    \       return true\n                }\n            } else {\n               \
    \ if _, ok := ht[-v]; ok {\n                    return true\n                }\n\
    \            }\n        }\n    }\n\n    return false\n}\n", "    return false\n\
    }\n", "\treturn true\n}\n", "    for i, v := range l {\n        for j, w := range\
    \ l {\n            if i == j {\n                continue\n            }\n    \
    \        if v + w == 0 {\n                return true\n            }\n       \
    \ }\n    }\n    return false\n}\n", "    var dict map[int]bool = make(map[int]bool)\n\
    \    for _, elem := range l {\n        if dict[-elem] {\n            return true\n\
    \        }\n        dict[elem] = true\n    }\n    return false\n}\n", "    //\
    \ create a map of integers, if an integer is present in the map,\n    // it means\
    \ that its opposite is already present in the list\n    //\n    // 0: 2,\n   \
    \ // 1: 3,\n    // 2: 0,\n    // 3: 1,\n    // etc...\n    m := make(map[int]int)\n\
    \    for _, n := range l {\n        _, ok := m[n]\n        if ok {\n         \
    \   return true\n        }\n        m[-n] = n\n    }\n    return false\n}\n",
  "\tset := make(map[int]int)\n\tfor _, v := range l {\n\t\tset[v]++\n\t}\n\tfor _,\
    \ v := range l {\n\t\tif set[-v] > 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn\
    \ false\n}\n", "    if len(l) < 2 {\n        return false\n    }\n    hash :=\
    \ make(map[int]int)\n    for _, e := range l {\n        if _, ok := hash[e]; ok\
    \ {\n            return true\n        }\n        hash[-e] = e\n    }\n    return\
    \ false\n}\n", "    if len(l) <= 1 {\n        return false\n    }\n\n    d :=\
    \ make(map[int]int)\n    for _, num := range l {\n        if _, ok := d[num];\
    \ ok {\n            return true\n        } else {\n            d[-num] = 1\n \
    \       }\n    }\n    return false\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l {\n        target := 0 - v\n        if m[target] {\n       \
    \     return true\n        }\n        m[v] = true\n    }\n    return false\n}\n",
  "    // Create a map to speed up element lookup.\n    dict := make(map[int]"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
