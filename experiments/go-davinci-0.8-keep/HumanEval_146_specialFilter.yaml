name: HumanEval_146_specialFilter
language: go_test.go
prompt: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Write a function that takes an array of numbers as input and returns \n// the\
  \ number of elements in the array that are greater than 10 and both \n// first and\
  \ last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15,\
  \ -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunc specialFilter(nums\
  \ []int) int {\n"
tests: "func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n  \
  \   { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
  \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
  \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2,\
  \ -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
  \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for _, v := range nums {\n        if v > 10 &&\
    \ isOdd(abs(v / 10)) && isOdd(abs(v % 10)) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for _, num := range nums\
    \ {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    c := 0\n    for _, i := range\
    \ nums {\n        if first, last := i/10, i%10; i > 10 && (first%2 == 1) && (last%2\
    \ == 1) {\n            c++\n        }\n    }\n    return c\n}\n", "    return\
    \ 0\n}\n", "    var count int\n    for _, n := range nums {\n        r := n\n\
    \        var d1, d2 int\n        if n < 0 {\n            r = -r\n        }\n \
    \       d1 = r % 10\n        d2 = r / 10\n        if d1 % 2 == 1 && d2 % 2 ==\
    \ 1 && r > 10 {\n            count++\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for _, n := range nums {\n        if n > 10 && isFirstAndLastOdd(n)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var numsCount\
    \ int = 0\n    for _, v := range nums {\n        var i int = v\n        var j\
    \ int = v\n        if i > 10 {\n            if i % 2 != 0 {\n                for\
    \ j > 0 {\n                    if j < 10 {\n                        if j % 2 !=\
    \ 0 {\n                            numsCount = numsCount + 1\n               \
    \         }\n                        break\n                    }\n          \
    \          j = j / 10\n                }\n            }\n        }\n    }\n  \
    \  return numsCount\n}\n", "    count := 0\n    for _, num := range nums {\n \
    \       if num > 10 && num/10%2 != 0 && num%10%2 != 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, num :=\
    \ range nums {\n        first := num / 10 % 10\n        last := num % 10\n   \
    \     if num > 10 && (first%2 != 0 && last%2 != 0) {\n            count++\n  \
    \      }\n    }\n    return count\n}\n", "    var count int = 0\n    for _, v\
    \ := range nums {\n        if v > 10 && (v / 10) % 2 == 1 && v % 2 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n", "    // Write your\
    \ code here\n}\n", "    var count int\n    for _, num := range nums {\n      \
    \  last := num % 10\n        num = num / 10\n        first := num % 10\n     \
    \   if first % 2 != 0 && last % 2 != 0 && num > 10 {\n            count++\n  \
    \      }\n    }\n    return count\n}\n", "    return\n}\n", "    var result []int\n\
    \    for _, number := range nums {\n        if number % 2 != 0 && (number / 10)\
    \ % 2 != 0 && number % 10 != 0 {\n            result = append(result, number)\n\
    \        }\n    }\n    return len(result)\n}\n", "    counter := 0\n    for _,\
    \ num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            counter++\n        }\n    }\n    return counter\n}\n", "    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 &&\
    \ \n            num / 10 % 2 == 1 && num % 10 % 2 == 1 {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n", "    var count int\n    for _,\
    \ num := range nums {\n        if num > 10 && num%2 == 1 && num/10%2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, val := range nums {\n        if val > 10 && val%2 != 0 && val/10%2\
    \ != 0 {\n            count++\n        }\n    }\n    return count\n}\n", "   \
    \ var count int\n    for _, i := range nums {\n        if i > 10 && i/10%2 ==\
    \ 1 && i%10%2 == 1 {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
