name: HumanEval_36_fizz_buzz
language: go_test.go
prompt: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return the number of times the digit 7 appears in integers less than n which are\
  \ divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n\
  // >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n"
tests: "func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
  \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
  \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
  \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
  \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
  \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var s string\n    var i int\n    var x int\n    count := 0\n  \
    \  for i = 1; i < n; i++ {\n        s = fmt.Sprintf(\"%d\", i)\n        if (i\
    \ % 11 == 0) || (i % 13 == 0) {\n            for x = 0; x < len(s); x++ {\n  \
    \              if s[x] == '7' {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n", "    var count\
    \ int = 0\n    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 ==\
    \ 0) && has_digit(i, 7) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    i := 0\n    j := 0\n    sevenCount := 0\n    for i < n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            sevenCount += j\n        }\n     \
    \   j++\n        i++\n    }\n    return sevenCount\n}\n", "    // as we're checking\
    \ for divisibility by 11 or 13, we can initially check only multiples of 143\n\
    \    // if n < 143, no solution\n    if n < 143 {\n        return 0\n    }\n \
    \   // if n >=143, then there's at least 1 multiple of 143\n    cnt := 1\n   \
    \ // first multiple of 143 less than n\n    next := 143\n    for next < n {\n\
    \        cnt += check_sevens(next)\n        next += 143\n    }\n    return cnt\n\
    }\n", "    total := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n    \
    \            if c == '7' {\n                    total++\n                }\n \
    \           }\n        }\n    }\n    return total\n}\n", "    i := n\n    count\
    \ := 0\n    for {\n        if i <= 0 {\n            break\n        }\n       \
    \ for j := i; j > 0; j /= 10 {\n            if j % 10 == 7 {\n               \
    \ count++\n            }\n        }\n        i--\n    }\n    return count\n}\n",
  "    result := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n           \
    \     if c == '7' {\n                    result++\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    var count int = 0\n \
    \   for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n      \
    \      for d := i; d > 0; d /= 10 {\n                if d % 10 == 7 {\n      \
    \              count++\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n", "    var count = 0\n    var tmp = 0\n    for i := 1; i\
    \ < n; i++ {\n        if (i % 11 == 0) || (i % 13 == 0) {\n            tmp = i\n\
    \            for tmp > 0 {\n                if tmp % 10 == 7 {\n             \
    \       count++\n                }\n                tmp /= 10\n            }\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1; i\
    \ < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, s :=\
    \ range fmt.Sprintf(\"%d\", i) {\n                if s == '7' {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "\tvar result = 0\n\tfor i := 0; i < n; i++ {\n\t\tif (i % 11 ==\
    \ 0 || i % 13 == 0) && count7(i) > 0 {\n\t\t\tresult++\n\t\t}\n\t}\n\treturn result\n\
    }\n", "    var count int\n    for i := 1; i < n; i++ {\n        if (i % 11 ==\
    \ 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    // All numbers which are both divisible by 11 and\
    \ 13 are also divisible by 143\n    // so we can use 143 as the lowest common\
    \ multiple\n    // >>> 143 % 11\n    // 0\n    // >>> 143 % 13\n    // 0\n   \
    \ // >>> 143 % 7\n    // 1\n    // >>> 143 % 11 == 0 && 143 % 13 == 0\n    //\
    \ True\n    // >>> 143 % 11 == 0 && 143 % 13 == 0 && 143 % 7 == 0\n    // False\n\
    \    // >>> 143 % 11 == 0 || 143 % 13 == 0\n    // True\n    count := 0\n    for\
    \ i := 0; i < n; i++ {\n        if i % 143 == 0 {\n            continue\n    \
    \    } else if i % 11 == 0 || i % 13 == 0 {\n            count += count_7(i)\n\
    \        }\n    }\n    return count\n}\n", "    counter := 0\n    for i := 1;\
    \ i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            counter +=\
    \ count_sevens(i)\n        }\n    }\n    return counter\n}\n", "    var sum =\
    \ 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           for b := i; b > 0; b /= 10 {\n                if b % 10 == 7 {\n \
    \                   sum++\n                }\n            }\n        }\n    }\n\
    \    return sum\n}\n", "    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            c := 0\n            for\
    \ _, c := range fmt.Sprintf(\"%d\", i) {\n                if string(c) == \"7\"\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1; i < n; i++\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_digit(i, 7) {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n", "    var x, y, r\
    \ int\n    for i := 1; i < n; i++ {\n        x = i / 11\n        y = i / 13\n\
    \        if x * 11 == i {\n            r += count_7(x)\n        }\n        if\
    \ y * 13 == i {\n            r += count_7(y)\n        }\n    }\n    return r\n\
    }\n", "    var result int = 0\n    for i := 1; i < n; i++ {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                result++\n\
    \            }\n            if i / 10 == 7 {\n                result++\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    return -1\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
