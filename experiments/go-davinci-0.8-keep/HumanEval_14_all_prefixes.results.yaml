language: go_test.go
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    stringLen := len(myString)\n    allPrefixes := make([]string,\
    \ stringLen)\n    for i := 0; i < stringLen; i++ {\n        allPrefixes[i] = myString[:i+1]\n\
    \    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var out []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        out = append(out, myString[:i])\n    }\n    return out\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075134
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return nil\n    }\n\
    \    result := make([]string, len(myString))\n    for i, _ := range myString {\n\
    \        result[i] = myString[:i+1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 1; i <= len(myString);\
    \ i++ {\n        // This could be done with an append - but we wanted to demonstrate\n\
    \        // a different way to form a list\n        result = append(result, myString[:i])\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075134
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075134
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    // length of prefixes to look for\n    i := 0\n    myList\
    \ := []string{}\n    // loop while the length of the slice + the index is not\
    \ longer than the string\n    for i < len(myString) {\n        fmt.Println(i)\n\
    \        i += 1\n        fmt.Println(myString[:i])\n        myList = append(myList,\
    \ myString[:i])\n    }\n    return myList\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixSlice := make([]string, 1)\n    // Initialize\
    \ the first element in the slice with an empty string\n    prefixSlice[0] = \"\
    \"\n    for _, v := range myString {\n        // fmt.Println(string(v))\n    \
    \    thisPrefix := prefixSlice[len(prefixSlice)-1] + string(v)\n        prefixSlice\
    \ = append(prefixSlice, thisPrefix)\n    }\n    return prefixSlice\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpw0qb7o0j_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpw0qb7o0j_test.go:38: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    length := len(myString)\n    result := make([]string,\
    \ length)\n    for i := 0; i < length; i++ {\n        result[i] = myString[:i+1]\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n\tvar result []string\n\t\n\tfor i := 0; i < len(myString);\
    \ i++ {\n\t\tresult = append(result, myString[:i+1])\n\t}\n\t\n\treturn result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n    var prefixes []string\n    for index := 0; index < len(myString);\
    \ index++ {\n        prefixes = append(prefixes, myString[:index+1])\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075134
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var s []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        s = append(s, myString[:i])\n    }\n    return s\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n\n    // Build result\n    for\
    \ i := 1; i <= len(myString); i++ {\n        result = append(result, myString[:i])\n\
    \    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    length := len(myString)\n    // Empty slice to build\
    \ list of string prefixes\n    var myPrefixes []string\n    // Loop through all\
    \ the prefixes, from shortest to longest\n    for i := 1; i <= length; i++ {\n\
    \        // Add to the end of the slice\n        myPrefixes = append(myPrefixes,\
    \ myString[:i])\n    }\n    return myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix_set := make([]string, 0)\n    for i := 1; i <=\
    \ len(myString); i++ {\n        prefix_set = append(prefix_set, myString[:i])\n\
    \    }\n    return prefix_set\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    myList := []string{}\n    for i:=1; i<=len(myString);\
    \ i++ {\n        myList = append(myList, myString[:i])\n    }\n    return myList\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    numPrefixes := len(myString)\n    allPrefixes := make([]string,\
    \ numPrefixes)\n    for i := 0; i < numPrefixes; i++ {\n        allPrefixes[i]\
    \ = myString[:i+1]\n    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075230
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    length := len(myString)\n    if length == 0 {\n    \
    \    return []string{}\n    }\n    prefixes := make([]string, length)\n    for\
    \ i := 0; i < length; i++ {\n        prefixes[i] = myString[:i+1]\n    }\n   \
    \ return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075230
