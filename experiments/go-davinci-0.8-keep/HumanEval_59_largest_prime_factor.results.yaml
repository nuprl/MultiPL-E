language: go_test.go
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var largest int\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     n /= i\n            for n % i == 0 {\n                n /= i\n         \
    \   }\n        }\n    }\n    return largest\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    divisor := 2\n    largest :=\
    \ 0\n    if n < 2 {\n        return 0\n    }\n    for n > 1 {\n        if n %\
    \ divisor == 0 {\n            largest = divisor\n            n /= divisor\n  \
    \      } else {\n            divisor += 1\n        }\n    }\n    return largest\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbratz3kj_test.go:39: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbratz3kj_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbratz3kj_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbratz3kj_test.go:39:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbratz3kj_test.go:39: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075188
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var ret int\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            ret = i\n            // n\
    \ /= i\n            n = n / i\n            i--\n        }\n    }\n    return ret\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk7g7wkj__test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpk7g7wkj__test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpk7g7wkj__test.go:43: expected '%!s(int=11)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpk7g7wkj__test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=13)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    ret := 0\n    for i := 2; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            ret = i\n            n /=\
    \ i\n            i = 1\n        }\n    }\n    return ret\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075414
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    // Get the prime factorization\
    \ of n.\n    var pf = factorize(n)\n\n    // Return the largest prime factor.\n\
    \    return pf[len(pf) - 1]\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngsp53l5_test.go:15:14: undefined: factorize

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var largest int\n    for i :=\
    \ 1; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     n = n / i\n            i = 1\n        }\n    }\n    return largest\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    factor := 2\n    for i := 2;\
    \ i <= n; i++ {\n        for n % i == 0 {\n            factor = i\n          \
    \  n /= i\n        }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075414
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    max := 0\n    for i := 2; i\
    \ <= n; i++ {\n        if is_prime(i) && n % i == 0 {\n            max = i\n \
    \       }\n    }\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tkgegf8_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var largest_prime int = 1\n\
    \    if n % 2 == 0 {\n        largest_prime = 2\n        for n % 2 == 0 {\n  \
    \          n /= 2\n        }\n    }\n    for i := 3; i <= n; i += 2 {\n      \
    \  if n % i == 0 {\n            largest_prime = i\n            for n % i == 0\
    \ {\n                n /= i\n            }\n        }\n    }\n    return largest_prime\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp9pl6wjeh_test.go:34: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp9pl6wjeh_test.go:34:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp9pl6wjeh_test.go:34: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp9pl6wjeh_test.go:34:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp9pl6wjeh_test.go:34: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    // Start with the first prime.\n\
    \    largest_prime := 2\n    for n > largest_prime {\n        // If n is divisible\
    \ by largest_prime, divide it out.\n        if n % largest_prime == 0 {\n    \
    \        n /= largest_prime\n        } else {\n            // If n is not divisible\
    \ by largest_prime, then it must be a\n            // multiple of some other prime.\
    \ Find the next prime to check.\n            largest_prime = next_prime(largest_prime)\n\
    \        }\n    }\n    return largest_prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6q1cefi_test.go:23:29: undefined: next_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var factor, largest int\n  \
    \  for factor = 2; factor < n / 2; factor++ {\n        if n % factor == 0 {\n\
    \            largest = factor\n            n /= factor\n            factor = 1\n\
    \        }\n    }\n    if n != 1 {\n        largest = n\n    }\n    return largest\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var factor = 2\n    for n >\
    \ 1 {\n        for n % factor == 0 {\n            n /= factor\n        }\n   \
    \     factor++\n    }\n    return factor - 1\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    var max int\n    if n % 2 ==\
    \ 0 {\n        max = 2\n        n /= 2\n    }\n    if n % 3 == 0 {\n        max\
    \ = 3\n        n /= 3\n    }\n    for x := 5; x * x <= n; x += 6 {\n        if\
    \ n % x == 0 {\n            max = x\n            n /= x\n        }\n        if\
    \ n % (x + 2) == 0 {\n            max = x + 2\n            n /= x + 2\n      \
    \  }\n    }\n    if n > max {\n        max = n\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpolent4g4_test.go:56: expected '%!s(int=3)', got '%!s(int=9)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpolent4g4_test.go:56:\
    \ expected '%!s(int=7)', got '%!s(int=21)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    factors := [2]int{}\n    idx\
    \ := 0\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors[idx]\
    \ = i\n            idx++\n            n /= i\n        }\n    }\n    return factors[idx\
    \ - 1]\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: index\
    \ out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out\
    \ of range [2] with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmp8wi9v038_test.go:18\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmp8wi9v038_test.go:34\
    \ +0x553\ntesting.tRunner(0xc000199040, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    result := 2\n    for n % 2 ==\
    \ 0 {\n        n /= 2\n    }\n    if n == 1 {\n        return result\n    }\n\
    \    for result = 3; result < n; result += 2 {\n        for n % result == 0 {\n\
    \            n /= result\n        }\n        if n == 1 {\n            return result\n\
    \        }\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075414
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    i := 2\n    for n > 1 {\n  \
    \      if n % i == 0 {\n            n /= i\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    // TODO\n    return 0\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptx3l4j1p_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptx3l4j1p_test.go:35:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptx3l4j1p_test.go:35: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptx3l4j1p_test.go:35:\
    \ expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptx3l4j1p_test.go:35: expected '%!s(int=29)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    max_prime := 0\n    if (n %\
    \ 2 == 0) {\n        max_prime = 2\n        n = n / 2\n    }\n\n    p := 3\n \
    \   for p <= n {\n        if (n % p == 0) {\n            max_prime = p\n     \
    \       n = n / p\n        } else {\n            p += 2\n        }\n    }\n\n\
    \    return max_prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075414
