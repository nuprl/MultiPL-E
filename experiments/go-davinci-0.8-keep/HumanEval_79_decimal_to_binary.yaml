name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)\
  \   # returns \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", " \
    \   return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // Initialize the result\
    \ as an empty string\n    result := \"\"\n    // While the decimal is greater\
    \ than 0, divide it by 2 and make a string out of the remainder\n    for decimal\
    \ > 0 {\n        if decimal % 2 == 0 {\n            result = \"0\" + result\n\
    \        } else {\n            result = \"1\" + result\n        }\n        decimal\
    \ /= 2\n    }\n    // After we are done with the loop, we add the \"db\" to the\
    \ front and end of the string\n    return \"db\" + result + \"db\"\n}\n", "  \
    \  if decimal < 0 {\n        return fmt.Sprintf(\"Error: negative numbers not\
    \ supported\")\n    }\n\n    if decimal == 0 {\n        return \"db0db\"\n   \
    \ }\n\n    result := \"db\"\n    for decimal > 0 {\n        if decimal % 2 ==\
    \ 0 {\n            result = fmt.Sprintf(\"%c%s\", '0', result)\n        } else\
    \ {\n            result = fmt.Sprintf(\"%c%s\", '1', result)\n        }\n    \
    \    decimal /= 2\n    }\n    result += \"db\"\n    return result\n}\n", "   \
    \ a := fmt.Sprintf(\"%b\", decimal)\n    return \"db\" + a + \"db\"\n}\n", " \
    \   return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%vdb\", fmt.Sprintf(\"%b\", decimal))\n}\n", "    str\
    \ := \"\"\n    for decimal > 0 {\n        str = fmt.Sprintf(\"%d%s\", decimal\
    \ % 2, str)\n        decimal /= 2\n    }\n    str = fmt.Sprintf(\"db%sdb\", str)\n\
    \    return str\n}\n", "    var result string\n    for decimal > 0 {\n       \
    \ result = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n        decimal /= 2\n\
    \    }\n    return fmt.Sprintf(\"db%sdb\", result)\n}\n", "    if decimal == 0\
    \ {\n        return \"db0db\"\n    }\n\n    var result string\n    for decimal\
    \ > 0 {\n        binary := decimal % 2\n        result = fmt.Sprintf(\"%d%s\"\
    , binary, result)\n        decimal = decimal / 2\n    }\n\n    return fmt.Sprintf(\"\
    db%sdb\", result)\n}\n", "    binary := \"db\"\n    for decimal > 0 {\n      \
    \  if decimal % 2 == 0 {\n            binary = \"0\" + binary\n        } else\
    \ {\n            binary = \"1\" + binary\n        }\n        decimal /= 2\n  \
    \  }\n    return binary + \"db\"\n}\n", "    binary := \"\"\n    for decimal >\
    \ 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal\
    \ /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "\t// TODO: implement\
    \ me\n\treturn \"\"\n}\n", "    if decimal <= 0 {\n        return \"db0db\"\n\
    \    }\n\n    var bin string\n    for decimal > 0 {\n        bin = fmt.Sprintf(\"\
    %d%s\", decimal % 2, bin)\n        decimal /= 2\n    }\n\n    return fmt.Sprintf(\"\
    db%sdb\", bin)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "  \
    \  var res string\n    if decimal == 0 {\n        return \"db0db\"\n    }\n  \
    \  for decimal > 0 {\n        if decimal % 2 == 0 {\n            res = fmt.Sprintf(\"\
    %v%v\", res, \"0\")\n        } else {\n            res = fmt.Sprintf(\"%v%v\"\
    , res, \"1\")\n        }\n        decimal = decimal / 2\n    }\n    res = fmt.Sprintf(\"\
    db%vdb\", res)\n    return res\n}\n", "    return \"db\" + fmt.Sprintf(\"%b\"\
    , decimal) + \"db\"\n}\n", "    binary := \"\"\n    for {\n        if decimal\
    \ == 0 {\n            break\n        }\n        binary = fmt.Sprintf(\"%d%s\"\
    , decimal % 2, binary)\n        decimal = decimal / 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
