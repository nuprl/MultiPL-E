{
  "name": "HumanEval_139_special_factorial",
  "language": "php",
  "prompt": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n",
  "tests": "function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtsdas4f.php:25\nStack trace:\n#0 /tmp/tmpvtsdas4f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvtsdas4f.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsv0tiii.php:23\nStack trace:\n#0 /tmp/tmptsv0tiii.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptsv0tiii.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n <= 0) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2edk8yjh.php:26\nStack trace:\n#0 /tmp/tmp2edk8yjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2edk8yjh.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzgx3oe_.php:28\nStack trace:\n#0 /tmp/tmpqzgx3oe_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqzgx3oe_.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 6;\n    }\n    if ($n == 4) {\n        return 24;\n    }\n    if ($n == 5) {\n        return 120;\n    }\n    if ($n == 6) {\n        return 720;\n    }\n    if ($n == 7) {\n        return 5040;\n    }\n    if ($n == 8) {\n        return 40320;\n    }\n    if ($n == 9) {\n        return 362880;\n    }\n    if ($n == 10) {\n        return 3628800;\n    }\n    if ($n == 11) {\n        return 39916800;\n    }\n    if ($n == 12) {\n        return 479001600;\n    }\n    if ($n == 13) {\n        return 6227020800;\n    }\n    if ($n == 14) {\n        return 87178291200;\n    }\n    if ($n == 15) {\n        return 1307674368000;\n    }\n    if ($n == 16) {\n        return 20922789888000;\n    }\n    if ($n == 17) {\n        return 355687428096000;\n    }\n    if ($n == 18) {\n        return 6402373705728000;\n    }\n    if ($n == 19) {\n        return 121645100408832000;\n    }\n    if ($n == 20) {\n        return 2432902008176640000;\n    }\n    if ($n == 21) {\n        return 51090942171709440000;\n    }\n    if ($n == 22) {\n        return 1124000727777607680000;\n    }\n    if ($n == 23) {\n        return 25852016738884976640000;\n    }\n    if ($n == 24) {\n        return 6204484017\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmp2iosuesw.php on line 88\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    } else if ($n == 0) {\n        return 1;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt63ndzu7.php:25\nStack trace:\n#0 /tmp/tmpt63ndzu7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt63ndzu7.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1yb5ybq.php:25\nStack trace:\n#0 /tmp/tmpt1yb5ybq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt1yb5ybq.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmodayjv.php:22\nStack trace:\n#0 /tmp/tmpkmodayjv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkmodayjv.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1yb5ybq.php:25\nStack trace:\n#0 /tmp/tmpt1yb5ybq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt1yb5ybq.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_dd73us.php:26\nStack trace:\n#0 /tmp/tmp4_dd73us.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4_dd73us.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_dd73us.php:26\nStack trace:\n#0 /tmp/tmp4_dd73us.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4_dd73us.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro_i5wzj.php:25\nStack trace:\n#0 /tmp/tmpro_i5wzj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpro_i5wzj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_dd73us.php:26\nStack trace:\n#0 /tmp/tmp4_dd73us.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4_dd73us.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrg2vkgs.php:26\nStack trace:\n#0 /tmp/tmpbrg2vkgs.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbrg2vkgs.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro_i5wzj.php:25\nStack trace:\n#0 /tmp/tmpro_i5wzj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpro_i5wzj.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_dd73us.php:26\nStack trace:\n#0 /tmp/tmp4_dd73us.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4_dd73us.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba50uvtg.php:28\nStack trace:\n#0 /tmp/tmpba50uvtg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpba50uvtg.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk8v3jln.php:26\nStack trace:\n#0 /tmp/tmppk8v3jln.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppk8v3jln.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 6;\n    }\n    if ($n == 4) {\n        return 24;\n    }\n    if ($n == 5) {\n        return 120;\n    }\n    if ($n == 6) {\n        return 720;\n    }\n    if ($n == 7) {\n        return 5040;\n    }\n    if ($n == 8) {\n        return 40320;\n    }\n    if ($n == 9) {\n        return 362880;\n    }\n    if ($n == 10) {\n        return 3628800;\n    }\n    if ($n == 11) {\n        return 39916800;\n    }\n    if ($n == 12) {\n        return 479001600;\n    }\n    if ($n == 13) {\n        return 6227020800;\n    }\n    if ($n == 14) {\n        return 87178291200;\n    }\n    if ($n == 15) {\n        return 1307674368000;\n    }\n    if ($n == 16) {\n        return 20922789888000;\n    }\n    if ($n == 17) {\n        return 355687428096000;\n    }\n    if ($n == 18) {\n        return 6402373705728000;\n    }\n    if ($n == 19) {\n        return 121645100408832000;\n    }\n    if ($n == 20) {\n        return 2432902008176640000;\n    }\n    if ($n == 21) {\n        return 51090942171709440000;\n    }\n    if ($n == 22) {\n        return 1124000727777607680000;\n    }\n    if ($n == 23) {\n        return 25852016738884976640000;\n    }\n    if ($n == 24) {\n        return 6204484017\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmpavsy683x.php on line 88\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 6;\n    }\n    if ($n == 4) {\n        return 24;\n    }\n    if ($n == 5) {\n        return 120;\n    }\n    if ($n == 6) {\n        return 720;\n    }\n    if ($n == 7) {\n        return 5040;\n    }\n    if ($n == 8) {\n        return 40320;\n    }\n    if ($n == 9) {\n        return 362880;\n    }\n    if ($n == 10) {\n        return 3628800;\n    }\n    if ($n == 11) {\n        return 39916800;\n    }\n    if ($n == 12) {\n        return 479001600;\n    }\n    if ($n == 13) {\n        return 6227020800;\n    }\n    if ($n == 14) {\n        return 87178291200;\n    }\n    if ($n == 15) {\n        return 1307674368000;\n    }\n    if ($n == 16) {\n        return 20922789888000;\n    }\n    if ($n == 17) {\n        return 355687428096000;\n    }\n    if ($n == 18) {\n        return 6402373705728000;\n    }\n    if ($n == 19) {\n        return 121645100408832000;\n    }\n    if ($n == 20) {\n        return 2432902008176640000;\n    }\n    if ($n == 21) {\n        return 51090942171709440000;\n    }\n    if ($n == 22) {\n        return 1124000727777607680000;\n    }\n    if ($n == 23) {\n        return 25852016738884976640000;\n    }\n    if ($n == 24) {\n        return 6204484017\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmpavsy683x.php on line 88\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if (is_int($n) && $n > 0) {\n        $factorial = 1;\n        for ($i = 1; $i <= $n; $i++) {\n            $factorial *= $i;\n        }\n        return $factorial;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsy66am6l.php:27\nStack trace:\n#0 /tmp/tmpsy66am6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsy66am6l.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtsdas4f.php:25\nStack trace:\n#0 /tmp/tmpvtsdas4f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvtsdas4f.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmqd__v9.php:26\nStack trace:\n#0 /tmp/tmppmqd__v9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmqd__v9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return false;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 6;\n    }\n    if ($n == 4) {\n        return 24;\n    }\n    if ($n == 5) {\n        return 120;\n    }\n    if ($n == 6) {\n        return 720;\n    }\n    if ($n == 7) {\n        return 5040;\n    }\n    if ($n == 8) {\n        return 40320;\n    }\n    if ($n == 9) {\n        return 362880;\n    }\n    if ($n == 10) {\n        return 3628800;\n    }\n    if ($n == 11) {\n        return 39916800;\n    }\n    if ($n == 12) {\n        return 479001600;\n    }\n    if ($n == 13) {\n        return 6227020800;\n    }\n    if ($n == 14) {\n        return 87178291200;\n    }\n    if ($n == 15) {\n        return 1307674368000;\n    }\n    if ($n == 16) {\n        return 20922789888000;\n    }\n    if ($n == 17) {\n        return 355687428096000;\n    }\n    if ($n == 18) {\n        return 6402373705728000;\n    }\n    if ($n == 19) {\n        return 121645100408832000;\n    }\n    if ($n == 20) {\n        return 2432902008176640000;\n    }\n    if ($n == 21) {\n        return 51090942171709440000;\n    }\n    if ($n == 22) {\n        return 1124000727777607680000;\n    }\n    if ($n == 23) {\n        return 25852016738884976640000;\n    }\n    if ($n == 24) {\n        return 6204484017\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmpavsy683x.php on line 88\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwtgnjuh.php:25\nStack trace:\n#0 /tmp/tmppwtgnjuh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppwtgnjuh.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ya6j566.php:23\nStack trace:\n#0 /tmp/tmp2ya6j566.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2ya6j566.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 0) {\n        return 0;\n    } else if ($n == 0) {\n        return 1;\n    } else {\n        return $n * special_factorial($n - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt63ndzu7.php:25\nStack trace:\n#0 /tmp/tmpt63ndzu7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt63ndzu7.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293346,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymyicfof.php:26\nStack trace:\n#0 /tmp/tmpymyicfof.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpymyicfof.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}