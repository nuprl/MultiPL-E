{
  "name": "HumanEval_87_get_row",
  "language": "php",
  "prompt": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n",
  "tests": "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col = 0;\n    $result_row = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpd9crqgop.php on line 73\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst, 1);\n    $lst = array_flip($lst, 2);\n    $lst = array_flip($lst, 3);\n    $lst = array_flip($lst, 4);\n    $lst = array_flip($lst, 5);\n    $lst = array_flip($lst, 6);\n    $lst = array_flip($lst, 7);\n    $lst = array_flip($lst, 8);\n    $lst = array_flip($lst, 9);\n    $lst = array_flip($lst, 10);\n    $lst = array_flip($lst, 11);\n    $lst = array_flip($lst, 12);\n    $lst = array_flip($lst, 13);\n    $lst = array_flip($lst, 14);\n    $lst = array_flip($lst, 15);\n    $lst = array_flip($lst, 16);\n    $lst = array_flip($lst, 17);\n    $lst = array_flip($lst, 18);\n    $lst = array_flip($lst, 19);\n    $lst = array_flip($lst, 20);\n    $lst = array_flip($lst, 21);\n    $lst = array_flip($lst, 22);\n    $lst = array_flip($lst, 23);\n    $lst = array_flip($lst, 24);\n    $lst = array_flip($lst, 25);\n    $lst = array_flip($lst, 26);\n    $lst = array_flip($lst, 27);\n    $lst = array_flip($lst, 28);\n    $lst = array_flip($lst, 29);\n    $lst = array_flip($lst, 30);\n    $lst = array_flip($lst, 31);\n    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpp0tekwxq.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpazxg6ey1.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    if ($lst === null || $lst === undefined) {\n        return [];\n    }\n    if ($x === null || $x === undefined) {\n        return [];\n    }\n    if ($lst.length === 0) {\n        return [];\n    }\n    var $coordinates = [];\n    for (var $i = 0; $i < $lst.length; $i++) {\n        $coordinates.push(get_coordinates($lst[$i], $x));\n    }\n    $coordinates.sort(function ($a, $b) {\n        if ($a[0] < $b[0]) {\n            return -1;\n        }\n        if ($a[0] > $b[0]) {\n            return 1;\n        }\n        if ($a[1] < $b[1]) {\n            return 1;\n        }\n        if ($a[1] > $b[1]) {\n            return -1;\n        }\n        return 0;\n    });\n    $coordinates.sort(function ($a, $b) {\n        if ($a[1] < $b[1]) {\n            return 1;\n        }\n        if ($a[1] > $b[1]) {\n            return -1;\n        }\n        if ($a[0] < $b[0]) {\n            return 1;\n        }\n        if ($a[0] > $b[0]) {\n            return -1;\n        }\n        return 0;\n    });\n    return $coordinates;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpt2totlig.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpptvavetb.php on line 74\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_max = 0;\n    $result_col_index_max_max_max = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpwu5hefjb.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_row = 0;\n    $result_row_count_min_index_row = 0;\n    $result_row_count_max_index_col = 0;\n    $result_row_count_min_index_col = 0;\n    $result_row_count_max_index_col_row = 0;\n    $result_row_count_min_index_col_row = 0;\n    $result_row_count_max_index_col_col = 0;\n    $result_row_count_min_index_col_col_row = 0;\n    $result_row_count_max_index_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpupng62zz.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $row;\n                $result_col = $col;\n                break;\n            }\n        }\n    }\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row = $result_row[0];\n    $result_col = $result_col[0];\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index -\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp7byukt8h.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps6wmmx5n.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $x) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < count($row)) {\n            $result[$j] = array($i, $row[$j]);\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q9o1bx9.php:37\nStack trace:\n#0 /tmp/tmp3q9o1bx9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3q9o1bx9.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_max = 0;\n    $result_col_index_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplbax0n0n.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    $result = array_sort($result, function ($a, $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n        } else if ($a[0] < $b[0]) {\n            return -1;\n        } else {\n            return $a[1] > $b[1] ? 1 : -1;\n        }\n    });\n    $result = array_filter($result, function ($a) {\n        return $a[0] == $x;\n    });\n    $result = array_sort($result, function ($a, $b) {\n        if ($a[1] > $b[1]) {\n            return 1;\n        } else if ($a[1] < $b[1]) {\n            return -1;\n        } else {\n            return $a[0] > $b[0] ? 1 : -1;\n        }\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp9afiti0c.php:25\nStack trace:\n#0 /tmp/tmp9afiti0c.php(50): get_row(Array, 1)\n#1 /tmp/tmp9afiti0c.php(54): candidate(Array, 1)\n#2 /tmp/tmp9afiti0c.php(62): test()\n#3 {main}\n  thrown in /tmp/tmp9afiti0c.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphsj3wvxy.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_row_index = 0;\n    $result_row_index_count = 0;\n    $result_row_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index_index_index_index_index_count = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpc9iavssi.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for (var $i = 0; $i < $lst.length; $i++) {\n        $row = $lst[$i];\n        for (var $j = 0; $j < $row.length; $j++) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n        }\n    }\n    $result.sort(function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for (var $i = 0; $i < $result.length; $i++) {\n        $result[$i] = $result[$i][0] + $result[$i][1];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"var\", expecting \";\" in /tmp/tmp0064mmj0.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $lst_len = count($lst);\n    if ($lst_len == 0) {\n        return $result;\n    }\n    $lst_len = count($lst[0]);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[0][$i];\n        $result.push(array(0, $i));\n        for ($j = 1; $j < $lst_len; $j++) {\n            $col = $lst[$j][$i];\n            if ($col > $row) {\n                $row = $col;\n                $result[$i] = array(0, $j);\n            }\n        }\n    }\n    $result.sort(function ($a, $b) {\n        return $a[1] > $b[1];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[0] > $b[0];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[1] < $b[1];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[0] < $b[0];\n    });\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[0][$i];\n        $result.push(array($row, $result[$i][1]));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function push() in /tmp/tmpnbovr_n9.php:26\nStack trace:\n#0 /tmp/tmpnbovr_n9.php(55): get_row(Array, 1)\n#1 /tmp/tmpnbovr_n9.php(59): candidate(Array, 1)\n#2 /tmp/tmpnbovr_n9.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpnbovr_n9.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $x) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < count($row)) {\n            $result[$j] = array($i, $row[$j]);\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q9o1bx9.php:37\nStack trace:\n#0 /tmp/tmp3q9o1bx9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3q9o1bx9.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpgls0zy4d.php:19\nStack trace:\n#0 /tmp/tmpgls0zy4d.php(33): get_row(Array, 1)\n#1 /tmp/tmpgls0zy4d.php(37): candidate(Array, 1)\n#2 /tmp/tmpgls0zy4d.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgls0zy4d.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col_count_prev = 0;\n    $result_col_count_prev_prev = 0;\n    $result_col_count_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpq_j4waqz.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_max_min_min = 0;\n    $result_col_index_min_max_min_min = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_max_min_min_min = 0;\n    $result_col_index_min_max_min_min_min = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_max_min_min_min_min = 0;\n    $result_col_index_min_max_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpte1n86v4.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpgls0zy4d.php:19\nStack trace:\n#0 /tmp/tmpgls0zy4d.php(33): get_row(Array, 1)\n#1 /tmp/tmpgls0zy4d.php(37): candidate(Array, 1)\n#2 /tmp/tmpgls0zy4d.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgls0zy4d.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps6wmmx5n.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpgls0zy4d.php:19\nStack trace:\n#0 /tmp/tmpgls0zy4d.php(33): get_row(Array, 1)\n#1 /tmp/tmpgls0zy4d.php(37): candidate(Array, 1)\n#2 /tmp/tmpgls0zy4d.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgls0zy4d.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_prev = 0;\n    $result_row_count_min_index_prev = 0;\n    $result_row_count_max_index_next = 0;\n    $result_row_count_min_index_next = 0;\n    $result_row_count_max_index_prev_prev = 0;\n    $result_row_count_min_index_prev_prev = 0;\n    $result_row_count_max_index_next_next = 0;\n    $result_row_count_min_index_next_next = 0;\n    $result_row_count_max_index_prev_next = 0;\n    $result_row_count_min_index_prev_next = 0;\n    $result_row_count_max_index_prev_next_prev = 0;\n    $result_row_count_min_index_prev_next_prev = 0;\n    $result_row_count_max_index_prev_next_next = 0;\n    $result_row_count_min_index_prev_next_next = 0;\n    $result_row_count_max_index_prev_next_next_prev = 0;\n    $result_row_count_min_index_prev_next_next_prev = 0;\n    $result_row_count_max_index_prev_next_next_next = 0;\n    $result_row_count_min_index_prev_next_next_next = 0;\n    $result_row_count_max_index_prev_next_next_next_prev = 0;\n    $result_row_count_min_index_prev_next_next_next_prev = 0;\n    $result_row_count_max_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3ejvxley.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpx0_nj377.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_prev = 0;\n    $result_row_count_min_index_prev = 0;\n    $result_row_count_max_index_prev_prev = 0;\n    $result_row_count_min_index_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1n2eee1w.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_col_count = 0;\n    $result_row_count = 0;\n    $result_col_index = 0;\n    $result_row_index = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max_index = 0;\n    $result_row_index_count_max_index = 0;\n    $result_col_index_count_min_index = 0;\n    $result_row_index_count_min_index = 0;\n    $result_col_index_count_max_index = 0;\n    $result_row_index_count_max_index = 0;\n    $result_col_index_count_min_index = 0;\n    $result_row_index_count_min_index = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max_index = 0;\n    $result_row_index_count_max_index = 0;\n    $result_col_index_count_min_index = 0;\n    $result_row_index_count_min_index = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max_index = 0;\n    $result_row_index_count_max_index = 0;\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp0hgebpyb.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col_count_max = 0;\n    $result_col_count_min = 0;\n    $result_col_count_max_row = 0;\n    $result_col_count_min_row = 0;\n    $result_col_count_max_col = 0;\n    $result_col_count_min_col = 0;\n    $result_col_count_max_row_col = 0;\n    $result_col_count_min_row_col = 0;\n    $result_col_count_max_row_col_count = 0;\n    $result_col_count_min_row_col_count = 0;\n    $result_col_count_max_row_col_count_count = 0;\n    $result_col_count_min_row_col_count_count = 0;\n    $result_col_count_max_row_col_count_count_count = 0;\n    $result_col_count_min_row_col_count_count_count = 0;\n    $result_col_count_max_row_col_count_count_count_count = 0;\n    $result_col_count_min_row_col_count_count_count_count_count = 0;\n    $result_col_count_max_row_col_count_count_count_count_count_count = 0;\n    $result_col_count_min_row_col_count_count_count_count_count_count_count = 0;\n    $result_col_count_max_row_col_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_min_row_col_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_max_row_col_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_min_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp52ai3f5_.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp6wl4eo6o.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i][0] = $i;\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][$i]; $j++) {\n            $result[$i][$j] = $lst[$j][$i];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        sort($result[$i]);\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][$i]; $j++) {\n            if ($result[$i][$j] == $x) {\n                return $result;\n            }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0bxf9ss.php:47\nStack trace:\n#0 /tmp/tmps0bxf9ss.php(55): test()\n#1 {main}\n  thrown in /tmp/tmps0bxf9ss.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpe5q_ota_.php:20\nStack trace:\n#0 /tmp/tmpe5q_ota_.php(41): get_row(Array, 1)\n#1 /tmp/tmpe5q_ota_.php(45): candidate(Array, 1)\n#2 /tmp/tmpe5q_ota_.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpe5q_ota_.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col_count_max = 0;\n    $result_col_count_min = 0;\n    $result_col_count_max_index = 0;\n    $result_col_count_min_index = 0;\n    $result_col_count_max_index_row = 0;\n    $result_col_count_min_index_row = 0;\n    $result_col_count_max_index_col = 0;\n    $result_col_count_min_index_col = 0;\n    $result_col_count_max_index_row_col = 0;\n    $result_col_count_min_index_row_col = 0;\n    $result_col_count_max_index_row_col_max = 0;\n    $result_col_count_min_index_row_col_min = 0;\n    $result_col_count_max_index_row_col_max_index = 0;\n    $result_col_count_min_index_row_col_min_index = 0;\n    $result_col_count_max_index_row_col_max_index_row = 0;\n    $result_col_count_min_index_row_col_min_index_row = 0;\n    $result_col_count_max_index_row_col_max_index_col = 0;\n    $result_col_count_min_index_row_col_min_index_col = 0;\n    $result_col_count_max_index_row_col_max_index_row_col = 0;\n    $result_col_count_min_index_row_col_min_index_row_col = 0;\n    $result_col_count_max_index_row_col_max_index_row_col_max = 0;\n    $result_col_count_min_index_row_col_min_index_row_col_min = 0;\n    $result_col_count_max_index_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpj_lhlwxb.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpe5q_ota_.php:20\nStack trace:\n#0 /tmp/tmpe5q_ota_.php(41): get_row(Array, 1)\n#1 /tmp/tmpe5q_ota_.php(45): candidate(Array, 1)\n#2 /tmp/tmpe5q_ota_.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpe5q_ota_.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_idx = 0;\n    $result_col_idx = 0;\n    $result_row_len = 0;\n    $result_col_len = 0;\n    $result_row_idx_prev = 0;\n    $result_col_idx_prev = 0;\n    $result_row_len_prev = 0;\n    $result_col_len_prev = 0;\n    $result_row_idx_next = 0;\n    $result_col_idx_next = 0;\n    $result_row_len_next = 0;\n    $result_col_len_next = 0;\n    $result_row_idx_prev_next = 0;\n    $result_col_idx_prev_next = 0;\n    $result_row_len_prev_next = 0;\n    $result_col_len_prev_next = 0;\n    $result_row_idx_next_next = 0;\n    $result_col_idx_next_next = 0;\n    $result_row_len_next_next = 0;\n    $result_col_len_next_next = 0;\n    $result_row_idx_prev_prev = 0;\n    $result_col_idx_prev_prev = 0;\n    $result_row_len_prev_prev = 0;\n    $result_col_len_prev_prev = 0;\n    $result_row_idx_next_prev = 0;\n    $result_col_idx_next_prev = 0;\n    $result_row_len_next_prev = 0;\n    $result_col_len_next_prev = 0;\n    $result_row_idx_prev_prev_next = 0;\n    $result_col_idx_prev_prev_next = 0;\n    $result_row_len_prev_prev_next = 0;\n    $result_col_len_prev_prev_next = 0;\n    $result_row_idx_next_prev_next =\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpm5mwhnvs.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $i;\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][1] = $lst[$i][$x];\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $lst[$i][$x];\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tb5qyuz.php:47\nStack trace:\n#0 /tmp/tmp5tb5qyuz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5tb5qyuz.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjon3zt8r.php:20\nStack trace:\n#0 /tmp/tmpjon3zt8r.php(35): get_row(Array, 1)\n#1 /tmp/tmpjon3zt8r.php(39): candidate(Array, 1)\n#2 /tmp/tmpjon3zt8r.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpjon3zt8r.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][$j] = $lst[$i][$j];\n            }\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($result[$i][$j] == 0) {\n                $result[$i][$j] = $lst[$i][$j];\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: Undefined array key 1 in /tmp/tmpiciym11v.php on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiciym11v.php:44\nStack trace:\n#0 /tmp/tmpiciym11v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpiciym11v.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjon3zt8r.php:20\nStack trace:\n#0 /tmp/tmpjon3zt8r.php(35): get_row(Array, 1)\n#1 /tmp/tmpjon3zt8r.php(39): candidate(Array, 1)\n#2 /tmp/tmpjon3zt8r.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpjon3zt8r.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_row_index = 0;\n    $result_row_index_max = 0;\n    $result_row_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_row_index_max_max_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_row_index_max_max_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min_min_min = 0;\n    $result_row_index_max_max_min_min_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min_min_min_min = 0;\n    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpjhfooahm.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    $x_index = 0;\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $result_row_index;\n                $result_col = $result_col_index;\n                $result_row_index++;\n                $result_col_index++;\n                $result_row_index = $result_row_index % $lst_length;\n                $result_col_index = $result_col_index % $row_length;\n                $result_row = $result_row_index;\n                $result_col = $result_col_index;\n                $result_row_index++;\n                $result_col_index++;\n                $result_row_index = $result_row_index % $lst_length;\n                $result_col_index = $result_col_index % $row_length;\n                $result_row = $result_row_index;\n                $result_col = $result_col_index;\n                $result_row_index++;\n                $result_col_index++;\n                $result_row_index = $result_row_index % $lst_length;\n                $result_col_index = $result_col_index % $row_length;\n                $result_row = $result_row_index;\n                $result_col = $result_col_index;\n                $result_row_index++;\n                $result_col_index++;\n                $result_row_index = $result_row_index % $lst_length;\n                $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpisy8ownf.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $lst[$i];\n                $result_col = $result_row[$j];\n                $result = array($result_row, $result_col);\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxliurwrd.php:47\nStack trace:\n#0 /tmp/tmpxliurwrd.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxliurwrd.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_min_max_min = 0;\n    $result_col_index_min_min_max_min = 0;\n    $result_row_index_max_max_min_min = 0;\n    $result_col_index_max_max_min_min = 0;\n    $result_row_index_max_min_max_min = 0;\n    $result_col_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmph60ftym0.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_min_max_min = 0;\n    $result_col_index_min_min_max_min = 0;\n    $result_row_index_max_max_min_min = 0;\n    $result_col_index_max_max_min_min = 0;\n    $result_row_index_max_min_max_min = 0;\n    $result_col_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmph60ftym0.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $row;\n                $result_col = $col;\n                break;\n            }\n        }\n    }\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row = $result_row[$result_row_index];\n    $result_col = $result_col[$result_col_index];\n    $result = array(array($result_row, $result_col));\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: Trying to access array offset on value of type int in /tmp/tmpnwidic57.php on line 43\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwidic57.php:53\nStack trace:\n#0 /tmp/tmpnwidic57.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpnwidic57.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max_index = 0;\n    $result_col_index_max_index = 0;\n    $result_row_index_min_index = 0;\n    $result_col_index_min_index = 0;\n    $result_row_count_max_index = 0;\n    $result_col_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_col_count_min_index = 0;\n    $result_row_count_max_index_max = 0;\n    $result_col_count_max_index_max = 0;\n    $result_row_count_min_index_min = 0;\n    $result_col_count_min_index_min = 0;\n    $result_row_count_max_index_min = 0;\n    $result_col_count_max_index_min = 0;\n    $result_row_count_min_index_max = 0;\n    $result_col_count_min_index_max = 0;\n    $result_row_count_max_index_min = 0;\n    $result_col_count_max_index_min = 0;\n    $result_row_count_min_index_max_index = 0;\n    $result_col_count_min_index_max_index = 0;\n    $result_row_count_max_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphb6mpu6y.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($row) {\n        return $row[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbsaz7tgl.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbsaz7tgl.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbsaz7tgl.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpbsaz7tgl.php:19\nStack trace:\n#0 /tmp/tmpbsaz7tgl.php(30): get_row(Array, 1)\n#1 /tmp/tmpbsaz7tgl.php(34): candidate(Array, 1)\n#2 /tmp/tmpbsaz7tgl.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpbsaz7tgl.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_col_len = 0;\n    $result_row_len = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = $x - 1;\n    $y = 0;\n    $z = 0;\n    $col_len = 0;\n    $row_len = 0;\n    $col = 0;\n    $row = 0;\n    $col_index = 0;\n    $row_index = 0;\n    $col_index_len = 0;\n    $row_index_len = 0;\n    $col_index_len_len = 0;\n    $row_index_len_len = 0;\n    $col_index_len_len_len = 0;\n    $row_index_len_len_len = 0;\n    $col_index_len_len_len_len = 0;\n    $row_index_len_len_len_len = 0;\n    $col_index_len_len_len_len_len = 0;\n    $row_index_len_len_len_len_len = 0;\n    $col_index_len_len_len_len_len_len = 0;\n    $row_index_len_len_len_len_len_len = 0;\n    $col_index_len_len_len_len_len_len_len = 0;\n    $row_index_len_len_len_len_len_len_len = 0;\n    $col_index_len_len_len_len_len_len_len_len = 0;\n    $row_index_len_len_len_len_len_len_len_len = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpwua_fubm.php on line 77\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function push() in /tmp/tmpy1gwazrn.php:25\nStack trace:\n#0 /tmp/tmpy1gwazrn.php(33): get_row(Array, 1)\n#1 /tmp/tmpy1gwazrn.php(37): candidate(Array, 1)\n#2 /tmp/tmpy1gwazrn.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpy1gwazrn.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin8t2f1u.php:37\nStack trace:\n#0 /tmp/tmpin8t2f1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpin8t2f1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $i;\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][1] = $lst[$i][$x];\n        $i++;\n    }\n    $result = array_sort($result, SORT_ASC);\n    $result = array_sort($result, SORT_DESC);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpk9da4leh.php:34\nStack trace:\n#0 /tmp/tmpk9da4leh.php(40): get_row(Array, 1)\n#1 /tmp/tmpk9da4leh.php(44): candidate(Array, 1)\n#2 /tmp/tmpk9da4leh.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpk9da4leh.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjon3zt8r.php:20\nStack trace:\n#0 /tmp/tmpjon3zt8r.php(35): get_row(Array, 1)\n#1 /tmp/tmpjon3zt8r.php(39): candidate(Array, 1)\n#2 /tmp/tmpjon3zt8r.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpjon3zt8r.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min_max = 0;\n    $result_col_index_count_min_max = 0;\n    $result_row_index_count_min_min = 0;\n    $result_col_index_count_min_min = 0;\n    $result_row_index_count_min_min_max = 0;\n    $result_col_index_count_min_min_max = 0;\n    $result_row_index_count_min_min_min = 0;\n    $result_col_index_count_min_min_min = 0;\n    $result_row_index_count_min_min_min_max = 0;\n    $result_col_index_count_min_min_min_max = 0;\n    $result_row_index_count_min_min_min_min = 0;\n    $result_col_index_count_min_min_min_min_max = 0;\n    $result_row_index_count_min_min_min_min_min = 0;\n    $result_col_index_count_min_min_min_min_min_max = 0;\n    $result_row_index_count_min_min_min_min_min_min = 0;\n    $result_col_index_count_min_min_min_min_min_min_max = 0;\n    $result_row_index_count_min_min_min_min_min_min_min = 0;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp2cgdb5h9.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    if (is_empty($lst)) {\n        return [];\n    }\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_row_count = count($lst);\n    $lst_col_count = count($lst[0]);\n    for ($i = 0; $i < $lst_row_count; $i++) {\n        $lst_row = $lst[$i];\n        $lst_row_count = count($lst_row);\n        for ($j = 0; $j < $lst_row_count; $j++) {\n            $lst_col = $lst_row[$j];\n            $lst_col_count = count($lst_col);\n            for ($k = 0; $k < $lst_col_count; $k++) {\n                $lst_col_value = $lst_col[$k];\n                if ($lst_col_value == $x) {\n                    $result_row_index = $i;\n                    $result_col_index = $j;\n                    $result_row_count = $lst_row_count;\n                    $result_col_count = $lst_col_count;\n                    $result_row = $lst_row;\n                    $result_col = $lst_col;\n                    $result = $result_row;\n                    $result = $result_col;\n                    $result = $result_row_count;\n                    $result = $result_col_count;\n                    $result = $result_row_index;\n                    $result = $result_col_index;\n                    $result = $result_row_count;\n                    $result = $result_col_count;\n                    $result = $result_row_index;\n                    $result = $result_col_index;\n                    $result = $result_row_count;\n                    $result = $result_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplmki3631.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_col_index = 0;\n    $result_col_count = 0;\n    $result_col_count_max = 0;\n    $result_col_count_min = 0;\n    $result_col_count_max_index = 0;\n    $result_col_count_min_index = 0;\n    $result_col_count_max_index_row = 0;\n    $result_col_count_min_index_row = 0;\n    $result_col_count_max_index_col = 0;\n    $result_col_count_min_index_col = 0;\n    $result_col_count_max_index_row_col = 0;\n    $result_col_count_min_index_row_col = 0;\n    $result_col_count_max_index_row_col_index = 0;\n    $result_col_count_min_index_row_col_index = 0;\n    $result_col_count_max_index_row_col_index_col = 0;\n    $result_col_count_min_index_row_col_index_col = 0;\n    $result_col_count_max_index_row_col_index_col_index = 0;\n    $result_col_count_min_index_row_col_index_col_index = 0;\n    $result_col_count_max_index_row_col_index_col_index_col = 0;\n    $result_col_count_min_index_row_col_index_col_index_col = 0;\n    $result_col_count_max_index_row_col_index_col_index_col_index = 0;\n    $result_col_count_min_index_row_col_index_col_index_col_index = 0;\n    $result_col_count_max_index_row_col_index_col_index_col_index_col = 0;\n    $result_col_count_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsd4p4qag.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index_max = 0;\n    $result_row_count_max_index_min = 0;\n    $result_row_count_min_index_min = 0;\n    $result_row_count_max_index_max = 0;\n    $result_row_count_min_index_max_index_min = 0;\n    $result_row_count_max_index_min_index_max = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_max_index_min = 0;\n    $result_row_count_min_index_max_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min_index_max = 0;\n    $result_row_count_min_index_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min_index_max_index_min = 0;\n    $result_row_count_min_index_min_index_min_index_max_index_min = 0;\n    $result_row_count_max_index_min_index_min_index_min_index_max = 0;\n    $result_row_count_min_index_min_index_min_index_min_index_max_index_min = 0;\n    $result_row_count_max_index_min_index_min_index_min_index_min_index_max = 0;\n    $result_row_count_min_index_min_index_min_index_min_index_min_index_max_index_min = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpp0c4iymn.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_max_index = 0;\n    $result_row_max_count = 0;\n    $result_row_max_index_count = 0;\n    $result_row_max_index_count_index = 0;\n    $result_row_max_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_index_count_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpaczze6uj.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst, 1);\n    $lst = array_flip($lst, 2);\n    $lst = array_flip($lst, 3);\n    $lst = array_flip($lst, 4);\n    $lst = array_flip($lst, 5);\n    $lst = array_flip($lst, 6);\n    $lst = array_flip($lst, 7);\n    $lst = array_flip($lst, 8);\n    $lst = array_flip($lst, 9);\n    $lst = array_flip($lst, 10);\n    $lst = array_flip($lst, 11);\n    $lst = array_flip($lst, 12);\n    $lst = array_flip($lst, 13);\n    $lst = array_flip($lst, 14);\n    $lst = array_flip($lst, 15);\n    $lst = array_flip($lst, 16);\n    $lst = array_flip($lst, 17);\n    $lst = array_flip($lst, 18);\n    $lst = array_flip($lst, 19);\n    $lst = array_flip($lst, 20);\n    $lst = array_flip($lst, 21);\n    $lst = array_flip($lst, 22);\n    $lst = array_flip($lst, 23);\n    $lst = array_flip($lst, 24);\n    $lst = array_flip($lst, 25);\n    $lst = array_flip($lst, 26);\n    $lst = array_flip($lst, 27);\n    $lst = array_flip($lst, 28);\n    $lst = array_flip($lst, 29);\n    $lst = array_flip($lst, 30);\n    $lst = array_flip($lst, 31);\n    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpp0tekwxq.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_col_count = 0;\n    $result_row_count = 0;\n    $result_col_index = 0;\n    $result_row_index = 0;\n    $result_col_index_max = 0;\n    $result_row_index_max = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_max_min_min = 0;\n    $result_row_index_min_max_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_max_min_min_min = 0;\n    $result_row_index_min_max_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_max_min_min_min_min = 0;\n    $result_row_index_min_max_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp5boafzuj.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $j = 0;\n        while ($j < $lst[0][1]) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < $x) {\n        $result[$i] = array();\n        $j = 0;\n        while ($j < $lst[$i][0]) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $j = 0;\n        while ($j < $lst[$i][1]) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4lsl36d.php:52\nStack trace:\n#0 /tmp/tmpl4lsl36d.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpl4lsl36d.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_next_next = 0;\n    $result_col_index_next_next = 0;\n    $result_row_index_next_next_prev = 0;\n    $result_col_index_next_next_prev = 0;\n    $result_row_index_next_next_next = 0;\n    $result_col_index_next_next_next = 0;\n    $result_row_index_next_next_next_prev = 0;\n    $result_col_index_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next = 0;\n    $result_col_index_next_next_next_next = 0;\n    $result_row_index_next_next_next_next_prev = 0;\n    $result_col_index_next_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next_next = 0;\n    $result_col_index_next_next_next_next_next = 0;\n    $result_row_index_next_next_next_next_next_prev = 0;\n    $result_col_index_next_next_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next_next_next = 0;\n    $result_col_index_next_next_next_next_next_next = 0;\n    $result_row_index_next_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzs0al5r9.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_count = 0;\n    $result_col_index_min_min_count = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_count = 0;\n    $result_col_index_min_min_min_count = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_count = 0;\n    $result_col_index_min_min_min_min_count = 0;\n    $result_row_index_min_min_min_min_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkbn76vy0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_col_count = 0;\n    $result_row_count = 0;\n    $result_col_count_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min_max = 0;\n    $result_row_count_min_max = 0;\n    $result_col_count_min_max_max = 0;\n    $result_row_count_min_max_max = 0;\n    $result_col_count_min_max_min = 0;\n    $result_row_count_min_max_min = 0;\n    $result_col_count_min_max_min_max = 0;\n    $result_row_count_min_max_min_max = 0;\n    $result_col_count_min_max_min_max_max = 0;\n    $result_row_count_min_max_min_max_max = 0;\n    $result_col_count_min_max_min_max_min = 0;\n    $result_row_count_min_max_min_max_min = 0;\n    $result_col_count_min_max_min_max_min_max = 0;\n    $result_row_count_min_max_min_max_min_max_max = 0;\n    $result_col_count_min_max_min_max_min_max_min = 0;\n    $result_row_count_min_max_min_max_min_max_min_max = 0;\n    $result_col_count_min_max_min_max_min_max_min_max_max = 0;\n    $result_row_count_min_max_min_max_min_max_min_max_min_max = 0;\n    $result_col_count_min_max_min_max_min_max_min_max_min_max_max = 0;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp9smsg3mm.php on line 60\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpizodtvmg.php:20\nStack trace:\n#0 /tmp/tmpizodtvmg.php(35): get_row(Array, 1)\n#1 /tmp/tmpizodtvmg.php(39): candidate(Array, 1)\n#2 /tmp/tmpizodtvmg.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpizodtvmg.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp20ljyoym.php on line 73\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp6wl4eo6o.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $i;\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][1] = $lst[$i][$x];\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4edc35c.php:42\nStack trace:\n#0 /tmp/tmpf4edc35c.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpf4edc35c.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_max_index = 0;\n    $result_row_max_count = 0;\n    $result_row_max_index_count = 0;\n    $result_row_max_count_index = 0;\n    $result_row_max_count_index_count = 0;\n    $result_row_max_count_index_count_count = 0;\n    $result_row_max_count_index_count_count_index = 0;\n    $result_row_max_count_index_count_count_index_count = 0;\n    $result_row_max_count_index_count_count_index_count_index = 0;\n    $result_row_max_count_index_count_count_index_count_index_count = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $result_row_max_count_index_count_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpctlcfo_l.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        sort($result[$i]);\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($result[$i][$j] == $x) {\n                return $result[$i];\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71z_plsz.php:45\nStack trace:\n#0 /tmp/tmp71z_plsz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp71z_plsz.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_filter($lst, function($lst) {\n        return $lst[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbxltjr1_.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbxltjr1_.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbxltjr1_.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpbxltjr1_.php:19\nStack trace:\n#0 /tmp/tmpbxltjr1_.php(29): get_row(Array, 1)\n#1 /tmp/tmpbxltjr1_.php(33): candidate(Array, 1)\n#2 /tmp/tmpbxltjr1_.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpbxltjr1_.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < count($row)) {\n            if ($j == $x) {\n                $result[$i] = array($j, $row[$j]);\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwj38jlb_.php:40\nStack trace:\n#0 /tmp/tmpwj38jlb_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpwj38jlb_.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max_index = 0;\n    $result_col_index_count_min_index = 0;\n    $result_row_index_count_min_index = 0;\n    $result_col_index_count_max_index = 0;\n    $result_row_index_count_min_index = 0;\n    $result_col_index_count_min_index = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp06hcdb1a.php on line 68\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpnbse8dh3.php on line 69\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    if ($lst_len === 0) {\n        return $result;\n    }\n    $x_len = count($lst[0]);\n    if ($x_len === 0) {\n        return $result;\n    }\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        if ($row_len === 0) {\n            continue;\n        }\n        $x_index = $x - 1;\n        if ($x_index < 0) {\n            $x_index = 0;\n        }\n        if ($x_index >= $row_len) {\n            $x_index = $row_len - 1;\n        }\n        $result[$i] = array($x_index, $row[$x_index]);\n        $row_index = $x_index;\n        for ($j = $x_index - 1; $j >= 0; $j--) {\n            if ($row[$j] > $row[$row_index]) {\n                $row_index = $j;\n            }\n        }\n        $result[$i] = array($row_index, $row[$row_index]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbaejdr5c.php:57\nStack trace:\n#0 /tmp/tmpbaejdr5c.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpbaejdr5c.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_max_min_max = 0;\n    $result_col_index_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_min = 0;\n    $result_col_index_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max = 0;\n    $result_col_index_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max_min_max = 0;\n    $result_col_index_min_max_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max = 0;\n    $result_col_index_min_max_min_max_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpoe1fcae9.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_prev_next = 0;\n    $result_col_index_prev_next = 0;\n    $result_row_index_prev_next_prev = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_row_index_prev_next_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_row_index_prev_next_next_prev = 0;\n    $result_col_index_prev_next_next_prev = 0;\n    $result_row_index_prev_next_next_next = 0;\n    $result_col_index_prev_next_next_next = 0;\n    $result_row_index_prev_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next = 0;\n    $result_row_index_prev_next_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next_next = 0;\n    $result_row_index_prev_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpry2k1iv6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps6wmmx5n.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $lst_row = $lst;\n    $lst_col = array();\n    $lst_row_len = count($lst_row);\n    $lst_col_len = count($lst_col);\n    for ($i = 0; $i < $lst_row_len; $i++) {\n        $lst_row_col = get_col($lst_row[$i], $lst_col);\n        $lst_row_col_len = count($lst_row_col);\n        for ($j = 0; $j < $lst_row_col_len; $j++) {\n            $lst_row_col_col = $lst_row_col[$j];\n            if ($lst_row_col_col == $x) {\n                $result_row_col = array($i, $j);\n                $result_row_col_len = count($result_row_col);\n                for ($k = 0; $k < $result_row_col_len; $k++) {\n                    $result_row_col_col = $result_row_col[$k];\n                    $result_row_col_col_len = count($result_row_col_col);\n                    for ($l = 0; $l < $result_row_col_col_len; $l++) {\n                        $result_row_col_col_col = $result_row_col_col_col[$l];\n                        $result_row_col_col_col_len = count($result_row_col_col_col);\n                        for ($m = 0; $m < $result_row_col_col_col_len; $m++) {\n                            $result_row_col_col_col_col = $result_row_col_col_col_col[$m];\n                            $result_row_col_col_col_col_len = count($result_row_col_col_col_col);\n                            for ($n = 0; $n < $result_row_col_col_col_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmppq_peuj3.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col = 0;\n    $result_col_count = 0;\n    $lst_count = 0;\n    $lst_row = 0;\n    $lst_col = 0;\n    $lst_row_count = 0;\n    $lst_col_count = 0;\n    $lst_row_count = count($lst);\n    $lst_col_count = count($lst[0]);\n    for ($lst_row_count = 0; $lst_row_count < $lst_count; $lst_row_count++) {\n        $lst_row = $lst_row_count;\n        $lst_col = 0;\n        $lst_col_count = 0;\n        for ($lst_col_count = 0; $lst_col_count < $lst_col_count; $lst_col_count++) {\n            $lst_col = $lst_col_count;\n            if ($lst[$lst_row][$lst_col] == $x) {\n                $result_row_count = $lst_row_count;\n                $result_col = $lst_col;\n                $result_col_count = $lst_col_count;\n                $result_row = $lst_row;\n                $result_row_count = $lst_row_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_count;\n                $result_col_count = $lst_col_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpm__ms673.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_filter($lst\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp8g8xi6bu.php on line 63\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_count_min_max = 0;\n    $result_col_count_min_max = 0;\n    $result_row_count_max_min = 0;\n    $result_col_count_max_min = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_count_min_max_min = 0;\n    $result_col_count_min_max_min = 0;\n    $result_row_count_max_min_max = 0;\n    $result_col_count_max_min_max = 0;\n    $result_row_index_min_max_min_max = 0;\n    $result_col_index_min_max_min_max = 0;\n    $result_row_count_min_max_min_max = 0;\n    $result_col_count_min_max_min_max = 0;\n    $result_row_count\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp0dlsjsw9.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $lst_row = 0;\n    $lst_col = 0;\n    $lst_len = 0;\n    $lst_len_row = 0;\n    $lst_len_col = 0;\n    $lst_len_row_col = 0;\n    $lst_len_row_col_len = 0;\n    $lst_len_row_col_len_row = 0;\n    $lst_len_row_col_len_row_col = 0;\n    $lst_len_row_col_len_row_col_len = 0;\n    $lst_len_row_col_len_row_col_len_row = 0;\n    $lst_len_row_col_len_row_col_len_row_col = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col_len = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col_len_row = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col_len_row_col = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col_len_row_col_len = 0;\n    $lst_len_row_col_len_row_col_len_row_col_len_row_col_len_row_col_len_row = 0;\n    $lst_len_row_col_len_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpcvq2ox70.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function($a) {\n        return $a[0] <= $x && $a[1] >= $x;\n    });\n    $lst = array_map($lst, function($a) {\n        return array($a[0], $a[1]);\n    });\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpqso7n7fr.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpqso7n7fr.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpqso7n7fr.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpqso7n7fr.php:19\nStack trace:\n#0 /tmp/tmpqso7n7fr.php(35): get_row(Array, 1)\n#1 /tmp/tmpqso7n7fr.php(39): candidate(Array, 1)\n#2 /tmp/tmpqso7n7fr.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpqso7n7fr.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col_count_prev = 0;\n    $result_col_count_prev_prev = 0;\n    $result_col_count_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpq_j4waqz.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_prev = 0;\n    $result_row_count_min_index_prev = 0;\n    $result_row_count_max_index_prev_prev = 0;\n    $result_row_count_min_index_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1n2eee1w.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_prev_next = 0;\n    $result_col_index_prev_next = 0;\n    $result_row_index_prev_next_prev = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_row_index_prev_next_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_row_index_prev_next_next_prev = 0;\n    $result_col_index_prev_next_next_prev = 0;\n    $result_row_index_prev_next_next_next = 0;\n    $result_col_index_prev_next_next_next = 0;\n    $result_row_index_prev_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next = 0;\n    $result_row_index_prev_next_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next_next = 0;\n    $result_row_index_prev_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpry2k1iv6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_filter($lst, function ($x) {\n        return $x >= $x;\n    });\n    $lst = array_filter($lst, function ($x) {\n        return $x < $x;\n    });\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpl3hvrf14.php on line 69\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_length = 0;\n    $result_row_coordinates = array();\n    $result_row_coordinates_index = 0;\n    $result_row_coordinates_length = 0;\n    $result_row_coordinates_row = 0;\n    $result_row_coordinates_column = 0;\n    $result_row_coordinates_row_index = 0;\n    $result_row_coordinates_column_index = 0;\n    $result_row_coordinates_row_length = 0;\n    $result_row_coordinates_column_length = 0;\n    $result_row_coordinates_row_coordinates = array();\n    $result_row_coordinates_column_coordinates = array();\n    $result_row_coordinates_row_coordinates_index = 0;\n    $result_row_coordinates_column_coordinates_index = 0;\n    $result_row_coordinates_row_coordinates_length = 0;\n    $result_row_coordinates_column_coordinates_length = 0;\n    $result_row_coordinates_row_coordinates_row = 0;\n    $result_row_coordinates_column_coordinates_column = 0;\n    $result_row_coordinates_row_coordinates_row_index = 0;\n    $result_row_coordinates_column_coordinates_column_index = 0;\n    $result_row_coordinates_row_coordinates_row_length = 0;\n    $result_row_coordinates_column_coordinates_column_length = 0;\n    $result_row_coordinates_row_coordinates_row_coordinates = array();\n    $result_row_coordinates_column_coordinates_column_coordinates = array();\n    $result_row_coordinates_row_coordinates_row_coordinates_index = 0;\n    $result_row_coordinates_column_coordinates_column_coordinates_index = 0;\n    $result_row_coordinates_row_coordinates_row_coordinates\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpa4us2y9y.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_max =\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvkg03z4z.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_row = 0;\n    $result_row_count_min_index_row = 0;\n    $result_row_count_max_index_col = 0;\n    $result_row_count_min_index_col = 0;\n    $result_row_count_max_index_col_row = 0;\n    $result_row_count_min_index_col_row = 0;\n    $result_row_count_max_index_col_col = 0;\n    $result_row_count_min_index_col_col_row = 0;\n    $result_row_count_max_index_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_col_col_col_col_col_col_col = 0;\n    $result_row_count_min_index_col_col_col_col_col_col_col_row = 0;\n    $result_row_count_max_index_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpupng62zz.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function ($a, $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n        } else if ($a[0] < $b[0]) {\n            return -1;\n        } else {\n            return $a[1] > $b[1] ? -1 : 1;\n        }\n    });\n    $result.sort(function ($a, $b) {\n        if ($a[1] > $b[1]) {\n            return 1;\n        } else if ($a[1] < $b[1]) {\n            return -1;\n        } else {\n            return $a[0] > $b[0] ? -1 : 1;\n        }\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjx0tjxb1.php:20\nStack trace:\n#0 /tmp/tmpjx0tjxb1.php(53): get_row(Array, 1)\n#1 /tmp/tmpjx0tjxb1.php(57): candidate(Array, 1)\n#2 /tmp/tmpjx0tjxb1.php(65): test()\n#3 {main}\n  thrown in /tmp/tmpjx0tjxb1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    var $result = [];\n    var $i = 0;\n    var $j = 0;\n    var $l = $lst.length;\n    var $m = $lst[0].length;\n    var $result = [];\n    for($i = 0; $i < $l; $i++) {\n        for($j = 0; $j < $m; $j++) {\n            if($lst[$i][$j] == $x) {\n                $result.push(array($i, $j));\n            }\n        }\n    }\n    $result.sort(function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpemacc7mm.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwiq6e7hi.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x) { return $x < $x; });\n    $lst = array_filter($lst, function($x) { return $x > $x; });\n    $lst = array_filter($lst, function($x)\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"{\" in /tmp/tmpuncj9wvj.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[$i][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][$j] = array(0, $j);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: Undefined array key 0 in /tmp/tmpwh_j1kcn.php on line 20\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpwh_j1kcn.php on line 20\n\nWarning: Undefined array key 0 in /tmp/tmpwh_j1kcn.php on line 26\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpwh_j1kcn.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh_j1kcn.php:41\nStack trace:\n#0 /tmp/tmpwh_j1kcn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwh_j1kcn.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpqo5q4ig0.php on line 81\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n        $row = $lst[$i];\n        $row = array_flip($row);\n        $result = array_merge_recursive($result, get_coordinates($row, $x));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpre6k3pgk.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpre6k3pgk.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpre6k3pgk.php on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpre6k3pgk.php:33\nStack trace:\n#0 /tmp/tmpre6k3pgk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpre6k3pgk.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_filter($lst, function($lst) {\n        return $lst[0] >= $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgzx4zysl.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgzx4zysl.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgzx4zysl.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpgzx4zysl.php:19\nStack trace:\n#0 /tmp/tmpgzx4zysl.php(29): get_row(Array, 1)\n#1 /tmp/tmpgzx4zysl.php(33): candidate(Array, 1)\n#2 /tmp/tmpgzx4zysl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpgzx4zysl.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    for ($i = 0; $i < $lst[0]['length']; $i++) {\n        if ($lst[0][$i] == $x) {\n            $result = array_merge($result, array(array($lst[0][$i], $lst[1][$i])));\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbck2e0e4.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbck2e0e4.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbck2e0e4.php on line 19\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpbck2e0e4.php:20\nStack trace:\n#0 /tmp/tmpbck2e0e4.php(30): get_row(Array, 1)\n#1 /tmp/tmpbck2e0e4.php(34): candidate(Array, 1)\n#2 /tmp/tmpbck2e0e4.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpbck2e0e4.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps6wmmx5n.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_row_count = count($lst);\n    $lst_col_count = count($lst[0]);\n    for ($i = 0; $i < $lst_row_count; $i++) {\n        $result_row_index = $i;\n        $lst_row = $lst[$i];\n        $lst_col_count_row = count($lst_row);\n        for ($j = 0; $j < $lst_col_count_row; $j++) {\n            $result_col_index = $j;\n            $lst_col = $lst_row[$j];\n            if ($lst_col == $x) {\n                $result_col_index = $j;\n                $result_row_index = $i;\n                $result_col = $lst_col;\n                $result_row = $lst_row;\n                break;\n            }\n        }\n    }\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row = $result_row[$result_col_index];\n    $result_col = $result_col[$result_row_index];\n    $result = array(array($result_row, $result_col));\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: Undefined array key -1 in /tmp/tmpl6n4u6zb.php on line 43\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpl6n4u6zb.php on line 44\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6n4u6zb.php:54\nStack trace:\n#0 /tmp/tmpl6n4u6zb.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpl6n4u6zb.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_next_next = 0;\n    $result_col_index_next_next = 0;\n    $result_row_index_next_next_prev = 0;\n    $result_col_index_next_next_prev = 0;\n    $result_row_index_next_next_next = 0;\n    $result_col_index_next_next_next = 0;\n    $result_row_index_next_next_next_prev = 0;\n    $result_col_index_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next = 0;\n    $result_col_index_next_next_next_next = 0;\n    $result_row_index_next_next_next_next_prev = 0;\n    $result_col_index_next_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next_next = 0;\n    $result_col_index_next_next_next_next_next = 0;\n    $result_row_index_next_next_next_next_next_prev = 0;\n    $result_col_index_next_next_next_next_next_prev = 0;\n    $result_row_index_next_next_next_next_next_next = 0;\n    $result_col_index_next_next_next_next_next_next = 0;\n    $result_row_index_next_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzs0al5r9.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst)) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < count($row)) {\n            if ($j == $x) {\n                $result[$i] = array($j, $row[$j]);\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwj38jlb_.php:40\nStack trace:\n#0 /tmp/tmpwj38jlb_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpwj38jlb_.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    if (!$lst) {\n        return [];\n    }\n    if (!$x) {\n        return [];\n    }\n    if (!is_array($lst)) {\n        return [];\n    }\n    if (!is_int($x)) {\n        return [];\n    }\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_max = 0;\n    $result_col_index_max_max_max = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpt_59x_ms.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col = 0;\n    $result_row = 0;\n    $result_col_index_max = 0;\n    $result_row_index_max = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_min_min_min_max = 0\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpcx8o0fxy.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpd09k7_mx.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n        $row = $lst[$i];\n        $result = array_merge_recursive($result, get_coordinates($row, $x));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpdrifwwur.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpdrifwwur.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpdrifwwur.php on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrifwwur.php:32\nStack trace:\n#0 /tmp/tmpdrifwwur.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdrifwwur.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_col_len = 0;\n    $result_row_len = 0;\n    $result_col_len_max = 0;\n    $result_row_len_max = 0;\n    $result_col_len_min = 0;\n    $result_row_len_min = 0;\n    $result_col_len_sum = 0;\n    $result_row_len_sum = 0;\n    $result_col_len_sum_sqr = 0;\n    $result_row_len_sum_sqr = 0;\n    $result_col_len_sum_cubic = 0;\n    $result_row_len_sum_cubic = 0;\n    $result_col_len_sum_quartic = 0;\n    $result_row_len_sum_quartic = 0;\n    $result_col_len_sum_quintic = 0;\n    $result_row_len_sum_quintic = 0;\n    $result_col_len_sum_septic = 0;\n    $result_row_len_sum_septic = 0;\n    $result_col_len_sum_septic = 0;\n    $result_row_len_sum_septic = 0;\n    $result_col_len_sum_octic = 0;\n    $result_row_len_sum_octic = 0;\n    $result_col_len_sum_non_linear = 0;\n    $result_row_len_sum_non_linear = 0;\n    $result_col_len_sum_exp = 0;\n    $result_row_len_sum_exp = 0;\n    $result_col_len_sum_log = 0;\n    $result_row_len_sum_log = 0;\n    $result_col_len_sum_sqrt = 0;\n    $result_row_len_sum_sqrt = 0;\n    $result_col_len_sum_cbrt = 0;\n    $result_row_len_sum_cbrt = 0;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpleop0qqi.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_max = 0;\n    $result_row_count_min_index_min = 0;\n    $result_row_count_max_index_min = 0;\n    $result_row_count_min_index_max = 0;\n    $result_row_count_min_index_min_index = 0;\n    $result_row_count_max_index_min_index = 0;\n    $result_row_count_min_index_max_index = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min = 0;\n    $result_row_count_min_index_max_index_min = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min = 0;\n    $result_row_count_min_index_max_index_min = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min = 0;\n    $result_row_count_min_index_max_index_min = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min = 0;\n    $result_row_count_min_index_max_index_min = 0;\n    $result_row_count_min_index_min_index_max = 0;\n    $result_row_count_max_index_min_index_min = 0;\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp5vzzgo30.php on line 60\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $row;\n                $result_col = $col;\n                break;\n            }\n        }\n    }\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row = $result_row[0];\n    $result_col = $result_col[$result_col_index];\n    $result = array(array($result_row, $result_col));\n    return $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: Trying to access array offset on value of type int in /tmp/tmphhzlh5p7.php on line 43\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhzlh5p7.php:52\nStack trace:\n#0 /tmp/tmphhzlh5p7.php(60): test()\n#1 {main}\n  thrown in /tmp/tmphhzlh5p7.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $i;\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][1] = $lst[$i][$x];\n        $i++;\n    }\n    $result = array_sort($result, SORT_ASC);\n    $result = array_sort($result, SORT_DESC);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpk9da4leh.php:34\nStack trace:\n#0 /tmp/tmpk9da4leh.php(40): get_row(Array, 1)\n#1 /tmp/tmpk9da4leh.php(44): candidate(Array, 1)\n#2 /tmp/tmpk9da4leh.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpk9da4leh.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    $result = sort_rows($result);\n    $result = sort_cols($result);\n    $result = get_coord($result, $x);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function sort_rows() in /tmp/tmpji30hfcw.php:27\nStack trace:\n#0 /tmp/tmpji30hfcw.php(34): get_row(Array, 1)\n#1 /tmp/tmpji30hfcw.php(38): candidate(Array, 1)\n#2 /tmp/tmpji30hfcw.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpji30hfcw.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_max = 0;\n    $result_row_max_index = 0;\n    $result_row_max_count = 0;\n    $result_row_max_count_index = 0;\n    $result_row_max_count_count = 0;\n    $result_row_max_count_count_index = 0;\n    $result_row_max_count_count_count = 0;\n    $result_row_max_count_count_count_index = 0;\n    $result_row_max_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6xx7pm7e.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    if (is_empty($lst)) {\n        return [];\n    }\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst =\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzyo9n5dg.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_prev_next = 0;\n    $result_col_index_prev_next = 0;\n    $result_row_index_prev_next_prev = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_row_index_prev_next_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_row_index_prev_next_next_prev = 0;\n    $result_col_index_prev_next_next_prev = 0;\n    $result_row_index_prev_next_next_next = 0;\n    $result_col_index_prev_next_next_next = 0;\n    $result_row_index_prev_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next = 0;\n    $result_row_index_prev_next_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next_next = 0;\n    $result_row_index_prev_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpry2k1iv6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpx0_nj377.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i] = array();\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][0] = $i;\n        $i++;\n    }\n    $i = 0;\n    while ($i < $lst[0][0]) {\n        $result[$i][1] = $lst[$i][$x];\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4edc35c.php:42\nStack trace:\n#0 /tmp/tmpf4edc35c.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpf4edc35c.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpx0_nj377.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < $lst.length) {\n        if ($lst[$i][$j] == $x) {\n            $result[$i] = $lst[$i];\n            $i++;\n        } else if ($lst[$i][$j] > $x) {\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpzp_cw15y.php:21\nStack trace:\n#0 /tmp/tmpzp_cw15y.php(35): get_row(Array, 1)\n#1 /tmp/tmpzp_cw15y.php(39): candidate(Array, 1)\n#2 /tmp/tmpzp_cw15y.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpzp_cw15y.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_max_count = 0;\n    $result_col_index_max_count = 0;\n    $result_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp42_vv3cj.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_col_index_prev_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpxzpa8dam.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_col_index_next = 0;\n    $result_col_index_prev_prev = 0;\n    $result_col_index_next_next = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_col_index_next_next_next = 0;\n    $result_col_index_prev_prev_next = 0;\n    $result_col_index_next_prev_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_col_index_next_prev_next = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_col_index_next_prev_prev = 0;\n    $result_col_index_prev_next_prev_prev = 0;\n    $result_col_index_next_prev_prev_next = 0;\n    $result_col_index_prev_next_prev_next = 0;\n    $result_col_index_next_prev_prev_next = 0;\n    $result_col_index_prev_next_prev_prev = 0;\n    $result_col_index_next_prev_prev_prev = 0;\n    $result_col_index_prev_next_prev_prev_prev = 0;\n    $result_col_index_next_prev_prev_prev_next = 0;\n    $result_col_index_prev_next_prev_prev_next = 0;\n    $result_col_index_next_prev_prev_prev_next = 0;\n    $result_col_index_prev_next_prev_prev_prev = 0;\n    $result_col_index_next_prev_prev_prev_prev = 0;\n    $result_col_index_prev_next_prev_prev_prev_prev = 0;\n    $result_col_index_next_prev_prev_prev_prev_prev = 0\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpc3_mb2bn.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst.length; $i++) {\n        $row = $lst[$i];\n        for ($j = 0; $j < $row.length; $j++) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n        }\n    }\n    $result.sort(function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    for ($i = 0; $i < $result.length; $i++) {\n        $result[$i][0] = $result[$i][0] + 1;\n    }\n    $result.sort(function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpes3e0m16.php:19\nStack trace:\n#0 /tmp/tmpes3e0m16.php(40): get_row(Array, 1)\n#1 /tmp/tmpes3e0m16.php(44): candidate(Array, 1)\n#2 /tmp/tmpes3e0m16.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpes3e0m16.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[$i][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][$j] = array(0, $j);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpwh_j1kcn.php on line 19\n\nWarning: Undefined array key 0 in /tmp/tmpwh_j1kcn.php on line 20\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpwh_j1kcn.php on line 20\n\nWarning: Undefined array key 0 in /tmp/tmpwh_j1kcn.php on line 26\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpwh_j1kcn.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh_j1kcn.php:41\nStack trace:\n#0 /tmp/tmpwh_j1kcn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwh_j1kcn.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $x) {\n        $result[$i] = array();\n        $j = 0;\n        while ($j < $lst[$i].length) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpoy2cxzgq.php:23\nStack trace:\n#0 /tmp/tmpoy2cxzgq.php(33): get_row(Array, 1)\n#1 /tmp/tmpoy2cxzgq.php(37): candidate(Array, 1)\n#2 /tmp/tmpoy2cxzgq.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpoy2cxzgq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function($a, $b) {\n        return $a[0] > $b[0] ? -1 : 1;\n    });\n    $result.sort(function($a, $b) {\n        return $a[1] > $b[1] ? -1 : 1;\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpetlk4pkm.php:20\nStack trace:\n#0 /tmp/tmpetlk4pkm.php(41): get_row(Array, 1)\n#1 /tmp/tmpetlk4pkm.php(45): candidate(Array, 1)\n#2 /tmp/tmpetlk4pkm.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpetlk4pkm.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_prev = 0;\n    $result_row_count_min_index_prev = 0;\n    $result_row_count_max_index_prev_prev = 0;\n    $result_row_count_min_index_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1n2eee1w.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_count = 0;\n    $result_col_index_min_count = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_count = 0;\n    $result_col_index_min_min_count = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_count = 0;\n    $result_col_index_min_min_min_count = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_count = 0;\n    $result_col_index_min_min_min_min_count = 0;\n    $result_row_index_min_min_min_min_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkbn76vy0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_max_index = 0;\n    $result_row_max_count = 0;\n    $result_row_max_index_count = 0;\n    $result_row_max_count_count = 0;\n    $result_row_max_index_count_count = 0;\n    $result_row_max_count_count_count = 0;\n    $result_row_max_index_count_count_count = 0;\n    $result_row_max_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count_count_count = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmpa4mwu7t8.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $row = $lst[$i];\n        $row_len = count($row);\n        for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j] == $x) {\n                $result = array_merge($result, array(array($i, $j)));\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgdumh1u.php:37\nStack trace:\n#0 /tmp/tmppgdumh1u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppgdumh1u.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $lst_row = 0;\n    $lst_col = 0;\n    $lst_len = count($lst);\n    $x_row = 0;\n    $x_col = 0;\n    $x_len = count($lst[0]);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $lst_row = $i;\n        $lst_col = 0;\n        for ($j = 0; $j < $x_len; $j++) {\n            $x_col = $j;\n            if ($lst[$i][$j] == $x) {\n                $result_row[$i] = $lst_row;\n                $result_col[$i] = $lst_col;\n            }\n            $lst_col++;\n        }\n        $lst_col = 0;\n    }\n    $result_row = array_sort($result_row, SORT_ASC);\n    $result_col = array_sort($result_col, SORT_DESC);\n    for ($i = 0; $i < $lst_len; $i++) {\n        $result[$i] = array($result_row[$i], $result_col[$i]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp_sxmtuyl.php:40\nStack trace:\n#0 /tmp/tmp_sxmtuyl.php(49): get_row(Array, 1)\n#1 /tmp/tmp_sxmtuyl.php(53): candidate(Array, 1)\n#2 /tmp/tmp_sxmtuyl.php(61): test()\n#3 {main}\n  thrown in /tmp/tmp_sxmtuyl.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_col_count = 0;\n    $result_row_count = 0;\n    $result_col_index = 0;\n    $result_row_index = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_index = 0;\n    $result_row_index_index = 0;\n    $result_col_index_index_count = 0;\n    $result_row_index_index_count = 0;\n    $result_col_index_index_index = 0;\n    $result_row_index_index_index = 0;\n    $result_col_index_index_index_count = 0;\n    $result_row_index_index_index_count = 0;\n    $result_col_index_index_index_index = 0;\n    $result_row_index_index_index_index = 0;\n    $result_col_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index = 0;\n    $result_col_index_index_index_index_index_index_count = 0;\n    $result_row_index_index_index_index_index_index_count = 0;\n    $result_col_index_index_index_index_index_index_index = 0;\n    $result_row_index_index_index_index_index_index_index = 0;\n    $result_col_index_index_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp4vnfgti7.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array_sort($result[$i], SORT_ASC);\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][$j] = array(0, $i);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpvswghqur.php:26\nStack trace:\n#0 /tmp/tmpvswghqur.php(39): get_row(Array, 1)\n#1 /tmp/tmpvswghqur.php(43): candidate(Array, 1)\n#2 /tmp/tmpvswghqur.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpvswghqur.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i][0] = $i;\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i][1] = $lst[$i][$x];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlwkft6g.php:36\nStack trace:\n#0 /tmp/tmprlwkft6g.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprlwkft6g.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_min_min_max_min = 0;\n    $result_col_index_min_min_max_min = 0;\n    $result_row_index_max_max_min_min = 0;\n    $result_col_index_max_max_min_min = 0;\n    $result_row_index_max_min_max_min = 0;\n    $result_col_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmph60ftym0.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpizodtvmg.php:20\nStack trace:\n#0 /tmp/tmpizodtvmg.php(35): get_row(Array, 1)\n#1 /tmp/tmpizodtvmg.php(39): candidate(Array, 1)\n#2 /tmp/tmpizodtvmg.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpizodtvmg.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_length = 0;\n    $result_col_length = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_length_max = 0;\n    $result_col_length_max = 0;\n    $result_row_length_min = 0;\n    $result_col_length_min = 0;\n    $result_row_index_max_temp = 0;\n    $result_col_index_max_temp = 0;\n    $result_row_index_min_temp = 0;\n    $result_col_index_min_temp = 0;\n    $result_row_length_max_temp = 0;\n    $result_col_length_max_temp = 0;\n    $result_row_length_min_temp = 0;\n    $result_col_length_min_temp = 0;\n    $result_row_index_max_temp_temp = 0;\n    $result_col_index_max_temp_temp = 0;\n    $result_row_index_min_temp_temp = 0;\n    $result_col_index_min_temp_temp = 0;\n    $result_row_length_max_temp_temp = 0;\n    $result_col_length_max_temp_temp = 0;\n    $result_row_length_min_temp_temp = 0;\n    $result_col_length_min_temp_temp = 0;\n    $result_row_index_max_temp_temp_temp = 0;\n    $result_col_index_max_temp_temp_temp = 0;\n    $result_row_index_min_temp_temp_temp = 0;\n    $result_col_index_min_temp_temp_temp = 0;\n    $result_row_length_max_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_0vmtw_w.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][$j] = $lst[$i][$j];\n            }\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($result[$i][$j] == 0) {\n                $result[$i][$j] = $lst[$i][$j];\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: Undefined array key 1 in /tmp/tmpiciym11v.php on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiciym11v.php:44\nStack trace:\n#0 /tmp/tmpiciym11v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpiciym11v.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_row_max_count = 0;\n    $result_row_max_count_index = 0;\n    $result_row_max_count_index_index = 0;\n    $result_row_max_count_index_value = 0;\n    $result_row_max_count_index_value_index = 0;\n    $result_row_max_count_index_value_value = 0;\n    $result_row_max_count_index_value_value_index = 0;\n    $result_row_max_count_index_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_value_value = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_value_value_index = 0;\n    $result_row_max_count_index_value_value_value_value_value_value_value_value_value = 0;\n    $result_row_max\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmppofgk7h3.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_col_index_prev = 0;\n    $result_col_index_next = 0;\n    $result_col_index_prev_prev = 0;\n    $result_col_index_next_next = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_col_index_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_col_index_next_next_next_next_next_next_next_next_next_next = 0;\n    $result_col_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmplrrargio.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6wt47llw.php:20\nStack trace:\n#0 /tmp/tmp6wt47llw.php(41): get_row(Array, 1)\n#1 /tmp/tmp6wt47llw.php(45): candidate(Array, 1)\n#2 /tmp/tmp6wt47llw.php(53): test()\n#3 {main}\n  thrown in /tmp/tmp6wt47llw.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_col_count_row = 0;\n    $result_col_count_row_count = 0;\n    $result_col_count_row_count_count = 0;\n    $result_col_count_row_count_count_count = 0;\n    $result_col_count_row_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $result_col_count_row_count_count_count_count_count_count_count_count_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpfxhz952w.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    if (is_empty($lst)) {\n        return [];\n    }\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, 'DESC');\n    $lst = array_sort($lst, 'ASC');\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst =\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzyo9n5dg.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpe5q_ota_.php:20\nStack trace:\n#0 /tmp/tmpe5q_ota_.php(41): get_row(Array, 1)\n#1 /tmp/tmpe5q_ota_.php(45): candidate(Array, 1)\n#2 /tmp/tmpe5q_ota_.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpe5q_ota_.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++) {\n        $row = $lst[$i];\n        $row_length = count($row);\n        for ($j = 0; $j < $row_length; $j++) {\n            $col = $row[$j];\n            if ($col == $x) {\n                $result_row_index = $i;\n                $result_col_index = $j;\n                $result_row = $row;\n                $result_col = $col;\n                break;\n            }\n        }\n    }\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row_index = $result_row_index + 1;\n    $result_col_index = $result_col_index + 1;\n    $result_row_index = $result_row_index - 1;\n    $result_col_index = $result_col_index - 1;\n    $result_row = array_slice($result_row, 0, $result_row_index);\n    $result_col = array_slice($result_col, 0, $result_col_index);\n    $result = array(array($result_row, $result_col));\n    return $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught TypeError: array_slice(): Argument #1 ($array) must be of type array, int given in /tmp/tmp8_9dxub1.php:51\nStack trace:\n#0 /tmp/tmp8_9dxub1.php(51): array_slice(1, 0, 0)\n#1 /tmp/tmp8_9dxub1.php(56): get_row(Array, 1)\n#2 /tmp/tmp8_9dxub1.php(60): candidate(Array, 1)\n#3 /tmp/tmp8_9dxub1.php(68): test()\n#4 {main}\n  thrown in /tmp/tmp8_9dxub1.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpgls0zy4d.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpgls0zy4d.php:19\nStack trace:\n#0 /tmp/tmpgls0zy4d.php(33): get_row(Array, 1)\n#1 /tmp/tmpgls0zy4d.php(37): candidate(Array, 1)\n#2 /tmp/tmpgls0zy4d.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgls0zy4d.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $lst_row_index = 0;\n    $lst_col_index = 0;\n    $lst_row_count = count($lst);\n    $lst_col_count = count($lst[0]);\n    $lst_row_index_max = $lst_row_count - 1;\n    $lst_col_index_max = $lst_col_count - 1;\n    $result_row_index_max = $lst_row_count - 1;\n    $result_col_index_max = $lst_col_count - 1;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpm8xkefu3.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] >= 0 && $a[1] >= 0 && $a[0] < $x && $a[1] < $x;\n    });\n    $lst = array_map($lst, function ($a) {\n        return array($a[0], $a[1]);\n    });\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbu2qsocu.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbu2qsocu.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpbu2qsocu.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpbu2qsocu.php:19\nStack trace:\n#0 /tmp/tmpbu2qsocu.php(35): get_row(Array, 1)\n#1 /tmp/tmpbu2qsocu.php(39): candidate(Array, 1)\n#2 /tmp/tmpbu2qsocu.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpbu2qsocu.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $x) {\n        $result[$i] = array();\n        $j = 0;\n        while ($j < $lst[$i].length) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpoy2cxzgq.php:23\nStack trace:\n#0 /tmp/tmpoy2cxzgq.php(33): get_row(Array, 1)\n#1 /tmp/tmpoy2cxzgq.php(37): candidate(Array, 1)\n#2 /tmp/tmpoy2cxzgq.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpoy2cxzgq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = $lst || [];\n    $x = $x || 0;\n    $result = [];\n    $result_row = [];\n    $result_row_index = 0;\n    $result_row_index_max = 0;\n    $result_row_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_row_index_min_max_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_row_index_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_max = 0;\n    $result_row_index_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_min_max_max = 0;\n    $result_row_index_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_max = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max_max = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max_min = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    $result_row_index_min_max_min_max_min_max_min_max_min_max_min_max_max = 0;\n    $result\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpdr1xjtj2.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $lst = array_flip($lst);\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    $result = array_sort($result, SORT_ASC);\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array_sort($result[$i], SORT_DESC);\n    }\n    $result = array_flip($result);\n    $result = array_slice($result, $x, $x + 1);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp6do3hvne.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp6do3hvne.php on line 19\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmp6do3hvne.php on line 19\n\nWarning: Undefined array key 0 in /tmp/tmp6do3hvne.php on line 20\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp6do3hvne.php on line 20\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp6do3hvne.php:26\nStack trace:\n#0 /tmp/tmp6do3hvne.php(36): get_row(Array, 1)\n#1 /tmp/tmp6do3hvne.php(40): candidate(Array, 1)\n#2 /tmp/tmp6do3hvne.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp6do3hvne.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3zeiol8h.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_count = 0;\n    $result_col_index_count = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_max = 0;\n    $result_row_index_count_min = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min = 0;\n    $result_row_index_count_max = 0;\n    $result_col_index_count_min =\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp315x3vmr.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpjon3zt8r.php:20\nStack trace:\n#0 /tmp/tmpjon3zt8r.php(35): get_row(Array, 1)\n#1 /tmp/tmpjon3zt8r.php(39): candidate(Array, 1)\n#2 /tmp/tmpjon3zt8r.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpjon3zt8r.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_max_max = 0;\n    $result_col_index_max_max = 0;\n    $result_row_index_max_min = 0;\n    $result_col_index_max_min = 0;\n    $result_row_index_min_max_max = 0;\n    $result_col_index_min_max_max = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_max_max_max = 0;\n    $result_col_index_max_max_max = 0;\n    $result_row_index_max_min_max = 0;\n    $result_col_index_max_min_max = 0;\n    $result_row_index_min_max_min = 0;\n    $result_col_index_min_max_min = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_max_max_min = 0;\n    $result_col_index_max_max_min = 0;\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp6or1m4nc.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_max_index = 0;\n    $result_row_max_count = 0;\n    $result_row_max_index_count = 0;\n    $result_row_max_index_count_index = 0;\n    $result_row_max_index_count_count = 0;\n    $result_row_max_index_count_count_index = 0;\n    $result_row_max_index_count_count_count = 0;\n    $result_row_max_index_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count_count = 0;\n    $result_row_max_index_count_count_count_count_count_count_count_count_count_index = 0;\n    $result_row_max_index_count_count_count_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9q3t3n6v.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while ($i < $x) {\n        $result[$i] = array();\n        $j = 0;\n        while ($j < $lst[$i].length) {\n            $result[$i][$j] = $lst[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpoy2cxzgq.php:23\nStack trace:\n#0 /tmp/tmpoy2cxzgq.php(33): get_row(Array, 1)\n#1 /tmp/tmpoy2cxzgq.php(37): candidate(Array, 1)\n#2 /tmp/tmpoy2cxzgq.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpoy2cxzgq.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    // Write your code here\n    var $result = [];\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = 0;\n    var $m = 0;\n    var $n = 0;\n    var $o = 0;\n    var $p = 0;\n    var $q = 0;\n    var $r = 0;\n    var $s = 0;\n    var $t = 0;\n    var $u = 0;\n    var $v = 0;\n    var $w = 0;\n    var $x = 0;\n    var $y = 0;\n    var $z = 0;\n    var $a = 0;\n    var $b = 0;\n    var $c = 0;\n    var $d = 0;\n    var $e = 0;\n    var $f = 0;\n    var $g = 0;\n    var $h = 0;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = 0;\n    var $m = 0;\n    var $n = 0;\n    var $o = 0;\n    var $p = 0;\n    var $q = 0;\n    var $r = 0;\n    var $s = 0;\n    var $t = 0;\n    var $u = 0;\n    var $v = 0;\n    var $w = 0;\n    var $x = 0;\n    var $y = 0;\n    var $z = 0;\n    var $a = 0;\n    var $b = 0;\n    var $c = 0;\n    var $d = 0;\n    var $e = 0;\n    var $f = 0;\n    var $g = 0;\n    var $h = 0;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = 0;\n    var $m = 0;\n    var $n = 0;\n    var $o = 0;\n    var $p = 0;\n    var $q = 0;\n    var $r = 0;\n    var\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpr3a8dmgv.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $lst = array_sort($lst, function ($a, $b) {\n        return $a[1] - $b[1];\n    });\n    $lst = array_filter($lst, function ($a) {\n        return $a[0] == $x;\n    });\n    $lst = array_flip($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nWarning: array_flip(): Can only flip string and integer values, entry skipped in /tmp/tmpzxu6nugc.php on line 18\n\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpzxu6nugc.php:19\nStack trace:\n#0 /tmp/tmpzxu6nugc.php(33): get_row(Array, 1)\n#1 /tmp/tmpzxu6nugc.php(37): candidate(Array, 1)\n#2 /tmp/tmpzxu6nugc.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzxu6nugc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $i = 0;\n    while($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while($j < $row.length) {\n            if($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpmx81cuf2.php:20\nStack trace:\n#0 /tmp/tmpmx81cuf2.php(35): get_row(Array, 1)\n#1 /tmp/tmpmx81cuf2.php(39): candidate(Array, 1)\n#2 /tmp/tmpmx81cuf2.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpmx81cuf2.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: Unclosed '{' on line 17 in /tmp/tmp0a15tjui.php on line 73\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $result_row = [];\n    $result_col = [];\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_index_min_max = 0;\n    $result_col_index_min_max = 0;\n    $result_row_index_min_min = 0;\n    $result_col_index_min_min = 0;\n    $result_row_index_min_min_max = 0;\n    $result_col_index_min_min_max = 0;\n    $result_row_index_min_min_min = 0;\n    $result_col_index_min_min_min = 0;\n    $result_row_index_min_min_min_max = 0;\n    $result_col_index_min_min_min_max = 0;\n    $result_row_index_min_min_min_min = 0;\n    $result_col_index_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_min_min_max = 0;\n    $result_col_index_min_min_min_min_min_max = 0;\n    $result_row_index_min_min_min_min_min_min = 0;\n    $result_col_index_min_min_min_min_min_min = 0;\n    $result_row_index_min_min_min_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpg6jynv_l.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_next = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_prev_next = 0;\n    $result_col_index_prev_next = 0;\n    $result_row_index_prev_next_prev = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_row_index_prev_next_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_row_index_prev_next_next_prev = 0;\n    $result_col_index_prev_next_next_prev = 0;\n    $result_row_index_prev_next_next_next = 0;\n    $result_col_index_prev_next_next_next = 0;\n    $result_row_index_prev_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next = 0;\n    $result_row_index_prev_next_next_next_next_prev = 0;\n    $result_col_index_prev_next_next_next_next_prev = 0;\n    $result_row_index_prev_next_next_next_next_next = 0;\n    $result_col_index_prev_next_next_next_next_next = 0;\n    $result_row_index_prev_next\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpry2k1iv6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max_index = 0;\n    $result_col_index_max_index = 0;\n    $result_row_index_min_index = 0;\n    $result_col_index_min_index = 0;\n    $result_row_count_max_index = 0;\n    $result_col_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_col_count_min_index = 0;\n    $result_row_index_max_index_max = 0;\n    $result_col_index_max_index_max = 0;\n    $result_row_index_min_index_min = 0;\n    $result_col_index_min_index_min = 0;\n    $result_row_count_max_index_max = 0;\n    $result_col_count_max_index_max = 0;\n    $result_row_count_min_index_min = 0;\n    $result_col_count_min_index_min = 0;\n    $result_row_index_max_index_min = 0;\n    $result_col_index_max_index_min = 0;\n    $result_row_count_max_index_min = 0;\n    $result_col_count_max_index_min = 0;\n    $result_row_index_max_index_max = 0\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzsdc9lhx.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_row_index = 0;\n    $result_col_index = 0;\n    $result_row_count = 0;\n    $result_col_count = 0;\n    $result_row_index_max = 0;\n    $result_col_index_max = 0;\n    $result_row_index_min = 0;\n    $result_col_index_min = 0;\n    $result_row_count_max = 0;\n    $result_col_count_max = 0;\n    $result_row_count_min = 0;\n    $result_col_count_min = 0;\n    $result_row_index_max_col = 0;\n    $result_col_index_max_row = 0;\n    $result_row_index_min_col = 0;\n    $result_col_index_min_row = 0;\n    $result_row_count_max_col = 0;\n    $result_col_count_max_row = 0;\n    $result_row_count_min_col = 0;\n    $result_col_count_min_row = 0;\n    $result_row_index_max_col_index = 0;\n    $result_col_index_max_row_index = 0;\n    $result_row_index_min_col_index = 0;\n    $result_col_index_min_row_index = 0;\n    $result_row_count_max_col_index = 0;\n    $result_col_count_max_row_index = 0;\n    $result_row_count_min_col_index = 0;\n    $result_col_count_min_row_index = 0;\n    $result_row_index_max_col_index_count = 0;\n    $result_col_index_max_row_index_count = 0;\n    $result_row_index_min_col_index_count = 0;\n    $result_col_index_min_row_index_count = 0;\n    $result_row_count\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp9979269m.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $i = 0;\n    while ($i < $lst.length) {\n        $row = $lst[$i];\n        $j = 0;\n        while ($j < $row.length) {\n            if ($row[$j] == $x) {\n                $result.push(array($i, $j));\n            }\n            $j++;\n        }\n        $i++;\n    }\n    $result.sort(function($a, $b) {\n        return $a[0] - $b[0];\n    });\n    $result.sort(function($a, $b) {\n        return $a[1] - $b[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmp6wt47llw.php:20\nStack trace:\n#0 /tmp/tmp6wt47llw.php(41): get_row(Array, 1)\n#1 /tmp/tmp6wt47llw.php(45): candidate(Array, 1)\n#2 /tmp/tmp6wt47llw.php(53): test()\n#3 {main}\n  thrown in /tmp/tmp6wt47llw.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_col = array();\n    $result_col_count = 0;\n    $result_row_count = 0;\n    $result_col_index = 0;\n    $result_row_index = 0;\n    $result_col_index_prev = 0;\n    $result_row_index_prev = 0;\n    $result_col_index_next = 0;\n    $result_row_index_next = 0;\n    $result_col_index_prev_prev = 0;\n    $result_row_index_prev_prev = 0;\n    $result_col_index_next_next = 0;\n    $result_row_index_next_next = 0;\n    $result_col_index_prev_next = 0;\n    $result_row_index_prev_next = 0;\n    $result_col_index_next_prev = 0;\n    $result_row_index_next_prev = 0;\n    $result_col_index_prev_prev_prev = 0;\n    $result_row_index_prev_prev_prev = 0;\n    $result_col_index_next_next_next = 0;\n    $result_row_index_next_next_next = 0;\n    $result_col_index_prev_next_next = 0;\n    $result_row_index_prev_next_next = 0;\n    $result_col_index_next_prev_next = 0;\n    $result_row_index_next_prev_next = 0;\n    $result_col_index_prev_prev_next = 0;\n    $result_row_index_prev_prev_next = 0;\n    $result_col_index_next_prev_prev = 0;\n    $result_row_index_next_prev_prev = 0;\n    $result_col_index_prev_next_prev = 0;\n    $result_row_index_prev_next_prev = 0;\n    $result_col_index_next_prev_prev_prev = 0;\n    $result_row_index_next_prev_prev_\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpvjkuooew.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][$j] = $lst[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($result[$i][$j] == $x) {\n                $result[$i][$j] = array($i, $j);\n            }\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($result[$i][$j] == array($i, $j)) {\n                $result[$i][$j] = array($i, $j);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh2uvioc.php:49\nStack trace:\n#0 /tmp/tmpqh2uvioc.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqh2uvioc.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i] = array();\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        $result[$i][0] = $i;\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[$i][1] = $j;\n                break;\n            }\n        }\n    }\n    for ($i = 0; $i < $lst[0][0]; $i++) {\n        for ($j = 0; $j < $lst[0][1]; $j++) {\n            $result[$i][2] = $lst[$i][$j];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiabbb4u.php:46\nStack trace:\n#0 /tmp/tmpsiabbb4u.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsiabbb4u.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    $result_row = array();\n    $result_row_index = 0;\n    $result_row_count = 0;\n    $result_row_count_max = 0;\n    $result_row_count_min = 0;\n    $result_row_count_max_index = 0;\n    $result_row_count_min_index = 0;\n    $result_row_count_max_index_prev = 0;\n    $result_row_count_min_index_prev = 0;\n    $result_row_count_max_index_prev_prev = 0;\n    $result_row_count_min_index_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    $result_row\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp1n2eee1w.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_flip($lst);\n    $lst = array_fl\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293014,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpswwxipj7.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}