{
  "name": "HumanEval_117_select_words",
  "language": "php",
  "prompt": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n",
  "tests": "function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"!\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"*\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\"|\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"~\", \"\", $s);\n    $s = str_replace(\"`\", \"\",\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292934,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppck4dw_a.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpvs7bj5eu.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = $s.split(\" \");\n    $result = [];\n    for ($i = 0; $i < $words.length; $i++) {\n        if ($words[$i].length == $n) {\n            $result.push($words[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpkv7uoow3.php:19\nStack trace:\n#0 /tmp/tmpkv7uoow3.php(30): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpkv7uoow3.php(34): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpkv7uoow3.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpkv7uoow3.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($w) {\n        return count_chars($w, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp_fq6lom1.php:20\nStack trace:\n#0 /tmp/tmp_fq6lom1.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp_fq6lom1.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp_fq6lom1.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp_fq6lom1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return $e.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvleuflqh.php:20\nStack trace:\n#0 /tmp/tmpvleuflqh.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvleuflqh.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvleuflqh.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpvleuflqh.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpjrasv6jl.php:20\nStack trace:\n#0 /tmp/tmpjrasv6jl.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpjrasv6jl.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpjrasv6jl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpjrasv6jl.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.replace(/^\\s+|\\s+$/g, '');\n    $s = $s.split(' ');\n    $n = $n - 1;\n    $s = $s.sort();\n    $s = $s.filter(function($w) {\n        return $w.length == $n;\n    });\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpu9_uo3kv.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace(':', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('*', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpr8aewjfr.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmplxzk9ju1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp_gi4whg3.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3pvvj4nw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function ($s) {\n        return $s.match(/^[a\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp1935qefy.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($x) {\n        return $x.match(/^[a-zA-Z]*\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpjom4lep1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array();\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpicbfbe2d.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpr4k2nl8f.php:20\nStack trace:\n#0 /tmp/tmpr4k2nl8f.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpr4k2nl8f.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpr4k2nl8f.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpr4k2nl8f.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.replace(/^\\s+|\\s+$/g, '');\n    $s = $s.split(' ');\n    for ($i = 0; $i < $s.length; $i++) {\n        if ($s[$i].length == $n) {\n            $words[$i] = $s[$i];\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpe_qfzlsy.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5ftiahmc.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/[^a-zA-Z\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpat53mcaf.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        $arr = $word.split(\"\");\n        $arr = array_filter($arr, function($c) {\n            return $c != \" \";\n        });\n        return $arr.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpc2l9u128.php:20\nStack trace:\n#0 /tmp/tmpc2l9u128.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpc2l9u128.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpc2l9u128.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpc2l9u128.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5nz7r05c.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return $e.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvleuflqh.php:20\nStack trace:\n#0 /tmp/tmpvleuflqh.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvleuflqh.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvleuflqh.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpvleuflqh.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) == null;\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpvzj8_f90.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwloupg5l.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function ($s) {\n        return strlen($s) == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpwmmwjs8j.php:24\nStack trace:\n#0 /tmp/tmpwmmwjs8j.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpwmmwjs8j.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpwmmwjs8j.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpwmmwjs8j.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp9lojw2d8.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^\\s*$/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpg4fvzegu.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp_gi4whg3.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $c = 0;\n    $i = 0;\n    while ($i < strlen($s)) {\n        if ($s[$i] == ' ') {\n            $i++;\n            continue;\n        }\n        if ($c == $n) {\n            $words[$i] = $s[$i];\n            $i++;\n            $c = 0;\n            continue;\n        }\n        $c++;\n        $i++;\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0byczrc8.php:44\nStack trace:\n#0 /tmp/tmp0byczrc8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0byczrc8.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpyk75_das.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9edvg3_4.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (0 == $n) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpkid7tbgz.php:23\nStack trace:\n#0 /tmp/tmpkid7tbgz.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpkid7tbgz.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpkid7tbgz.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpkid7tbgz.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e) {\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3vs0o2uh.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3pvvj4nw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('\\n', '', $s);\n    $s = str_replace('\\r', '', $s);\n    $s = str_replace('\\t', '', $s);\n    $s = str_replace('\\f', '', $s);\n    $s = str_replace('\\v', '', $s);\n    $s = str_replace('\\b', '', $s);\n    $s = str_replace('\\a', '', $s);\n    $s = str_replace('\\0', '', $s);\n    $s = str_replace('\\c', '', $s);\n    $s = str_replace('\\x0B', '', $s);\n    $s = str_replace('\\x0C', '', $s);\n    $s = str_replace('\\x0D', '', $s);\n    $s = str_replace('\\x0E', '', $s);\n    $s = str_replace('\\x0F', '', $s);\n    $s = str_replace('\\x10', '', $s);\n    $s = str_replace('\\x11', '', $s);\n    $s = str_replace('\\x12', '', $s);\n    $s = str_replace('\\x13', '', $s);\n    $s = str_replace('\\x14', '', $s);\n    $s = str_replace('\\x15', '', $s);\n    $s = str_replace('\\x16', '', $s);\n    $s = str_replace('\\x17', '', $s);\n    $s = str_replace('\\x18', '', $s);\n    $s = str_replace('\\x19', '', $s);\n    $s = str_replace('\\x1A', '', $s);\n    $s = str_replace('\\x1B', '', $s);\n    $s = str_replace('\\x1C', '', $s);\n    $s = str_replace('\\x1D\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected string content \"\\x1D\" in /tmp/tmpeneisnh1.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($w) {\n        return count_chars($w, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp_fq6lom1.php:20\nStack trace:\n#0 /tmp/tmp_fq6lom1.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp_fq6lom1.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp_fq6lom1.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp_fq6lom1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-zA-Z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpu5i4ykee.php:23\nStack trace:\n#0 /tmp/tmpu5i4ykee.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpu5i4ykee.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpu5i4ykee.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpu5i4ykee.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == \"\") {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpz2_o0y2f.php:23\nStack trace:\n#0 /tmp/tmpz2_o0y2f.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpz2_o0y2f.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpz2_o0y2f.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpz2_o0y2f.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($a) {\n        return count_chars($a, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpzi11142p.php:20\nStack trace:\n#0 /tmp/tmpzi11142p.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpzi11142p.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpzi11142p.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpzi11142p.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/);});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpnn73qtqu.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s){\n        return $s.match(/[a-zA-\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3slsqcoa.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return count_chars($s, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpx2gjjdhk.php:23\nStack trace:\n#0 /tmp/tmpx2gjjdhk.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpx2gjjdhk.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpx2gjjdhk.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpx2gjjdhk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpz6ir9ik9.php:20\nStack trace:\n#0 /tmp/tmpz6ir9ik9.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpz6ir9ik9.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpz6ir9ik9.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpz6ir9ik9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v){\n        return count_chars($v, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp8ru3hw6w.php:20\nStack trace:\n#0 /tmp/tmp8ru3hw6w.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp8ru3hw6w.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp8ru3hw6w.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp8ru3hw6w.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpi4m45n2y.php:20\nStack trace:\n#0 /tmp/tmpi4m45n2y.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpi4m45n2y.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpi4m45n2y.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpi4m45n2y.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp03y_gyeb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('*', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('`', '', $s);\n    $s = str_replace('\\\\',\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpvhe__rfp.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"!\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\":\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\",\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp5xm4k_ih.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjypw8k9h.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('\\n', '', $s);\n    $s = str_replace('\\r', '', $s);\n    $s = str_replace('\\t', '', $s);\n    $s = str_replace('\\f', '', $s);\n    $s = str_replace('\\v', '', $s);\n    $s = str_replace('\\b', '', $s);\n    $s = str_replace('\\a', '', $s);\n    $s = str_replace('\\0', '', $s);\n    $s = str_replace('\\c', '', $s);\n    $s = str_replace('\\x0B', '', $s);\n    $s = str_replace('\\x0C', '', $s);\n    $s = str_replace('\\x0D', '', $s);\n    $s = str_replace('\\x0E', '', $s);\n    $s = str_replace('\\x0F', '', $s);\n    $s = str_replace('\\x10', '', $s);\n    $s = str_replace('\\x11', '', $s);\n    $s = str_replace('\\x12', '', $s);\n    $s = str_replace('\\x13', '', $s);\n    $s = str_replace('\\x14', '', $s);\n    $s = str_replace('\\x15', '', $s);\n    $s = str_replace('\\x16', '', $s);\n    $s = str_replace('\\x17', '', $s);\n    $s = str_replace('\\x18', '', $s);\n    $s = str_replace('\\x19', '', $s);\n    $s = str_replace('\\x1A', '', $s);\n    $s = str_replace('\\x1B', '', $s);\n    $s = str_replace('\\x1C', '', $s);\n    $s = str_replace('\\x1D\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected string content \"\\x1D\" in /tmp/tmpeneisnh1.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return count_chars($v, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpwiu8lia5.php:20\nStack trace:\n#0 /tmp/tmpwiu8lia5.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpwiu8lia5.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpwiu8lia5.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpwiu8lia5.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\n    $arr = array_filter($arr, function($v){return $v.match(/[^a-zA-Z]/g) == null;});\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpx9ga2pkp.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = $s.replace(/\\s/g, '');\n    $n = $n - 1;\n    $arr = [];\n    $arr = $s.split(' ');\n    $arr = $arr.filter(function($elem) {\n        return $elem.match(/^[a-zA-Z]{$n}$/);\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpa8y8sfq7.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp6hs8w4j_.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.match(/[^a-zA-Z]/g) ===\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp0x05aw8q.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpqngu9pys.php:20\nStack trace:\n#0 /tmp/tmpqngu9pys.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpqngu9pys.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpqngu9pys.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpqngu9pys.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\".\", \"\", $s);\n    $s = str_replace(\"!\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"*\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"~\", \"\", $s);\n    $s = str_replace(\"|\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpfurau66w.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3pvvj4nw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('`', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('\\'', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmp4ez25ebd.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return count_chars($s, \"a-zA-Z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpzs5hd_oq.php:24\nStack trace:\n#0 /tmp/tmpzs5hd_oq.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpzs5hd_oq.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpzs5hd_oq.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzs5hd_oq.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpuaobaiur.php:23\nStack trace:\n#0 /tmp/tmpuaobaiur.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpuaobaiur.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpuaobaiur.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpuaobaiur.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return count_chars($e, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp1b1q7hgl.php:20\nStack trace:\n#0 /tmp/tmp1b1q7hgl.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp1b1q7hgl.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp1b1q7hgl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp1b1q7hgl.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp_gi4whg3.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('\\n', '', $s);\n    $s = str_replace('\\r', '', $s);\n    $s = str_replace('\\t', '', $s);\n    $s = str_replace('\\v', '', $s);\n    $s = str_replace('\\f', '', $s);\n    $s = str_replace('\\b', '', $s);\n    $s = str_replace('\\0', '', $s);\n    $s = str_replace('\\x0', '', $s);\n    $s = str_replace('\\x0b', '', $s);\n    $s = str_replace('\\x0c', '', $s);\n    $s = str_replace('\\x0e', '', $s);\n    $s = str_replace('\\x0f', '', $s);\n    $s = str_replace('\\x10', '', $s);\n    $s = str_replace('\\x11', '', $s);\n    $s = str_replace('\\x12', '', $s);\n    $s = str_replace('\\x13', '', $s);\n    $s = str_replace('\\x14', '', $s);\n    $s = str_replace('\\x15', '', $s);\n    $s = str_replace('\\x16', '', $s);\n    $s = str_replace('\\x17', '',\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4c268_0w.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmppx1pk6gj.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]*$/) && $v.match(/^[a-zA-Z ]*$/\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpeny7f_op.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\\w+\\b/g, ' ');\n    $s = $s.replace(/\\b\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpyk75_das.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp9lojw2d8.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp0o4z_27t.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3h_dvahy.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return count_chars($s, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp7uyeg8yb.php:20\nStack trace:\n#0 /tmp/tmp7uyeg8yb.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp7uyeg8yb.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp7uyeg8yb.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7uyeg8yb.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('\\n', '', $s);\n    $s = str_replace('\\r', '', $s);\n    $s = str_replace('\\t', '', $s);\n    $s = str_replace('\\0', '', $s);\n    $s = str_replace('\\x0', '', $s);\n    $s = str_replace('\\x00', '', $s);\n    $s = str_replace('\\x000', '', $s);\n    $s = str_replace('\\x0000', '', $s);\n    $s = str_replace('\\x00000', '', $s);\n    $s = str_replace('\\x000000', '', $s);\n    $s = str_replace('\\x0000000', '', $s);\n    $s = str_replace('\\x00000000', '', $s);\n    $s = str_replace('\\x000000000', '', $s);\n    $s = str_replace('\\x0000000000', '', $s);\n    $s = str_replace('\\x00000000000', '', $s);\n    $s = str_replace('\\x000000000000', '', $s);\n    $s = str_replace('\\x0000000000000', '', $s);\n    $s = str_replace('\\x00000000000000', '', $s);\n    $s = str_replace('\\x000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000', '', $s);\n    $s = str_replace('\\x000000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000000', '', $s);\n    $s = str_replace('\\x000000000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000000000', '', $s);\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmp5t8drjyy.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpwwumzvdd.php:20\nStack trace:\n#0 /tmp/tmpwwumzvdd.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpwwumzvdd.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpwwumzvdd.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpwwumzvdd.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp2832yv7y.php:23\nStack trace:\n#0 /tmp/tmp2832yv7y.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp2832yv7y.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp2832yv7y.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp2832yv7y.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpi4m45n2y.php:20\nStack trace:\n#0 /tmp/tmpi4m45n2y.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpi4m45n2y.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpi4m45n2y.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpi4m45n2y.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('*', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('`', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpr1vcd0r8.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return count_chars($v, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp872fkm_k.php:20\nStack trace:\n#0 /tmp/tmp872fkm_k.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp872fkm_k.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp872fkm_k.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp872fkm_k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpn85ukoe8.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array();\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpicbfbe2d.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, \"a-zA-Z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpi2318lxp.php:20\nStack trace:\n#0 /tmp/tmpi2318lxp.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpi2318lxp.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpi2318lxp.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpi2318lxp.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpz6ir9ik9.php:20\nStack trace:\n#0 /tmp/tmpz6ir9ik9.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpz6ir9ik9.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpz6ir9ik9.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpz6ir9ik9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (0 == $s.length) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpiryrxp_z.php:20\nStack trace:\n#0 /tmp/tmpiryrxp_z.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpiryrxp_z.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpiryrxp_z.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpiryrxp_z.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function ($s) {\n        return strlen($s) == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpwmmwjs8j.php:24\nStack trace:\n#0 /tmp/tmpwmmwjs8j.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpwmmwjs8j.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpwmmwjs8j.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpwmmwjs8j.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[a-zA-Z]/g) != null;\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/[a-zA-Z]/g).length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpqeat1x93.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp9lojw2d8.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($elem){\n        return $elem.match(/[^a-zA-Z]/g) === null;\n    });\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp2217l0aj.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr = array_filter($arr, function($word) {\n        return $word.length > 0;\n    });\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6te4x8jd.php on line 74\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpjrasv6jl.php:20\nStack trace:\n#0 /tmp/tmpjrasv6jl.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpjrasv6jl.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpjrasv6jl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpjrasv6jl.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpgjprbdol.php:23\nStack trace:\n#0 /tmp/tmpgjprbdol.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpgjprbdol.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpgjprbdol.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpgjprbdol.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($e) {\n        return count_chars($e, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp3ilkej61.php:20\nStack trace:\n#0 /tmp/tmp3ilkej61.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp3ilkej61.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp3ilkej61.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp3ilkej61.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5gw9_u_s.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpr4k2nl8f.php:20\nStack trace:\n#0 /tmp/tmpr4k2nl8f.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpr4k2nl8f.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpr4k2nl8f.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpr4k2nl8f.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($w){\n        return count_chars($w, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp6vhdme1e.php:20\nStack trace:\n#0 /tmp/tmp6vhdme1e.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp6vhdme1e.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp6vhdme1e.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp6vhdme1e.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp72bkx6ge.php:23\nStack trace:\n#0 /tmp/tmp72bkx6ge.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp72bkx6ge.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp72bkx6ge.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp72bkx6ge.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function ($word) {\n        return $word.match(/^[a\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpwku1251i.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpp5gf0c58.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpnd5kfts2.php:24\nStack trace:\n#0 /tmp/tmpnd5kfts2.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpnd5kfts2.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpnd5kfts2.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpnd5kfts2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($w){\n        return count_chars($w, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp6vhdme1e.php:20\nStack trace:\n#0 /tmp/tmp6vhdme1e.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp6vhdme1e.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp6vhdme1e.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp6vhdme1e.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpnd5kfts2.php:24\nStack trace:\n#0 /tmp/tmpnd5kfts2.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpnd5kfts2.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpnd5kfts2.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpnd5kfts2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return count_chars($v, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp872fkm_k.php:20\nStack trace:\n#0 /tmp/tmp872fkm_k.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp872fkm_k.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp872fkm_k.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp872fkm_k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){return $v.length == $n});\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"}\", expecting \";\" in /tmp/tmp4f5f1n9i.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp6ik90qcx.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($a) {\n        return $a.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpvs7bj5eu.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') + count_chars($word, 'e') + count_chars($word, 'i') + count_chars($word, 'o') + count_chars($word, 'u') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpzl1ouqt8.php:24\nStack trace:\n#0 /tmp/tmpzl1ouqt8.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpzl1ouqt8.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpzl1ouqt8.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzl1ouqt8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        $arr = $word.split(\"\");\n        $arr = array_filter($arr, function($c) {\n            return $c.match(/[a-zA-Z]/);\n        });\n        return $arr.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp4h86qks3.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]*$/);\n    });\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpafqo8ufb.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpu0s374s4.php:20\nStack trace:\n#0 /tmp/tmpu0s374s4.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpu0s374s4.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpu0s374s4.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpu0s374s4.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpuhwosva0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array();\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpicbfbe2d.php on line 83\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjypw8k9h.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v){\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9d_nxna7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpdx9xs1os.php:24\nStack trace:\n#0 /tmp/tmpdx9xs1os.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpdx9xs1os.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpdx9xs1os.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpdx9xs1os.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, \"a-zA-Z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmppk538qri.php:23\nStack trace:\n#0 /tmp/tmppk538qri.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmppk538qri.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmppk538qri.php(44): test()\n#3 {main}\n  thrown in /tmp/tmppk538qri.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace(':', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('*', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('#', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpdx4ly61g.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') + count_chars($word, 'e') + count_chars($word, 'i') + count_chars($word, 'o') + count_chars($word, 'u') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpzl1ouqt8.php:24\nStack trace:\n#0 /tmp/tmpzl1ouqt8.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpzl1ouqt8.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpzl1ouqt8.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzl1ouqt8.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.split(' ');\n    for($i = 0; $i < $s.length; $i++) {\n        $word = $s[$i];\n        $count = 0;\n        for($j = 0; $j < $word.length; $j++) {\n            if($word[$j] == ' ') {\n                continue;\n            }\n            $count++;\n            if($count == $n) {\n                $words[$i] = $word;\n                break;\n            }\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmph4amb448.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.split(' ');\n    $s = array_filter($s, function($w) {\n        return $w.length == $n;\n    });\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp2ve1dqrx.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp3pvvj4nw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, \"a-zA-Z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpi2318lxp.php:20\nStack trace:\n#0 /tmp/tmpi2318lxp.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpi2318lxp.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpi2318lxp.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpi2318lxp.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpqngu9pys.php:20\nStack trace:\n#0 /tmp/tmpqngu9pys.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpqngu9pys.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpqngu9pys.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpqngu9pys.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1,}$/);\n    });\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpb93__ojn.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $c = 0;\n    $i = 0;\n    while ($i < strlen($s)) {\n        if ($s[$i] == ' ') {\n            $i++;\n            continue;\n        }\n        if ($c == $n) {\n            $words[$i] = $s[$i];\n            $i++;\n            $c = 0;\n            continue;\n        }\n        $c++;\n        $i++;\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0byczrc8.php:44\nStack trace:\n#0 /tmp/tmp0byczrc8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0byczrc8.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\".\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"*\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\":\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"|\", \"\", $s);\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s =\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp2wqnv5wf.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpamdg0pse.php:23\nStack trace:\n#0 /tmp/tmpamdg0pse.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpamdg0pse.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpamdg0pse.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpamdg0pse.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpuiiiqkpd.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return count_chars($e, \"a-z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpsa4eftkv.php:20\nStack trace:\n#0 /tmp/tmpsa4eftkv.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpsa4eftkv.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpsa4eftkv.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpsa4eftkv.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/) && $s.match(/^[a-zA-Z ]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpiqqgjbrl.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z0-9 ]/);\n    });\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpuhwosva0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpc19f4grk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v){\n        return count_chars($v, \"a-zA-Z\") == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp2a4zrr33.php:20\nStack trace:\n#0 /tmp/tmp2a4zrr33.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp2a4zrr33.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp2a4zrr33.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp2a4zrr33.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.replace(/^\\s+|\\s+$/g, '');\n    $s = $s.split(' ');\n    for ($i = 0; $i < $s.length; $i++) {\n        if ($s[$i].length == $n) {\n            $words[$i] = $s[$i];\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpe_qfzlsy.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($e){\n        return $e.match(/^[\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp6ik90qcx.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpjbz4ffbv.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpu04q2dlm.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){\n        return $v.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpr4k2nl8f.php:20\nStack trace:\n#0 /tmp/tmpr4k2nl8f.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpr4k2nl8f.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpr4k2nl8f.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpr4k2nl8f.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return count_chars($s, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpqu6kjlpz.php:20\nStack trace:\n#0 /tmp/tmpqu6kjlpz.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpqu6kjlpz.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpqu6kjlpz.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpqu6kjlpz.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('`', '', $s);\n    $s = str_replace('\\'', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmptgiq2q2g.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpjrasv6jl.php:20\nStack trace:\n#0 /tmp/tmpjrasv6jl.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpjrasv6jl.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpjrasv6jl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpjrasv6jl.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"!\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"*\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\"|\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"~\", \"\", $s);\n    $s = str_replace(\"`\", \"\", $s);\n    $s\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpgl1kddix.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9me1vhkb.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr, function($v){return $v.match(/^[a-zA-Z]$/)});\n    $arr = array_filter($arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpihkujsk_.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($e) {\n        return $e.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp5o2t2sbk.php:20\nStack trace:\n#0 /tmp/tmp5o2t2sbk.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp5o2t2sbk.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp5o2t2sbk.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp5o2t2sbk.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($w) {\n        return count_chars($w, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp_fq6lom1.php:20\nStack trace:\n#0 /tmp/tmp_fq6lom1.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp_fq6lom1.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp_fq6lom1.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp_fq6lom1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return count_chars($s, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp7uyeg8yb.php:20\nStack trace:\n#0 /tmp/tmp7uyeg8yb.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp7uyeg8yb.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp7uyeg8yb.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7uyeg8yb.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = $s.replace(/\\s+/g, ' ');\n    $s = $s.split(' ');\n    $s = $s.filter(function($e) {\n        return $e.length > 0;\n    });\n    $s = $s.sort();\n    $s = $s.filter(function($e) {\n        return $e.length == $n;\n    });\n    return $s;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9jr117ss.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('\\n', '', $s);\n    $s = str_replace('\\r', '', $s);\n    $s = str_replace('\\t', '', $s);\n    $s = str_replace('\\0', '', $s);\n    $s = str_replace('\\x0', '', $s);\n    $s = str_replace('\\x00', '', $s);\n    $s = str_replace('\\x000', '', $s);\n    $s = str_replace('\\x0000', '', $s);\n    $s = str_replace('\\x00000', '', $s);\n    $s = str_replace('\\x000000', '', $s);\n    $s = str_replace('\\x0000000', '', $s);\n    $s = str_replace('\\x00000000', '', $s);\n    $s = str_replace('\\x000000000', '', $s);\n    $s = str_replace('\\x0000000000', '', $s);\n    $s = str_replace('\\x00000000000', '', $s);\n    $s = str_replace('\\x000000000000', '', $s);\n    $s = str_replace('\\x0000000000000', '', $s);\n    $s = str_replace('\\x00000000000000', '', $s);\n    $s = str_replace('\\x000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000', '', $s);\n    $s = str_replace('\\x000000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000000', '', $s);\n    $s = str_replace('\\x000000000000000000000', '', $s);\n    $s = str_replace('\\x0000000000000000000000', '', $s);\n    $s = str_replace('\\x00000000000000000000000', '', $s);\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmp5t8drjyy.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    if (strlen($s) == 0) {\n        return $words;\n    }\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"-\", \"\", $s);\n    $s = str_replace(\"_\", \"\", $s);\n    $s = str_replace(\"/\", \"\", $s);\n    $s = str_replace(\"\\\\\", \"\", $s);\n    $s = str_replace(\".\", \"\", $s);\n    $s = str_replace(\"'\", \"\", $s);\n    $s = str_replace(\"\\\"\", \"\", $s);\n    $s = str_replace(\"?\", \"\", $s);\n    $s = str_replace(\"!\", \"\", $s);\n    $s = str_replace(\";\", \"\", $s);\n    $s = str_replace(\"(\", \"\", $s);\n    $s = str_replace(\")\", \"\", $s);\n    $s = str_replace(\"{\", \"\", $s);\n    $s = str_replace(\"}\", \"\", $s);\n    $s = str_replace(\"[\", \"\", $s);\n    $s = str_replace(\"]\", \"\", $s);\n    $s = str_replace(\"<\", \"\", $s);\n    $s = str_replace(\">\", \"\", $s);\n    $s = str_replace(\"=\", \"\", $s);\n    $s = str_replace(\"+\", \"\", $s);\n    $s = str_replace(\"*\", \"\", $s);\n    $s = str_replace(\"$\", \"\", $s);\n    $s = str_replace(\"%\", \"\", $s);\n    $s = str_replace(\"#\", \"\", $s);\n    $s = str_replace(\"@\", \"\", $s);\n    $s = str_replace(\"&\", \"\", $s);\n    $s = str_replace(\"^\", \"\", $s);\n    $s = str_replace(\"~\", \"\", $s);\n    $s = str_replace(\"`\", \"\", $s);\n    $s = str_replace\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnr87lyvf.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[^a-zA-Z]/g) === null;\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpu04q2dlm.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('*', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace(':', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('~', '', $s);\n    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpdeb7q2q9.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($a) {\n        return $a.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpi8ekj4m9.php:20\nStack trace:\n#0 /tmp/tmpi8ekj4m9.php(29): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpi8ekj4m9.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpi8ekj4m9.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpi8ekj4m9.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjypw8k9h.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(\"\\n\", \"\", $s);\n    $s = str_replace(\"\\r\", \"\", $s);\n    $s = str_replace(\"\\t\", \"\", $s);\n    $s = str_replace(\"\\v\", \"\", $s);\n    $s = str_replace(\"\\f\", \"\", $s);\n    $s = str_replace(\"\\b\", \"\", $s);\n    $s = str_replace(\"\\0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n    $s = str_replace(\"\\x0\", \"\", $s);\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpo3fovjih.php on line 63\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]+$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpazqm6l2s.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g) && $s.match(/[a-zA-Z]/g).length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9h6b0ti7.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        $count = 0;\n        for ($i = 0; $i < $word.length; $i++) {\n            if ($word[$i] == ' ') {\n                continue;\n            }\n            $count++;\n        }\n        return $count == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp31cncfrs.php:20\nStack trace:\n#0 /tmp/tmp31cncfrs.php(35): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp31cncfrs.php(39): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp31cncfrs.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp31cncfrs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpqngu9pys.php:20\nStack trace:\n#0 /tmp/tmpqngu9pys.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpqngu9pys.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpqngu9pys.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpqngu9pys.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpos0xd524.php:20\nStack trace:\n#0 /tmp/tmpos0xd524.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpos0xd524.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpos0xd524.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpos0xd524.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($v) {\n        return count_chars($v, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp872fkm_k.php:20\nStack trace:\n#0 /tmp/tmp872fkm_k.php(28): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp872fkm_k.php(32): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp872fkm_k.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp872fkm_k.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/^[a-zA-Z]$/);\n    });\n    $arr = array\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpc19f4grk.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s == '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function ($x) {\n        return $x.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp539659z4.php:23\nStack trace:\n#0 /tmp/tmp539659z4.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp539659z4.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp539659z4.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp539659z4.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return strlen($s) == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpw2iq1ehu.php:24\nStack trace:\n#0 /tmp/tmpw2iq1ehu.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpw2iq1ehu.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpw2iq1ehu.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpw2iq1ehu.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpnd5kfts2.php:24\nStack trace:\n#0 /tmp/tmpnd5kfts2.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpnd5kfts2.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpnd5kfts2.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpnd5kfts2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = $arr;\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        return $s.match(/[a-zA-Z]/g);\n    });\n    $arr = array_filter($arr, function($s) {\n        \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpp5gf0c58.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter($arr, function($elem) {\n        return $elem.match(/^[a-zA-Z]{1,}$/);\n    });\n    $arr = array_filter\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpix484ujo.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($s) {\n        return strlen($s) == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpw2iq1ehu.php:24\nStack trace:\n#0 /tmp/tmpw2iq1ehu.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpw2iq1ehu.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpw2iq1ehu.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpw2iq1ehu.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a-z') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpvdxcks2o.php:23\nStack trace:\n#0 /tmp/tmpvdxcks2o.php(31): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpvdxcks2o.php(35): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpvdxcks2o.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpvdxcks2o.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if (strlen($s) == 0) {\n        return $arr;\n    }\n    $arr = array();\n    $arr = $s.split(\" \");\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpnd5kfts2.php:24\nStack trace:\n#0 /tmp/tmpnd5kfts2.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpnd5kfts2.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpnd5kfts2.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpnd5kfts2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = array();\n    $s = str_replace(' ', '', $s);\n    $s = str_replace('-', '', $s);\n    $s = str_replace('_', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace('\\'', '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace(':', '', $s);\n    $s = str_replace('=', '', $s);\n    $s = str_replace('+', '', $s);\n    $s = str_replace('*', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('&', '', $s);\n    $s = str_replace('^', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('\\\\',\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzzsn1_yt.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = $s.split(\" \");\n    $result = [];\n    for ($i = 0; $i < $words.length; $i++) {\n        if ($words[$i].length == $n) {\n            $result.push($words[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpkv7uoow3.php:19\nStack trace:\n#0 /tmp/tmpkv7uoow3.php(30): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpkv7uoow3.php(34): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpkv7uoow3.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpkv7uoow3.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($v) {\n        return $v.match(/^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$/);\n    });\n    $arr = array_filter($arr, function($\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp9249q6zb.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return count_chars($word, 'a') === $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpeyap6gup.php:23\nStack trace:\n#0 /tmp/tmpeyap6gup.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmpeyap6gup.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpeyap6gup.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpeyap6gup.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr = $arr;\n    $arr\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjypw8k9h.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr = array();\n    if ($s === '') {\n        return $arr;\n    }\n    $arr = $s.split(' ');\n    $arr = $arr;\n    $arr = array_filter($arr, function($word) {\n        return $word.length == $n;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292935,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp2832yv7y.php:23\nStack trace:\n#0 /tmp/tmp2832yv7y.php(32): select_words('Mary had a litt...', 4)\n#1 /tmp/tmp2832yv7y.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp2832yv7y.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp2832yv7y.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}