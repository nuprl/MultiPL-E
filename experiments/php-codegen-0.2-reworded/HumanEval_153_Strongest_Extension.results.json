{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "php",
  "prompt": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n",
  "tests": "function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplzh2wme8.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplzh2wme8.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplzh2wme8.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzh2wme8.php:49\nStack trace:\n#0 /tmp/tmplzh2wme8.php(60): test()\n#1 {main}\n  thrown in /tmp/tmplzh2wme8.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, \"_\");\n    $extensions = $extensions;\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $extensions_array = $extensions;\n    $extensions_array.sort(function($a, $b) {\n        return $a.length - $b.length;\n    });\n    for ($i = 0; $i < $extensions_array.length; $i++) {\n        $extension = $extensions_array[$i];\n        $extension_strength = 0;\n        $extension_strength = $extension.length - $extension.replace(/ /g, \"_\").length;\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name + \".\" + $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp55w_syqe.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c == '_') {\n                $extension_strength++;\n            } else {\n                $extension_strength += $c - 'a';\n            }\n        }\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqu454tdl.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqu454tdl.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqu454tdl.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqu454tdl.php:44\nStack trace:\n#0 /tmp/tmpqu454tdl.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqu454tdl.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7pq_sad2.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7pq_sad2.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7pq_sad2.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pq_sad2.php:49\nStack trace:\n#0 /tmp/tmp7pq_sad2.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7pq_sad2.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpaqflalqx.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpaqflalqx.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpaqflalqx.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqflalqx.php:43\nStack trace:\n#0 /tmp/tmpaqflalqx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpaqflalqx.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($strongest_extension === null || $class_strength < $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmpkaugvv3k.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaugvv3k.php:48\nStack trace:\n#0 /tmp/tmpkaugvv3k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkaugvv3k.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            $extension_strength += $char == 'a' ? 1 : $char == 'e' ? 2 : $char == 'i' ? 3 : $char == 'o' ? 4 : $char == 'u' ? 5 : 0;\n        }\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmppcclpq40.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $strength;\n        }\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpxoa9z7d1.php:23\nStack trace:\n#0 /tmp/tmpxoa9z7d1.php(23): count_chars('0', 'A')\n#1 /tmp/tmpxoa9z7d1.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpxoa9z7d1.php(39): candidate('Watashi', Array)\n#3 /tmp/tmpxoa9z7d1.php(50): test()\n#4 {main}\n  thrown in /tmp/tmpxoa9z7d1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpilks8xpk.php:24\nStack trace:\n#0 /tmp/tmpilks8xpk.php(24): count_chars('0', 'A')\n#1 /tmp/tmpilks8xpk.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpilks8xpk.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpilks8xpk.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpilks8xpk.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $extension_strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name' : $class_name,\n                'extension_name' : $extension,\n                'strength' : $extension_strength\n            };\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    } else {\n        return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n    }\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpnmodso3b.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpa4tjexp6.php:24\nStack trace:\n#0 /tmp/tmpa4tjexp6.php(24): count_chars('0', 'A')\n#1 /tmp/tmpa4tjexp6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpa4tjexp6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpa4tjexp6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpa4tjexp6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $extensions_strength = array();\n    $extensions_strength_count = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = str_count_uppercase($extension);\n        $extension_strength -= str_count_lowercase($extension);\n        $extensions_strength[$extensions_strength_count] = $extension_strength;\n        $extensions_strength_count++;\n        if($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength = $extension_strength;\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function str_count_uppercase() in /tmp/tmp1ubrcx4f.php:27\nStack trace:\n#0 /tmp/tmp1ubrcx4f.php(40): Strongest_Extension('watashi', Array)\n#1 /tmp/tmp1ubrcx4f.php(44): candidate('Watashi', Array)\n#2 /tmp/tmp1ubrcx4f.php(55): test()\n#3 {main}\n  thrown in /tmp/tmp1ubrcx4f.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $strength = 0;\n        $extension = strtolower($extension);\n        $cap = strlen($extension);\n        $sm = strlen($extension);\n        for ($i = 0; $i < $cap; $i++) {\n            if ($extension[$i] == 'A' || $extension[$i] == 'a') {\n                $strength++;\n            }\n        }\n        for ($i = 0; $i < $sm; $i++) {\n            if ($extension[$i] == 'a' || $extension[$i] == 'A') {\n                $strength++;\n            }\n        }\n        if ($strongest_extension == null || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp6mb4_lvn.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/^\\s+|\\s+$/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\s+/g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '.');\n    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpel9s3300.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = str_replace('_', '.', $class_name);\n    $class_name = $class_name . '.';\n    $class_name = $class_name . $extensions[0];\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpt3a0jakj.php on line 72\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap_count = 0;\n        $sm_count = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char == ' ') {\n                continue;\n            }\n            if($char == '-') {\n                continue;\n            }\n            if($char == '.') {\n                continue;\n            }\n            if($char == '(') {\n                continue;\n            }\n            if($char == ')') {\n                continue;\n            }\n            if($char == '*') {\n                continue;\n            }\n            if($char == '!') {\n                continue;\n            }\n            if($char == '@') {\n                continue;\n            }\n            if($char == '#') {\n                continue;\n            }\n            if($char == '$') {\n                continue;\n            }\n            if($char == '%') {\n                continue;\n            }\n            if($char == '^') {\n                continue;\n            }\n            if($char == '&') {\n                continue;\n            }\n            if($char == '*') {\n                continue;\n            }\n            if($char == '+') {\n                continue;\n            }\n            if($char == '=') {\n                continue;\n            }\n            if($char == ':') {\n                continue;\n            }\n            if($char == ';') {\n                continue;\n            }\n            if($char == '<') {\n                continue;\n            }\n            if($char == '>') {\n                continue;\n            }\n            if($char == '?') {\n                continue;\n            }\n            if($char == '~') {\n                continue;\n            }\n            if($char == '\\\\') {\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 97 in /tmp/tmp7t_sylyd.php on line 114\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strength) {\n            $strongest_extension = $class_name . '.' . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpw5grds4i.php:24\nStack trace:\n#0 /tmp/tmpw5grds4i.php(24): count_chars('0', 'A')\n#1 /tmp/tmpw5grds4i.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpw5grds4i.php(39): candidate('Watashi', Array)\n#3 /tmp/tmpw5grds4i.php(50): test()\n#4 {main}\n  thrown in /tmp/tmpw5grds4i.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6u8g4_dr.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp_hbl0gt_.php:24\nStack trace:\n#0 /tmp/tmp_hbl0gt_.php(24): count_chars('0', 'A')\n#1 /tmp/tmp_hbl0gt_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp_hbl0gt_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp_hbl0gt_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp_hbl0gt_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                $extension_strength++;\n            } else {\n                $extension_strength += $char - 'a';\n            }\n        }\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7hoxvd54.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7hoxvd54.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7hoxvd54.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hoxvd54.php:47\nStack trace:\n#0 /tmp/tmp7hoxvd54.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7hoxvd54.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (!$strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp7o14o6d_.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_strength) {\n            $strongest_extension = $class_name . '.' . $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpw64ig0va.php:23\nStack trace:\n#0 /tmp/tmpw64ig0va.php(23): count_chars('0', 'A')\n#1 /tmp/tmpw64ig0va.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpw64ig0va.php(39): candidate('Watashi', Array)\n#3 /tmp/tmpw64ig0va.php(50): test()\n#4 {main}\n  thrown in /tmp/tmpw64ig0va.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.toLowerCase();\n    $extensions = $extensions;\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $extensions_array = array();\n    for($i = 0; $i < $extensions.length; $i++) {\n        $extension = $extensions[$i];\n        $extension_array = explode(\".\", $extension);\n        $extension_array_length = count($extension_array);\n        $extension_array_strength = 0;\n        for($j = 0; $j < $extension_array_length; $j++) {\n            $extension_array_letter = $extension_array[$j];\n            $extension_array_letter_strength = 0;\n            if($extension_array_letter == \"\") {\n                $extension_array_letter_strength = 0;\n            } else {\n                $extension_array_letter_strength = count(array_filter(str_split($extension_array_letter, \"\"), function($letter) {\n                    return is_alpha($letter);\n                }));\n            }\n            $extension_array_strength += $extension_array_letter_strength;\n        }\n        $extension_array_strength = $extension_array_strength - $extension_array_length;\n        if($extension_array_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_array_strength;\n        }\n        $extensions_array[$extension] = $extension_array_strength;\n    }\n    $strongest_extension_strength = $strongest_extension_strength - $extensions_array[$strongest_extension];\n    $strongest_extension_strength = $strongest_extension_strength + 1;\n    $strongest_extension = $class_name + \".\" + $strongest_extension + \".\" + $strongest_extension_strength;\n    return $strongest_\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \";\" in /tmp/tmp9emrm5h1.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if (null === $strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpehhot0l3.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    var $strongest_extension = '';\n    var $strongest_extension_strength = 0;\n    for($i = 0; $i < $extensions.length; $i++) {\n        var $extension = $extensions[$i];\n        var $extension_strength = 0;\n        var $extension_name = $extension.substr($extension.lastIndexOf('.') + 1);\n        var $extension_upper_case_count = 0;\n        var $extension_lower_case_count = 0;\n        for($j = 0; $j < $extension_name.length; $j++) {\n            if($extension_name.substr($j, 1).match(/[A-Z]/)) {\n                $extension_upper_case_count++;\n            }\n            if($extension_name.substr($j, 1).match(/[a-z]/)) {\n                $extension_lower_case_count++;\n            }\n        }\n        $extension_strength = $extension_upper_case_count - $extension_lower_case_count;\n        if($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name + '.' + $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp2ujhtg7x.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmplgpnqs4f.php on line 22\n\nWarning: Undefined array key 0 in /tmp/tmplgpnqs4f.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgpnqs4f.php:35\nStack trace:\n#0 /tmp/tmplgpnqs4f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplgpnqs4f.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmph57crvg_.php:24\nStack trace:\n#0 /tmp/tmph57crvg_.php(24): count_chars('0', 'A')\n#1 /tmp/tmph57crvg_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmph57crvg_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmph57crvg_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmph57crvg_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if ($letter == '_') {\n                continue;\n            }\n            if ($letter >= 'A' && $letter <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp92elob_1.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp92elob_1.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp92elob_1.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92elob_1.php:49\nStack trace:\n#0 /tmp/tmp92elob_1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp92elob_1.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if ($letter == '_') {\n                continue;\n            }\n            $extension_strength += $letter == 'a' ? 1 : -1;\n        }\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strongest_extension < $class_name . \".\" . $extension_name) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7otc6v73.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7otc6v73.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7otc6v73.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7otc6v73.php:45\nStack trace:\n#0 /tmp/tmp7otc6v73.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7otc6v73.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($class_strength < $strongest_extension_strength) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmpztvhar8d.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 30\n\nWarning: Undefined variable $strongest_extension_strength in /tmp/tmpztvhar8d.php on line 38\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpztvhar8d.php on line 30\n\nWarning: Undefined variable $strongest_extension_strength in /tmp/tmpztvhar8d.php on line 38\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztvhar8d.php:50\nStack trace:\n#0 /tmp/tmpztvhar8d.php(61)",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp8dq6__f9.php:27\nStack trace:\n#0 /tmp/tmp8dq6__f9.php(27): count_chars('0', 'A')\n#1 /tmp/tmp8dq6__f9.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp8dq6__f9.php(43): candidate('Watashi', Array)\n#3 /tmp/tmp8dq6__f9.php(54): test()\n#4 {main}\n  thrown in /tmp/tmp8dq6__f9.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach ($extension as $c) {\n            if ($c == '_') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if (!$strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp_0_n4gs4.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmprosecnhn.php:25\nStack trace:\n#0 /tmp/tmprosecnhn.php(25): count_chars('0', 'A')\n#1 /tmp/tmprosecnhn.php(38): Strongest_Extension('watashi', Array)\n#2 /tmp/tmprosecnhn.php(42): candidate('Watashi', Array)\n#3 /tmp/tmprosecnhn.php(53): test()\n#4 {main}\n  thrown in /tmp/tmprosecnhn.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'strength': $strength,\n                'extension': $extension\n            };\n        }\n    }\n    if ($strongest_extension === null) {\n        return $class_name;\n    } else {\n        return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n    }\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpt5hrzjys.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            $extension_strength += 1 - $char;\n        }\n        if($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    if($strongest_extension === null) {\n        return $class_name;\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5k4gfbrw.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5k4gfbrw.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5k4gfbrw.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k4gfbrw.php:47\nStack trace:\n#0 /tmp/tmp5k4gfbrw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5k4gfbrw.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (!$strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp4sqv9n1c.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = count_chars($extension_name, 'a-z');\n        $class_strength = count_chars($class_name, 'a-z');\n        $class_strength -= count_chars($class_name, 'A-Z');\n        $class_strength += $extension_strength;\n        if ($strongest_extension === null || $strongest_extension < $class_strength) {\n            $strongest_extension = $class_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp0sev175j.php:24\nStack trace:\n#0 /tmp/tmp0sev175j.php(24): count_chars('0', 'a-z')\n#1 /tmp/tmp0sev175j.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp0sev175j.php(40): candidate('Watashi', Array)\n#3 /tmp/tmp0sev175j.php(51): test()\n#4 {main}\n  thrown in /tmp/tmp0sev175j.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach ($extension as $c) {\n            if ($c == '_') {\n                continue;\n            }\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if (!$strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmph8gpxd8k.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = count_chars($extension_name, 'a-z');\n        $class_strength = count_chars($class_name, 'a-z');\n        $class_strength -= count_chars($class_name, 'A-Z');\n        $class_strength += $extension_strength;\n        if ($strongest_extension === null || $class_strength > $strongest_extension['class_strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'class_strength': $class_strength,\n                'extension_name': $extension_name,\n                'extension_strength': $extension_strength\n            };\n        }\n    }\n    if ($strongest_extension === null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp_q2lw3p1.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $extensions_array = array();\n    $extensions_array = array_flip($extensions);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\n    $extensions_array = array_flip($extensions_array);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpk6cvguby.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap_count = 0;\n        $sm_count = 0;\n        for($i = 0; $i < strlen($extension_name); $i++) {\n            if($extension_name[$i] == '_') {\n                continue;\n            }\n            if($extension_name[$i] == '.') {\n                break;\n            }\n            if($extension_name[$i] == 'A' || $extension_name[$i] == 'a') {\n                $cap_count++;\n            }\n            if($extension_name[$i] == 'S' || $extension_name[$i] == 's') {\n                $sm_count++;\n            }\n        }\n        $extension_strength = $cap_count - $sm_count;\n        if($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if($strongest_extension < $class_name + \".\" + $extension_name) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpiocxdwhc.php:43\nStack trace:\n#0 /tmp/tmpiocxdwhc.php(52): Strongest_Extension('watashi', Array)\n#1 /tmp/tmpiocxdwhc.php(56): candidate('Watashi', Array)\n#2 /tmp/tmpiocxdwhc.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpiocxdwhc.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    var $class_name = $class_name;\n    var $extensions = $extensions;\n    var $result = '';\n    var $strength = 0;\n    var $extension_name = '';\n    var $extension_strength = 0;\n    var $extension_index = 0;\n    var $extension_name = '';\n    var $extension_strength = 0;\n    var $extension_index = 0;\n    for ($extension_index = 0; $extension_index < $extensions.length; $extension_index++) {\n        $extension_name = $extensions[$extension_index];\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        $extension_strength = 0;\n        \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmpwco_1lh4.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        $extension_strength = $extension_strength - strlen($extension_name);\n        if ($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptwlt3aml.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptwlt3aml.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptwlt3aml.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwlt3aml.php:49\nStack trace:\n#0 /tmp/tmptwlt3aml.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptwlt3aml.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpu5d4p2y2.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if($letter == '_') {\n                continue;\n            }\n            if($letter >= 'A' && $letter <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp20_ie3jl.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp20_ie3jl.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp20_ie3jl.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20_ie3jl.php:50\nStack trace:\n#0 /tmp/tmp20_ie3jl.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp20_ie3jl.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_strength) {\n            $strongest_extension = $class_name . '.' . $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpkbkozmq6.php:25\nStack trace:\n#0 /tmp/tmpkbkozmq6.php(25): count_chars('0', 'A')\n#1 /tmp/tmpkbkozmq6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpkbkozmq6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpkbkozmq6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpkbkozmq6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpatvxwl4a.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp9aty5wqu.php:24\nStack trace:\n#0 /tmp/tmp9aty5wqu.php(24): count_chars('0', 'A')\n#1 /tmp/tmp9aty5wqu.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp9aty5wqu.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp9aty5wqu.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp9aty5wqu.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $extension_strength += count_chars($extension_name, 'A');\n        $extension_strength -= count_chars($extension_name, 'a');\n        $extension_strength += count_chars($extension_name, 'C');\n        $extension_strength -= count_chars($extension_name, 'c');\n        $extension_strength += count_chars($extension_name, 'E');\n        $extension_strength -= count_chars($extension_name, 'e');\n        $extension_strength += count_chars($extension_name, 'I');\n        $extension_strength -= count_chars($extension_name, 'i');\n        $extension_strength += count_chars($extension_name, 'N');\n        $extension_strength -= count_chars($extension_name, 'n');\n        $extension_strength += count_chars($extension_name, 'S');\n        $extension_strength -= count_chars($extension_name, 's');\n        $extension_strength += count_chars($extension_name, 'U');\n        $extension_strength -= count_chars($extension_name, 'u');\n        $extension_strength += count_chars($extension_name, 'Y');\n        $extension_strength -= count_chars($extension_name, 'y');\n        $extension_strength += count_chars($extension_name, 'Z');\n        $extension_strength -= count_chars($extension_name, 'z');\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength = $extension_strength;\n            $strongest_extension = $extension_name;\n        }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 22 in /tmp/tmpmol0l69o.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, \"A\");\n        $sm = count_chars($extension, \"a\");\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpll_wqs5c.php:24\nStack trace:\n#0 /tmp/tmpll_wqs5c.php(24): count_chars('0', 'A')\n#1 /tmp/tmpll_wqs5c.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpll_wqs5c.php(39): candidate('Watashi', Array)\n#3 /tmp/tmpll_wqs5c.php(50): test()\n#4 {main}\n  thrown in /tmp/tmpll_wqs5c.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($strongest_extension === null || $class_strength < $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmpd_9y1vdp.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 30\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpd_9y1vdp.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_9y1vdp.php:48\nStack trace:\n#0 /tmp/tmpd_9y1vdp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd_9y1vdp.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpx1cwd1kt.php:23\nStack trace:\n#0 /tmp/tmpx1cwd1kt.php(23): count_chars('0', 'A')\n#1 /tmp/tmpx1cwd1kt.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpx1cwd1kt.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpx1cwd1kt.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpx1cwd1kt.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach ($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0di0weco.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0di0weco.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0di0weco.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0di0weco.php:52\nStack trace:\n#0 /tmp/tmp0di0weco.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp0di0weco.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach ($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $extension_strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $extension_strength\n            };\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpxtf796yc.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpomkffpg6.php:24\nStack trace:\n#0 /tmp/tmpomkffpg6.php(24): count_chars('0', 'A')\n#1 /tmp/tmpomkffpg6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpomkffpg6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpomkffpg6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpomkffpg6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    $class_name .= \".\" . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7gn3zkhf.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7gn3zkhf.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp7gn3zkhf.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gn3zkhf.php:48\nStack trace:\n#0 /tmp/tmp7gn3zkhf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7gn3zkhf.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if (null === $strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpehhot0l3.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    var $class_name = $class_name;\n    var $extensions = $extensions;\n    var $strongest_extension = '';\n    var $strongest_extension_strength = 0;\n    for ($i = 0; $i < $extensions.length; $i++) {\n        $extension = $extensions[$i];\n        $extension_strength = 0;\n        $extension_strength = $extension.length - $extension.replace(/[A-Z]/g, '').length;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name + '.' + $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmp_rv6kjub.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (0 == $strength) {\n            $strength = 1;\n        }\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if ($strength < $strength_of_current_extension) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpzcgzi4uy.php:25\nStack trace:\n#0 /tmp/tmpzcgzi4uy.php(25): count_chars('0', 'A')\n#1 /tmp/tmpzcgzi4uy.php(41): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpzcgzi4uy.php(45): candidate('Watashi', Array)\n#3 /tmp/tmpzcgzi4uy.php(56): test()\n#4 {main}\n  thrown in /tmp/tmpzcgzi4uy.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if ($letter == '_') {\n                continue;\n            }\n            if ($letter >= 'A' && $letter <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension == '' || $extension_strength < $strongest_extension['strength']) {\n            $strongest_extension = $extension;\n        }\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcrp0sh4n.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcrp0sh4n.php on line 25\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpcrp0sh4n.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcrp0sh4n.php on line 25\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpcrp0sh4n.php on line 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrp0sh4n.php:48\nStack trace:\n#0 /tmp/tmpcrp0sh4n.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcrp0sh4n.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = str_replace('.', '\\\\.', $class_name);\n    $extensions = array_unique($extensions);\n    $extensions = array_sort($extensions, function($a, $b) {\n        return strcmp($a, $b);\n    });\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpipjmoekr.php on line 73\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {'class_name': $class_name, 'extension': $extension, 'strength': $strength};\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp13yxll2a.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = str_replace('_', '.', $class_name);\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . '.';\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . $extensions[0];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . '.';\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . $extensions[0];\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmp5e2otska.php on line 26\n\nWarning: Undefined array key 0 in /tmp/tmp5e2otska.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5e2otska.php:39\nStack trace:\n#0 /tmp/tmp5e2otska.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5e2otska.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += -1;\n            }\n        }\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpymnk7vt_.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpymnk7vt_.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpymnk7vt_.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymnk7vt_.php:44\nStack trace:\n#0 /tmp/tmpymnk7vt_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpymnk7vt_.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension_name;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpfr0ds6r3.php:27\nStack trace:\n#0 /tmp/tmpfr0ds6r3.php(27): count_chars('0', 'A')\n#1 /tmp/tmpfr0ds6r3.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpfr0ds6r3.php(43): candidate('Watashi', Array)\n#3 /tmp/tmpfr0ds6r3.php(54): test()\n#4 {main}\n  thrown in /tmp/tmpfr0ds6r3.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c == '_') {\n                continue;\n            }\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension == '' || $extension_strength > $strongest_extension) {\n            $strongest_extension = $class_name . '.' . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwz4a3k_n.php on line 28\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwz4a3k_n.php on line 28\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwz4a3k_n.php on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwz4a3k_n.php:51\nStack trace:\n#0 /tmp/tmpwz4a3k_n.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwz4a3k_n.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpsqcuck7u.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach ($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension == null || $extension_strength < $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $extension_strength\n            };\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpbes2qpxz.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp_iozhqwv.php:24\nStack trace:\n#0 /tmp/tmp_iozhqwv.php(24): count_chars('0', 'A')\n#1 /tmp/tmp_iozhqwv.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp_iozhqwv.php(40): candidate('Watashi', Array)\n#3 /tmp/tmp_iozhqwv.php(51): test()\n#4 {main}\n  thrown in /tmp/tmp_iozhqwv.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = count_chars($extension_name, 'a');\n        $extension_strength -= count_chars($extension_name, 'e');\n        $extension_strength -= count_chars($extension_name, 'i');\n        $extension_strength -= count_chars($extension_name, 'o');\n        $extension_strength -= count_chars($extension_name, 'u');\n        $extension_strength -= count_chars($extension_name, 'y');\n        $extension_strength -= count_chars($extension_name, 'A');\n        $extension_strength -= count_chars($extension_name, 'E');\n        $extension_strength -= count_chars($extension_name, 'I');\n        $extension_strength -= count_chars($extension_name, 'O');\n        $extension_strength -= count_chars($extension_name, 'U');\n        $extension_strength -= count_chars($extension_name, 'Y');\n        if ($strongest_extension == '' || $extension_strength < $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpww848he6.php:25\nStack trace:\n#0 /tmp/tmpww848he6.php(25): count_chars('0', 'a')\n#1 /tmp/tmpww848he6.php(45): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpww848he6.php(49): candidate('Watashi', Array)\n#3 /tmp/tmpww848he6.php(60): test()\n#4 {main}\n  thrown in /tmp/tmpww848he6.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $extension_strength_array = explode(' ', $extension_name);\n        foreach($extension_strength_array as $extension_strength_element) {\n            $extension_strength += strlen($extension_strength_element);\n        }\n        $extension_strength = $extension_strength / (strlen($extension_name) - 1);\n        if ($strongest_extension == '' || $strongest_extension < $extension_strength) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmp2exxcb1z.php:30\nStack trace:\n#0 /tmp/tmp2exxcb1z.php(39): Strongest_Extension('watashi', Array)\n#1 /tmp/tmp2exxcb1z.php(43): candidate('Watashi', Array)\n#2 /tmp/tmp2exxcb1z.php(54): test()\n#3 {main}\n  thrown in /tmp/tmp2exxcb1z.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    $extensions_array = $extensions;\n    $extensions_array.sort(function($a, $b) {\n        return $a - $b;\n    });\n    for ($i = 0; $i < $extensions_array.length; $i++) {\n        $extension = $extensions_array[$i];\n        $extension_strength = 0;\n        $extension_strength = $extension.length - $extension.replace(/ /g, '').length;\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name + '.' + $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8vk7nkph.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8dzquadr.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8dzquadr.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8dzquadr.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dzquadr.php:50\nStack trace:\n#0 /tmp/tmp8dzquadr.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp8dzquadr.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strength) {\n            $strongest_extension = $class_name . '.' . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpw5grds4i.php:24\nStack trace:\n#0 /tmp/tmpw5grds4i.php(24): count_chars('0', 'A')\n#1 /tmp/tmpw5grds4i.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpw5grds4i.php(39): candidate('Watashi', Array)\n#3 /tmp/tmpw5grds4i.php(50): test()\n#4 {main}\n  thrown in /tmp/tmpw5grds4i.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp2zgghlc2.php:24\nStack trace:\n#0 /tmp/tmp2zgghlc2.php(24): count_chars('0', 'A')\n#1 /tmp/tmp2zgghlc2.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp2zgghlc2.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp2zgghlc2.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp2zgghlc2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\./g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $class_name = $class_name.replace(/\\//g, '\\\\');\n    $class_name = $class_name.replace(/\\*/g, '.*');\n    $class_name = $class_name.replace(/\\?/g, '.');\n    $class_name = $class_name.replace(/\\:/g, '\\\\.');\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpatvxwl4a.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmptjuen_in.php:24\nStack trace:\n#0 /tmp/tmptjuen_in.php(24): count_chars('0', 'A')\n#1 /tmp/tmptjuen_in.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmptjuen_in.php(41): candidate('Watashi', Array)\n#3 /tmp/tmptjuen_in.php(52): test()\n#4 {main}\n  thrown in /tmp/tmptjuen_in.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach ($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            $extension_strength += $char == 'A' ? 1 : -1;\n        }\n        if ($strongest_extension == null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplbdzw2y1.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplbdzw2y1.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmplbdzw2y1.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbdzw2y1.php:43\nStack trace:\n#0 /tmp/tmplbdzw2y1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplbdzw2y1.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if ($letter == '_') {\n                continue;\n            }\n            $extension_strength += $letter == 'a' ? 1 : 0;\n        }\n        if ($strongest_extension === null || $extension_strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $extension_strength\n            };\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpewrzrw0a.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($strongest_extension === null || $class_strength < $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmpkaugvv3k.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaugvv3k.php:48\nStack trace:\n#0 /tmp/tmpkaugvv3k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkaugvv3k.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $extension_strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $extension_strength\n            };\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp4p7ja38p.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if (null === $strongest_extension || $strength < $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp9b_fsbij.php:24\nStack trace:\n#0 /tmp/tmp9b_fsbij.php(24): count_chars('0', 'A')\n#1 /tmp/tmp9b_fsbij.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp9b_fsbij.php(40): candidate('Watashi', Array)\n#3 /tmp/tmp9b_fsbij.php(51): test()\n#4 {main}\n  thrown in /tmp/tmp9b_fsbij.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char >= 'A' && $char <= 'Z') {\n                $extension_strength++;\n            } else {\n                $extension_strength--;\n            }\n        }\n        if($strongest_extension == null || $extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    if($strongest_extension == null) {\n        return $class_name;\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpsz2gn5ab.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpsz2gn5ab.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpsz2gn5ab.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz2gn5ab.php:52\nStack trace:\n#0 /tmp/tmpsz2gn5ab.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsz2gn5ab.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $max_strength = 0;\n    $max_extension = \"\";\n    foreach($extensions as $extension) {\n        $strength = 0;\n        $extension = strtolower($extension);\n        $cap = strlen($extension);\n        $sm = strlen($extension);\n        for ($i = 0; $i < $cap; $i++) {\n            if ($extension[$i] == 'A' || $extension[$i] == 'a') {\n                $strength++;\n            }\n        }\n        for ($i = 0; $i < $sm; $i++) {\n            if ($extension[$i] == 'a' || $extension[$i] == 'A') {\n                $strength++;\n            }\n        }\n        $strength = $strength - $sm;\n        if ($strength > $max_strength) {\n            $max_strength = $strength;\n            $max_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $max_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpod_bx87o.php:53\nStack trace:\n#0 /tmp/tmpod_bx87o.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpod_bx87o.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (null === $strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (null === $strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp6_76addh.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (0 == $strength) {\n            $strength = -1;\n        }\n        if (0 < $strength && $strength > $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpg2q11nrk.php:24\nStack trace:\n#0 /tmp/tmpg2q11nrk.php(24): count_chars('0', 'A')\n#1 /tmp/tmpg2q11nrk.php(38): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpg2q11nrk.php(42): candidate('Watashi', Array)\n#3 /tmp/tmpg2q11nrk.php(53): test()\n#4 {main}\n  thrown in /tmp/tmpg2q11nrk.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if($letter == '_') {\n                continue;\n            }\n            $extension_strength += ord($letter) - 64;\n        }\n        $extension_strength += ord($extension_name[0]) - 64;\n        if($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpo1uooypp.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpo1uooypp.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpo1uooypp.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1uooypp.php:46\nStack trace:\n#0 /tmp/tmpo1uooypp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo1uooypp.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            $extension_strength += $char == 'a' ? 1 : -1;\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppwc7f5kl.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppwc7f5kl.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppwc7f5kl.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwc7f5kl.php:46\nStack trace:\n#0 /tmp/tmppwc7f5kl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppwc7f5kl.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char >= 'A' && $char <= 'Z') {\n                $extension_strength++;\n            } else {\n                $extension_strength--;\n            }\n        }\n        if($strongest_extension === null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpl9j7uo1z.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpl9j7uo1z.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpl9j7uo1z.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9j7uo1z.php:49\nStack trace:\n#0 /tmp/tmpl9j7uo1z.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpl9j7uo1z.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5qabh2du.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $strength = 0;\n        $extension = strtolower($extension);\n        foreach($extension as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $strength++;\n            }\n        }\n        if ($strongest_extension === null || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {'name': $extension, 'strength': $strength};\n        }\n    }\n    if ($strongest_extension === null) {\n        return $class_name;\n    }\n    return $class_name . '.' . $strongest_extension['name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpncrc8bc1.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (0 == $strength) {\n            $strength = 1;\n        }\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength < $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpyp7erjjj.php:23\nStack trace:\n#0 /tmp/tmpyp7erjjj.php(23): count_chars('0', 'A')\n#1 /tmp/tmpyp7erjjj.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpyp7erjjj.php(43): candidate('Watashi', Array)\n#3 /tmp/tmpyp7erjjj.php(54): test()\n#4 {main}\n  thrown in /tmp/tmpyp7erjjj.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpomkffpg6.php:24\nStack trace:\n#0 /tmp/tmpomkffpg6.php(24): count_chars('0', 'A')\n#1 /tmp/tmpomkffpg6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpomkffpg6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpomkffpg6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpomkffpg6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\./g, \"_\");\n    $class_name = $class_name.replace(/\\:/g, \"_\");\n    $class_name = $class_name.replace(/\\?/g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class_name.replace(/\\//g, \"_\");\n    $class_name = $class\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpuymnnimu.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension as $c) {\n            if ($c == '_') {\n                continue;\n            }\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_extension['strength']) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpzand0rr5.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpzand0rr5.php on line 27\n\nFatal error: Uncaught TypeError: Cannot access offset of type string on string in /tmp/tmpzand0rr5.php:38\nStack trace:\n#0 /tmp/tmpzand0rr5.php(46): Strongest_Extension('watashi', Array)\n#1 /tmp/tmpzand0rr5.php(50): candidate('Watashi', Array)\n#2 /tmp/tmpzand0rr5.php(61): test()\n#3 {main}\n  thrown in /tmp/tmpzand0rr5.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        $extension_strength = $extension_strength - strlen($extension_name);\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpy0fvcj1b.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpy0fvcj1b.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpy0fvcj1b.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0fvcj1b.php:49\nStack trace:\n#0 /tmp/tmpy0fvcj1b.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpy0fvcj1b.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    $extensions_array = $extensions;\n    $extensions_array.sort(function($a, $b) {\n        $a_strength = $a.replace(/\\s+/g, '').length;\n        $b_strength = $b.replace(/\\s+/g, '').length;\n        return $a_strength - $b_strength;\n    });\n    for ($i = 0; $i < $extensions_array.length; $i++) {\n        $extension = $extensions_array[$i];\n        $extension_strength = $extension.replace(/\\s+/g, '').length;\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $class_name + '.' + $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpc9aijikg.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char >= 'A' && $char <= 'Z') {\n                $extension_strength++;\n            } else {\n                $extension_strength--;\n            }\n        }\n        if($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpxiqy_89i.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpxiqy_89i.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpxiqy_89i.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiqy_89i.php:50\nStack trace:\n#0 /tmp/tmpxiqy_89i.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxiqy_89i.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if($letter == '_') {\n                continue;\n            }\n            $extension_strength += $letter == 'a' || $letter == 'e' || $letter == 'i' || $letter == 'o' || $letter == 'u' ? 1 : -1;\n        }\n        if($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp216vw3ll.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp216vw3ll.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp216vw3ll.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp216vw3ll.php:43\nStack trace:\n#0 /tmp/tmp216vw3ll.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp216vw3ll.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach ($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if ($strongest_extension < $class_name + \".\" + $extension_name) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwjwnksgq.php on line 25\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpwjwnksgq.php:36\nStack trace:\n#0 /tmp/tmpwjwnksgq.php(45): Strongest_Extension('watashi', Array)\n#1 /tmp/tmpwjwnksgq.php(49): candidate('Watashi', Array)\n#2 /tmp/tmpwjwnksgq.php(60): test()\n#3 {main}\n  thrown in /tmp/tmpwjwnksgq.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmptilqq0od.php:24\nStack trace:\n#0 /tmp/tmptilqq0od.php(24): count_chars('0', 'A')\n#1 /tmp/tmptilqq0od.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmptilqq0od.php(40): candidate('Watashi', Array)\n#3 /tmp/tmptilqq0od.php(51): test()\n#4 {main}\n  thrown in /tmp/tmptilqq0od.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength++;\n            } else {\n                $extension_strength--;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0w9e86k4.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0w9e86k4.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0w9e86k4.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0w9e86k4.php:50\nStack trace:\n#0 /tmp/tmp0w9e86k4.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp0w9e86k4.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = $extensions[1];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = $extensions[1];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = $extensions[1];\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpgfwrcanb.php on line 22\n\nWarning: Undefined array key 1 in /tmp/tmpgfwrcanb.php on line 23\n\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must be of type array, null given in /tmp/tmpgfwrcanb.php:24\nStack trace:\n#0 /tmp/tmpgfwrcanb.php(24): array_flip(NULL)\n#1 /tmp/tmpgfwrcanb.php(36): Strongest_Extension('watashi.', NULL)\n#2 /tmp/tmpgfwrcanb.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpgfwrcanb.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpgfwrcanb.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\./g, \"\\\\.\");\n    $extensions = $extensions;\n    $class_name = $class_name.split(\"\\\\\");\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpycejv0sf.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $extension_count = 0;\n    foreach($extensions as $extension) {\n        $extension_count++;\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap_count = 0;\n        $cap_count_upper = 0;\n        $cap_count_lower = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char == '-') {\n                continue;\n            }\n            if($char == '.') {\n                continue;\n            }\n            if($char == ' ') {\n                continue;\n            }\n            if($char == '\\t') {\n                continue;\n            }\n            if($char == '\\n') {\n                continue;\n            }\n            if($char == '\\r') {\n                continue;\n            }\n            if($char == '\\v') {\n                continue;\n            }\n            if($char == '\\f') {\n                continue;\n            }\n            if($char == '\\b') {\n                continue;\n            }\n            if($char == '\\a') {\n                continue;\n            }\n            if($char == '\\0') {\n                continue;\n            }\n            if($char == '\\x0B') {\n                continue;\n            }\n            if($char == '\\x0C') {\n                continue;\n            }\n            if($char == '\\x0E') {\n                continue;\n            }\n            if($char == '\\x0F') {\n                continue;\n            }\n            if($char == '\\x10') {\n                continue;\n            }\n            if($char == '\\x11') {\n                continue;\n            }\n            if($char == '\\x12') {\n                continue;\n            }\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 32 in /tmp/tmp0_7v1_dv.php on line 107\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $strength;\n        }\n    }\n    if ($strongest_extension == '') {\n        $strongest_extension = $class_name;\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpl0e_cy3b.php:25\nStack trace:\n#0 /tmp/tmpl0e_cy3b.php(25): count_chars('0', 'A')\n#1 /tmp/tmpl0e_cy3b.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpl0e_cy3b.php(43): candidate('Watashi', Array)\n#3 /tmp/tmpl0e_cy3b.php(54): test()\n#4 {main}\n  thrown in /tmp/tmpl0e_cy3b.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $extension_names = array();\n    foreach($extensions as $extension) {\n        $extension_names[] = strtolower($extension);\n    }\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extension_names as $extension_name) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension_name);\n        $cap_count = count_chars($extension_name, 'A');\n        $sm_count = count_chars($extension_name, 'a');\n        $extension_strength = $cap_count - $sm_count;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpkg6004rt.php:31\nStack trace:\n#0 /tmp/tmpkg6004rt.php(31): count_chars('0', 'A')\n#1 /tmp/tmpkg6004rt.php(43): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpkg6004rt.php(47): candidate('Watashi', Array)\n#3 /tmp/tmpkg6004rt.php(58): test()\n#4 {main}\n  thrown in /tmp/tmpkg6004rt.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    if ($strongest_extension_strength == 0) {\n        return $class_name;\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpevn5tis5.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpevn5tis5.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpevn5tis5.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevn5tis5.php:50\nStack trace:\n#0 /tmp/tmpevn5tis5.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpevn5tis5.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($strongest_extension == null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $class_name . \".\" . $extensions[0];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgq21b_u5.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgq21b_u5.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgq21b_u5.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgq21b_u5.php:45\nStack trace:\n#0 /tmp/tmpgq21b_u5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpgq21b_u5.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip(array_flip($extensions));\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_fl\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpb96015as.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength += 1;\n            }\n        }\n        if($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    if($strongest_extension === null) {\n        return $class_name;\n    }\n    return $class_name . \".\" . $extensions[0];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpj51nz91v.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpj51nz91v.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpj51nz91v.php on line 25\n\nWarning: Undefined array key 0 in /tmp/tmpj51nz91v.php on line 40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj51nz91v.php:48\nStack trace:\n#0 /tmp/tmpj51nz91v.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpj51nz91v.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpa2q4uc1h.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpa2q4uc1h.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpa2q4uc1h.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2q4uc1h.php:48\nStack trace:\n#0 /tmp/tmpa2q4uc1h.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpa2q4uc1h.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpomkffpg6.php:24\nStack trace:\n#0 /tmp/tmpomkffpg6.php(24): count_chars('0', 'A')\n#1 /tmp/tmpomkffpg6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpomkffpg6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpomkffpg6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpomkffpg6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension === null || $extension_strength < $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5l4vdc5j.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5l4vdc5j.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp5l4vdc5j.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5l4vdc5j.php:44\nStack trace:\n#0 /tmp/tmp5l4vdc5j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5l4vdc5j.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqwy62o2x.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqwy62o2x.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpqwy62o2x.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwy62o2x.php:47\nStack trace:\n#0 /tmp/tmpqwy62o2x.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqwy62o2x.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = str_replace(\"-\", \"_\", $class_name);\n    $class_name = str_replace(\"/\", \"_\", $class_name);\n    $class_name = str_replace(\"\\\\\", \"_\", $class_name);\n    $class_name = str_replace(\" \", \"_\", $class_name);\n    $class_name = str_replace(\".\", \"_\", $class_name);\n    $class_name = str_replace(\"(\", \"_\", $class_name);\n    $class_name = str_replace(\")\", \"_\", $class_name);\n    $class_name = str_replace(\"[\", \"_\", $class_name);\n    $class_name = str_replace(\"]\", \"_\", $class_name);\n    $class_name = str_replace(\"{\", \"_\", $class_name);\n    $class_name = str_replace(\"}\", \"_\", $class_name);\n    $class_name = str_replace(\"'\", \"_\", $class_name);\n    $class_name = str_replace(\"\\\"\", \"_\", $class_name);\n    $class_name = str_replace(\"<\", \"_\", $class_name);\n    $class_name = str_replace(\">\", \"_\", $class_name);\n    $class_name = str_replace(\"?\", \"_\", $class_name);\n    $class_name = str_replace(\"*\", \"_\", $class_name);\n    $class_name = str_replace(\"&\", \"_\", $class_name);\n    $class_name = str_replace(\"|\", \"_\", $class_name);\n    $class_name = str_replace(\"!\", \"_\", $class_name);\n    $class_name = str_replace(\"$\", \"_\", $class_name);\n    $class_name = str_replace(\"%\", \"_\", $class_name);\n    $class_name = str_replace(\"^\", \"_\", $class_name);\n    $class_name = str_replace(\"#\", \"_\", $class_name);\n    $class_name = str_replace(\"@\", \"_\", $class_name);\n    $class_name = str_replace(\"=\", \"_\", $class\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmp_vv631sp.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            } else {\n                $extension_strength--;\n            }\n        }\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpssxsu3q_.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpssxsu3q_.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpssxsu3q_.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssxsu3q_.php:44\nStack trace:\n#0 /tmp/tmpssxsu3q_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpssxsu3q_.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $strongest_extension_index = 0;\n    for($i = 0; $i < count($extensions); $i++) {\n        $extension = $extensions[$i];\n        $extension_strength = 0;\n        $extension_index = 0;\n        $extension_array = explode(\".\", $extension);\n        for($j = 0; $j < count($extension_array); $j++) {\n            $letter = strtolower($extension_array[$j]);\n            if($letter == \"a\") {\n                $extension_strength += 1;\n            } else if($letter == \"e\") {\n                $extension_strength += 2;\n            } else if($letter == \"i\") {\n                $extension_strength += 3;\n            } else if($letter == \"o\") {\n                $extension_strength += 4;\n            } else if($letter == \"u\") {\n                $extension_strength += 5;\n            } else if($letter == \"y\") {\n                $extension_strength += 6;\n            }\n            $extension_index++;\n        }\n        if($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength = $extension_strength;\n            $strongest_extension_index = $i;\n        }\n    }\n    $strongest_extension = $class_name . \".\" . $extensions[$strongest_extension_index];\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmp95mdfu9m.php on line 26\n\nDeprecated: explode(): Passing null to parameter #2 ($string) of type string is deprecated in /tmp/tmp95mdfu9m.php on line 29\n\nWarning: Undefined array key 1 in /tmp/tmp95mdfu9m.php on line 26\n\nDeprecated: explode(): Passing null to parameter #2 ($string) of type string is deprecated in /tmp/tmp95mdfu9m.php on line 29\n\nWarning: Undefined array key 2 in /tmp/tmp95mdfu9m.php on line 26\n\nDeprecated: explode(): Passing null to parameter #2 ($string) of type string is deprecated in /tmp/tmp95mdfu9m.php on line 29\n\nWarning: Undefined array key 0 in /tmp/tmp95mdfu9m.php on line 52\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95mdfu9m.php:61\nStack trace:\n#0 /tmp/tmp95mdfu9m.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp95mdfu9m.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp71lice9a.php:27\nStack trace:\n#0 /tmp/tmp71lice9a.php(27): count_chars('0', 'A')\n#1 /tmp/tmp71lice9a.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp71lice9a.php(43): candidate('Watashi', Array)\n#3 /tmp/tmp71lice9a.php(54): test()\n#4 {main}\n  thrown in /tmp/tmp71lice9a.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if ($letter == '_') {\n                continue;\n            }\n            $extension_strength += $letter == 'a' ? 1 : -1;\n        }\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgy_xcbnf.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgy_xcbnf.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpgy_xcbnf.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgy_xcbnf.php:43\nStack trace:\n#0 /tmp/tmpgy_xcbnf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgy_xcbnf.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = $class_name . \".\" . $extensions[0];\n    $extensions = $extensions[1];\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_fl\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmgk52pd3.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\./g, '\\\\.');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpksaq3q_e.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if (!$strongest_extension || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'extension_name': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest_extension) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension_name'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpw18o5nag.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = str_replace(\"\\\\\", \"\\\\\\\\\", $class_name);\n    $class_name = str_replace(\".\", \"\\\\.\", $class_name);\n    $class_name = str_replace(\"-\", \"\\\\-\", $class_name);\n    $class_name = str_replace(\"_\", \"\\\\_\", $class_name);\n    $class_name = str_replace(\"/\", \"\\\\/\", $class_name);\n    $class_name = str_replace(\" \", \"\\\\ \", $class_name);\n    $class_name = str_replace(\"(\", \"\\\\(\", $class_name);\n    $class_name = str_replace(\")\", \"\\\\)\", $class_name);\n    $class_name = str_replace(\"[\", \"\\\\[\", $class_name);\n    $class_name = str_replace(\"]\", \"\\\\]\", $class_name);\n    $class_name = str_replace(\"{\", \"\\\\{\", $class_name);\n    $class_name = str_replace(\"}\", \"\\\\}\", $class_name);\n    $class_name = str_replace(\"'\", \"\\\\'\", $class_name);\n    $class_name = str_replace(\"\\\"\", \"\\\\\\\"\", $class_name);\n    $class_name = str_replace(\"<\", \"\\\\<\", $class_name);\n    $class_name = str_replace(\">\", \"\\\\>\", $class_name);\n    $class_name = str_replace(\"&\", \"\\\\&\", $class_name);\n    $class_name = str_replace(\"|\", \"\\\\|\", $class_name);\n    $class_name = str_replace(\"!\", \"\\\\!\", $class_name);\n    $class_name = str_replace(\"?\", \"\\\\?\", $class_name);\n    $class_name = str_replace(\";\", \"\\\\;\", $class_name);\n    $class_name = str_replace(\"$\", \"\\\\$\", $class_name);\n    $class_name = str_replace(\"%\", \"\\\\%\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp4smmuw6p.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp2zgghlc2.php:24\nStack trace:\n#0 /tmp/tmp2zgghlc2.php(24): count_chars('0', 'A')\n#1 /tmp/tmp2zgghlc2.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp2zgghlc2.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp2zgghlc2.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp2zgghlc2.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, \"_\");\n    $extensions = $extensions;\n    $class_name = $class_name.split(\".\");\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpw9hzjrj7.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach ($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $strength;\n        }\n    }\n    $class_name .= \".\" . $extensions[$strongest_extension];\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp9r8j2_gi.php:23\nStack trace:\n#0 /tmp/tmp9r8j2_gi.php(23): count_chars('0', 'A')\n#1 /tmp/tmp9r8j2_gi.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp9r8j2_gi.php(39): candidate('Watashi', Array)\n#3 /tmp/tmp9r8j2_gi.php(50): test()\n#4 {main}\n  thrown in /tmp/tmp9r8j2_gi.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $strength = 0;\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (!$strongest_extension or $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name' : $class_name,\n                'extension' : $extension,\n                'strength' : $strength\n            };\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpog9paama.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension as $c) {\n            if ($c == '_') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if ($strength > $strongest_extension[2]) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpjb_oh64s.php on line 27\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpjb_oh64s.php:36\nStack trace:\n#0 /tmp/tmpjb_oh64s.php(45): Strongest_Extension('watashi', Array)\n#1 /tmp/tmpjb_oh64s.php(49): candidate('Watashi', Array)\n#2 /tmp/tmpjb_oh64s.php(60): test()\n#3 {main}\n  thrown in /tmp/tmpjb_oh64s.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    $extensions_array = $extensions;\n    $extensions_array.sort(function($a, $b) {\n        return $a - $b;\n    });\n    for ($i = 0; $i < $extensions_array.length; $i++) {\n        $extension = $extensions_array[$i];\n        $extension_strength = 0;\n        $extension_strength = $extension.replace(/ /g, '').length - $extension.length;\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name + '.' + $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpyd3q8pva.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp_hbl0gt_.php:24\nStack trace:\n#0 /tmp/tmp_hbl0gt_.php(24): count_chars('0', 'A')\n#1 /tmp/tmp_hbl0gt_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp_hbl0gt_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp_hbl0gt_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp_hbl0gt_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c == '_') {\n                continue;\n            }\n            if ($c == ' ') {\n                continue;\n            }\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            }\n            if ($c >= 'a' && $c <= 'z') {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension == '') {\n            $strongest_extension = $class_name + '.' + $extension_name;\n        } else if ($strongest_extension < $extension_strength) {\n            $strongest_extension = $class_name + '.' + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpfkc9krpp.php on line 28\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpfkc9krpp.php:44\nStack trace:\n#0 /tmp/tmpfkc9krpp.php(53): Strongest_Extension('watashi', Array)\n#1 /tmp/tmpfkc9krpp.php(57): candidate('Watashi', Array)\n#2 /tmp/tmpfkc9krpp.php(68): test()\n#3 {main}\n  thrown in /tmp/tmpfkc9krpp.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength++;\n            }\n        }\n        if($strongest_extension == null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    if($strongest_extension == 0) {\n        return $class_name;\n    }\n    $class_name .= \".\";\n    foreach($extensions as $extension) {\n        if($extension_strength == $strongest_extension) {\n            $class_name .= $extension;\n        }\n    }\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwwrz3i3j.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwwrz3i3j.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpwwrz3i3j.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwrz3i3j.php:51\nStack trace:\n#0 /tmp/tmpwwrz3i3j.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwwrz3i3j.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (0 == $strength) {\n            $strength = 1;\n        }\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength < $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp0wq4rx0r.php:24\nStack trace:\n#0 /tmp/tmp0wq4rx0r.php(24): count_chars('0', 'A')\n#1 /tmp/tmp0wq4rx0r.php(40): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp0wq4rx0r.php(44): candidate('Watashi', Array)\n#3 /tmp/tmp0wq4rx0r.php(55): test()\n#4 {main}\n  thrown in /tmp/tmp0wq4rx0r.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5qabh2du.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name + \".\" + $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp9aty5wqu.php:24\nStack trace:\n#0 /tmp/tmp9aty5wqu.php(24): count_chars('0', 'A')\n#1 /tmp/tmp9aty5wqu.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp9aty5wqu.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp9aty5wqu.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp9aty5wqu.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    $extension_count = 0;\n    $extension_strength = 0;\n    $extension_index = 0;\n    $extension_name = '';\n    $extension_name_length = 0;\n    $extension_name_upper_count = 0;\n    $extension_name_lower_count = 0;\n    $extension_name_upper_index = 0;\n    $extension_name_lower_index = 0;\n    $extension_name_upper_index_temp = 0;\n    $extension_name_lower_index_temp = 0;\n    $extension_name_upper_count_temp = 0;\n    $extension_name_lower_count_temp = 0;\n    $extension_name_upper_index_temp2 = 0;\n    $extension_name_lower_index_temp2 = 0;\n    $extension_name_upper_count_temp2 = 0;\n    $extension_name_lower_count_temp2 = 0;\n    $extension_name_upper_index_temp3 = 0;\n    $extension_name_lower_index_temp3 = 0;\n    $extension_name_upper_count_temp3 = 0;\n    $extension_name_lower_count_temp3 = 0;\n    $extension_name_upper_index_temp4 = 0;\n    $extension_name_lower_index_temp4 = 0;\n    $extension_name_upper_count_temp4 = 0;\n    $extension_name_lower_count_temp4 = 0;\n    $extension_name_upper_index_temp5 = 0;\n    $extension_name_lower_index_temp5 = 0;\n    $extension_name_upper_count_temp5 = 0;\n    $extension_name_lower_count_temp5 = 0;\n    $extension_name_upper_index_temp6 =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8t88c1jn.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest = null;\n    $strongest_strength = 0;\n    $i = 0;\n    foreach($extensions as $extension) {\n        $strength = strlen($extension) - strlen($extension[0]);\n        if ($strength > $strongest_strength) {\n            $strongest_strength = $strength;\n            $strongest = $extension;\n        }\n        $i++;\n    }\n    return $class_name . \".\" . $strongest;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Trying to access array offset on value of type int in /tmp/tmp592vr07_.php on line 26\n\nDeprecated: strlen(): Passing null to parameter #1 ($string) of type string is deprecated in /tmp/tmp592vr07_.php on line 26\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp592vr07_.php on line 26\n\nDeprecated: strlen(): Passing null to parameter #1 ($string) of type string is deprecated in /tmp/tmp592vr07_.php on line 26\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp592vr07_.php on line 26\n\nDeprecated: strlen(): Passing null to parameter #1 ($string) of type string is deprecated in /tmp/tmp592vr07_.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp592vr07_.php:41\nStack trace:\n#0 /tmp/tmp592vr07_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp592vr07_.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $extension_name_length = strlen($extension_name);\n        for($i = 0; $i < $extension_name_length; $i++) {\n            if($extension_name[$i] == '_') {\n                $extension_name_length = $i;\n                break;\n            }\n            $extension_name_length++;\n        }\n        $extension_name_length = $extension_name_length - 1;\n        for($i = 0; $i < $extension_name_length; $i++) {\n            if($extension_name[$i] == '_') {\n                $extension_name_length = $i;\n                break;\n            }\n            $extension_name_length++;\n        }\n        $extension_name_length = $extension_name_length - 1;\n        for($i = 0; $i < $extension_name_length; $i++) {\n            if($extension_name[$i] == '_') {\n                $extension_name_length = $i;\n                break;\n            }\n            $extension_name_length++;\n        }\n        $extension_name_length = $extension_name_length - 1;\n        for($i = 0; $i < $extension_name_length; $i++) {\n            if($extension_name[$i] == '_') {\n                $extension_name_length = $i;\n                break;\n            }\n            $extension_name_length++;\n        }\n        $extension_name_length = $extension_name_length - 1;\n        for($i = 0; $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp472om8lf.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp7k0xo30x.php:24\nStack trace:\n#0 /tmp/tmp7k0xo30x.php(24): count_chars('0', 'A')\n#1 /tmp/tmp7k0xo30x.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp7k0xo30x.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp7k0xo30x.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp7k0xo30x.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (0 == $strength) {\n            $strength = 1;\n        }\n        if ($strongest_extension == '' || $strength < $strongest_extension['strength']) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmplhb9mw8e.php:24\nStack trace:\n#0 /tmp/tmplhb9mw8e.php(24): count_chars('0', 'A')\n#1 /tmp/tmplhb9mw8e.php(38): Strongest_Extension('watashi', Array)\n#2 /tmp/tmplhb9mw8e.php(42): candidate('Watashi', Array)\n#3 /tmp/tmplhb9mw8e.php(53): test()\n#4 {main}\n  thrown in /tmp/tmplhb9mw8e.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpoxxyypnb.php:24\nStack trace:\n#0 /tmp/tmpoxxyypnb.php(24): count_chars('0', 'A')\n#1 /tmp/tmpoxxyypnb.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpoxxyypnb.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpoxxyypnb.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpoxxyypnb.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest = null;\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if (!$strongest || $strength > $strongest['strength']) {\n            $strongest = {\n                'class_name': $class_name,\n                'extension': $extension,\n                'strength': $strength\n            };\n        }\n    }\n    if (!$strongest) {\n        return $class_name;\n    }\n    return $strongest['class_name'] . '.' . $strongest['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpha9g9rnz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpvtx9dx40.php:24\nStack trace:\n#0 /tmp/tmpvtx9dx40.php(24): count_chars('0', 'A')\n#1 /tmp/tmpvtx9dx40.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpvtx9dx40.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpvtx9dx40.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpvtx9dx40.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmph57crvg_.php:24\nStack trace:\n#0 /tmp/tmph57crvg_.php(24): count_chars('0', 'A')\n#1 /tmp/tmph57crvg_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmph57crvg_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmph57crvg_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmph57crvg_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength < $strength) {\n            $strongest_extension = $class_name . '.' . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp5l1gfbu1.php:24\nStack trace:\n#0 /tmp/tmp5l1gfbu1.php(24): count_chars('0', 'A')\n#1 /tmp/tmp5l1gfbu1.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp5l1gfbu1.php(39): candidate('Watashi', Array)\n#3 /tmp/tmp5l1gfbu1.php(50): test()\n#4 {main}\n  thrown in /tmp/tmp5l1gfbu1.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    $extensions_array = array();\n    $extensions_array = array_flip($extensions);\n    $extensions_array = array_flip($extensions_array);\n    for($i = 0; $i < count($extensions_array); $i++) {\n        $extension = $extensions_array[$i];\n        $extension_strength = strlen($extension) - strlen($extension.replace(\"_\", \"\"));\n        if($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmphj_lytt0.php on line 28\n\nDeprecated: strlen(): Passing null to parameter #1 ($string) of type string is deprecated in /tmp/tmphj_lytt0.php on line 29\n\nFatal error: Uncaught Error: Call to undefined function replace() in /tmp/tmphj_lytt0.php:29\nStack trace:\n#0 /tmp/tmphj_lytt0.php(39): Strongest_Extension('watashi', Array)\n#1 /tmp/tmphj_lytt0.php(43): candidate('Watashi', Array)\n#2 /tmp/tmphj_lytt0.php(54): test()\n#3 {main}\n  thrown in /tmp/tmphj_lytt0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $extension_strength = $cap - $sm;\n        if($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp8qxpnmh5.php:27\nStack trace:\n#0 /tmp/tmp8qxpnmh5.php(27): count_chars('0', 'A')\n#1 /tmp/tmp8qxpnmh5.php(39): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp8qxpnmh5.php(43): candidate('Watashi', Array)\n#3 /tmp/tmp8qxpnmh5.php(54): test()\n#4 {main}\n  thrown in /tmp/tmp8qxpnmh5.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($class_strength > $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmphxax1v76.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 30\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmphxax1v76.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxax1v76.php:48\nStack trace:\n#0 /tmp/tmphxax1v76.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphxax1v76.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if (null === $strongest_extension || $strength < $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp9b_fsbij.php:24\nStack trace:\n#0 /tmp/tmp9b_fsbij.php(24): count_chars('0', 'A')\n#1 /tmp/tmp9b_fsbij.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp9b_fsbij.php(40): candidate('Watashi', Array)\n#3 /tmp/tmp9b_fsbij.php(51): test()\n#4 {main}\n  thrown in /tmp/tmp9b_fsbij.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension as $c) {\n            if ($c == '_') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {\n                'class_name': $class_name,\n                'strength': $strength,\n                'extension': $extension\n            };\n        }\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpt82wtciw.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char == '.') {\n                continue;\n            }\n            if ($char == '-') {\n                continue;\n            }\n            if ($char == ' ') {\n                continue;\n            }\n            $extension_strength++;\n        }\n        $extension_strength -= strlen($extension_name);\n        if ($strongest_extension == null) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        } else {\n            if ($strongest_extension_strength < $extension_strength) {\n                $strongest_extension = $extension;\n                $strongest_extension_strength = $extension_strength;\n            }\n        }\n    }\n    if ($strongest_extension == null) {\n        return $class_name;\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8up7yiyn.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8up7yiyn.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp8up7yiyn.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8up7yiyn.php:64\nStack trace:\n#0 /tmp/tmp8up7yiyn.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp8up7yiyn.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_strength = 0;\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension_strength = $extension_strength;\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp65_j465f.php:26\nStack trace:\n#0 /tmp/tmp65_j465f.php(26): count_chars('0', 'A')\n#1 /tmp/tmp65_j465f.php(38): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp65_j465f.php(42): candidate('Watashi', Array)\n#3 /tmp/tmp65_j465f.php(53): test()\n#4 {main}\n  thrown in /tmp/tmp65_j465f.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\" || $char == \"u\") {\n                $extension_strength++;\n            }\n        }\n        if ($extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    $class_name .= \".\" . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcqu6ngwb.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcqu6ngwb.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpcqu6ngwb.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqu6ngwb.php:43\nStack trace:\n#0 /tmp/tmpcqu6ngwb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcqu6ngwb.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $cap = count_chars($extension, \"A\");\n        $sm = count_chars($extension, \"a\");\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $strength;\n        }\n    }\n    $class_name .= \".\" . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp8utq3rz7.php:23\nStack trace:\n#0 /tmp/tmp8utq3rz7.php(23): count_chars('0', 'A')\n#1 /tmp/tmp8utq3rz7.php(35): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp8utq3rz7.php(39): candidate('Watashi', Array)\n#3 /tmp/tmp8utq3rz7.php(50): test()\n#4 {main}\n  thrown in /tmp/tmp8utq3rz7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            if($char == 'a' || $char == 'e' || $char == 'i' || $char == 'o' || $char == 'u') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if($strongest_extension == \"\") {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if($strongest_extension < $class_name + \".\" + $extension) {\n            $strongest_extension = $class_name + \".\" + $extension;\n        } else if($strongest_extension == $class_name + \".\" + $extension) {\n            if($extension_strength < $strongest_extension_strength) {\n                $strongest_extension = $class_name + \".\" + $extension;\n            }\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp0d_yxue2.php on line 25\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp0d_yxue2.php:36\nStack trace:\n#0 /tmp/tmp0d_yxue2.php(49): Strongest_Extension('watashi', Array)\n#1 /tmp/tmp0d_yxue2.php(53): candidate('Watashi', Array)\n#2 /tmp/tmp0d_yxue2.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp0d_yxue2.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension == '' || $extension_strength > $strongest_extension) {\n            $strongest_extension = $class_name . '.' . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1msak2oc.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1msak2oc.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1msak2oc.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1msak2oc.php:47\nStack trace:\n#0 /tmp/tmp1msak2oc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1msak2oc.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmph57crvg_.php:24\nStack trace:\n#0 /tmp/tmph57crvg_.php(24): count_chars('0', 'A')\n#1 /tmp/tmph57crvg_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmph57crvg_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmph57crvg_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmph57crvg_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if ($char == '_') {\n                continue;\n            }\n            if ($char >= 'A' && $char <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if ($strongest_extension === null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpq2uwl3r_.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpq2uwl3r_.php on line 26\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpq2uwl3r_.php on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2uwl3r_.php:49\nStack trace:\n#0 /tmp/tmpq2uwl3r_.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpq2uwl3r_.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp8l2axpi8.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c == '_') {\n                continue;\n            }\n            if ($c >= 'A' && $c <= 'Z') {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension === null || $extension_strength > $strongest_extension) {\n            $strongest_extension = $extension_name;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1wp3f83d.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1wp3f83d.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmp1wp3f83d.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wp3f83d.php:50\nStack trace:\n#0 /tmp/tmp1wp3f83d.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1wp3f83d.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5qabh2du.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension) {\n            $strongest_extension = $strength;\n        }\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpkw3hh7dd.php:24\nStack trace:\n#0 /tmp/tmpkw3hh7dd.php(24): count_chars('0', 'A')\n#1 /tmp/tmpkw3hh7dd.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpkw3hh7dd.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpkw3hh7dd.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpkw3hh7dd.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5qabh2du.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmph57crvg_.php:24\nStack trace:\n#0 /tmp/tmph57crvg_.php(24): count_chars('0', 'A')\n#1 /tmp/tmph57crvg_.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmph57crvg_.php(41): candidate('Watashi', Array)\n#3 /tmp/tmph57crvg_.php(52): test()\n#4 {main}\n  thrown in /tmp/tmph57crvg_.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name;\n    $extensions = $extensions;\n    $class_name = str_replace(\"\\\\\", \"\", $class_name);\n    $class_name = str_replace(\"/\", \"\", $class_name);\n    $class_name = str_replace(\"-\", \"\", $class_name);\n    $class_name = str_replace(\" \", \"\", $class_name);\n    $class_name = $class_name.toLowerCase();\n    $extensions = array_unique($extensions);\n    $extensions = array_sort($extensions, function($a, $b) {\n        return $a - $b;\n    });\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = str_replace(\"\\\\\", \"\", $extension);\n        $extension_name = str_replace(\"/\", \"\", $extension_name);\n        $extension_name = str_replace(\"-\", \"\", $extension_name);\n        $extension_name = str_replace(\" \", \"\", $extension_name);\n        $extension_name = $extension_name.toLowerCase();\n        $extension_strength = 0;\n        foreach($class_name as $class_letter) {\n            if ($class_letter == \"a\") {\n                $class_letter = \"A\";\n            }\n            if ($class_letter == \"e\") {\n                $class_letter = \"E\";\n            }\n            if ($class_letter == \"i\") {\n                $class_letter = \"I\";\n            }\n            if ($class_letter == \"o\") {\n                $class_letter = \"O\";\n            }\n            if ($class_letter == \"u\") {\n                $class_letter = \"U\";\n            }\n            if ($class_letter == \"y\") {\n                $class_letter = \"Y\";\n            }\n            if ($class_letter == \"c\") {\n                $class_letter = \"C\";\n            }\n            if ($class_letter == \"s\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Watashi\" in /tmp/tmpg26somsq.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension = strtolower($extension);\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension;\n        } else if ($strength > $strength_of_strongest_extension) {\n            $strongest_extension = $class_name . \".\" . $extension;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp8iyno6b5.php:24\nStack trace:\n#0 /tmp/tmp8iyno6b5.php(24): count_chars('0', 'A')\n#1 /tmp/tmp8iyno6b5.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp8iyno6b5.php(41): candidate('Watashi', Array)\n#3 /tmp/tmp8iyno6b5.php(52): test()\n#4 {main}\n  thrown in /tmp/tmp8iyno6b5.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    var $class_name = $class_name;\n    var $extensions = $extensions;\n    var $result = '';\n    var $strongest_extension = '';\n    var $strongest_extension_strength = 0;\n    var $extension_count = 0;\n    var $extension_index = 0;\n    var $extension_name = '';\n    var $extension_strength = 0;\n    var $extension_index = 0;\n    var $extension_count = $extensions.length;\n    for ($extension_index = 0; $extension_index < $extension_count; $extension_index++) {\n        $extension_name = $extensions[$extension_index];\n        $extension_strength = $extension_name.length - $extension_name.replace(/[A-Z]/g, '').length;\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension_name;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    $result = $class_name + '.' + $strongest_extension;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"var\" in /tmp/tmparojki12.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        $cap = 0;\n        $sm = 0;\n        foreach($extension_name as $c) {\n            if ($c == \" \") {\n                continue;\n            }\n            if ($c == \"a\" || $c == \"e\" || $c == \"i\" || $c == \"o\" || $c == \"u\") {\n                $cap++;\n            } else {\n                $sm++;\n            }\n        }\n        $extension_strength = $cap - $sm;\n        if ($strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptf201lmm.php on line 29\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptf201lmm.php on line 29\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmptf201lmm.php on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptf201lmm.php:53\nStack trace:\n#0 /tmp/tmptf201lmm.php(64): test()\n#1 {main}\n  thrown in /tmp/tmptf201lmm.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $strongest_extension = '';\n    $strongest_extension_strength = 0;\n    $extension_count = 0;\n    $extension_index = 0;\n    $extension_strength = 0;\n    $extension_name = '';\n    $extension_name_length = 0;\n    $extension_name_index = 0;\n    $extension_name_strength = 0;\n    $extension_name_count = 0;\n    $extension_name_count_max = 0;\n    $extension_name_index_max = 0;\n    $extension_name_strength_max = 0;\n    $extension_name_count_max = 0;\n    $extension_name_index_max = 0;\n    $extension_name_strength_max = 0;\n    $extension_name_count_min = 0;\n    $extension_name_index_min = 0;\n    $extension_name_strength_min = 0;\n    $extension_name_count_min = 0;\n    $extension_name_index_min = 0;\n    $extension_name_strength_min = 0;\n    $extension_name_count_sum = 0;\n    $extension_name_index_sum = 0;\n    $extension_name_strength_sum = 0;\n    $extension_name_count_sum_max = 0;\n    $extension_name_index_sum_max = 0;\n    $extension_name_strength_sum_max = 0;\n    $extension_name_count_sum_min = 0;\n    $extension_name_index_sum_min = 0;\n    $extension_name_strength_sum_min = 0;\n    $extension_name_count_sum_sum = 0;\n    $extension_name_index_sum_sum = 0;\n    $extension_name_strength_sum_sum = 0;\n    $extension_name_count_sum_max_index = 0\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpxdznlqlz.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = '';\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == '' || $strength > $strongest_strength) {\n            $strongest_extension = $class_name . '.' . $extension_name;\n            $strongest_strength = $strength;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpwbolrcki.php:24\nStack trace:\n#0 /tmp/tmpwbolrcki.php(24): count_chars('0', 'A')\n#1 /tmp/tmpwbolrcki.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpwbolrcki.php(40): candidate('Watashi', Array)\n#3 /tmp/tmpwbolrcki.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpwbolrcki.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $class_name = $class_name.replace(\"_\", \".\");\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_fl\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp0ql44syk.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $char) {\n            if($char == '_') {\n                continue;\n            }\n            $extension_strength += 1 - $char.isupper();\n        }\n        if($strongest_extension == null || $strongest_extension_strength < $extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppz3c1vmx.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppz3c1vmx.php on line 27\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmppz3c1vmx.php on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz3c1vmx.php:46\nStack trace:\n#0 /tmp/tmppz3c1vmx.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppz3c1vmx.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $extension_strength++;\n            }\n        }\n        foreach($class_name as $c) {\n            if ($c >= 'A' && $c <= 'Z') {\n                $class_strength++;\n            }\n        }\n        $class_strength -= $extension_strength;\n        if ($strongest_extension === null || $class_strength < $strongest_extension) {\n            $strongest_extension = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: Undefined variable $class_strength in /tmp/tmpkaugvv3k.php on line 35\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpkaugvv3k.php on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaugvv3k.php:48\nStack trace:\n#0 /tmp/tmpkaugvv3k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkaugvv3k.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/\\s+/g, '');\n    $extensions = $extensions;\n    $extensions = array_unique($extensions);\n    $extensions = array_sort($extensions, function($a, $b) {\n        return $a - $b;\n    });\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpofn6x14_.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $extension_strength = 0;\n        foreach($extension_name as $letter) {\n            if($letter == '_') {\n                continue;\n            }\n            if($letter >= 'A' && $letter <= 'Z') {\n                $extension_strength += 1;\n            } else {\n                $extension_strength += 2;\n            }\n        }\n        if($strongest_extension === null || $extension_strength < $strongest_extension) {\n            $strongest_extension = $extension_strength;\n        }\n    }\n    if($strongest_extension === null) {\n        return $class_name;\n    }\n    $class_name .= '.' . $strongest_extension;\n    return $class_name;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpnw9ysrfp.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpnw9ysrfp.php on line 25\n\nWarning: foreach() argument must be of type array|object, string given in /tmp/tmpnw9ysrfp.php on line 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnw9ysrfp.php:51\nStack trace:\n#0 /tmp/tmpnw9ysrfp.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpnw9ysrfp.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/^\\s+|\\s+$/g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.replace(/\\s+/g, '.');\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmptav9se00.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = \"\";\n    foreach($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension == \"\") {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        } else if ($strength > $strength_of_current_extension) {\n            $strongest_extension = $class_name . \".\" . $extension_name;\n        }\n    }\n    return $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmpomkffpg6.php:24\nStack trace:\n#0 /tmp/tmpomkffpg6.php(24): count_chars('0', 'A')\n#1 /tmp/tmpomkffpg6.php(37): Strongest_Extension('watashi', Array)\n#2 /tmp/tmpomkffpg6.php(41): candidate('Watashi', Array)\n#3 /tmp/tmpomkffpg6.php(52): test()\n#4 {main}\n  thrown in /tmp/tmpomkffpg6.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $cap = count_chars($extension, 'A');\n        $sm = count_chars($extension, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_extension['strength']) {\n            $strongest_extension = {'class_name': $class_name, 'extension': $extension, 'strength': $strength};\n        }\n    }\n    if ($strongest_extension === null) {\n        return $class_name;\n    }\n    return $strongest_extension['class_name'] . '.' . $strongest_extension['extension'];\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp94qsldcy.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = $class_name.replace(/ /g, '');\n    $extensions = $extensions;\n    $class_name = $class_name.split('.');\n    $class_name = $class_name[0];\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions = $extensions;\n    $extensions =\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp536t4czs.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    // your code goes here\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\n    $extensions = array_flip($extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmp0x6bx_in.php on line 72\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions = array_flip($extensions);\n    $strongest_extension = null;\n    foreach ($extensions as $extension) {\n        $extension_name = strtolower($extension);\n        $cap = count_chars($extension_name, 'A');\n        $sm = count_chars($extension_name, 'a');\n        $strength = $cap - $sm;\n        if ($strongest_extension === null || $strength > $strongest_strength) {\n            $strongest_extension = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292516,
      "stdout": "\nFatal error: Uncaught TypeError: count_chars(): Argument #2 ($mode) must be of type int, string given in /tmp/tmp_iozhqwv.php:24\nStack trace:\n#0 /tmp/tmp_iozhqwv.php(24): count_chars('0', 'A')\n#1 /tmp/tmp_iozhqwv.php(36): Strongest_Extension('watashi', Array)\n#2 /tmp/tmp_iozhqwv.php(40): candidate('Watashi', Array)\n#3 /tmp/tmp_iozhqwv.php(51): test()\n#4 {main}\n  thrown in /tmp/tmp_iozhqwv.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}