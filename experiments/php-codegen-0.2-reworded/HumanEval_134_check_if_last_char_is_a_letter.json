{
  "name": "HumanEval_134_check_if_last_char_is_a_letter",
  "language": "php",
  "prompt": "<?php\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter($txt) {\n",
  "tests": "function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "completions": [
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    if (is_alpha(last_char)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_punctuation($txt[$txt.length - 1]);\n}\n",
    "    if ($txt === \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.substr(-1).match(/\\w/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) === null;\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.substr(-1, 1).match(/[a-zA-Z]\\s/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\S/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    // your code goes here\n    return $txt.substr(-1).match(/\\w/);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt.substr(-1, 1)) && !is_alnum($txt.substr(-1, 1));\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1) === ' ' ? false : true;\n}\n",
    "    return $txt.substr(-1) === String.fromCharCode(32) || $txt.substr(-1) === String.fromCharCode(9) || $txt.substr(-1) === String.fromCharCode(10) || $txt.substr(-1) === String.fromCharCode(13);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1) === String.fromCharCode(32) || $txt.substr(-1) === String.fromCharCode(9) || $txt.substr(-1) === String.fromCharCode(10) || $txt.substr(-1) === String.fromCharCode(13) || $txt.substr(-1) === String.fromCharCode(32) || $txt.substr(-1) === String.fromCharCode(9) || $txt.substr(-1) === String.fromCharCode(10) || $txt.substr(-1) === String.fromCharCode(13);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return ($txt.substr($txt.length - 1, 1) === \" \") ? false : true;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    // Your code goes here\n    return false;\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_word($txt);\n}\n",
    "    // your code goes here\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last_char = substr($txt, strlen($txt) - 1, 1);\n    if (isalpha($last_char)) {\n        return true;\n    }\n    return false;\n}\n",
    "    // Your code goes here\n    return false;\n}\n",
    "    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/\\w/g) === null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    var is_letter = (last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z');\n    var is_not_a_word = last_char != ' ';\n    return is_letter && is_not_a_word;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.substr(-1, 1).match(/[^a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    if ($txt === \"\") {\n        return false;\n    }\n    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && $txt.charAt($txt.length - 1).match(/[^a-zA-Z]/) === null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1).match(/\\w/g) === null;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : /[a-zA-Z]/.test($txt.substr(-1));\n}\n",
    "    if ($txt === \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.substr($txt.length - 1, 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/\\w/g) === null;\n}\n",
    "    return ($txt.length > 0) &&\n        !is_digit($txt[$txt.length - 1]) &&\n        !is_punctuation($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_word($txt);\n}\n",
    "    if ($txt === \"\") {\n        return false;\n    }\n    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return ($txt.substr(-1) >= \"a\" && $txt.substr(-1) <= \"z\");\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return ($txt.length > 0 && $txt.substr($txt.length - 1, 1) >= 'a' && $txt.substr($txt.length - 1, 1) <= 'z');\n}\n",
    "    // your code goes here\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    // Your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // Your code goes here\n    return false;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.substr(-1, 1).match(/[a-zA-Z]\\s/);\n}\n",
    "    return ($txt.substr(-1) === \" \") ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.substr(-1) === \" \") ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return ($txt.substr(-1) == \" \") ? false : true;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return $txt.substr(-1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_a_word($txt);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt === \"\") {\n        return false;\n    }\n    var last_char = $txt.substr(-1);\n    if (last_char === \" \") {\n        return false;\n    }\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.substr($txt.length - 1, 1).match(/[a-zA-Z]/) && $txt.substr($txt.length - 1, 1) !== \" \");\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.substr(-1).match(/\\w/);\n}\n",
    "    return $txt.substr(-1) === String.fromCharCode(32) || $txt.substr(-1) === String.fromCharCode(9) || $txt.substr(-1) === String.fromCharCode(10) || $txt.substr(-1) === String.fromCharCode(13);\n}\n",
    "    return ($txt.length > 0 && $txt.substr($txt.length - 1, 1).match(/[a-zA-Z]/g) === null);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.substr(-1).match(/[^a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_between_words($txt);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_word($txt);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.substr(-1).match(/\\b\\w+\\b/) === null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    // your code goes here\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // Your code here\n    return false;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    // Your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) === null;\n}\n",
    "    return $txt.charAt($txt.length - 1).match(/\\w/i) === null;\n}\n",
    "    if (strlen($txt) == 0) {\n        return false;\n    }\n    return isalpha($txt[strlen($txt) - 1]);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/\\w/);\n}\n",
    "    return $txt.substr(-1).match(/\\w/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) === null;\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.substr($txt.length - 1, 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.substr(-1, 1).match(/[a-zA-Z]\\s*[a-zA-Z]/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.charAt($txt.length - 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/) == null;\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    return $txt.substr($txt.length - 1, 1).match(/[a-zA-Z]/) !== null;\n}\n",
    "    // Your code goes here\n    return $txt.substr(-1).match(/[a-zA-Z]/);\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_word($txt);\n}\n",
    "    return ($txt.length > 0) && is_alpha($txt[$txt.length - 1]);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && $txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return ($txt.length > 0) && isalpha($txt[$txt.length - 1]) && !is_part_of_a_word($txt);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return ($txt.length > 0) && /[a-zA-Z]/.test( $txt[$txt.length-1] );\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1) === \" \" ? false : true;\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1, 1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    return $txt.substr(-1).match(/[a-zA-Z]/) && !$txt.match(/\\w+/);\n}\n",
    "    // your code goes here\n    return false;\n}\n",
    "    if ($txt == \"\") {\n        return false;\n    }\n    var last_char = $txt.charAt($txt.length - 1);\n    if (last_char.match(/[a-zA-Z]/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    // your code goes here\n    return false;\n}\n"
  ],
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ]
}