{
  "name": "HumanEval_99_closest_integer",
  "language": "php",
  "prompt": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n",
  "tests": "function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($rounded < 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxqk8ez0.php:34\nStack trace:\n#0 /tmp/tmpdxqk8ez0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdxqk8ez0.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $rounded = (int) $rounded;\n    $rounded = (float) $rounded;\n    $rounded = (int) $rounded;\n    return $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    $diff = abs($value - $int);\n    if ($diff < 0.5) {\n        return $int;\n    } else if ($diff < 1.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2iobbbu.php:35\nStack trace:\n#0 /tmp/tmps2iobbbu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmps2iobbbu.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = round($value);\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkolrd6ut.php:33\nStack trace:\n#0 /tmp/tmpkolrd6ut.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkolrd6ut.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($value < 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6bz35r0.php:34\nStack trace:\n#0 /tmp/tmpv6bz35r0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv6bz35r0.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value, 0);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfd0dfba.php:27\nStack trace:\n#0 /tmp/tmpxfd0dfba.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxfd0dfba.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value, 0);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfd0dfba.php:27\nStack trace:\n#0 /tmp/tmpxfd0dfba.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxfd0dfba.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym3_hauz.php:34\nStack trace:\n#0 /tmp/tmpym3_hauz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpym3_hauz.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $diff = abs($value - $rounded);\n    if ($diff < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehxxnbjs.php:31\nStack trace:\n#0 /tmp/tmpehxxnbjs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpehxxnbjs.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    if ($rounded_value == $value) {\n        if ($rounded_value > 0) {\n            return $rounded_value + 1;\n        } else {\n            return $rounded_value - 1;\n        }\n    } else {\n        return $rounded_value;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddd939jz.php:34\nStack trace:\n#0 /tmp/tmpddd939jz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpddd939jz.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = floor($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    } else if ($dec > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphectftqx.php:33\nStack trace:\n#0 /tmp/tmphectftqx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphectftqx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $difference = abs($value - $rounded_value);\n    if ($difference == 0) {\n        return $rounded_value;\n    } else if ($difference < 0.5) {\n        return $rounded_value - 1;\n    } else {\n        return $rounded_value + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48_vh3z1.php:33\nStack trace:\n#0 /tmp/tmp48_vh3z1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp48_vh3z1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $fractional_part = round($value - floor($value));\n    $whole_part = floor($value);\n    if ($fractional_part == 0) {\n        return $whole_part;\n    } else {\n        return $whole_part + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85p6uwki.php:31\nStack trace:\n#0 /tmp/tmp85p6uwki.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp85p6uwki.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    if (abs($value) == 0) {\n        return 0;\n    }\n    $value = abs($value);\n    $value = round($value);\n    $value = (int) $value;\n    if (abs($value) == 0) {\n        return 0;\n    }\n    $value = abs($value);\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9u8bi5s.php:39\nStack trace:\n#0 /tmp/tmpu9u8bi5s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu9u8bi5s.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else if ($difference < 1.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wonillg.php:33\nStack trace:\n#0 /tmp/tmp1wonillg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1wonillg.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = $value * 1;\n    $value = round($value);\n    $value = $value / 1;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaoy6x2sj.php:27\nStack trace:\n#0 /tmp/tmpaoy6x2sj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaoy6x2sj.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value < 0) {\n            $result = $result - 1;\n        } else {\n            $result = $result + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3xyp5ig.php:33\nStack trace:\n#0 /tmp/tmpw3xyp5ig.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpw3xyp5ig.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = round($value);\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkolrd6ut.php:33\nStack trace:\n#0 /tmp/tmpkolrd6ut.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkolrd6ut.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (int) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($rounded > 0) {\n            return $rounded;\n        } else {\n            return $rounded * -1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar19p1_s.php:34\nStack trace:\n#0 /tmp/tmpar19p1_s.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpar19p1_s.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $fractional_part = round($value - floor($value));\n    if ($fractional_part == 0) {\n        return floor($value);\n    } else {\n        return floor($value) + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1wach2u.php:30\nStack trace:\n#0 /tmp/tmpy1wach2u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy1wach2u.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else if ($difference > 1.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbakk0nhn.php:33\nStack trace:\n#0 /tmp/tmpbakk0nhn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbakk0nhn.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference > 0.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk9silq1.php:33\nStack trace:\n#0 /tmp/tmpvk9silq1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvk9silq1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\"\\n\", \"\", $value);\n    $value = str_replace(\"\\r\", \"\", $value);\n    $value = str_replace(\"\\t\", \"\", $value);\n    $value = str_replace(\"\\0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected integer \"10\", expecting \")\" in /tmp/tmp5vdlzn7b.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value < 0) {\n            $result = ceil($value);\n        } else {\n            $result = floor($value);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xd61rqe.php:33\nStack trace:\n#0 /tmp/tmp0xd61rqe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0xd61rqe.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fract = $value - $int;\n    if ($fract == 0) {\n        return $int;\n    }\n    if ($fract > 0.5) {\n        return $int + 1;\n    }\n    return $int - 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmq902jy.php:34\nStack trace:\n#0 /tmp/tmphmq902jy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphmq902jy.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $rounded = (int) $rounded;\n    if ($value == $rounded) {\n        if ($value > 0) {\n            $rounded = $rounded + 1;\n        } else {\n            $rounded = $rounded - 1;\n        }\n    }\n    return $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9t0ytiu.php:34\nStack trace:\n#0 /tmp/tmpk9t0ytiu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk9t0ytiu.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($value > 0) {\n            return $rounded + 1;\n        } else {\n            return $rounded - 1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfct1_2w9.php:34\nStack trace:\n#0 /tmp/tmpfct1_2w9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfct1_2w9.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (int) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($rounded > 0) {\n            return $rounded;\n        } else {\n            return $rounded * -1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar19p1_s.php:34\nStack trace:\n#0 /tmp/tmpar19p1_s.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpar19p1_s.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($rounded > 0) {\n            return $rounded;\n        } else {\n            return $rounded * -1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5jkqfxb.php:34\nStack trace:\n#0 /tmp/tmpi5jkqfxb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi5jkqfxb.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else if ($difference > 1.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbakk0nhn.php:33\nStack trace:\n#0 /tmp/tmpbakk0nhn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbakk0nhn.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $difference = abs($value - $rounded_value);\n    if ($difference < 0.5) {\n        return $rounded_value;\n    } else {\n        return $rounded_value + (int) ceil($difference);\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblclrbt4.php:31\nStack trace:\n#0 /tmp/tmpblclrbt4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpblclrbt4.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = $value + 0.5;\n    $value = round($value);\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s8lxt34.php:28\nStack trace:\n#0 /tmp/tmp6s8lxt34.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6s8lxt34.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = $value + 0;\n    $value = round($value);\n    $value = $value - 0;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28_2de1m.php:27\nStack trace:\n#0 /tmp/tmp28_2de1m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp28_2de1m.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = $value + 0.5;\n    $value = round($value);\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s8lxt34.php:28\nStack trace:\n#0 /tmp/tmp6s8lxt34.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6s8lxt34.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi1om1or.php:24\nStack trace:\n#0 /tmp/tmpxi1om1or.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxi1om1or.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = floor($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    } else if ($dec > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphectftqx.php:33\nStack trace:\n#0 /tmp/tmphectftqx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphectftqx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $fractional_part = round($value - floor($value));\n    $integer_part = floor($value);\n    if ($fractional_part == 0) {\n        return $integer_part;\n    } else {\n        return $integer_part + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yb1xv98.php:31\nStack trace:\n#0 /tmp/tmp3yb1xv98.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3yb1xv98.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($rounded > 0) {\n            return $rounded + 1;\n        } else {\n            return $rounded - 1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__henc60.php:34\nStack trace:\n#0 /tmp/tmp__henc60.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp__henc60.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    }\n    if ($fraction < 0) {\n        return $int - 1;\n    }\n    return $int + 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jdqvhii.php:36\nStack trace:\n#0 /tmp/tmp0jdqvhii.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0jdqvhii.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    $sign = $value < 0 ? -1 : 1;\n    $result = $result * $sign;\n    $result = round($result);\n    $result = $result / $sign;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrewcf8v.php:30\nStack trace:\n#0 /tmp/tmpmrewcf8v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmrewcf8v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $difference = abs($value - $rounded_value);\n    if ($difference < 0.5) {\n        return $rounded_value;\n    } else {\n        return $rounded_value + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch6wzg4a.php:31\nStack trace:\n#0 /tmp/tmpch6wzg4a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpch6wzg4a.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else if ($difference < 1.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wonillg.php:33\nStack trace:\n#0 /tmp/tmp1wonillg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1wonillg.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    if (abs($value) == 0) {\n        return 0;\n    }\n    $value = abs($value);\n    $int = floor($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    }\n    if ($dec > 0.5) {\n        return $int + 1;\n    }\n    return $int;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeh_ejmk6.php:38\nStack trace:\n#0 /tmp/tmpeh_ejmk6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpeh_ejmk6.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $rounded_value = (int) $rounded_value;\n    return $rounded_value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $diff = abs($value - $rounded);\n    if ($diff < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehxxnbjs.php:31\nStack trace:\n#0 /tmp/tmpehxxnbjs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpehxxnbjs.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        $rounded = $rounded + 0.5;\n    }\n    return (int) $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6aa3lsyg.php:32\nStack trace:\n#0 /tmp/tmp6aa3lsyg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6aa3lsyg.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = $value + 0.5;\n    $value = round($value);\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s8lxt34.php:28\nStack trace:\n#0 /tmp/tmp6s8lxt34.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6s8lxt34.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mgw3ma4.php:34\nStack trace:\n#0 /tmp/tmp0mgw3ma4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0mgw3ma4.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\"+\", \"\", $value);\n    $value = str_replace(\"e\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmpcjfdoftd.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\"(\", \"\", $value);\n    $value = str_replace(\")\", \"\", $value);\n    $value = str_replace(\"/\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"(\", \"\", $value);\n    $value = str_replace(\")\", \"\", $value);\n    $value = str_replace(\"/\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"(\", \"\", $value);\n    $value = str_replace(\")\", \"\", $value);\n    $value = str_replace(\"/\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"(\", \"\", $value);\n    $value = str_replace(\")\", \"\", $value);\n    $value = str_replace(\"/\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"(\", \"\", $value);\n    $value = str_replace(\")\", \"\", $value);\n    $value = str_replace(\"/\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: Unclosed '{' on line 15 in /tmp/tmpm9q046e3.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($value == $result) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7130z55.php:33\nStack trace:\n#0 /tmp/tmpc7130z55.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc7130z55.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($rounded > 0) {\n            return $rounded + 1;\n        } else {\n            return $rounded - 1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwggv7hjn.php:34\nStack trace:\n#0 /tmp/tmpwggv7hjn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwggv7hjn.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value < 0) {\n            $result = ceil($value);\n        } else {\n            $result = floor($value);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xd61rqe.php:33\nStack trace:\n#0 /tmp/tmp0xd61rqe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0xd61rqe.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference > 0.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk9silq1.php:33\nStack trace:\n#0 /tmp/tmpvk9silq1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvk9silq1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fraction = $value - $int;\n    if ($fraction < 0.5) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxohz0hx3.php:35\nStack trace:\n#0 /tmp/tmpxohz0hx3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxohz0hx3.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $rounded_value = (int) $rounded_value;\n    return $rounded_value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + (int) ceil($difference);\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3id0nue.php:31\nStack trace:\n#0 /tmp/tmpw3id0nue.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw3id0nue.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi1om1or.php:24\nStack trace:\n#0 /tmp/tmpxi1om1or.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxi1om1or.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($value < 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6bz35r0.php:34\nStack trace:\n#0 /tmp/tmpv6bz35r0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv6bz35r0.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    $diff = abs($value - $result);\n    if ($diff < 0.5) {\n        $result = round($value + 0.5);\n    } else if ($diff > 0.5) {\n        $result = round($value - 0.5);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cm3d7mz.php:32\nStack trace:\n#0 /tmp/tmp0cm3d7mz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0cm3d7mz.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        $rounded = $rounded + 0.5;\n    }\n    return $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8ghl2x3.php:29\nStack trace:\n#0 /tmp/tmpz8ghl2x3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpz8ghl2x3.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $difference = abs($value - $rounded_value);\n    if ($difference < 0.5) {\n        return $rounded_value;\n    } else {\n        return $rounded_value + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch6wzg4a.php:31\nStack trace:\n#0 /tmp/tmpch6wzg4a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpch6wzg4a.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = floor($value);\n    $diff = abs($value - $int);\n    if ($diff < 0.5) {\n        return $int;\n    } else {\n        return $int + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7f3ql729.php:31\nStack trace:\n#0 /tmp/tmp7f3ql729.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7f3ql729.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded_value = round($value);\n    $rounded_value = (int) $rounded_value;\n    return $rounded_value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = floor($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    }\n    if ($dec > 0.5) {\n        return $int + 1;\n    }\n    return $int - 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6bquekh.php:33\nStack trace:\n#0 /tmp/tmpk6bquekh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk6bquekh.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($value > 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfprp480r.php:34\nStack trace:\n#0 /tmp/tmpfprp480r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfprp480r.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($rounded < 0) {\n            return ceil($rounded);\n        } else {\n            return floor($rounded);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mg_yg5p.php:34\nStack trace:\n#0 /tmp/tmp4mg_yg5p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4mg_yg5p.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    if ($value == $int) {\n        return $int;\n    }\n    $diff = abs($value - $int);\n    if ($diff < 0.5) {\n        return $int;\n    }\n    if ($diff < 1.5) {\n        return $int + 1;\n    }\n    return $int - 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2todbwbo.php:38\nStack trace:\n#0 /tmp/tmp2todbwbo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2todbwbo.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($value > 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ueaw_qa.php:34\nStack trace:\n#0 /tmp/tmp3ueaw_qa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3ueaw_qa.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($value < 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzq7a035.php:34\nStack trace:\n#0 /tmp/tmprzq7a035.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprzq7a035.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return round($value);\n    } else {\n        return round($value) + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptplpjof1.php:33\nStack trace:\n#0 /tmp/tmptplpjof1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptplpjof1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        $result = $result + 0.5;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxxs60zp.php:29\nStack trace:\n#0 /tmp/tmpzxxs60zp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzxxs60zp.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $diff = abs($value - $rounded);\n    if ($diff < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + (int) ceil($diff);\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde5kh1m_.php:31\nStack trace:\n#0 /tmp/tmpde5kh1m_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpde5kh1m_.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\"\\n\", \"\", $value);\n    $value = str_replace(\"\\r\", \"\", $value);\n    $value = str_replace(\"\\t\", \"\", $value);\n    $value = str_replace(\"\\v\", \"\", $value);\n    $value = str_replace(\"\\f\", \"\", $value);\n    $value = str_replace(\"\\b\", \"\", $value);\n    $value = str_replace(\"\\0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x00\", \"\", $value);\n    $value = str_replace(\"\\u0000\", \"\", $value);\n    $value = str_replace(\"\\uFFFE\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uD800\", \"\", $value);\n    $value = str_replace(\"\\uDBFF\", \"\", $value);\n    $value = str_replace(\"\\uDC00\", \"\", $value);\n    $value = str_replace(\"\\uDFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFE\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value);\n    $value = str_replace(\"\\uFFFF\", \"\", $value\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpn5m87aps.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    $diff = abs($value - $int);\n    if ($diff < 0.5) {\n        return $int;\n    } else {\n        return $int + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw31e_ssj.php:33\nStack trace:\n#0 /tmp/tmpw31e_ssj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw31e_ssj.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = round($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    } else if ($dec > 0) {\n        return $int + 1;\n    } else {\n        return $int - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk74_oni8.php:33\nStack trace:\n#0 /tmp/tmpk74_oni8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk74_oni8.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fraction = $value - $int;\n    if ($fraction < 0.5) {\n        return $int;\n    } else if ($fraction > 0.5) {\n        return $int + 1;\n    } else {\n        return $int + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxohz0hx3.php:35\nStack trace:\n#0 /tmp/tmpxohz0hx3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxohz0hx3.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    }\n    $fraction = abs($fraction);\n    $fraction = round($fraction, 2);\n    $fraction = $fraction / 2;\n    $fraction = intval($fraction);\n    if ($fraction == 0) {\n        return $int;\n    }\n    if ($fraction < 0) {\n        return $int - 1;\n    }\n    return $int + 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuiqnjkly.php:41\nStack trace:\n#0 /tmp/tmpuiqnjkly.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpuiqnjkly.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference > 0.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk9silq1.php:33\nStack trace:\n#0 /tmp/tmpvk9silq1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvk9silq1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = round($value);\n    $dec = $value - $int;\n    if (abs($dec) < 0.5) {\n        return $int;\n    } else {\n        return $int + (round($dec) > 0 ? 1 : -1);\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_9dp9ge.php:31\nStack trace:\n#0 /tmp/tmpz_9dp9ge.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpz_9dp9ge.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    $difference = abs($value - $result);\n    if ($difference < 0.5) {\n        $result = round($value + 0.5);\n    } else if ($difference > 0.5) {\n        $result = round($value - 0.5);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bbr2lp5.php:32\nStack trace:\n#0 /tmp/tmp7bbr2lp5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7bbr2lp5.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfh19qji.php:28\nStack trace:\n#0 /tmp/tmpsfh19qji.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsfh19qji.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + (int) ceil($difference);\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3id0nue.php:31\nStack trace:\n#0 /tmp/tmpw3id0nue.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw3id0nue.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $fractional_part = $value - floor($value);\n    if ($fractional_part == 0) {\n        return floor($value);\n    } else {\n        return floor($value + (1 - $fractional_part));\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg54r8sda.php:30\nStack trace:\n#0 /tmp/tmpg54r8sda.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg54r8sda.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($value == $rounded) {\n        if ($rounded < 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxqk8ez0.php:34\nStack trace:\n#0 /tmp/tmpdxqk8ez0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdxqk8ez0.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value, 0);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfd0dfba.php:27\nStack trace:\n#0 /tmp/tmpxfd0dfba.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxfd0dfba.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else if ($difference < 1.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wonillg.php:33\nStack trace:\n#0 /tmp/tmp1wonillg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1wonillg.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $rounded = (int) $rounded;\n    if ($value == $rounded) {\n        if ($value > 0) {\n            return $rounded + 1;\n        } else {\n            return $rounded - 1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_vpe4xi.php:35\nStack trace:\n#0 /tmp/tmpx_vpe4xi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx_vpe4xi.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = floor($value);\n    $dec = $value - $int;\n    if ($dec == 0) {\n        return $int;\n    }\n    if ($dec > 0.5) {\n        return $int + 1;\n    }\n    return $int - 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6bquekh.php:33\nStack trace:\n#0 /tmp/tmpk6bquekh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk6bquekh.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    $diff = abs($value - $result);\n    if ($diff < 0.5) {\n        $result = round($value + 0.5);\n    } else if ($diff > 0.5) {\n        $result = round($value - 0.5);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cm3d7mz.php:32\nStack trace:\n#0 /tmp/tmp0cm3d7mz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0cm3d7mz.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        $result = $result + 0.5;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxxs60zp.php:29\nStack trace:\n#0 /tmp/tmpzxxs60zp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzxxs60zp.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    $difference = abs($value - $result);\n    if ($difference < 0.5) {\n        $result = $result + 0.5;\n    } else if ($difference > 0.5) {\n        $result = $result - 0.5;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3bsvdn1.php:32\nStack trace:\n#0 /tmp/tmpo3bsvdn1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo3bsvdn1.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfh19qji.php:28\nStack trace:\n#0 /tmp/tmpsfh19qji.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsfh19qji.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $rounded = (int) $rounded;\n    if ($rounded == $value) {\n        if ($value > 0) {\n            $rounded = $rounded + 1;\n        } else {\n            $rounded = $rounded - 1;\n        }\n    }\n    return $rounded;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcwzcz_2.php:34\nStack trace:\n#0 /tmp/tmpzcwzcz_2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzcwzcz_2.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value < 0) {\n            $result = $result - 1;\n        } else {\n            $result = $result + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3xyp5ig.php:33\nStack trace:\n#0 /tmp/tmpw3xyp5ig.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpw3xyp5ig.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = intval($value);\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    }\n    if ($fraction < 0.5) {\n        return $int - 1;\n    }\n    return $int + 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk31qfab.php:36\nStack trace:\n#0 /tmp/tmpwk31qfab.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwk31qfab.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20hnsfpi.php:31\nStack trace:\n#0 /tmp/tmp20hnsfpi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp20hnsfpi.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fraction = $value - $int;\n    if ($fraction == 0) {\n        return $int;\n    }\n    if ($fraction < 0) {\n        $fraction = -$fraction;\n    }\n    $fraction = round($fraction);\n    if ($fraction == 0) {\n        return $int;\n    }\n    if ($fraction < 0) {\n        $fraction = -$fraction;\n    }\n    return $int + $fraction;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3sxfhzhp.php:41\nStack trace:\n#0 /tmp/tmp3sxfhzhp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3sxfhzhp.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $diff = abs($value - $rounded);\n    if ($diff < 0.5) {\n        return $rounded;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehxxnbjs.php:31\nStack trace:\n#0 /tmp/tmpehxxnbjs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpehxxnbjs.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = $value * 1;\n    $value = round($value);\n    $value = $value / 1;\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($value > 0) {\n            return ceil($value);\n        } else {\n            return floor($value);\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfprp480r.php:34\nStack trace:\n#0 /tmp/tmpfprp480r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfprp480r.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = str_replace(\".\", \"\", $value);\n    $value = (int) $value;\n    $value = round($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpga6y0ppz.php:27\nStack trace:\n#0 /tmp/tmpga6y0ppz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpga6y0ppz.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $result = round($value);\n    if ($result == $value) {\n        if ($value > 0) {\n            $result = $result + 1;\n        } else {\n            $result = $result - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk3n7c4l.php:33\nStack trace:\n#0 /tmp/tmplk3n7c4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplk3n7c4l.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference > 0.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk9silq1.php:33\nStack trace:\n#0 /tmp/tmpvk9silq1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvk9silq1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi1om1or.php:24\nStack trace:\n#0 /tmp/tmpxi1om1or.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxi1om1or.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \",\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmppuiie_20.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference < 0.5) {\n        return $rounded - 1;\n    } else {\n        return $rounded + 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vcjz_i.php:33\nStack trace:\n#0 /tmp/tmp13vcjz_i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13vcjz_i.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = $value + 0.5;\n    $value = intval($value);\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yqxi3iv.php:30\nStack trace:\n#0 /tmp/tmp1yqxi3iv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1yqxi3iv.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = strtolower($value);\n    $value = str_replace(\".\", \"\", $value);\n    $value = str_replace(\"-\", \"\", $value);\n    $value = str_replace(\" \", \"\", $value);\n    $value = str_replace(\"\\n\", \"\", $value);\n    $value = str_replace(\"\\r\", \"\", $value);\n    $value = str_replace(\"\\t\", \"\", $value);\n    $value = str_replace(\"\\0\", \"\", $value);\n    $value = str_replace(\"\\x0\", \"\", $value);\n    $value = str_replace(\"\\x00\", \"\", $value);\n    $value = str_replace(\"\\x000\", \"\", $value);\n    $value = str_replace(\"\\x0000\", \"\", $value);\n    $value = str_replace(\"\\x00000\", \"\", $value);\n    $value = str_replace(\"\\x000000\", \"\", $value);\n    $value = str_replace(\"\\x0000000\", \"\", $value);\n    $value = str_replace(\"\\x00000000\", \"\", $value);\n    $value = str_replace(\"\\x000000000\", \"\", $value);\n    $value = str_replace(\"\\x0000000000\", \"\", $value);\n    $value = str_replace(\"\\x00000000000\", \"\", $value);\n    $value = str_replace(\"\\x000000000000\", \"\", $value);\n    $value = str_replace(\"\\x0000000000000\", \"\", $value);\n    $value = str_replace(\"\\x00000000000000\", \"\", $value);\n    $value = str_replace(\"\\x000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x0000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x00000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x000000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x0000000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x00000000000000000000\", \"\", $value);\n    $value = str_replace(\"\\x000000000000000000000\", \"\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nParse error: syntax error, unexpected integer \"10\", expecting \")\" in /tmp/tmpcpfuvydw.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value, 2);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazqme39.php:28\nStack trace:\n#0 /tmp/tmpuazqme39.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuazqme39.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    $difference = abs($value - $rounded);\n    if ($difference == 0) {\n        return $rounded;\n    } else if ($difference > 0.5) {\n        return $rounded + 1;\n    } else {\n        return $rounded - 1;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk9silq1.php:33\nStack trace:\n#0 /tmp/tmpvk9silq1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvk9silq1.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $rounded = round($value);\n    if ($rounded == $value) {\n        if ($rounded > 0) {\n            return $rounded + 1;\n        } else {\n            return $rounded - 1;\n        }\n    } else {\n        return $rounded;\n    }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__henc60.php:34\nStack trace:\n#0 /tmp/tmp__henc60.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp__henc60.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $value = round($value);\n    $value = (int) $value;\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $value = (float) $value;\n    $int = (int) $value;\n    $fract = $value - $int;\n    if ($fract == 0) {\n        return $int;\n    }\n    if ($fract < 0.5) {\n        return $int - 1;\n    }\n    return $int + 1;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293167,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qt8wfu9.php:36\nStack trace:\n#0 /tmp/tmp_qt8wfu9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_qt8wfu9.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}