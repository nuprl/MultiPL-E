{
  "name": "HumanEval_156_int_to_mini_roman",
  "language": "php",
  "prompt": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n",
  "tests": "function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        if ($i % 5 == 1) {\n            $roman += \"x\";\n        } else if ($i % 5 == 2) {\n            $roman += \"c\";\n        } else if ($i % 5 == 3) {\n            $roman += \"m\";\n        } else if ($i % 5 == 4) {\n            $roman += \"d\";\n        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpy2k9ac6z.php:16\nStack trace:\n#0 /tmp/tmpy2k9ac6z.php(29): int_to_mini_roman(19)\n#1 /tmp/tmpy2k9ac6z.php(33): candidate(19)\n#2 /tmp/tmpy2k9ac6z.php(49): test()\n#3 {main}\n  thrown in /tmp/tmpy2k9ac6z.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $j = $i % 10;\n        if ($j == 1) {\n            $result = $result + \"x\";\n        } else if ($j == 2) {\n            $result = $result + \"x\";\n        } else if ($j == 3) {\n            $result = $result + \"c\";\n        } else if ($j == 4) {\n            $result = $result + \"c\";\n        } else if ($j == 5) {\n            $result = $result + \"d\";\n        } else if ($j == 6) {\n            $result = $result + \"d\";\n        } else if ($j == 7) {\n            $result = $result + \"m\";\n        } else if ($j == 8) {\n            $result = $result + \"m\";\n        } else if ($j == 9) {\n            $result = $result + \"i\";\n        } else if ($j == 0) {\n            $result = $result + \"i\";\n        }\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmppq590u0t.php:34\nStack trace:\n#0 /tmp/tmppq590u0t.php(44): int_to_mini_roman(19)\n#1 /tmp/tmppq590u0t.php(48): candidate(19)\n#2 /tmp/tmppq590u0t.php(64): test()\n#3 {main}\n  thrown in /tmp/tmppq590u0t.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix'\n    );\n    $roman_numerals_reversed = array(\n        '',\n        'x',\n        'xx',\n        'xxx',\n        'xl',\n        'l',\n        'lx',\n        'lxx',\n        'lxxx',\n        'xc',\n        'c',\n        'xci',\n        'cix',\n        'cxxx',\n        'cl',\n        'clx',\n        'clxx',\n        'clxxx',\n        'xcc',\n        'cc',\n        'cci',\n        'ccix',\n        'ccxxx',\n        'ccl',\n        'cclx',\n        'cclxx',\n        'cclxxx',\n        'xc',\n        'xci',\n        'xcc',\n        'xcci',\n        'xcccc',\n        'xcccci',\n        'xcccccc',\n        'xccccccci',\n        'xcccccccc',\n        'xccccccccci',\n        'xcccccccccc',\n        'xccccccccccci',\n        'xcccccccccccc',\n        'xccccccccccccci',\n        'xcccccccccccccc',\n        'xccccccccccccccci',\n        'xcccccccccccccccc',\n        'xccccccccccccccccci',\n        'xcccccccccccccccccc',\n        'xccccccccccccccccccci',\n        'xcccccccccccccccccccc',\n        'x\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected string content \"x\", expecting \")\" in /tmp/tmp4mlga1hf.php on line 84\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $roman_map[$i];\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpgxhkiizk.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpgxhkiizk.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpgxhkiizk.php:18\nStack trace:\n#0 /tmp/tmpgxhkiizk.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpgxhkiizk.php(29): candidate(19)\n#2 /tmp/tmpgxhkiizk.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgxhkiizk.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        $roman = $roman . int_to_roman($i);\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpeulunynb.php:15\nStack trace:\n#0 /tmp/tmpeulunynb.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpeulunynb.php(25): candidate(19)\n#2 /tmp/tmpeulunynb.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpeulunynb.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman_numeral += $roman_numeral_array[$i];\n        $i++;\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_numeral_array in /tmp/tmpdq1exf74.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpdq1exf74.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpdq1exf74.php:18\nStack trace:\n#0 /tmp/tmpdq1exf74.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpdq1exf74.php(29): candidate(19)\n#2 /tmp/tmpdq1exf74.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpdq1exf74.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    for($i = 1; $i <= $number; $i++) {\n        if($i < 4 || $i % 4 == 1 || $i % 4 == 2) {\n            $roman += \"i\";\n        } else if($i % 4 == 3) {\n            $roman += \"v\";\n        } else if($i % 4 == 4) {\n            $roman += \"x\";\n        } else if($i % 4 == 5) {\n            $roman += \"l\";\n        } else if($i % 4 == 6) {\n            $roman += \"c\";\n        } else if($i % 4 == 7) {\n            $roman += \"d\";\n        } else if($i % 4 == 8) {\n            $roman += \"m\";\n        } else if($i % 4 == 9) {\n            $roman += \"x\";\n        } else if($i % 4 == 10) {\n            $roman += \"v\";\n        } else if($i % 4 == 11) {\n            $roman += \"i\";\n        } else if($i % 4 == 12) {\n            $roman += \"x\";\n        } else if($i % 4 == 13) {\n            $roman += \"l\";\n        } else if($i % 4 == 14) {\n            $roman += \"c\";\n        } else if($i % 4 == 15) {\n            $roman += \"d\";\n        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp4srzmopp.php:16\nStack trace:\n#0 /tmp/tmp4srzmopp.php(49): int_to_mini_roman(19)\n#1 /tmp/tmp4srzmopp.php(53): candidate(19)\n#2 /tmp/tmp4srzmopp.php(69): test()\n#3 {main}\n  thrown in /tmp/tmp4srzmopp.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result.toLowerCase();\n}\n\n$roman_numerals = array(\n    '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix',\n    'l', 'lii', 'liii', 'liv', 'lv', 'lvi', 'lvii', 'lviii', 'lix', 'lx', 'lxi', 'lxii', 'lxiii', 'lxiv', 'lxv', 'lxvi', 'lxvii', 'lxviii', 'lxix',\n    'c', 'cii', 'ciii', 'civ', 'cv', 'cvi', 'cvii', 'cviii', 'cix', 'cx', 'cxi', 'cxii', 'cxiii', 'cxiv', 'cxv', 'cxvi', 'cxvii', 'cxviii', 'cxix',\n    'd', 'dii', 'diii', 'div', 'dv', 'dvi', 'dvii', 'dviii', 'dix', 'dx', 'dxi', 'dxii', 'dxiii', 'dxiv', 'dxv', 'dxvi', 'dxvii', 'dxviii', 'dxix',\n    'm', 'mii', 'miii', 'miv', 'mv', 'mvi', 'mvii', 'mviii', 'mix', 'mx', 'mxi', 'mxii', 'mxiii', 'mxiv', 'mxv', 'mxvi', 'mxvii', 'mxviii', 'mxix',\n    '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpg8n5uq4z.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        if ($number >= 1000) {\n            $result += \"m\";\n            $number -= 1000;\n        } else if ($number >= 900) {\n            $result += \"cm\";\n            $number -= 900;\n        } else if ($number >= 500) {\n            $result += \"d\";\n            $number -= 500;\n        } else if ($number >= 400) {\n            $result += \"cd\";\n            $number -= 400;\n        } else if ($number >= 100) {\n            $result += \"c\";\n            $number -= 100;\n        } else if ($number >= 90) {\n            $result += \"xc\";\n            $number -= 90;\n        } else if ($number >= 50) {\n            $result += \"l\";\n            $number -= 50;\n        } else if ($number >= 40) {\n            $result += \"xl\";\n            $number -= 40;\n        } else if ($number >= 10) {\n            $result += \"x\";\n            $number -= 10;\n        } else if ($number >= 9) {\n            $result += \"ix\";\n            $number -= 9;\n        } else if ($number >= 5) {\n            $result += \"v\";\n            $number -= 5;\n        } else if ($number >= 4) {\n            $result += \"iv\";\n            $number -= 4;\n        } else if ($number >= 1) {\n            $result += \"i\";\n            $number -= 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmprdqud4w2.php:41\nStack trace:\n#0 /tmp/tmprdqud4w2.php(61): int_to_mini_roman(19)\n#1 /tmp/tmprdqud4w2.php(65): candidate(19)\n#2 /tmp/tmprdqud4w2.php(81): test()\n#3 {main}\n  thrown in /tmp/tmprdqud4w2.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_array = array(\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix'\n    );\n    $roman_array_length = sizeof($roman_array);\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $result = $roman_array[$i % $roman_array_length] . $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77oluv52.php:48\nStack trace:\n#0 /tmp/tmp77oluv52.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp77oluv52.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $value = $number % 10;\n        if($value == 4 || $value == 9) {\n            $result = $result + \"vii\";\n        } else if($value == 5) {\n            $result = $result + \"viii\";\n        } else if($value == 6) {\n            $result = $result + \"ix\";\n        } else if($value == 7) {\n            $result = $result + \"x\";\n        } else if($value == 8) {\n            $result = $result + \"xi\";\n        } else if($value == 1) {\n            $result = $result + \"i\";\n        } else if($value == 2) {\n            $result = $result + \"ii\";\n        } else if($value == 3) {\n            $result = $result + \"iii\";\n        } else if($value == 0) {\n            $result = $result + \"\";\n        }\n        $number = $number / 10;\n        $i++;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp5rfrj1zr.php:18\nStack trace:\n#0 /tmp/tmp5rfrj1zr.php(43): int_to_mini_roman(19)\n#1 /tmp/tmp5rfrj1zr.php(47): candidate(19)\n#2 /tmp/tmp5rfrj1zr.php(63): test()\n#3 {main}\n  thrown in /tmp/tmp5rfrj1zr.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpvxj6e929.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpvxj6e929.php:21\nStack trace:\n#0 /tmp/tmpvxj6e929.php(44): int_to_mini_roman(19)\n#1 /tmp/tmpvxj6e929.php(48): candidate(19)\n#2 /tmp/tmpvxj6e929.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpvxj6e929.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpqvd4il24.php on line 17\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpqvd4il24.php on line 24\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpqvd4il24.php on line 33\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpqvd4il24.php on line 40\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpqvd4il24.php:42\nStack trace:\n#0 /tmp/tmpqvd4il24.php(48): int_to_mini_roman(19)\n#1 /tmp/tmpqvd4il24.php(52): candidate(19)\n#2 /tmp/tmpqvd4il24.php(68): test()\n#3 {main}\n  thrown in /tmp/tmpqvd4il24.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmps8b9wdq1.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmps8b9wdq1.php:21\nStack trace:\n#0 /tmp/tmps8b9wdq1.php(44): int_to_mini_roman(19)\n#1 /tmp/tmps8b9wdq1.php(48): candidate(19)\n#2 /tmp/tmps8b9wdq1.php(64): test()\n#3 {main}\n  thrown in /tmp/tmps8b9wdq1.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $n_array = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    for ($i = 0; $i < 13; $i++) {\n        while ($n >= $n_array[$i]) {\n            $n -= $n_array[$i];\n            $roman_numeral += \"m\";\n        }\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp11pl40zv.php:19\nStack trace:\n#0 /tmp/tmp11pl40zv.php(26): int_to_mini_roman(19)\n#1 /tmp/tmp11pl40zv.php(30): candidate(19)\n#2 /tmp/tmp11pl40zv.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp11pl40zv.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $n_array = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    for ($i = 0; $i < 13; $i++) {\n        while ($n >= $n_array[$i]) {\n            $roman_numeral += $n_array[$i];\n            $n -= $n_array[$i];\n        }\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmp4bkkguzr.php:18\nStack trace:\n#0 /tmp/tmp4bkkguzr.php(26): int_to_mini_roman(19)\n#1 /tmp/tmp4bkkguzr.php(30): candidate(19)\n#2 /tmp/tmp4bkkguzr.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp4bkkguzr.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpd42myajm.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result = $result . \"x\";\n        } else if ($digit == 2) {\n            $result = $result . \"x\";\n        } else if ($digit == 3) {\n            $result = $result . \"c\";\n        } else if ($digit == 4) {\n            $result = $result . \"c\";\n        } else if ($digit == 5) {\n            $result = $result . \"d\";\n        } else if ($digit == 6) {\n            $result = $result . \"d\";\n        } else if ($digit == 7) {\n            $result = $result . \"m\";\n        } else if ($digit == 8) {\n            $result = $result . \"m\";\n        } else if ($digit == 9) {\n            $result = $result . \"i\";\n        } else if ($digit == 0) {\n            $result = $result . \"i\";\n        }\n        $i = $i - $digit;\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h4pdznk.php:49\nStack trace:\n#0 /tmp/tmp8h4pdznk.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8h4pdznk.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n +\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpnxrvkpqj.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    };\n    $roman_numerals_keys = array_keys($roman_numerals);\n    $roman_numerals_values = array_values($roman_numerals);\n    $roman_numerals_keys_length = count($roman_numerals_keys);\n    $roman_numerals_values_length = count($roman_numerals_values);\n    $number_length = strlen($number);\n    $roman_numerals_keys_index = 0;\n    $roman_numerals_values_index = 0;\n    $roman_numerals_keys_index_max = $number_length - 1;\n    $roman_numerals_values_index_max = $number_length - 1;\n    $roman_numerals_keys_index_min = 0;\n    $roman_numerals_values_index_min = 0;\n    $roman_numerals_keys_index_min_max = $number_length - 1;\n    $roman_numerals_values_index_min_max = $number_length - 1;\n    $roman_numerals_keys_index_min_max_max = $number_length - 2;\n    $roman_numerals_values_index_min_max_max = $number_length - 2;\n    $roman_numerals_keys_index_min_max_min = 0;\n    $roman_numerals_values_index_min_max_min = 0;\n    $roman_numerals_keys_index_min_max_min_max = $number_length - 2;\n    $roman_numerals_values_index_min_max_min_max = $number_length - 2;\n    $roman_numerals_keys_index_min_max_min_min = 0;\n    $roman_numerals_values_index_min_max_min_min = 0\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpo4dazqgx.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman_numeral += $roman_numeral_table[$i];\n        $i += $i;\n    }\n    return $roman_numeral;\n}\n\n$roman_numeral_table = {\n    1: \"i\",\n    5: \"v\",\n    10: \"x\",\n    50: \"l\",\n    100: \"c\",\n    500: \"d\",\n    1000: \"m\"\n};\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmp7bjldfvz.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix'\n    );\n    $roman_numerals_lower = array(\n        '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix'\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $result = $roman_numerals[$i] . $result;\n    }\n    return $roman_numerals_lower[$number - 1] . $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined array key 10 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 11 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 12 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 13 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 14 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 15 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 16 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 17 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 18 in /tmp/tmpabgytzjh.php on line 21\n\nWarning: Undefined array key 18 in /tmp/tmpabgytzjh.php on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabgytzjh.php:31\nStack trace:\n#0 /tmp/tmpabgytzjh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpabgytzjh.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp3_soynhi.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp3_soynhi.php:21\nStack trace:\n#0 /tmp/tmp3_soynhi.php(36): int_to_mini_roman(19)\n#1 /tmp/tmp3_soynhi.php(40): candidate(19)\n#2 /tmp/tmp3_soynhi.php(56): test()\n#3 {main}\n  thrown in /tmp/tmp3_soynhi.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $roman_map[$i];\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpgxhkiizk.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpgxhkiizk.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpgxhkiizk.php:18\nStack trace:\n#0 /tmp/tmpgxhkiizk.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpgxhkiizk.php(29): candidate(19)\n#2 /tmp/tmpgxhkiizk.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgxhkiizk.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix'\n    );\n    $roman_numerals_lower = array(\n        '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix'\n    );\n    $roman_numerals_upper = array(\n        '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'\n    );\n    $roman_numerals_lower_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_upper_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_lower = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_upper = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_lower_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_upper_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_lower_index_index = array(\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    );\n    $roman_numerals_index_upper\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp5lf5kphy.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = {\n        'I': 'i',\n        'V': 'v',\n        'X': 'x',\n        'L': 'l',\n        'C': 'c',\n        'D': 'd',\n        'M': 'm'\n    };\n    $roman_numerals_reversed = {\n        'i': 'I',\n        'v': 'V',\n        'x': 'X',\n        'l': 'L',\n        'c': 'C',\n        'd': 'D',\n        'm': 'M'\n    };\n    $roman_numerals_reversed_keys = array_keys($roman_numerals_reversed);\n    $roman_numerals_reversed_keys_count = count($roman_numerals_reversed_keys);\n    $roman_numerals_reversed_keys_count_max = max($roman_numerals_reversed_keys_count);\n    $roman_numerals_reversed_keys_count_min = min($roman_numerals_reversed_keys_count);\n    $roman_numerals_reversed_keys_count_min_index = $roman_numerals_reversed_keys_count_min - 1;\n    $number_roman_numerals = '';\n    $number_roman_numerals_keys = array_keys($number_roman_numerals);\n    $number_roman_numerals_keys_count = count($number_roman_numerals_keys);\n    $number_roman_numerals_keys_count_max = max($number_roman_numerals_keys_count);\n    $number_roman_numerals_keys_count_min = min($number_roman_numerals_keys_count);\n    $number_roman_numerals_keys_count_min_index = $number_roman_numerals_keys_count_min - 1;\n    $number_roman_numerals_keys_count_max_index = $number_roman_numerals_keys_count_max - 1;\n    $number\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpjcowafll.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        $i = $i / 10;\n        $result = $roman_numerals[$n] + $result;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\",\n    \"I\",\n    \"II\",\n    \"III\",\n    \"IV\",\n    \"V\",\n    \"VI\",\n    \"VII\",\n    \"VIII\",\n    \"IX\",\n    \"X\",\n    \"XI\",\n    \"XII\",\n    \"XIII\",\n    \"XIV\",\n    \"XV\",\n    \"XVI\",\n    \"XVII\",\n    \"XVIII\",\n    \"XIX\",\n    \"XX\",\n    \"XXI\",\n    \"XXII\",\n    \"XXIII\",\n    \"XXIV\",\n    \"XXV\",\n    \"XXVI\",\n    \"XXVII\",\n    \"XXVIII\",\n    \"XXIX\",\n    \"XXX\",\n    \"XXXI\",\n    \"XXXII\",\n    \"XXXIII\",\n    \"XXXIV\",\n    \"XXXV\",\n    \"XXXVI\",\n    \"XXXVII\",\n    \"XXXVIII\",\n    \"XXXIX\",\n    \"XL\",\n    \"XLI\",\n    \"XLII\",\n    \"XLIII\",\n    \"XLIV\",\n    \"XLV\",\n    \"XLVI\",\n    \"XLVII\",\n    \"XLVIII\",\n    \"XLIX\",\n    \"L\",\n    \"LI\",\n    \"LII\",\n    \"LIII\",\n    \"LIV\",\n    \"LV\",\n    \"LVI\",\n    \"LVII\",\n    \"LVIII\",\n    \"LIX\",\n    \"LX\",\n    \"LXI\",\n    \"LXII\",\n    \"LXIII\",\n    \"LXIV\",\n    \"LXV\",\n    \"LXVI\",\n    \"LXVII\",\n    \"LXVIII\",\n    \"LXIX\",\n    \"\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xix\", expecting \")\" in /tmp/tmphwhccu1k.php on line 101\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $roman_map[$i];\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpzt83e8b9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpzt83e8b9.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpzt83e8b9.php:18\nStack trace:\n#0 /tmp/tmpzt83e8b9.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpzt83e8b9.php(29): candidate(19)\n#2 /tmp/tmpzt83e8b9.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpzt83e8b9.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 1;\n    while ($number > 0) {\n        if ($number >= $i) {\n            $roman += $i;\n            $number -= $i;\n        }\n        $i += $i;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmp7hr0rm6f.php:17\nStack trace:\n#0 /tmp/tmp7hr0rm6f.php(26): int_to_mini_roman(19)\n#1 /tmp/tmp7hr0rm6f.php(30): candidate(19)\n#2 /tmp/tmp7hr0rm6f.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp7hr0rm6f.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    while ($n > 0) {\n        $n -= 1000;\n        $roman += \"m\";\n    }\n    while ($n > 0) {\n        $n -= 900;\n        $roman += \"cm\";\n    }\n    while ($n > 0) {\n        $n -= 500;\n        $roman += \"d\";\n    }\n    while ($n > 0) {\n        $n -= 400;\n        $roman += \"cd\";\n    }\n    while ($n > 0) {\n        $n -= 100;\n        $roman += \"c\";\n    }\n    while ($n > 0) {\n        $n -= 90;\n        $roman += \"xc\";\n    }\n    while ($n > 0) {\n        $n -= 50;\n        $roman += \"l\";\n    }\n    while ($n > 0) {\n        $n -= 40;\n        $roman += \"xl\";\n    }\n    while ($n > 0) {\n        $n -= 10;\n        $roman += \"x\";\n    }\n    while ($n > 0) {\n        $n -= 9;\n        $roman += \"ix\";\n    }\n    while ($n > 0) {\n        $n -= 5;\n        $roman += \"v\";\n    }\n    while ($n > 0) {\n        $n -= 4;\n        $roman += \"iv\";\n    }\n    while ($n > 0) {\n        $n -= 1;\n        $roman += \"i\";\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp3vctvc3c.php:17\nStack trace:\n#0 /tmp/tmp3vctvc3c.php(71): int_to_mini_roman(19)\n#1 /tmp/tmp3vctvc3c.php(75): candidate(19)\n#2 /tmp/tmp3vctvc3c.php(91): test()\n#3 {main}\n  thrown in /tmp/tmp3vctvc3c.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        switch ($i) {\n            case 1:\n                $result += \"i\";\n                break;\n            case 2:\n                $result += \"ii\";\n                break;\n            case 3:\n                $result += \"iii\";\n                break;\n            case 4:\n                $result += \"iv\";\n                break;\n            case 5:\n                $result += \"v\";\n                break;\n            case 6:\n                $result += \"vi\";\n                break;\n            case 7:\n                $result += \"vii\";\n                break;\n            case 8:\n                $result += \"viii\";\n                break;\n            case 9:\n                $result += \"ix\";\n                break;\n            case 10:\n                $result += \"x\";\n                break;\n            case 11:\n                $result += \"xi\";\n                break;\n            case 12:\n                $result += \"xii\";\n                break;\n            case 13:\n                $result += \"xiii\";\n                break;\n            case 14:\n                $result += \"xiv\";\n                break;\n            case 15:\n                $result += \"xv\";\n                break;\n            case 16:\n                $result += \"xvi\";\n                break;\n            case 17:\n                $result += \"xvii\";\n                break;\n            case 18:\n                $result += \"xviii\";\n                break;\n            case 19:\n                $result += \"xix\";\n                break;\n            case 20:\n                $result += \"xx\";\n                break;\n            case 30:\n                $result += \"xxx\";\n                break;\n            case 40:\n                $result += \"xl\";\n                break;\n            case 50:\n                $result += \"xl\";\n                break;\n            case 60:\n                $result += \"l\";\n                break;\n            case 70:\n                $result += \"l\";\n                break;\n            case 80:\n                $result += \"l\";\n                break;\n            case 90:\n                $result += \"l\";\n                break;\n            case 100:\n                $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmprwvtw2z1.php on line 99\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpqemzl9q4.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpqemzl9q4.php:21\nStack trace:\n#0 /tmp/tmpqemzl9q4.php(47): int_to_mini_roman(19)\n#1 /tmp/tmpqemzl9q4.php(51): candidate(19)\n#2 /tmp/tmpqemzl9q4.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpqemzl9q4.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpxix_37mt.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpxix_37mt.php:21\nStack trace:\n#0 /tmp/tmpxix_37mt.php(44): int_to_mini_roman(19)\n#1 /tmp/tmpxix_37mt.php(48): candidate(19)\n#2 /tmp/tmpxix_37mt.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpxix_37mt.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_array = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $value = $roman_array[$i];\n        if ($i < $number - 1) {\n            $next_value = $roman_array[$i + 1];\n            if ($next_value > $value) {\n                $result += $value + 'x';\n                $i++;\n            } else {\n                $result += $value;\n            }\n        } else {\n            $result += $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpwyvtf0ia.php on line 30\n\nWarning: Undefined array key 1 in /tmp/tmpwyvtf0ia.php on line 32\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpwyvtf0ia.php:37\nStack trace:\n#0 /tmp/tmpwyvtf0ia.php(47): int_to_mini_roman(19)\n#1 /tmp/tmpwyvtf0ia.php(51): candidate(19)\n#2 /tmp/tmpwyvtf0ia.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpwyvtf0ia.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while($number > 0) {\n        $i = $number % 10;\n        $roman = $roman + $roman_map[$i];\n        $number = $number / 10;\n    }\n    return $roman;\n}\n\n$roman_map = array(\n    0, '',\n    1, 'i',\n    2, 'ii',\n    3, 'iii',\n    4, 'iv',\n    5, 'v',\n    6, 'vi',\n    7, 'vii',\n    8, 'viii',\n    9, 'ix'\n);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpj80il5zb.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpj80il5zb.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpj80il5zb.php:17\nStack trace:\n#0 /tmp/tmpj80il5zb.php(37): int_to_mini_roman(19)\n#1 /tmp/tmpj80il5zb.php(41): candidate(19)\n#2 /tmp/tmpj80il5zb.php(57): test()\n#3 {main}\n  thrown in /tmp/tmpj80il5zb.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n != 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n != 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n != 0) {\n        $result = $result + $n;\n    }\n    $n = $number / 10;\n    $n = $n % 10;\n    if ($n != 0) {\n        $result = $result + $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpo9ksndse.php on line 17\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpo9ksndse.php on line 24\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpo9ksndse.php on line 33\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpo9ksndse.php on line 40\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpo9ksndse.php:42\nStack trace:\n#0 /tmp/tmpo9ksndse.php(48): int_to_mini_roman(19)\n#1 /tmp/tmpo9ksndse.php(52): candidate(19)\n#2 /tmp/tmpo9ksndse.php(68): test()\n#3 {main}\n  thrown in /tmp/tmpo9ksndse.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $result = $result . \"c\" . int_to_roman($n);\n    $n = $n % 100;\n    $n = $n / 10;\n    $result = $result . \"x\" . int_to_roman($n);\n    $n = $n % 10;\n    $result = $result . int_to_roman($n);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpvnrs61l8.php:17\nStack trace:\n#0 /tmp/tmpvnrs61l8.php(27): int_to_mini_roman(19)\n#1 /tmp/tmpvnrs61l8.php(31): candidate(19)\n#2 /tmp/tmpvnrs61l8.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpvnrs61l8.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        $i = $i / 10;\n        if ($n == 1) {\n            $result = $result + \"x\";\n        } else if ($n == 2) {\n            $result = $result + \"c\";\n        } else if ($n == 3) {\n            $result = $result + \"m\";\n        } else if ($n == 4) {\n            $result = $result + \"d\";\n        } else if ($n == 5) {\n            $result = $result + \"v\";\n        } else if ($n == 6) {\n            $result = $result + \"l\";\n        } else if ($n == 7) {\n            $result = $result + \"x\";\n        } else if ($n == 8) {\n            $result = $result + \"c\";\n        } else if ($n == 9) {\n            $result = $result + \"x\";\n        }\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpfohk13mc.php:36\nStack trace:\n#0 /tmp/tmpfohk13mc.php(43): int_to_mini_roman(19)\n#1 /tmp/tmpfohk13mc.php(47): candidate(19)\n#2 /tmp/tmpfohk13mc.php(63): test()\n#3 {main}\n  thrown in /tmp/tmpfohk13mc.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $digit = $i % 10;\n        $i = $i / 10;\n        switch ($digit) {\n            case 1:\n                $result = \"x\" + $result;\n                break;\n            case 2:\n                $result = \"c\" + $result;\n                break;\n            case 3:\n                $result = \"cc\" + $result;\n                break;\n            case 4:\n                $result = \"cd\" + $result;\n                break;\n            case 5:\n                $result = \"d\" + $result;\n                break;\n            case 6:\n                $result = \"dc\" + $result;\n                break;\n            case 7:\n                $result = \"dcc\" + $result;\n                break;\n            case 8:\n                $result = \"dcd\" + $result;\n                break;\n            case 9:\n                $result = \"dccd\" + $result;\n                break;\n            case 10:\n                $result = \"m\" + $result;\n                break;\n            case 11:\n                $result = \"mm\" + $result;\n                break;\n            case 12:\n                $result = \"mmc\" + $result;\n                break;\n            case 13:\n                $result = \"mmcd\" + $result;\n                break;\n            case 14:\n                $result = \"mmd\" + $result;\n                break;\n            case 15:\n                $result = \"mmdc\" + $result;\n                break;\n            case 16:\n                $result = \"mmdcc\" + $result;\n                break;\n            case 17:\n                $result = \"mmdcd\" + $result;\n                break;\n            case 18:\n                $result = \"mmdccd\" + $result;\n                break;\n            case 19:\n                $result = \"mmdcccd\" + $result;\n                break;\n            case 20:\n                $result = \"mmdccccd\" + $result;\n                break;\n            case 21:\n                $result = \"mmdcccccd\" + $result\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpxjunpx_a.php on line 81\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $i = $number % 10;\n        if($i == 1 || $i == 5) {\n            $result = $result + \"x\";\n        } else if($i == 2 || $i == 3) {\n            $result = $result + \"c\";\n        } else if($i == 4 || $i == 9) {\n            $result = $result + \"d\";\n        } else if($i == 6 || $i == 7) {\n            $result = $result + \"m\";\n        } else if($i == 8) {\n            $result = $result + \"v\";\n        } else if($i == 10) {\n            $result = $result + \"x\";\n        }\n        $number = floor($number / 10);\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmplaj1q9oh.php:22\nStack trace:\n#0 /tmp/tmplaj1q9oh.php(36): int_to_mini_roman(19)\n#1 /tmp/tmplaj1q9oh.php(40): candidate(19)\n#2 /tmp/tmplaj1q9oh.php(56): test()\n#3 {main}\n  thrown in /tmp/tmplaj1q9oh.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        switch ($i) {\n            case 1:\n            case 5:\n            case 9:\n                $roman_numeral += \"x\";\n                break;\n            case 2:\n            case 4:\n            case 8:\n                $roman_numeral += \"c\";\n                break;\n            case 3:\n            case 7:\n                $roman_numeral += \"m\";\n                break;\n            case 6:\n                $roman_numeral += \"d\";\n                break;\n            case 10:\n                $roman_numeral += \"x\";\n                break;\n            case 11:\n                $roman_numeral += \"l\";\n                break;\n            case 12:\n                $roman_numeral += \"x\";\n                break;\n            case 13:\n                $roman_numeral += \"x\";\n                break;\n            case 14:\n                $roman_numeral += \"x\";\n                break;\n            case 15:\n                $roman_numeral += \"x\";\n                break;\n            case 16:\n                $roman_numeral += \"x\";\n                break;\n            case 17:\n                $roman_numeral += \"x\";\n                break;\n            case 18:\n                $roman_numeral += \"x\";\n                break;\n            case 19:\n                $roman_numeral += \"xix\";\n                break;\n            case 20:\n                $roman_numeral += \"x\";\n                break;\n            case 21:\n                $roman_numeral += \"x\";\n                break;\n            case 22:\n                $roman_numeral += \"x\";\n                break;\n            case 23:\n                $roman_numeral += \"x\";\n                break;\n            case 24:\n                $roman_numeral += \"x\";\n                break;\n            case 25:\n                $roman_numeral += \"x\";\n                break;\n            case 26:\n                $roman_numeral += \"x\";\n                break;\n            case 27:\n                $roman_numeral += \"x\";\n                break;\n            case 28:\n                $roman_numeral\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpzt6vgwic.php on line 89\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $n_array = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    $n_array_length = sizeof($n_array);\n    for ($i = 0; $i < $n_array_length; $i++) {\n        while ($n >= $n_array[$i]) {\n            $roman_numeral += $n_array[$i];\n            $n -= $n_array[$i];\n        }\n    }\n    return $roman_numeral;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpfsf227zc.php:19\nStack trace:\n#0 /tmp/tmpfsf227zc.php(26): int_to_mini_roman(19)\n#1 /tmp/tmpfsf227zc.php(30): candidate(19)\n#2 /tmp/tmpfsf227zc.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpfsf227zc.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n +\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpnxrvkpqj.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i >= 1000) {\n        $result = $result + \"m\" + int_to_roman($i % 1000);\n        $i = $i / 1000;\n    }\n    $result = $result + int_to_roman($i);\n    return $result.toLowerCase();\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpkx_9rdxd.php:19\nStack trace:\n#0 /tmp/tmpkx_9rdxd.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpkx_9rdxd.php(27): candidate(19)\n#2 /tmp/tmpkx_9rdxd.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpkx_9rdxd.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = $result.replace(/i/g, \"v\");\n    $result = $result.replace(/x/g, \"v\");\n    $result = $result.replace(/c/g, \"x\");\n    $result = $result.replace(/l/g, \"c\");\n    $result = $result.replace(/d/g, \"c\");\n    $result = $result.replace(/m/g, \"x\");\n    $result = $result.replace(/v/g, \"i\");\n    $result = $result.replace(/x/g, \"x\");\n    $result = $result.replace(/c/g, \"c\");\n    $result = $result.replace(/l/g, \"c\");\n    $result = $result.replace(/d/g, \"c\");\n    $result = $result.replace(/m/g, \"x\");\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpooaid68n.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $roman = $roman + int_to_roman($number % 10);\n        $number = $number / 10;\n        $i++;\n    }\n    return $roman.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpyh37wi2p.php:16\nStack trace:\n#0 /tmp/tmpyh37wi2p.php(24): int_to_mini_roman(19)\n#1 /tmp/tmpyh37wi2p.php(28): candidate(19)\n#2 /tmp/tmpyh37wi2p.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpyh37wi2p.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = $result + \"c\";\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = $result + \"x\";\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = $result + \"v\";\n    $n = $number / 5;\n    $n = $n % 5;\n    $n = $n / 1;\n    $n = $n % 1;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp_fae9jyz.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp_fae9jyz.php:21\nStack trace:\n#0 /tmp/tmp_fae9jyz.php(47): int_to_mini_roman(19)\n#1 /tmp/tmp_fae9jyz.php(51): candidate(19)\n#2 /tmp/tmp_fae9jyz.php(67): test()\n#3 {main}\n  thrown in /tmp/tmp_fae9jyz.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpcfei013a.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpcfei013a.php:21\nStack trace:\n#0 /tmp/tmpcfei013a.php(50): int_to_mini_roman(19)\n#1 /tmp/tmpcfei013a.php(54): candidate(19)\n#2 /tmp/tmpcfei013a.php(70): test()\n#3 {main}\n  thrown in /tmp/tmpcfei013a.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_array = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $value = $roman_array[str_pad($i, 1, 0)];\n        if ($value > $i) {\n            $result += $roman_array[str_pad($i, 1, 0)];\n        } else {\n            $result += $roman_array[str_pad($value - $i, 1, 0)];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmplpk3sy1h.php on line 30\n\nWarning: Undefined array key 0 in /tmp/tmplpk3sy1h.php on line 34\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmplpk3sy1h.php:34\nStack trace:\n#0 /tmp/tmplpk3sy1h.php(41): int_to_mini_roman(19)\n#1 /tmp/tmplpk3sy1h.php(45): candidate(19)\n#2 /tmp/tmplpk3sy1h.php(61): test()\n#3 {main}\n  thrown in /tmp/tmplpk3sy1h.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        if ($i == 1) {\n            $result = $result + \"i\";\n        } else if ($i == 2) {\n            $result = $result + \"ii\";\n        } else if ($i == 3) {\n            $result = $result + \"iii\";\n        } else if ($i == 4) {\n            $result = $result + \"iv\";\n        } else if ($i == 5) {\n            $result = $result + \"v\";\n        } else if ($i == 6) {\n            $result = $result + \"vi\";\n        } else if ($i == 7) {\n            $result = $result + \"vii\";\n        } else if ($i == 8) {\n            $result = $result + \"viii\";\n        } else if ($i == 9) {\n            $result = $result + \"ix\";\n        } else if ($i == 10) {\n            $result = $result + \"x\";\n        } else if ($i == 11) {\n            $result = $result + \"xi\";\n        } else if ($i == 12) {\n            $result = $result + \"xii\";\n        } else if ($i == 13) {\n            $result = $result + \"xiii\";\n        } else if ($i == 14) {\n            $result = $result + \"xiv\";\n        } else if ($i == 15) {\n            $result = $result + \"xv\";\n        } else if ($i == 16) {\n            $result = $result + \"xvi\";\n        } else if ($i == 17) {\n            $result = $result + \"xvii\";\n        } else if ($i == 18) {\n            $result = $result + \"xviii\";\n        } else if ($i == 19) {\n            $result = $result + \"xix\";\n        } else if ($i == 20) {\n            $result = $result + \"xx\";\n        } else if ($i == 21) {\n            $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpb4v83agc.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $i = $number % 10;\n        if ($i == 1) {\n            $roman += \"x\";\n        } else if ($i == 2) {\n            $roman += \"x\";\n        } else if ($i == 3) {\n            $roman += \"c\";\n        } else if ($i == 4) {\n            $roman += \"c\";\n        } else if ($i == 5) {\n            $roman += \"d\";\n        } else if ($i == 6) {\n            $roman += \"d\";\n        } else if ($i == 7) {\n            $roman += \"m\";\n        } else if ($i == 8) {\n            $roman += \"m\";\n        } else if ($i == 9) {\n            $roman += \"i\";\n        } else if ($i == 0) {\n            $roman += \"i\";\n        }\n        $number = floor($number / 10);\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp8xsj852k.php:34\nStack trace:\n#0 /tmp/tmp8xsj852k.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp8xsj852k.php(48): candidate(19)\n#2 /tmp/tmp8xsj852k.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp8xsj852k.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    return $roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp9nvb5ypf.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmp9nvb5ypf.php:21\nStack trace:\n#0 /tmp/tmp9nvb5ypf.php(43): int_to_mini_roman(19)\n#1 /tmp/tmp9nvb5ypf.php(47): candidate(19)\n#2 /tmp/tmp9nvb5ypf.php(63): test()\n#3 {main}\n  thrown in /tmp/tmp9nvb5ypf.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    'I' => 'I',\n    'V' => 'V',\n    'X' => 'X',\n    'L' => 'L',\n    'C' => 'C',\n    'D' => 'D',\n    'M' => 'M',\n);\n\n$number = 100;\n$result = int_to_mini_roman($number);\necho $result;\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmp_6tahq3f.php on line 19\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp_6tahq3f.php on line 19\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmp_6tahq3f.php:19\nStack trace:\n#0 /tmp/tmp_6tahq3f.php(35): int_to_mini_roman(100)\n#1 {main}\n  thrown in /tmp/tmp_6tahq3f.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix',\n    'l', 'lii', 'liii', 'liv', 'lv', 'lvi', 'lvii', 'lviii', 'lix', 'lx', 'lxi', 'lxii', 'lxiii', 'lxiv', 'lxv', 'lxvi', 'lxvii', 'lxviii', 'lxix',\n    'm', 'mii', 'miii', 'miv', 'mv', 'mvi', 'mvii', 'mviii', 'mix', 'mx', 'mxi', 'mxii', 'mxiii', 'mxiv', 'mxv', 'mxvi', 'mxvii', 'mxviii', 'mxix',\n    'n', 'nii', 'niii', 'niv', 'nv', 'nvi', 'nvii', 'nviii', 'nix', 'nx', 'nxi', 'nxii', 'nxiii', 'nxiv', 'nxv', 'nxvi', 'nxvii', 'nxviii', 'nxix',\n    'o', 'oii', 'oiii', 'oiv', 'ov', 'ovi', 'ovii', 'oviii', 'ox', 'oxi', 'oxii', 'oxiii', 'oxiv', 'oxv', 'oxvi', 'oxvii', 'oxviii', 'oxix',\n    'p', 'pii', 'piii', 'piv', 'p\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected string content \"p\", expecting \")\" in /tmp/tmpatxjl9rs.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n == 9) {\n        $result = \"ix\";\n    } else if ($n == 4) {\n        $result = \"iv\";\n    } else if ($n == 5) {\n        $result = \"v\";\n    } else if ($n == 1) {\n        $result = \"i\";\n    } else if ($n == 2) {\n        $result = \"ii\";\n    } else if ($n == 3) {\n        $result = \"iii\";\n    } else if ($n == 6) {\n        $result = \"vi\";\n    } else if ($n == 7) {\n        $result = \"vii\";\n    } else if ($n == 8) {\n        $result = \"viii\";\n    } else if ($n == 9) {\n        $result = \"ix\";\n    } else if ($n == 10) {\n        $result = \"x\";\n    } else if ($n == 11) {\n        $result = \"xi\";\n    } else if ($n == 12) {\n        $result = \"xii\";\n    } else if ($n == 13) {\n        $result = \"xiii\";\n    } else if ($n == 14) {\n        $result = \"xiv\";\n    } else if ($n == 15) {\n        $result = \"xv\";\n    } else if ($n == 16) {\n        $result = \"xvi\";\n    } else if ($n == 17) {\n        $result = \"xvii\";\n    } else if ($n == 18) {\n        $result = \"xviii\";\n    } else if ($n == 19) {\n        $result = \"xix\";\n    } else if ($n == 20) {\n        $result = \"xx\";\n    } else if ($n == 21) {\n        $result = \"xxi\";\n    } else if ($n == 22) {\n        $result = \"xxii\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xix\" in /tmp/tmp340jjrla.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    $n_array = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    while ($n > 0) {\n        $i = $n % 10;\n        $n = $n / 10;\n        $result = $result . $n_array[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmpe2r1ktha.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $result + $n;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmps8b9wdq1.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmps8b9wdq1.php:21\nStack trace:\n#0 /tmp/tmps8b9wdq1.php(44): int_to_mini_roman(19)\n#1 /tmp/tmps8b9wdq1.php(48): candidate(19)\n#2 /tmp/tmps8b9wdq1.php(64): test()\n#3 {main}\n  thrown in /tmp/tmps8b9wdq1.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while ($number > 0) {\n        if ($number >= 1000) {\n            $roman += \"m\";\n            $number -= 1000;\n        } else if ($number >= 900) {\n            $roman += \"cm\";\n            $number -= 900;\n        } else if ($number >= 500) {\n            $roman += \"d\";\n            $number -= 500;\n        } else if ($number >= 400) {\n            $roman += \"cd\";\n            $number -= 400;\n        } else if ($number >= 100) {\n            $roman += \"c\";\n            $number -= 100;\n        } else if ($number >= 90) {\n            $roman += \"xc\";\n            $number -= 90;\n        } else if ($number >= 50) {\n            $roman += \"l\";\n            $number -= 50;\n        } else if ($number >= 40) {\n            $roman += \"xl\";\n            $number -= 40;\n        } else if ($number >= 10) {\n            $roman += \"x\";\n            $number -= 10;\n        } else if ($number >= 9) {\n            $roman += \"ix\";\n            $number -= 9;\n        } else if ($number >= 5) {\n            $roman += \"v\";\n            $number -= 5;\n        } else if ($number >= 4) {\n            $roman += \"iv\";\n            $number -= 4;\n        } else if ($number >= 1) {\n            $roman += \"i\";\n            $number -= 1;\n        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpitgldabw.php:41\nStack trace:\n#0 /tmp/tmpitgldabw.php(61): int_to_mini_roman(19)\n#1 /tmp/tmpitgldabw.php(65): candidate(19)\n#2 /tmp/tmpitgldabw.php(81): test()\n#3 {main}\n  thrown in /tmp/tmpitgldabw.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i * 10;\n        $result = $result + $roman_numerals[$n] + $i;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\",\n    \"I\",\n    \"II\",\n    \"III\",\n    \"IV\",\n    \"V\",\n    \"VI\",\n    \"VII\",\n    \"VIII\",\n    \"IX\",\n    \"X\",\n    \"XI\",\n    \"XII\",\n    \"XIII\",\n    \"XIV\",\n    \"XV\",\n    \"XVI\",\n    \"XVII\",\n    \"XVIII\",\n    \"XIX\",\n    \"XX\",\n    \"XXI\",\n    \"XXII\",\n    \"XXIII\",\n    \"XXIV\",\n    \"XXV\",\n    \"XXVI\",\n    \"XXVII\",\n    \"XXVIII\",\n    \"XXIX\",\n    \"XXX\",\n    \"XXXI\",\n    \"XXXII\",\n    \"XXXIII\",\n    \"XXXIV\",\n    \"XXXV\",\n    \"XXXVI\",\n    \"XXXVII\",\n    \"XXXVIII\",\n    \"XXXIX\",\n    \"XL\",\n    \"XLI\",\n    \"XLII\",\n    \"XLIII\",\n    \"XLIV\",\n    \"XLV\",\n    \"XLVI\",\n    \"XLVII\",\n    \"XLVIII\",\n    \"XLIX\",\n    \"L\",\n    \"LI\",\n    \"LII\",\n    \"LIII\",\n    \"LIV\",\n    \"LV\",\n    \"LVI\",\n    \"LVII\",\n    \"LVIII\",\n    \"LIX\",\n    \"LX\",\n    \"LXI\",\n    \"LXII\",\n    \"LXIII\",\n    \"LXIV\",\n    \"LXV\",\n    \"LXVI\",\n    \"LXVII\",\n    \"LXVIII\",\n    \"LXIX\",\n    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpa67_e6ys.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix'\n    );\n\n    $roman_numerals_reversed = array(\n        '',\n        'x',\n        'xx',\n        'xxx',\n        'xl',\n        'l',\n        'lx',\n        'lxx',\n        'lxxx',\n        'xc',\n        'c',\n        'xci',\n        'cix',\n        'cxxx',\n        'cl',\n        'clx',\n        'clxx',\n        'clxxx',\n        'xcc',\n        'cc',\n        'cci',\n        'ccix',\n        'ccxxx',\n        'ccl',\n        'cclx',\n        'cclxx',\n        'cclxxx',\n        'ccxc',\n        'ccc',\n        'ccci',\n        'cccix',\n        'cccxxx',\n        'cccl',\n        'ccclx',\n        'ccclxx',\n        'ccclxxx',\n        'cccc',\n        'ccccx',\n        'ccccxx',\n        'ccccl',\n        'cccclx',\n        'cccclxx',\n        'cccclxxx',\n        'ccccxc',\n        'ccccc',\n        'ccccci',\n        'cccccix',\n        'cccccxxx',\n        'cccccl',\n        'ccccclx',\n        'ccccclxx',\n        'ccccclxxx',\n        'cccccc',\n        'ccccccx',\n        'ccccccxx',\n        'ccccccl',\n        'cccccclx',\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg4wbojeg.php on line 95\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i += 2;\n        if ($n >= $i) {\n            $result = $result + \"x\";\n            $n -= $i;\n        } else {\n            $result = $result + \"c\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpzybi_f21.php:20\nStack trace:\n#0 /tmp/tmpzybi_f21.php(30): int_to_mini_roman(19)\n#1 /tmp/tmpzybi_f21.php(34): candidate(19)\n#2 /tmp/tmpzybi_f21.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpzybi_f21.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpd42myajm.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        if ($digit == 9) {\n            $result = $result + \"ix\";\n        } else if ($digit == 4) {\n            $result = $result + \"iv\";\n        } else if ($digit == 5) {\n            $result = $result + \"v\";\n        } else if ($digit == 6) {\n            $result = $result + \"vi\";\n        } else if ($digit == 7) {\n            $result = $result + \"vii\";\n        } else if ($digit == 8) {\n            $result = $result + \"viii\";\n        } else if ($digit == 1) {\n            $result = $result + \"i\";\n        } else if ($digit == 2) {\n            $result = $result + \"ii\";\n        } else if ($digit == 3) {\n            $result = $result + \"iii\";\n        } else if ($digit == 0) {\n            $result = $result + \"\";\n        } else {\n            $result = $result + $digit;\n        }\n        $number = $number / 10;\n        $i++;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpi3yl55fu.php:18\nStack trace:\n#0 /tmp/tmpi3yl55fu.php(47): int_to_mini_roman(19)\n#1 /tmp/tmpi3yl55fu.php(51): candidate(19)\n#2 /tmp/tmpi3yl55fu.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpi3yl55fu.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $digit = $number % 10;\n        if($digit == 4 || $digit == 9) {\n            $result = \"{\" . $result . \"}\";\n        }\n        $result = $digit + $result;\n        $number = $number / 10;\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp0s7qw7cu.php:20\nStack trace:\n#0 /tmp/tmp0s7qw7cu.php(28): int_to_mini_roman(19)\n#1 /tmp/tmp0s7qw7cu.php(32): candidate(19)\n#2 /tmp/tmp0s7qw7cu.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp0s7qw7cu.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_array = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $value = $roman_array[str_pad($i, 1, '0', STR_PAD_LEFT)];\n        $result = $result . $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 1 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 2 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 3 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 4 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 5 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 6 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 7 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 8 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 9 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 10 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 11 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 12 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 13 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Undefined array key 14 in /tmp/tmp7k_c5yhf.php on line 30\n\nWarning: Unde",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while($i <= $number) {\n        $value = intval($i);\n        if($value >= 1000) {\n            $result = $result + \"m\" + int_to_roman($value / 1000);\n            $i = $value % 1000;\n        } else if($value >= 900) {\n            $result = $result + \"cm\" + int_to_roman($value / 900);\n            $i = $value % 900;\n        } else if($value >= 500) {\n            $result = $result + \"d\" + int_to_roman($value / 500);\n            $i = $value % 500;\n        } else if($value >= 400) {\n            $result = $result + \"cd\" + int_to_roman($value / 400);\n            $i = $value % 400;\n        } else if($value >= 100) {\n            $result = $result + \"c\" + int_to_roman($value / 100);\n            $i = $value % 100;\n        } else if($value >= 90) {\n            $result = $result + \"x\" + int_to_roman($value / 90);\n            $i = $value % 90;\n        } else if($value >= 50) {\n            $result = $result + \"l\" + int_to_roman($value / 50);\n            $i = $value % 50;\n        } else if($value >= 40) {\n            $result = $result + \"xl\" + int_to_roman($value / 40);\n            $i = $value % 40;\n        } else if($value >= 10) {\n            $result = $result + \"x\" + int_to_roman($value / 10);\n            $i = $value % 10;\n        } else if($value >= 9) {\n            $result = $result + \"ix\" + int_to_roman($value / 9);\n            $i = $value % 9;\n        } else if($value >= 5) {\n            $result = $result + \"v\" + int_to_roman($value / 5);\n            $i = $value % 5;\n        } else if($value\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmps7brcxnn.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $number % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $number % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpwvabbw4v.php on line 16\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpwvabbw4v.php:22\nStack trace:\n#0 /tmp/tmpwvabbw4v.php(37): int_to_mini_roman(19)\n#1 /tmp/tmpwvabbw4v.php(41): candidate(19)\n#2 /tmp/tmpwvabbw4v.php(57): test()\n#3 {main}\n  thrown in /tmp/tmpwvabbw4v.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        if ($i % 5 == 0) {\n            $roman += \"v\";\n        } else if ($i % 5 == 1) {\n            $roman += \"x\";\n        } else if ($i % 5 == 2) {\n            $roman += \"l\";\n        } else if ($i % 5 == 3) {\n            $roman += \"c\";\n        } else if ($i % 5 == 4) {\n            $roman += \"d\";\n        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpuubakmb3.php:18\nStack trace:\n#0 /tmp/tmpuubakmb3.php(31): int_to_mini_roman(19)\n#1 /tmp/tmpuubakmb3.php(35): candidate(19)\n#2 /tmp/tmpuubakmb3.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpuubakmb3.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $result = $result . \"c\" . int_to_roman($n);\n    $n = $n % 100;\n    $n = $n / 10;\n    $result = $result . \"x\" . int_to_roman($n);\n    $n = $n % 10;\n    $result = $result . int_to_roman($n);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpvnrs61l8.php:17\nStack trace:\n#0 /tmp/tmpvnrs61l8.php(27): int_to_mini_roman(19)\n#1 /tmp/tmpvnrs61l8.php(31): candidate(19)\n#2 /tmp/tmpvnrs61l8.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpvnrs61l8.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $i = $n % 10;\n        $n = $n / 10;\n        if($i == 1) {\n            $result = $result + \"x\";\n        } else if($i == 2) {\n            $result = $result + \"x\";\n        } else if($i == 3) {\n            $result = $result + \"c\";\n        } else if($i == 4) {\n            $result = $result + \"c\";\n        } else if($i == 5) {\n            $result = $result + \"d\";\n        } else if($i == 6) {\n            $result = $result + \"d\";\n        } else if($i == 7) {\n            $result = $result + \"m\";\n        } else if($i == 8) {\n            $result = $result + \"m\";\n        } else if($i == 9) {\n            $result = $result + \"x\";\n        } else if($i == 0) {\n            $result = $result + \"c\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7ed5aff9.php:36\nStack trace:\n#0 /tmp/tmp7ed5aff9.php(45): int_to_mini_roman(19)\n#1 /tmp/tmp7ed5aff9.php(49): candidate(19)\n#2 /tmp/tmp7ed5aff9.php(65): test()\n#3 {main}\n  thrown in /tmp/tmp7ed5aff9.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpqemzl9q4.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpqemzl9q4.php:21\nStack trace:\n#0 /tmp/tmpqemzl9q4.php(47): int_to_mini_roman(19)\n#1 /tmp/tmpqemzl9q4.php(51): candidate(19)\n#2 /tmp/tmpqemzl9q4.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpqemzl9q4.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $i = $n % 10;\n        $roman = $roman . $roman_map[$i];\n        $n = $n / 10;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp1tygx3m9.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmp1tygx3m9.php on line 17\n\nWarning: Undefined variable $roman_map in /tmp/tmp1tygx3m9.php on line 18\n\nWarning: T",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $result = $result . \"c\" . int_to_roman($n);\n    $n = $n % 100;\n    $n = $n / 10;\n    $result = $result . \"x\" . int_to_roman($n);\n    $n = $n % 10;\n    $result = $result . int_to_roman($n);\n    return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmp63xopr5i.php:17\nStack trace:\n#0 /tmp/tmp63xopr5i.php(26): int_to_mini_roman(19)\n#1 /tmp/tmp63xopr5i.php(30): candidate(19)\n#2 /tmp/tmp63xopr5i.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp63xopr5i.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    $n = $number;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result.toLowerCase();\n}\n\n$roman_numerals = array(\n    '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'\n);\n\n$int_to_roman = function($number) {\n    $result = \"\";\n    $i = 0;\n    $n = $number;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n};\n\n$int_to_roman(19);\n$int_to_roman(152);\n$int_to_roman(426);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmp9obyvx04.php on line 35\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp9obyvx04.php on line 35\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmp9obyvx04.php:35\nStack trace:\n#0 /tmp/tmp9obyvx04.php(40): {closure}(19)\n#1 {main}\n  thrown in /tmp/tmp9obyvx04.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    $j = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i * 10;\n        $j++;\n        if ($j == 4) {\n            $result = $result + \"cd\";\n            $j = 0;\n        } else if ($j == 9) {\n            $result = $result + \"cm\";\n            $j = 0;\n        } else {\n            $result = $result + \"xc\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpcxkzy0j5.php:28\nStack trace:\n#0 /tmp/tmpcxkzy0j5.php(35): int_to_mini_roman(19)\n#1 /tmp/tmpcxkzy0j5.php(39): candidate(19)\n#2 /tmp/tmpcxkzy0j5.php(55): test()\n#3 {main}\n  thrown in /tmp/tmpcxkzy0j5.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $result = $roman_numerals[$i % 1000] + $result;\n        $i = $i / 1000;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmptj8qt_b9.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmptj8qt_b9.php on line 16\n\nFatal error: Uncaught TypeError: Unsupported operand types: null + string in /tmp/tmptj8qt_b9.php:16\nStack trace:\n#0 /tmp/tmptj8qt_b9.php(23): int_to_mini_roman(19)\n#1 /tmp/tmptj8qt_b9.php(27): candidate(19)\n#2 /tmp/tmptj8qt_b9.php(43): test()\n#3 {main}\n  thrown in /tmp/tmptj8qt_b9.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $digit = $number % 10;\n        if($i == 0) {\n            $result = $digit + $result;\n        } else if($i == 1 || $i == 2) {\n            $result = $digit + $result;\n        } else if($i == 3) {\n            $result = \"c\" + $result;\n        } else if($i == 4) {\n            $result = \"cd\" + $result;\n        } else if($i == 5) {\n            $result = \"d\" + $result;\n        } else if($i == 6) {\n            $result = \"dc\" + $result;\n        } else if($i == 7) {\n            $result = \"d\" + $result;\n        } else if($i == 8) {\n            $result = \"d\" + $result;\n        } else if($i == 9) {\n            $result = \"x\" + $result;\n        } else if($i == 10) {\n            $result = \"xx\" + $result;\n        } else if($i == 11) {\n            $result = \"xx\" + $result;\n        } else if($i == 12) {\n            $result = \"xx\" + $result;\n        } else if($i == 13) {\n            $result = \"xx\" + $result;\n        } else if($i == 14) {\n            $result = \"xx\" + $result;\n        } else if($i == 15) {\n            $result = \"xx\" + $result;\n        } else if($i == 16) {\n            $result = \"xx\" + $result;\n        } else if($i == 17) {\n            $result = \"xx\" + $result;\n        } else if($i == 18) {\n            $result = \"xx\" + $result;\n        } else if($i == 19) {\n            $result = \"xx\" + $result;\n        } else if($i == 20) {\n            $result = \"xx\" + $result;\n        } else if($i == 21) {\n            $result = \"xx\"\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwz0asv6z.php on line 59\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        if ($n == 9) {\n            $result = \"ix\" + $result;\n        } else if ($n == 4) {\n            $result = \"iv\" + $result;\n        } else if ($n == 5) {\n            $result = \"v\" + $result;\n        } else if ($n == 6) {\n            $result = \"vi\" + $result;\n        } else if ($n == 7) {\n            $result = \"vii\" + $result;\n        } else if ($n == 8) {\n            $result = \"viii\" + $result;\n        } else if ($n == 3) {\n            $result = \"ii\" + $result;\n        } else if ($n == 2) {\n            $result = \"i\" + $result;\n        } else if ($n == 1) {\n            $result = \"i\" + $result;\n        }\n        $i = $i / 10;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpw8ebhj4e.php:19\nStack trace:\n#0 /tmp/tmpw8ebhj4e.php(43): int_to_mini_roman(19)\n#1 /tmp/tmpw8ebhj4e.php(47): candidate(19)\n#2 /tmp/tmpw8ebhj4e.php(63): test()\n#3 {main}\n  thrown in /tmp/tmpw8ebhj4e.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_array = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $value = $roman_array[str_pad($i, 1, '0')];\n        if ($i < $value) {\n            $result += 'M';\n        } else if ($i < $value * 2) {\n            $result += 'D';\n        } else if ($i < $value * 3) {\n            $result += 'C';\n        } else if ($i < $value * 4) {\n            $result += 'L';\n        } else if ($i < $value * 5) {\n            $result += 'X';\n        } else if ($i < $value * 6) {\n            $result += 'V';\n        } else if ($i < $value * 7) {\n            $result += 'I';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 1 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 2 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 3 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 4 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 5 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 6 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 7 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 8 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 9 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 10 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 11 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 12 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 13 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Undefined array key 14 in /tmp/tmpo80o0pnq.php on line 30\n\nWarning: Unde",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        $i++;\n        if ($digit == 4 || $digit == 9) {\n            $result = $result + \"v\" + $i;\n        } else if ($digit == 5) {\n            $result = $result + \"l\" + $i;\n        } else if ($digit == 6) {\n            $result = $result + \"x\" + $i;\n        } else if ($digit == 7) {\n            $result = $result + \"c\" + $i;\n        } else if ($digit == 8) {\n            $result = $result + \"l\" + $i;\n        } else if ($digit == 0) {\n            $result = $result + \"x\" + $i;\n        } else {\n            $result = $result + $digit + $i;\n        }\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpaag0vm6h.php:20\nStack trace:\n#0 /tmp/tmpaag0vm6h.php(39): int_to_mini_roman(1.9)\n#1 /tmp/tmpaag0vm6h.php(43): candidate(19)\n#2 /tmp/tmpaag0vm6h.php(59): test()\n#3 {main}\n  thrown in /tmp/tmpaag0vm6h.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $i = $n % 10;\n        $n = $n / 10;\n        if ($i == 1) {\n            $result = $result + \"x\";\n        } else if ($i == 2) {\n            $result = $result + \"x\";\n        } else if ($i == 3) {\n            $result = $result + \"c\";\n        } else if ($i == 4) {\n            $result = $result + \"c\";\n        } else if ($i == 5) {\n            $result = $result + \"d\";\n        } else if ($i == 6) {\n            $result = $result + \"d\";\n        } else if ($i == 7) {\n            $result = $result + \"m\";\n        } else if ($i == 8) {\n            $result = $result + \"m\";\n        } else if ($i == 9) {\n            $result = $result + \"x\";\n        } else if ($i == 0) {\n            $result = $result + \"c\";\n        }\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps1mmc8o1.php:36\nStack trace:\n#0 /tmp/tmps1mmc8o1.php(45): int_to_mini_roman(19)\n#1 /tmp/tmps1mmc8o1.php(49): candidate(19)\n#2 /tmp/tmps1mmc8o1.php(65): test()\n#3 {main}\n  thrown in /tmp/tmps1mmc8o1.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $i;\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpz7dei6og.php:18\nStack trace:\n#0 /tmp/tmpz7dei6og.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpz7dei6og.php(29): candidate(19)\n#2 /tmp/tmpz7dei6og.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpz7dei6og.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"m\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"c\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"d\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"c\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"x\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"v\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"i\" . $n;\n    $n = $n / 5;\n    $n = $n % 5;\n    $n = $n + 1;\n    $roman_numeral = $roman_numeral . \"x\" . $n;\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmphuy792fc.php on line 17\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 23\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 27\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 31\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 35\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 39\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 43\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphuy792fc.php on line 47\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuy792fc.php:58\nStack trace:\n#0 /tmp/tmphuy792fc.php(74): test()\n#1 {main}\n  thrown in /tmp/tmphuy792fc.php on line 5",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        if ($n == 1) {\n            $result = $result + \"i\";\n        } else if ($n == 2) {\n            $result = $result + \"ii\";\n        } else if ($n == 3) {\n            $result = $result + \"iii\";\n        } else if ($n == 4) {\n            $result = $result + \"iv\";\n        } else if ($n == 5) {\n            $result = $result + \"v\";\n        } else if ($n == 6) {\n            $result = $result + \"vi\";\n        } else if ($n == 7) {\n            $result = $result + \"vii\";\n        } else if ($n == 8) {\n            $result = $result + \"viii\";\n        } else if ($n == 9) {\n            $result = $result + \"ix\";\n        } else if ($n == 10) {\n            $result = $result + \"x\";\n        }\n        $i = $i - $n;\n        $i = $i / 10;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp6lgivnge.php:35\nStack trace:\n#0 /tmp/tmp6lgivnge.php(46): int_to_mini_roman(19)\n#1 /tmp/tmp6lgivnge.php(50): candidate(19)\n#2 /tmp/tmp6lgivnge.php(66): test()\n#3 {main}\n  thrown in /tmp/tmp6lgivnge.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while($i > 0) {\n        $n = $i % 10;\n        $i = $i / 10;\n        if($n == 1) {\n            $result = $result + \"x\";\n        } else if($n == 2) {\n            $result = $result + \"c\";\n        } else if($n == 3) {\n            $result = $result + \"m\";\n        } else if($n == 4) {\n            $result = $result + \"d\";\n        } else if($n == 5) {\n            $result = $result + \"v\";\n        } else if($n == 6) {\n            $result = $result + \"l\";\n        } else if($n == 7) {\n            $result = $result + \"x\";\n        } else if($n == 8) {\n            $result = $result + \"l\";\n        } else if($n == 9) {\n            $result = $result + \"x\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp2y73tk9a.php:36\nStack trace:\n#0 /tmp/tmp2y73tk9a.php(43): int_to_mini_roman(19)\n#1 /tmp/tmp2y73tk9a.php(47): candidate(19)\n#2 /tmp/tmp2y73tk9a.php(63): test()\n#3 {main}\n  thrown in /tmp/tmp2y73tk9a.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    for ($i = 1; $i <= $number; $i++) {\n        if ($i % 5 == 0) {\n            $result += \"v\";\n        } else if ($i % 5 == 1) {\n            $result += \"x\";\n        } else if ($i % 5 == 2) {\n            $result += \"l\";\n        } else if ($i % 5 == 3) {\n            $result += \"c\";\n        } else if ($i % 5 == 4) {\n            $result += \"d\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmproyysujm.php:18\nStack trace:\n#0 /tmp/tmproyysujm.php(31): int_to_mini_roman(19)\n#1 /tmp/tmproyysujm.php(35): candidate(19)\n#2 /tmp/tmproyysujm.php(51): test()\n#3 {main}\n  thrown in /tmp/tmproyysujm.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $result = $roman_numerals[$i % 1000] + $result;\n        $i = floor($i / 1000);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmpedtv8ik2.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpedtv8ik2.php on line 16\n\nFatal error: Uncaught TypeError: Unsupported operand types: null + string in /tmp/tmpedtv8ik2.php:16\nStack trace:\n#0 /tmp/tmpedtv8ik2.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpedtv8ik2.php(27): candidate(19)\n#2 /tmp/tmpedtv8ik2.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpedtv8ik2.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $value = $number % 10;\n        $number = $number / 10;\n        if ($value == 4 || $value == 9) {\n            $result = $result + \"cd\";\n        } else if ($value == 5) {\n            $result = $result + \"xc\";\n        } else if ($value == 6) {\n            $result = $result + \"xd\";\n        } else if ($value == 7) {\n            $result = $result + \"xl\";\n        } else if ($value == 8) {\n            $result = $result + \"x\";\n        } else if ($value == 1) {\n            $result = $result + \"x\";\n        } else {\n            $result = $result + $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps5ebmryz.php:19\nStack trace:\n#0 /tmp/tmps5ebmryz.php(38): int_to_mini_roman(1.9)\n#1 /tmp/tmps5ebmryz.php(42): candidate(19)\n#2 /tmp/tmps5ebmryz.php(58): test()\n#3 {main}\n  thrown in /tmp/tmps5ebmryz.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    $n = $number;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        if ($i == 1) {\n            $result = $result + \"i\";\n        } else if ($i == 2) {\n            $result = $result + \"ii\";\n        } else if ($i == 3) {\n            $result = $result + \"iii\";\n        } else if ($i == 4) {\n            $result = $result + \"iv\";\n        } else if ($i == 5) {\n            $result = $result + \"v\";\n        } else if ($i == 6) {\n            $result = $result + \"vi\";\n        } else if ($i == 7) {\n            $result = $result + \"vii\";\n        } else if ($i == 8) {\n            $result = $result + \"viii\";\n        } else if ($i == 9) {\n            $result = $result + \"ix\";\n        } else if ($i == 10) {\n            $result = $result + \"x\";\n        } else if ($i == 11) {\n            $result = $result + \"xi\";\n        } else if ($i == 12) {\n            $result = $result + \"xii\";\n        } else if ($i == 13) {\n            $result = $result + \"xiii\";\n        } else if ($i == 14) {\n            $result = $result + \"xiv\";\n        } else if ($i == 15) {\n            $result = $result + \"xv\";\n        } else if ($i == 16) {\n            $result = $result + \"xvi\";\n        } else if ($i == 17) {\n            $result = $result + \"xvii\";\n        } else if ($i == 18) {\n            $result = $result + \"xviii\";\n        } else if ($i == 19) {\n            $result = $result + \"xix\";\n        } else if ($i == 20) {\n            $result = $result + \"xx\";\n        } else if ($i == 21) {\n            $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpx5ur50o4.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while($i > 0) {\n        $digit = $i % 10;\n        if($digit == 1) {\n            $result = $result + \"i\";\n        } else if($digit == 2) {\n            $result = $result + \"ii\";\n        } else if($digit == 3) {\n            $result = $result + \"iii\";\n        } else if($digit == 4) {\n            $result = $result + \"iv\";\n        } else if($digit == 5) {\n            $result = $result + \"v\";\n        } else if($digit == 6) {\n            $result = $result + \"vi\";\n        } else if($digit == 7) {\n            $result = $result + \"vii\";\n        } else if($digit == 8) {\n            $result = $result + \"viii\";\n        } else if($digit == 9) {\n            $result = $result + \"ix\";\n        } else if($digit == 0) {\n            $result = $result + \"x\";\n        }\n        $i = $i - $digit;\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpqosd44e3.php:34\nStack trace:\n#0 /tmp/tmpqosd44e3.php(45): int_to_mini_roman(19)\n#1 /tmp/tmpqosd44e3.php(49): candidate(19)\n#2 /tmp/tmpqosd44e3.php(65): test()\n#3 {main}\n  thrown in /tmp/tmpqosd44e3.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while($i > 0) {\n        $result = $result + int_to_roman($i % 10);\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmp3oimz701.php:16\nStack trace:\n#0 /tmp/tmp3oimz701.php(23): int_to_mini_roman(19)\n#1 /tmp/tmp3oimz701.php(27): candidate(19)\n#2 /tmp/tmp3oimz701.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp3oimz701.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        if($i == 0) {\n            $result = $digit + $result;\n        } else if($i == 1 || $i == 3 || $i == 5 || $i == 7 || $i == 9) {\n            $result = $digit + $result;\n        } else if($i == 2 || $i == 4 || $i == 6 || $i == 8) {\n            $result = $digit + $result;\n            $i = 0;\n        } else {\n            $result = $digit + $result;\n            $i = 0;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpz1oid77l.php:19\nStack trace:\n#0 /tmp/tmpz1oid77l.php(35): int_to_mini_roman(1.9)\n#1 /tmp/tmpz1oid77l.php(39): candidate(19)\n#2 /tmp/tmpz1oid77l.php(55): test()\n#3 {main}\n  thrown in /tmp/tmpz1oid77l.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\",\n    \"I\",\n    \"II\",\n    \"III\",\n    \"IV\",\n    \"V\",\n    \"VI\",\n    \"VII\",\n    \"VIII\",\n    \"IX\",\n    \"X\",\n    \"XI\",\n    \"XII\",\n    \"XIII\",\n    \"XIV\",\n    \"XV\",\n    \"XVI\",\n    \"XVII\",\n    \"XVIII\",\n    \"XIX\",\n    \"XX\",\n    \"XXI\",\n    \"XXII\",\n    \"XXIII\",\n    \"XXIV\",\n    \"XXV\",\n    \"XXVI\",\n    \"XXVII\",\n    \"XXVIII\",\n    \"XXIX\",\n    \"XXX\",\n    \"XXXI\",\n    \"XXXII\",\n    \"XXXIII\",\n    \"XXXIV\",\n    \"XXXV\",\n    \"XXXVI\",\n    \"XXXVII\",\n    \"XXXVIII\",\n    \"XXXIX\",\n    \"XL\",\n    \"XLI\",\n    \"XLII\",\n    \"XLIII\",\n    \"XLIV\",\n    \"XLV\",\n    \"XLVI\",\n    \"XLVII\",\n    \"XLVIII\",\n    \"XLIX\",\n    \"L\",\n    \"LI\",\n    \"LII\",\n    \"LIII\",\n    \"LIV\",\n    \"LV\",\n    \"LVI\",\n    \"LVII\",\n    \"LVIII\",\n    \"LIX\",\n    \"LX\",\n    \"LXI\",\n    \"LXII\",\n    \"LXIII\",\n    \"LXIV\",\n    \"LXV\",\n    \"LXVI\",\n    \"LXVII\",\n    \"LXVIII\",\n    \"LXIX\",\n    \"LXX\",\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpaptuv5fb.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while($i > 0) {\n        $n = $i % 10;\n        if($n == 1) {\n            $result = $result + \"i\";\n        } else if($n == 2) {\n            $result = $result + \"ii\";\n        } else if($n == 3) {\n            $result = $result + \"iii\";\n        } else if($n == 4) {\n            $result = $result + \"iv\";\n        } else if($n == 5) {\n            $result = $result + \"v\";\n        } else if($n == 6) {\n            $result = $result + \"vi\";\n        } else if($n == 7) {\n            $result = $result + \"vii\";\n        } else if($n == 8) {\n            $result = $result + \"viii\";\n        } else if($n == 9) {\n            $result = $result + \"ix\";\n        } else {\n            $result = $result + \"x\";\n        }\n        $i = $i - $n;\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmppa30dbru.php:35\nStack trace:\n#0 /tmp/tmppa30dbru.php(46): int_to_mini_roman(19)\n#1 /tmp/tmppa30dbru.php(50): candidate(19)\n#2 /tmp/tmppa30dbru.php(66): test()\n#3 {main}\n  thrown in /tmp/tmppa30dbru.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $result = $result + int_to_roman($i);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpl0c32oec.php:16\nStack trace:\n#0 /tmp/tmpl0c32oec.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpl0c32oec.php(27): candidate(19)\n#2 /tmp/tmpl0c32oec.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpl0c32oec.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $n_array = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    for ($i in $n_array) {\n        $n = $n - $i;\n        if ($n >= 0) {\n            $roman_numeral = $roman_numeral . \"m\" . $i;\n        } else {\n            $roman_numeral = $roman_numeral . \"c\" . $i;\n            $n = $n + $i;\n        }\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"in\", expecting \";\" in /tmp/tmpo5nvo4w8.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $i -= 10;\n        $result = $roman_numerals[$i] + $result;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '',\n    'i',\n    'ii',\n    'iii',\n    'iv',\n    'v',\n    'vi',\n    'vii',\n    'viii',\n    'ix',\n    'x',\n    'xi',\n    'xii',\n    'xiii',\n    'xiv',\n    'xv',\n    'xvi',\n    'xvii',\n    'xviii',\n    'xix',\n    'xx',\n    'xxi',\n    'xxii',\n    'xxiii',\n    'xxiv',\n    'xxv',\n    'xxvi',\n    'xxvii',\n    'xxviii',\n    'xxix',\n    'xxx',\n    'xxxi',\n    'xxxii',\n    'xxxiii',\n    'xxxiv',\n    'xxxv',\n    'xxxvi',\n    'xxxvii',\n    'xxxviii',\n    'xxxix',\n    'xxxi',\n    'xxxii',\n    'xxxiii',\n    'xxxiv',\n    'xxxv',\n    'xxxvi',\n    'xxxvii',\n    'xxxviii',\n    'xxxix',\n    'xxx',\n    'xxxi',\n    'xxxii',\n    'xxxiii',\n    'xxxiv',\n    'xxxv',\n    'xxxvi',\n    'xxxvii',\n    'xxxviii',\n    'xxxix',\n    'xxxi',\n    'xxxii',\n    'xxxiii',\n    'xxxiv',\n    'xxxv',\n    'xxxvi',\n    'xxxvii',\n    'xxxviii',\n    'xxxix',\n    'xxx',\n    'xxxi',\n    'xxxii',\n    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpz4sryg41.php on line 95\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i * 10;\n        $result = $result + $roman_numerals[$n % 10] + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix',\n    'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix',\n    'xxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix', 'xxxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix',\n    'xxxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix', 'xxxxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix',\n    'xxxxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxix\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected string content \"xxix\", expecting \")\" in /tmp/tmpuxip334b.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n +\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzm04qhfr.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        if ($digit == 9) {\n            $result = \"ix\" + $result;\n        } else if ($digit == 4) {\n            $result = \"iv\" + $result;\n        } else if ($digit == 5) {\n            $result = \"v\" + $result;\n        } else if ($digit == 6) {\n            $result = \"vi\" + $result;\n        } else if ($digit == 7) {\n            $result = \"vii\" + $result;\n        } else if ($digit == 8) {\n            $result = \"viii\" + $result;\n        } else if ($digit == 1) {\n            $result = \"i\" + $result;\n        } else if ($digit == 2) {\n            $result = \"ii\" + $result;\n        } else if ($digit == 3) {\n            $result = \"iii\" + $result;\n        } else if ($digit == 0) {\n            $result = \"x\" + $result;\n        }\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpxb_0ngs4.php:19\nStack trace:\n#0 /tmp/tmpxb_0ngs4.php(44): int_to_mini_roman(1.9)\n#1 /tmp/tmpxb_0ngs4.php(48): candidate(19)\n#2 /tmp/tmpxb_0ngs4.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpxb_0ngs4.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $value = $number % 10;\n        if ($value == 4 || $value == 9) {\n            $result = $result + \"vii\";\n        } else if ($value == 5) {\n            $result = $result + \"viii\";\n        } else if ($value == 6) {\n            $result = $result + \"ix\";\n        } else if ($value == 7) {\n            $result = $result + \"x\";\n        } else if ($value == 8) {\n            $result = $result + \"xi\";\n        } else if ($value == 1) {\n            $result = $result + \"i\";\n        } else if ($value == 2) {\n            $result = $result + \"ii\";\n        } else if ($value == 3) {\n            $result = $result + \"iii\";\n        } else if ($value == 0) {\n            $result = $result + \"\";\n        }\n        $number = $number / 10;\n        $i++;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmphaol6k9o.php:18\nStack trace:\n#0 /tmp/tmphaol6k9o.php(43): int_to_mini_roman(19)\n#1 /tmp/tmphaol6k9o.php(47): candidate(19)\n#2 /tmp/tmphaol6k9o.php(63): test()\n#3 {main}\n  thrown in /tmp/tmphaol6k9o.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $i = $number % 10;\n        if($i == 1 || $i == 5) {\n            $result += \"i\";\n        } else if($i == 2 || $i == 7) {\n            $result += \"ii\";\n        } else if($i == 3 || $i == 8) {\n            $result += \"iii\";\n        } else if($i == 4 || $i == 9) {\n            $result += \"iv\";\n        } else if($i == 6) {\n            $result += \"vi\";\n        } else if($i == 10) {\n            $result += \"vii\";\n        } else if($i == 11) {\n            $result += \"viii\";\n        } else if($i == 12) {\n            $result += \"ix\";\n        } else if($i == 13) {\n            $result += \"x\";\n        } else if($i == 14) {\n            $result += \"xi\";\n        } else if($i == 15) {\n            $result += \"xii\";\n        } else if($i == 16) {\n            $result += \"xiii\";\n        } else if($i == 17) {\n            $result += \"xiv\";\n        } else if($i == 18) {\n            $result += \"xv\";\n        } else if($i == 19) {\n            $result += \"xvi\";\n        } else if($i == 20) {\n            $result += \"xvii\";\n        } else if($i == 21) {\n            $result += \"xviii\";\n        } else if($i == 22) {\n            $result += \"xix\";\n        } else if($i == 23) {\n            $result += \"xx\";\n        } else if($i == 24) {\n            $result += \"xxi\";\n        } else if($i == 25) {\n            $result += \"xxii\";\n        } else if($i == 26) {\n            $result += \"xxiii\";\n        } else if($i == 27) {\n            $result += \"xxiv\";\n        } else if($i == 28\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpyyyzp3ia.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $roman += $roman_map[$i];\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpqrcki39f.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpqrcki39f.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpqrcki39f.php:18\nStack trace:\n#0 /tmp/tmpqrcki39f.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpqrcki39f.php(29): candidate(19)\n#2 /tmp/tmpqrcki39f.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpqrcki39f.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit == 4 || $digit == 9) {\n            $result = '{$result}' . $digit;\n            $n = $n / 10;\n        } else {\n            $result = '{$result}' . $digit;\n            $n = $n - $digit;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292605,
      "stdout": "\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDeprecated: Implicit conversion from float 0.8999999999999999 to int loses precision in /tmp/tmpycl5d16e.php on line 17\n\nDepre",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    while($n > 0) {\n        $digit = $n % 10;\n        $roman_numeral = $roman_numeral . $roman_digits[$digit];\n        $n = $n / 10;\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp0jno9exd.php on line 17\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmp0jno9exd.php on line 16\n\nWarning: Undefined variable $roman_digits in /tmp/tmp0jno9exd.ph",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $result = $result + int_to_roman($i);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpl0c32oec.php:16\nStack trace:\n#0 /tmp/tmpl0c32oec.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpl0c32oec.php(27): candidate(19)\n#2 /tmp/tmpl0c32oec.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpl0c32oec.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i >= 1000) {\n        $result = $result + \"m\" + int_to_roman($i % 1000);\n        $i = $i / 1000;\n    }\n    $result = $result + int_to_roman($i);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmplvu7nz0w.php:19\nStack trace:\n#0 /tmp/tmplvu7nz0w.php(24): int_to_mini_roman(19)\n#1 /tmp/tmplvu7nz0w.php(28): candidate(19)\n#2 /tmp/tmplvu7nz0w.php(44): test()\n#3 {main}\n  thrown in /tmp/tmplvu7nz0w.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    $n = $n - 1;\n    while ($n > 0) {\n        $i = $n % 10;\n        $n = $n / 10;\n        if ($i == 1) {\n            $result = $result + \"x\";\n        } else if ($i == 2) {\n            $result = $result + \"x\";\n        } else if ($i == 3) {\n            $result = $result + \"c\";\n        } else if ($i == 4) {\n            $result = $result + \"c\";\n        } else if ($i == 5) {\n            $result = $result + \"d\";\n        } else if ($i == 6) {\n            $result = $result + \"d\";\n        } else if ($i == 7) {\n            $result = $result + \"m\";\n        } else if ($i == 8) {\n            $result = $result + \"m\";\n        } else if ($i == 9) {\n            $result = $result + \"x\";\n        } else if ($i == 0) {\n            $result = $result + \"x\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpkbgni7rp.php:35\nStack trace:\n#0 /tmp/tmpkbgni7rp.php(46): int_to_mini_roman(19)\n#1 /tmp/tmpkbgni7rp.php(50): candidate(19)\n#2 /tmp/tmpkbgni7rp.php(66): test()\n#3 {main}\n  thrown in /tmp/tmpkbgni7rp.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '',\n    'I',\n    'II',\n    'III',\n    'IV',\n    'V',\n    'VI',\n    'VII',\n    'VIII',\n    'IX',\n    'X',\n    'XI',\n    'XII',\n    'XIII',\n    'XIV',\n    'XV',\n    'XVI',\n    'XVII',\n    'XVIII',\n    'XIX',\n    'XX',\n    'XXI',\n    'XXII',\n    'XXIII',\n    'XXIV',\n    'XXV',\n    'XXVI',\n    'XXVII',\n    'XXVIII',\n    'XXIX',\n    'XXX',\n    'XXXI',\n    'XXXII',\n    'XXXIII',\n    'XXXIV',\n    'XXXV',\n    'XXXVI',\n    'XXXVII',\n    'XXXVIII',\n    'XXXIX',\n    'XL',\n    'XLI',\n    'XLII',\n    'XLIII',\n    'XLIV',\n    'XLV',\n    'XLVI',\n    'XLVII',\n    'XLVIII',\n    'XLIX',\n    'L',\n    'LI',\n    'LII',\n    'LIII',\n    'LIV',\n    'LV',\n    'LVI',\n    'LVII',\n    'LVIII',\n    'LIX',\n    'LX',\n    'LXI',\n    'LXII',\n    'LXIII',\n    'LXIV',\n    'LXV',\n    'LXVI',\n    'LXVII',\n    'LXVIII',\n    'LXIX',\n    'LXX',\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpc6ehgnop.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        if ($n == 1) {\n            $result = $result + \"x\";\n        } else if ($n == 2) {\n            $result = $result + \"x\";\n        } else if ($n == 3) {\n            $result = $result + \"c\";\n        } else if ($n == 4) {\n            $result = $result + \"c\";\n        } else if ($n == 5) {\n            $result = $result + \"d\";\n        } else if ($n == 6) {\n            $result = $result + \"d\";\n        } else if ($n == 7) {\n            $result = $result + \"m\";\n        } else if ($n == 8) {\n            $result = $result + \"m\";\n        } else if ($n == 9) {\n            $result = $result + \"x\";\n        }\n        $i = $i / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmph5xk2av5.php:35\nStack trace:\n#0 /tmp/tmph5xk2av5.php(43): int_to_mini_roman(19)\n#1 /tmp/tmph5xk2av5.php(47): candidate(19)\n#2 /tmp/tmph5xk2av5.php(63): test()\n#3 {main}\n  thrown in /tmp/tmph5xk2av5.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $i;\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpz7dei6og.php:18\nStack trace:\n#0 /tmp/tmpz7dei6og.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpz7dei6og.php(29): candidate(19)\n#2 /tmp/tmpz7dei6og.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpz7dei6og.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpd42myajm.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 1;\n    while ($number > 0) {\n        $roman = $roman + $i;\n        $number -= $i;\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpfcbc8swk.php:16\nStack trace:\n#0 /tmp/tmpfcbc8swk.php(24): int_to_mini_roman(19)\n#1 /tmp/tmpfcbc8swk.php(28): candidate(19)\n#2 /tmp/tmpfcbc8swk.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpfcbc8swk.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $i;\n        $i += 2;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmp7k5y49ld.php:18\nStack trace:\n#0 /tmp/tmp7k5y49ld.php(25): int_to_mini_roman(19)\n#1 /tmp/tmp7k5y49ld.php(29): candidate(19)\n#2 /tmp/tmp7k5y49ld.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp7k5y49ld.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        $i = $i / 10;\n        $result = $roman_numerals[$n] + $result;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '',\n    'I',\n    'II',\n    'III',\n    'IV',\n    'V',\n    'VI',\n    'VII',\n    'VIII',\n    'IX',\n    'X',\n    'XI',\n    'XII',\n    'XIII',\n    'XIV',\n    'XV',\n    'XVI',\n    'XVII',\n    'XVIII',\n    'XIX',\n    'XX',\n    'XXI',\n    'XXII',\n    'XXIII',\n    'XXIV',\n    'XXV',\n    'XXVI',\n    'XXVII',\n    'XXVIII',\n    'XXIX',\n    'XXX',\n    'XXXI',\n    'XXXII',\n    'XXXIII',\n    'XXXIV',\n    'XXXV',\n    'XXXVI',\n    'XXXVII',\n    'XXXVIII',\n    'XXXIX',\n    'XL',\n    'XLI',\n    'XLII',\n    'XLIII',\n    'XLIV',\n    'XLV',\n    'XLVI',\n    'XLVII',\n    'XLVIII',\n    'XLIX',\n    'L',\n    'LI',\n    'LII',\n    'LIII',\n    'LIV',\n    'LV',\n    'LVI',\n    'LVII',\n    'LVIII',\n    'LIX',\n    'LX',\n    'LXI',\n    'LXII',\n    'LXIII',\n    'LXIV',\n    'LXV',\n    'LXVI',\n    'LXVII',\n    'LXVIII',\n    'LXIX',\n    '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmp_omqj80y.php on line 95\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= 1;\n        $i += 1;\n        if($n >= 1000) {\n            $result += \"m\";\n            $n -= 1000;\n        }\n        if($n >= 900) {\n            $result += \"cm\";\n            $n -= 900;\n        }\n        if($n >= 500) {\n            $result += \"d\";\n            $n -= 500;\n        }\n        if($n >= 400) {\n            $result += \"cd\";\n            $n -= 400;\n        }\n        if($n >= 100) {\n            $result += \"c\";\n            $n -= 100;\n        }\n        if($n >= 90) {\n            $result += \"xc\";\n            $n -= 90;\n        }\n        if($n >= 50) {\n            $result += \"l\";\n            $n -= 50;\n        }\n        if($n >= 40) {\n            $result += \"xl\";\n            $n -= 40;\n        }\n        if($n >= 10) {\n            $result += \"x\";\n            $n -= 10;\n        }\n        if($n >= 9) {\n            $result += \"ix\";\n            $n -= 9;\n        }\n        if($n >= 5) {\n            $result += \"v\";\n            $n -= 5;\n        }\n        if($n >= 4) {\n            $result += \"iv\";\n            $n -= 4;\n        }\n        if($n >= 1) {\n            $result += \"i\";\n            $n -= 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpn6aen55z.php:52\nStack trace:\n#0 /tmp/tmpn6aen55z.php(76): int_to_mini_roman(19)\n#1 /tmp/tmpn6aen55z.php(80): candidate(19)\n#2 /tmp/tmpn6aen55z.php(96): test()\n#3 {main}\n  thrown in /tmp/tmpn6aen55z.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        if ($number >= 1000) {\n            $result = $result + \"m\" + int_to_roman($number % 1000);\n            $number = $number / 1000;\n        } else if ($number >= 900) {\n            $result = $result + \"cm\" + int_to_roman($number % 900);\n            $number = $number / 900;\n        } else if ($number >= 500) {\n            $result = $result + \"d\" + int_to_roman($number % 500);\n            $number = $number / 500;\n        } else if ($number >= 400) {\n            $result = $result + \"cd\" + int_to_roman($number % 400);\n            $number = $number / 400;\n        } else if ($number >= 100) {\n            $result = $result + \"c\" + int_to_roman($number % 100);\n            $number = $number / 100;\n        } else if ($number >= 90) {\n            $result = $result + \"xc\" + int_to_roman($number % 90);\n            $number = $number / 90;\n        } else if ($number >= 50) {\n            $result = $result + \"l\" + int_to_roman($number % 50);\n            $number = $number / 50;\n        } else if ($number >= 40) {\n            $result = $result + \"xl\" + int_to_roman($number % 40);\n            $number = $number / 40;\n        } else if ($number >= 10) {\n            $result = $result + \"x\" + int_to_roman($number % 10);\n            $number = $number / 10;\n        } else if ($number >= 9) {\n            $result = $result + \"ix\" + int_to_roman($number % 9);\n            $number = $number / 9;\n        } else if ($number >= 5) {\n            $result = $result + \"v\" + int_to_roman($number % 5);\n            $number = $number / 5;\n        } else if ($number >= 4) {\n            $result = $result\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmsnwbxgg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        $result = $result . $roman_digit[$digit];\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpbw69ehxj.php on line 18\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpbw69ehxj.php on line 16\n\nWarning: Undefined variable $roman_digit in /tmp/tmpbw69ehxj.php on lin",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    $n_remainder = $n;\n    while ($n_remainder > 0) {\n        $n_remainder = $n_remainder - $i;\n        $result = $result + $roman_numerals[$i];\n        $i++;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '',\n    'I',\n    'II',\n    'III',\n    'IV',\n    'V',\n    'VI',\n    'VII',\n    'VIII',\n    'IX',\n    'X',\n    'XI',\n    'XII',\n    'XIII',\n    'XIV',\n    'XV',\n    'XVI',\n    'XVII',\n    'XVIII',\n    'XIX',\n    'XX',\n    'XXI',\n    'XXII',\n    'XXIII',\n    'XXIV',\n    'XXV',\n    'XXVI',\n    'XXVII',\n    'XXVIII',\n    'XXIX',\n    'XXX',\n    'XXXI',\n    'XXXII',\n    'XXXIII',\n    'XXXIV',\n    'XXXV',\n    'XXXVI',\n    'XXXVII',\n    'XXXVIII',\n    'XXXIX',\n    'XL',\n    'XLI',\n    'XLII',\n    'XLIII',\n    'XLIV',\n    'XLV',\n    'XLVI',\n    'XLVII',\n    'XLVIII',\n    'XLIX',\n    'L',\n    'LI',\n    'LII',\n    'LIII',\n    'LIV',\n    'LV',\n    'LVI',\n    'LVII',\n    'LVIII',\n    'LIX',\n    'LX',\n    'LXI',\n    'LXII',\n    'LXIII',\n    'LXIV',\n    'LXV',\n    'LXVI',\n    'LXVII\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected string content \"LXVII\", expecting \")\" in /tmp/tmprqfevweb.php on line 93\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $roman = $roman + $roman_array[$i];\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_array in /tmp/tmpa2t6jiwv.php on line 19\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpa2t6jiwv.php on line 19\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpa2t6jiwv.php:19\nStack trace:\n#0 /tmp/tmpa2t6jiwv.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpa2t6jiwv.php(29): candidate(19)\n#2 /tmp/tmpa2t6jiwv.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpa2t6jiwv.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        if ($i == 0) {\n            $result = $digit + $result;\n        } else if ($i == 1) {\n            $result = \"x\" + $digit + $result;\n        } else if ($i == 2) {\n            $result = \"c\" + $digit + $result;\n        } else if ($i == 3) {\n            $result = \"cc\" + $digit + $result;\n        } else if ($i == 4) {\n            $result = \"ccc\" + $digit + $result;\n        } else if ($i == 5) {\n            $result = \"cccc\" + $digit + $result;\n        } else if ($i == 6) {\n            $result = \"ccccc\" + $digit + $result;\n        } else if ($i == 7) {\n            $result = \"cccccc\" + $digit + $result;\n        } else if ($i == 8) {\n            $result = \"ccccccc\" + $digit + $result;\n        } else if ($i == 9) {\n            $result = \"cccccccc\" + $digit + $result;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpn19cx8oa.php:19\nStack trace:\n#0 /tmp/tmpn19cx8oa.php(45): int_to_mini_roman(1.9)\n#1 /tmp/tmpn19cx8oa.php(49): candidate(19)\n#2 /tmp/tmpn19cx8oa.php(65): test()\n#3 {main}\n  thrown in /tmp/tmpn19cx8oa.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n + \"x\";\n    }\n    $n = $number / 100;\n    $n = $n % 100;\n    if ($n > 0) {\n        $result = $result + $n + \"c\";\n    }\n    $n = $number / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n + \"x\";\n    }\n    $n = $number % 10;\n    if ($n > 0) {\n        $result = $result + $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpbmv2wiwn.php on line 17\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpbmv2wiwn.php on line 24\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpbmv2wiwn.php on line 29\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmpbmv2wiwn.php:31\nStack trace:\n#0 /tmp/tmpbmv2wiwn.php(41): int_to_mini_roman(19)\n#1 /tmp/tmpbmv2wiwn.php(45): candidate(19)\n#2 /tmp/tmpbmv2wiwn.php(61): test()\n#3 {main}\n  thrown in /tmp/tmpbmv2wiwn.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpj1w6sgwv.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $roman_numeral += $roman_numeral_table[$i];\n        $i += $i;\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numeral_table in /tmp/tmpwn4ckwb8.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpwn4ckwb8.php on line 16\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpwn4ckwb8.php:16\nStack trace:\n#0 /tmp/tmpwn4ckwb8.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpwn4ckwb8.php(27): candidate(19)\n#2 /tmp/tmpwn4ckwb8.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpwn4ckwb8.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        if ($number >= 1000) {\n            $result += \"m\";\n            $number -= 1000;\n        } else if ($number >= 900) {\n            $result += \"cm\";\n            $number -= 900;\n        } else if ($number >= 500) {\n            $result += \"d\";\n            $number -= 500;\n        } else if ($number >= 400) {\n            $result += \"cd\";\n            $number -= 400;\n        } else if ($number >= 100) {\n            $result += \"c\";\n            $number -= 100;\n        } else if ($number >= 90) {\n            $result += \"xc\";\n            $number -= 90;\n        } else if ($number >= 50) {\n            $result += \"l\";\n            $number -= 50;\n        } else if ($number >= 40) {\n            $result += \"xl\";\n            $number -= 40;\n        } else if ($number >= 10) {\n            $result += \"x\";\n            $number -= 10;\n        } else if ($number >= 9) {\n            $result += \"ix\";\n            $number -= 9;\n        } else if ($number >= 5) {\n            $result += \"v\";\n            $number -= 5;\n        } else if ($number >= 4) {\n            $result += \"iv\";\n            $number -= 4;\n        } else if ($number >= 1) {\n            $result += \"i\";\n            $number -= 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmprdqud4w2.php:41\nStack trace:\n#0 /tmp/tmprdqud4w2.php(61): int_to_mini_roman(19)\n#1 /tmp/tmprdqud4w2.php(65): candidate(19)\n#2 /tmp/tmprdqud4w2.php(81): test()\n#3 {main}\n  thrown in /tmp/tmprdqud4w2.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $i += 2;\n        $result = $i + $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpdkp6lzu6.php:19\nStack trace:\n#0 /tmp/tmpdkp6lzu6.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpdkp6lzu6.php(29): candidate(19)\n#2 /tmp/tmpdkp6lzu6.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpdkp6lzu6.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    $j = 0;\n    while ($n > 0) {\n        $n -= $i;\n        $j++;\n        if ($n == 0) {\n            $result += $roman_numerals[$j];\n            break;\n        }\n        if ($n >= $i) {\n            $result += $roman_numerals[$j];\n            $n -= $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\"\n);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmp34avqln7.php on line 25\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp34avqln7.php on line 25\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmp34avqln7.php:25\nStack trace:\n#0 /tmp/tmp34avqln7.php(39): int_to_mini_roman(19)\n#1 /tmp/tmp34avqln7.php(43): candidate(19)\n#2 /tmp/tmp34avqln7.php(59): test()\n#3 {main}\n  thrown in /tmp/tmp34avqln7.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        $i = $i / 10;\n        $result = $roman_numerals[$n] + $result;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '',\n    'I',\n    'II',\n    'III',\n    'IV',\n    'V',\n    'VI',\n    'VII',\n    'VIII',\n    'IX',\n    'X',\n    'XI',\n    'XII',\n    'XIII',\n    'XIV',\n    'XV',\n    'XVI',\n    'XVII',\n    'XVIII',\n    'XIX',\n    'XX',\n    'XXI',\n    'XXII',\n    'XXIII',\n    'XXIV',\n    'XXV',\n    'XXVI',\n    'XXVII',\n    'XXVIII',\n    'XXIX',\n    'XXX',\n    'XXXI',\n    'XXXII',\n    'XXXIII',\n    'XXXIV',\n    'XXXV',\n    'XXXVI',\n    'XXXVII',\n    'XXXVIII',\n    'XXXIX',\n    'XL',\n    'XLI',\n    'XLII',\n    'XLIII',\n    'XLIV',\n    'XLV',\n    'XLVI',\n    'XLVII',\n    'XLVIII',\n    'XLIX',\n    'L',\n    'LI',\n    'LII',\n    'LIII',\n    'LIV',\n    'LV',\n    'LVI',\n    'LVII',\n    'LVIII',\n    'LIX',\n    'LX',\n    'LXI',\n    'LXII',\n    'LXIII',\n    'LXIV',\n    'LXV',\n    'LXVI',\n    'LXVII',\n    'LXVIII',\n    'LXIX',\n    '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmp_omqj80y.php on line 95\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpd42myajm.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $digit = $number % 10;\n        if($digit == 9) {\n            $result = \"ix\" + $result;\n        } else if($digit == 4) {\n            $result = \"iv\" + $result;\n        } else if($digit == 5) {\n            $result = \"v\" + $result;\n        } else if($digit == 6) {\n            $result = \"vi\" + $result;\n        } else if($digit == 7) {\n            $result = \"vii\" + $result;\n        } else if($digit == 8) {\n            $result = \"viii\" + $result;\n        } else if($digit == 1) {\n            $result = \"i\" + $result;\n        } else if($digit == 2) {\n            $result = \"ii\" + $result;\n        } else if($digit == 3) {\n            $result = \"iii\" + $result;\n        } else if($digit == 0) {\n            $result = \"x\" + $result;\n        }\n        $number = $number / 10;\n        $i++;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpzr_85vuj.php:18\nStack trace:\n#0 /tmp/tmpzr_85vuj.php(45): int_to_mini_roman(19)\n#1 /tmp/tmpzr_85vuj.php(49): candidate(19)\n#2 /tmp/tmpzr_85vuj.php(65): test()\n#3 {main}\n  thrown in /tmp/tmpzr_85vuj.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $roman_numeral = $roman_numeral_map[$i];\n        if ($roman_numeral) {\n            $result = $roman_numeral + $result;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Undefined variable $roman_numeral_map in /tmp/tmpfn5rhbjm.php on line 16\n\nWarning: Trying to access array offset o",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"d\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp9i1y_68c.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp9i1y_68c.php:21\nStack trace:\n#0 /tmp/tmp9i1y_68c.php(33): int_to_mini_roman(19)\n#1 /tmp/tmp9i1y_68c.php(37): candidate(19)\n#2 /tmp/tmp9i1y_68c.php(53): test()\n#3 {main}\n  thrown in /tmp/tmp9i1y_68c.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    while ($n > 0) {\n        $m = $n % 10;\n        $roman = $roman . $m . \"\";\n        $n = $n / 10;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmpvzz2q86b.php on line 16\n\nDeprecated: Implicit conversion from float 1.9E",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        if ($n == 1) {\n            $result = $result + \"x\";\n        } else if ($n == 2) {\n            $result = $result + \"x\";\n        } else if ($n == 3) {\n            $result = $result + \"c\";\n        } else if ($n == 4) {\n            $result = $result + \"c\";\n        } else if ($n == 5) {\n            $result = $result + \"d\";\n        } else if ($n == 6) {\n            $result = $result + \"d\";\n        } else if ($n == 7) {\n            $result = $result + \"m\";\n        } else if ($n == 8) {\n            $result = $result + \"m\";\n        } else if ($n == 9) {\n            $result = $result + \"x\";\n        }\n        $i = $i - $n;\n        $i = $i / 10;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpyk7vwx8e.php:35\nStack trace:\n#0 /tmp/tmpyk7vwx8e.php(44): int_to_mini_roman(19)\n#1 /tmp/tmpyk7vwx8e.php(48): candidate(19)\n#2 /tmp/tmpyk7vwx8e.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpyk7vwx8e.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $digit = $i % 10;\n        if ($digit == 9 || $digit == 4 || $digit == 5) {\n            $result = \"m\" + $result;\n        } else if ($digit == 8) {\n            $result = \"c\" + $result;\n        } else if ($digit == 6) {\n            $result = \"d\" + $result;\n        } else if ($digit == 3) {\n            $result = \"c\" + $result;\n        } else if ($digit == 2) {\n            $result = \"x\" + $result;\n        } else if ($digit == 1) {\n            $result = \"i\" + $result;\n        }\n        $i = $i / 10;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmps6rzg9q3.php:18\nStack trace:\n#0 /tmp/tmps6rzg9q3.php(36): int_to_mini_roman(19)\n#1 /tmp/tmps6rzg9q3.php(40): candidate(19)\n#2 /tmp/tmps6rzg9q3.php(56): test()\n#3 {main}\n  thrown in /tmp/tmps6rzg9q3.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $i += 2;\n        if($n >= $i) {\n            $result += \"m\";\n            $n -= $i;\n        } else if($n >= 5) {\n            $result += \"c\";\n            $n -= 5;\n        } else if($n >= 10) {\n            $result += \"x\";\n            $n -= 10;\n        } else if($n >= 50) {\n            $result += \"l\";\n            $n -= 50;\n        } else if($n >= 100) {\n            $result += \"c\";\n            $n -= 100;\n        } else if($n >= 500) {\n            $result += \"d\";\n            $n -= 500;\n        } else if($n >= 1000) {\n            $result += \"m\";\n            $n -= 1000;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpqct0ntyy.php:20\nStack trace:\n#0 /tmp/tmpqct0ntyy.php(46): int_to_mini_roman(19)\n#1 /tmp/tmpqct0ntyy.php(50): candidate(19)\n#2 /tmp/tmpqct0ntyy.php(66): test()\n#3 {main}\n  thrown in /tmp/tmpqct0ntyy.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $roman_numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    for ($i = 1; $i <= $number; $i++) {\n        $value = $roman_numerals[$i];\n        if ($i < $value) {\n            $result += \"x\";\n        }\n        for ($j = $value; $j >= $i; $j--) {\n            $result += \"v\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined array key 1 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 2 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 3 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 4 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 5 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 6 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 7 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 8 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 9 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 10 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 11 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 12 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 13 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 14 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Undefined array key 15 in /tmp/tmpt3ux6mmu.php on line 30\n\nWarning: Und",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $result = $result + int_to_roman($i);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpl0c32oec.php:16\nStack trace:\n#0 /tmp/tmpl0c32oec.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpl0c32oec.php(27): candidate(19)\n#2 /tmp/tmpl0c32oec.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpl0c32oec.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp5_3irjxx.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmp5_3irjxx.php:21\nStack trace:\n#0 /tmp/tmp5_3irjxx.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp5_3irjxx.php(48): candidate(19)\n#2 /tmp/tmp5_3irjxx.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp5_3irjxx.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $value = $number % 10;\n        if ($value == 4 || $value == 9) {\n            $result = $result + \"cd\";\n        } else if ($value == 5) {\n            $result = $result + \"xc\";\n        } else if ($value == 6) {\n            $result = $result + \"xd\";\n        } else if ($value == 7) {\n            $result = $result + \"xl\";\n        } else if ($value == 8) {\n            $result = $result + \"x\";\n        } else if ($value == 1) {\n            $result = $result + \"x\";\n        } else {\n            $result = $result + $value;\n        }\n        $number = floor($number / 10);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7f54cbn7.php:18\nStack trace:\n#0 /tmp/tmp7f54cbn7.php(39): int_to_mini_roman(19)\n#1 /tmp/tmp7f54cbn7.php(43): candidate(19)\n#2 /tmp/tmp7f54cbn7.php(59): test()\n#3 {main}\n  thrown in /tmp/tmp7f54cbn7.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result.toLowerCase();\n}\n\n$roman_numerals = array(\n    '',\n    'i',\n    'ii',\n    'iii',\n    'iv',\n    'v',\n    'vi',\n    'vii',\n    'viii',\n    'ix',\n    'x',\n    'xi',\n    'xii',\n    'xiii',\n    'xiv',\n    'xv',\n    'xvi',\n    'xvii',\n    'xviii',\n    'xix',\n    'xx',\n    'xxi',\n    'xxii',\n    'xxiii',\n    'xxiv',\n    'xxv',\n    'xxvi',\n    'xxvii',\n    'xxviii',\n    'xxix',\n    'xxx',\n    'xxxi',\n    'xxxii',\n    'xxxiii',\n    'xxxiv',\n    'xxxv',\n    'xxxvi',\n    'xxxvii',\n    'xxxviii',\n    'xxxix',\n    'xxxy',\n    'xxxyi',\n    'xxxyii',\n    'xxxyiii',\n    'xxxyiv',\n    'xxxyv',\n    'xxxyvi',\n    'xxxyvii',\n    'xxxyviii',\n    'xxxyix',\n    'xxxyxx',\n    'xxxyxxi',\n    'xxxyxxii',\n    'xxxyxxiii',\n    'xxxyxxiv',\n    'xxxyxxv',\n    'xxxyxxvi',\n    'xxxyxxvii',\n    'xxxyxxviii',\n    'xxxyxxix',\n    'xxxyxxx',\n    'xxxyxxxi',\n    'xxxyxxxii',\n    'xxxyxxxiii',\n    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpt1u6xud_.php on line 90\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    'I', 'V', 'X', 'L', 'C', 'D', 'M'\n);\n\n$int_to_roman = function($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$int_to_roman(19)\n$int_to_roman(152)\n$int_to_roman(426)\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected variable \"$int_to_roman\" in /tmp/tmpgejvtuy5.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $i = $i * 10;\n        $result = $result + $roman_numerals[$n] + $i;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\"\n);\n\n$roman_numerals_reversed = array(\n    \"\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\"\n);\n\n$roman_numerals_reversed_regex = array(\n    \"\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\"\n);\n\n$roman_numerals_regex = array(\n    \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\"\n);\n\n$roman_numerals_regex_reversed = array(\n    \"\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"xvii\", \"xviii\", \"xix\"\n);\n\n$roman_numerals_regex_reversed_regex = array(\n    \"\", \"xix\", \"xvii\", \"xviii\", \"xix\", \"x\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xix\", expecting \")\" in /tmp/tmpyefp40lx.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $m = $n % 10;\n        if($m == 4 || $m == 9) {\n            $result += \"v\";\n        } else if($m == 5) {\n            $result += \"x\";\n        } else if($m == 6) {\n            $result += \"l\";\n        } else if($m == 7) {\n            $result += \"c\";\n        } else if($m == 8) {\n            $result += \"d\";\n        } else if($m == 0) {\n            $result += \"i\";\n        }\n        $n = $n / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpy1ib9ae3.php:19\nStack trace:\n#0 /tmp/tmpy1ib9ae3.php(37): int_to_mini_roman(19)\n#1 /tmp/tmpy1ib9ae3.php(41): candidate(19)\n#2 /tmp/tmpy1ib9ae3.php(57): test()\n#3 {main}\n  thrown in /tmp/tmpy1ib9ae3.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $i = $n % 10;\n        if ($i == 1) {\n            $result = \"x\" + $result;\n        } else if ($i == 2) {\n            $result = \"x\" + $result;\n        } else if ($i == 3) {\n            $result = \"c\" + $result;\n        } else if ($i == 4) {\n            $result = \"c\" + $result;\n        } else if ($i == 5) {\n            $result = \"c\" + $result;\n        } else if ($i == 6) {\n            $result = \"d\" + $result;\n        } else if ($i == 7) {\n            $result = \"d\" + $result;\n        } else if ($i == 8) {\n            $result = \"d\" + $result;\n        } else if ($i == 9) {\n            $result = \"m\" + $result;\n        } else if ($i == 0) {\n            $result = \"m\" + $result;\n        }\n        $n = $n / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7790p0xq.php:35\nStack trace:\n#0 /tmp/tmp7790p0xq.php(45): int_to_mini_roman(19)\n#1 /tmp/tmp7790p0xq.php(49): candidate(19)\n#2 /tmp/tmp7790p0xq.php(65): test()\n#3 {main}\n  thrown in /tmp/tmp7790p0xq.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $i = $number % 10;\n        $roman = $roman . $roman_map[$i];\n        $number = $number / 10;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpw1qm9dky.php on line 17\n\nDeprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpw1qm9dky.php on line 16\n\nWarning: Undefined variable $roman_map in /tmp/tmpw1qm9dky.php on line 17\n\nWarning: T",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpqemzl9q4.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpqemzl9q4.php:21\nStack trace:\n#0 /tmp/tmpqemzl9q4.php(47): int_to_mini_roman(19)\n#1 /tmp/tmpqemzl9q4.php(51): candidate(19)\n#2 /tmp/tmpqemzl9q4.php(67): test()\n#3 {main}\n  thrown in /tmp/tmpqemzl9q4.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $value = $number % 10;\n        if ($value == 1) {\n            $result = $result + \"i\";\n        } else if ($value == 2) {\n            $result = $result + \"ii\";\n        } else if ($value == 3) {\n            $result = $result + \"iii\";\n        } else if ($value == 4) {\n            $result = $result + \"iv\";\n        } else if ($value == 5) {\n            $result = $result + \"v\";\n        } else if ($value == 6) {\n            $result = $result + \"vi\";\n        } else if ($value == 7) {\n            $result = $result + \"vii\";\n        } else if ($value == 8) {\n            $result = $result + \"viii\";\n        } else if ($value == 9) {\n            $result = $result + \"ix\";\n        } else if ($value == 0) {\n            $result = $result + \"x\";\n        }\n        $number = $number - $value;\n        $i++;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpn6n9ls8t.php:34\nStack trace:\n#0 /tmp/tmpn6n9ls8t.php(45): int_to_mini_roman(19)\n#1 /tmp/tmpn6n9ls8t.php(49): candidate(19)\n#2 /tmp/tmpn6n9ls8t.php(65): test()\n#3 {main}\n  thrown in /tmp/tmpn6n9ls8t.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $i = $number % 10;\n        $roman = $roman + $roman_map[$i];\n        $number = $number / 10;\n    }\n    return $roman;\n}\n\n$roman_map = array(\n    0, \"\",\n    1, \"i\",\n    2, \"ii\",\n    3, \"iii\",\n    4, \"iv\",\n    5, \"v\",\n    6, \"vi\",\n    7, \"vii\",\n    8, \"viii\",\n    9, \"ix\",\n    10, \"x\",\n    20, \"xx\",\n    30, \"xxx\",\n    40, \"l\",\n    50, \"l\",\n    60, \"l\",\n    70, \"l\",\n    80, \"l\",\n    90, \"l\",\n    100, \"c\",\n    200, \"cc\",\n    300, \"ccc\",\n    400, \"cd\",\n    500, \"d\",\n    600, \"d\",\n    700, \"d\",\n    800, \"d\",\n    900, \"d\",\n    1000, \"m\"\n);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpz9ikmpyg.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpz9ikmpyg.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpz9ikmpyg.php:17\nStack trace:\n#0 /tmp/tmpz9ikmpyg.php(56): int_to_mini_roman(19)\n#1 /tmp/tmpz9ikmpyg.php(60): candidate(19)\n#2 /tmp/tmpz9ikmpyg.php(76): test()\n#3 {main}\n  thrown in /tmp/tmpz9ikmpyg.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        if ($number >= 1000) {\n            $result += \"m\";\n            $number -= 1000;\n        } else if ($number >= 900) {\n            $result += \"cm\";\n            $number -= 900;\n        } else if ($number >= 500) {\n            $result += \"d\";\n            $number -= 500;\n        } else if ($number >= 400) {\n            $result += \"cd\";\n            $number -= 400;\n        } else if ($number >= 100) {\n            $result += \"c\";\n            $number -= 100;\n        } else if ($number >= 90) {\n            $result += \"xc\";\n            $number -= 90;\n        } else if ($number >= 50) {\n            $result += \"l\";\n            $number -= 50;\n        } else if ($number >= 40) {\n            $result += \"xl\";\n            $number -= 40;\n        } else if ($number >= 10) {\n            $result += \"x\";\n            $number -= 10;\n        } else if ($number >= 9) {\n            $result += \"ix\";\n            $number -= 9;\n        } else if ($number >= 5) {\n            $result += \"v\";\n            $number -= 5;\n        } else if ($number >= 4) {\n            $result += \"iv\";\n            $number -= 4;\n        } else if ($number >= 1) {\n            $result += \"i\";\n            $number -= 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmprdqud4w2.php:41\nStack trace:\n#0 /tmp/tmprdqud4w2.php(61): int_to_mini_roman(19)\n#1 /tmp/tmprdqud4w2.php(65): candidate(19)\n#2 /tmp/tmprdqud4w2.php(81): test()\n#3 {main}\n  thrown in /tmp/tmprdqud4w2.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    $n = 0;\n    while ($i > 0) {\n        $n = $i % 10;\n        if ($n == 9 || $n == 4 || $n == 5) {\n            $result = \"m\" + $result;\n        } else if ($n == 8) {\n            $result = \"c\" + $result;\n        } else if ($n == 7) {\n            $result = \"x\" + $result;\n        } else if ($n == 6) {\n            $result = \"l\" + $result;\n        } else if ($n == 3) {\n            $result = \"d\" + $result;\n        } else if ($n == 2) {\n            $result = \"v\" + $result;\n        } else if ($n == 1) {\n            $result = \"i\" + $result;\n        }\n        $i = $i / 10;\n    }\n    return $result.toLowerCase();\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpi447exne.php:19\nStack trace:\n#0 /tmp/tmpi447exne.php(39): int_to_mini_roman(19)\n#1 /tmp/tmpi447exne.php(43): candidate(19)\n#2 /tmp/tmpi447exne.php(59): test()\n#3 {main}\n  thrown in /tmp/tmpi447exne.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        $number = $number / 10;\n        if ($i % 2 == 0) {\n            $digit = $digit * 2;\n            if ($digit == 10) {\n                $result = \"x\" + $result;\n            } else {\n                $result = $digit + $result;\n            }\n        } else {\n            $result = $digit + $result;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpukj533wt.php:23\nStack trace:\n#0 /tmp/tmpukj533wt.php(34): int_to_mini_roman(1.9)\n#1 /tmp/tmpukj533wt.php(38): candidate(19)\n#2 /tmp/tmpukj533wt.php(54): test()\n#3 {main}\n  thrown in /tmp/tmpukj533wt.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n +\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpnxrvkpqj.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while ($i > 0) {\n        $digit = $i % 10;\n        $i = $i / 10;\n        switch ($digit) {\n            case 1:\n                $result = \"x\" + $result;\n                break;\n            case 2:\n                $result = \"c\" + $result;\n                break;\n            case 3:\n                $result = \"cc\" + $result;\n                break;\n            case 4:\n                $result = \"cd\" + $result;\n                break;\n            case 5:\n                $result = \"d\" + $result;\n                break;\n            case 6:\n                $result = \"dc\" + $result;\n                break;\n            case 7:\n                $result = \"dcc\" + $result;\n                break;\n            case 8:\n                $result = \"ccc\" + $result;\n                break;\n            case 9:\n                $result = \"cccd\" + $result;\n                break;\n            case 10:\n                $result = \"cccc\" + $result;\n                break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpdd4r1day.php:44\nStack trace:\n#0 /tmp/tmpdd4r1day.php(55): int_to_mini_roman(19)\n#1 /tmp/tmpdd4r1day.php(59): candidate(19)\n#2 /tmp/tmpdd4r1day.php(75): test()\n#3 {main}\n  thrown in /tmp/tmpdd4r1day.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n > 0) {\n        $result = $result + $n + \"x\";\n    }\n    $n = $n * 10;\n    $n = $n % 100;\n    if ($n > 0) {\n        $result = $result + $n + \"c\";\n    }\n    $n = $n * 100;\n    $n = $n % 1000;\n    if ($n > 0) {\n        $result = $result + $n + \"l\";\n    }\n    $n = $n * 1000;\n    $n = $n % 10000;\n    if ($n > 0) {\n        $result = $result + $n + \"x\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpl6gidf8d.php on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6gidf8d.php:46\nStack trace:\n#0 /tmp/tmpl6gidf8d.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpl6gidf8d.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = $number;\n    while($i > 0) {\n        $i -= 10;\n        $result = $roman_numerals[$i] + $result;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\",\n    \"I\",\n    \"II\",\n    \"III\",\n    \"IV\",\n    \"V\",\n    \"VI\",\n    \"VII\",\n    \"VIII\",\n    \"IX\",\n    \"X\",\n    \"XI\",\n    \"XII\",\n    \"XIII\",\n    \"XIV\",\n    \"XV\",\n    \"XVI\",\n    \"XVII\",\n    \"XVIII\",\n    \"XIX\",\n    \"XX\",\n    \"XXI\",\n    \"XXII\",\n    \"XXIII\",\n    \"XXIV\",\n    \"XXV\",\n    \"XXVI\",\n    \"XXVII\",\n    \"XXVIII\",\n    \"XXIX\",\n    \"XXX\",\n    \"XXXI\",\n    \"XXXII\",\n    \"XXXIII\",\n    \"XXXIV\",\n    \"XXXV\",\n    \"XXXVI\",\n    \"XXXVII\",\n    \"XXXVIII\",\n    \"XXXIX\",\n    \"XL\",\n    \"XLI\",\n    \"XLII\",\n    \"XLIII\",\n    \"XLIV\",\n    \"XLV\",\n    \"XLVI\",\n    \"XLVII\",\n    \"XLVIII\",\n    \"XLIX\",\n    \"L\",\n    \"LI\",\n    \"LII\",\n    \"LIII\",\n    \"LIV\",\n    \"LV\",\n    \"LVI\",\n    \"LVII\",\n    \"LVIII\",\n    \"LIX\",\n    \"LX\",\n    \"LXI\",\n    \"LXII\",\n    \"LXIII\",\n    \"LXIV\",\n    \"LXV\",\n    \"LXVI\",\n    \"LXVII\",\n    \"LXVIII\",\n    \"LXIX\",\n    \"LXX\",\n    \"LXXI\",\n    \"LXXII\",\n    \"\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"xix\", expecting \")\" in /tmp/tmpmlglmlbl.php on line 102\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix'\n    );\n    $roman_numerals_reversed = array(\n        '',\n        'x',\n        'cx',\n        'ccx',\n        'ccccx',\n        'ccccccx',\n        'ccccccccx',\n        'ccccccccccx',\n        'ccccccccccccx',\n        'ccccccccccccccx',\n        'ccccccccccccccccx',\n        'ccccccccccccccccccx',\n        'ccccccccccccccccccccx',\n        'ccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccccccccccx',\n        'ccccccccccccccccccccccccccccccccccccccccccx',\n        'cccccccccccccccccccccccccccccccccccccc\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected string content \"cccccccccccccccccccccccccccccc...\", expecting \")\" in /tmp/tmparl6p7g9.php on line 60\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $i = $n % 10;\n        $n = $n / 10;\n        if ($i == 4 || $i == 9) {\n            $result = $result + \"v\";\n        } else if ($i == 5) {\n            $result = $result + \"x\";\n        } else if ($i == 6) {\n            $result = $result + \"l\";\n        } else if ($i == 7) {\n            $result = $result + \"c\";\n        } else if ($i == 8) {\n            $result = $result + \"d\";\n        } else if ($i == 0) {\n            $result = $result + \"i\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpeb9agj17.php:20\nStack trace:\n#0 /tmp/tmpeb9agj17.php(37): int_to_mini_roman(19)\n#1 /tmp/tmpeb9agj17.php(41): candidate(19)\n#2 /tmp/tmpeb9agj17.php(57): test()\n#3 {main}\n  thrown in /tmp/tmpeb9agj17.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n == 9) {\n        $result = \"ix\";\n    } else if ($n == 4) {\n        $result = \"iv\";\n    } else if ($n == 5) {\n        $result = \"v\";\n    } else if ($n == 1) {\n        $result = \"i\";\n    } else if ($n == 2) {\n        $result = \"ii\";\n    } else if ($n == 3) {\n        $result = \"iii\";\n    } else if ($n == 6) {\n        $result = \"vi\";\n    } else if ($n == 7) {\n        $result = \"vii\";\n    } else if ($n == 8) {\n        $result = \"viii\";\n    } else if ($n == 0) {\n        $result = \"\";\n    } else {\n        $result = \"\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpfo7d8alu.php on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo7d8alu.php:51\nStack trace:\n#0 /tmp/tmpfo7d8alu.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpfo7d8alu.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpvxj6e929.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpvxj6e929.php:21\nStack trace:\n#0 /tmp/tmpvxj6e929.php(44): int_to_mini_roman(19)\n#1 /tmp/tmpvxj6e929.php(48): candidate(19)\n#2 /tmp/tmpvxj6e929.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpvxj6e929.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n        $roman += $roman_map[$i];\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nWarning: Undefined variable $roman_map in /tmp/tmpgxhkiizk.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpgxhkiizk.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpgxhkiizk.php:18\nStack trace:\n#0 /tmp/tmpgxhkiizk.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpgxhkiizk.php(29): candidate(19)\n#2 /tmp/tmpgxhkiizk.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpgxhkiizk.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $i = $number % 10;\n        if ($i == 1) {\n            $result += \"x\";\n        } else if ($i == 2) {\n            $result += \"x\";\n        } else if ($i == 3) {\n            $result += \"c\";\n        } else if ($i == 4) {\n            $result += \"c\";\n        } else if ($i == 5) {\n            $result += \"c\";\n        } else if ($i == 6) {\n            $result += \"d\";\n        } else if ($i == 7) {\n            $result += \"d\";\n        } else if ($i == 8) {\n            $result += \"d\";\n        } else if ($i == 9) {\n            $result += \"m\";\n        } else if ($i == 0) {\n            $result += \"m\";\n        }\n        $number = floor($number / 10);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp0l2jvibb.php:34\nStack trace:\n#0 /tmp/tmp0l2jvibb.php(44): int_to_mini_roman(19)\n#1 /tmp/tmp0l2jvibb.php(48): candidate(19)\n#2 /tmp/tmp0l2jvibb.php(64): test()\n#3 {main}\n  thrown in /tmp/tmp0l2jvibb.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    while($n > 0) {\n        $digit = $n % 10;\n        if($digit == 4 || $digit == 9) {\n            $roman = \"iv\" + $roman;\n        } else if($digit == 5) {\n            $roman = \"v\" + $roman;\n        } else if($digit == 6) {\n            $roman = \"vi\" + $roman;\n        } else if($digit == 7) {\n            $roman = \"vii\" + $roman;\n        } else if($digit == 8) {\n            $roman = \"viii\" + $roman;\n        } else if($digit == 1) {\n            $roman = \"i\" + $roman;\n        } else if($digit == 2) {\n            $roman = \"ii\" + $roman;\n        } else if($digit == 3) {\n            $roman = \"iii\" + $roman;\n        } else if($digit == 0) {\n            $roman = \"x\" + $roman;\n        }\n        $n = $n / 10;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpdsmzntpv.php:18\nStack trace:\n#0 /tmp/tmpdsmzntpv.php(42): int_to_mini_roman(19)\n#1 /tmp/tmpdsmzntpv.php(46): candidate(19)\n#2 /tmp/tmpdsmzntpv.php(62): test()\n#3 {main}\n  thrown in /tmp/tmpdsmzntpv.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $n;\n    $n = $n + $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpd42myajm.php on line 61\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n / 1000;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n / 1;\n    $n = $n % 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    $result = \"x\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpsdvdz9fz.php on line 16\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpsdvdz9fz.php:23\nStack trace:\n#0 /tmp/tmpsdvdz9fz.php(36): int_to_mini_roman(19)\n#1 /tmp/tmpsdvdz9fz.php(40): candidate(19)\n#2 /tmp/tmpsdvdz9fz.php(56): test()\n#3 {main}\n  thrown in /tmp/tmpsdvdz9fz.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        $m = $n % 10;\n        if ($m == 4 || $m == 9) {\n            $roman_numeral = $roman_numeral + \"cd\";\n            $n = $n / 10;\n        } else if ($m == 5) {\n            $roman_numeral = $roman_numeral + \"xc\";\n            $n = $n / 10;\n        } else if ($m == 6) {\n            $roman_numeral = $roman_numeral + \"xd\";\n            $n = $n / 10;\n        } else if ($m == 7) {\n            $roman_numeral = $roman_numeral + \"xl\";\n            $n = $n / 10;\n        } else if ($m == 8) {\n            $roman_numeral = $roman_numeral + \"x\";\n            $n = $n / 10;\n        } else if ($m == 1) {\n            $roman_numeral = $roman_numeral + \"x\";\n            $n = $n / 10;\n        } else {\n            $roman_numeral = $roman_numeral + $i;\n            $n = $n - $m;\n            $i++;\n        }\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp45piru82.php:19\nStack trace:\n#0 /tmp/tmp45piru82.php(46): int_to_mini_roman(19)\n#1 /tmp/tmp45piru82.php(50): candidate(19)\n#2 /tmp/tmp45piru82.php(66): test()\n#3 {main}\n  thrown in /tmp/tmp45piru82.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $digit = $number % 10;\n        if($digit == 9 || $digit == 4 || $digit == 5) {\n            $result = \"m\" + $result;\n        } else if($digit == 8) {\n            $result = \"c\" + $result;\n        } else if($digit == 6) {\n            $result = \"d\" + $result;\n        } else if($digit == 3) {\n            $result = \"c\" + $result;\n        } else if($digit == 2) {\n            $result = \"x\" + $result;\n        } else if($digit == 1) {\n            $result = \"i\" + $result;\n        } else {\n            $result = \"v\" + $result;\n        }\n        $number = floor($number / 10);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp0q8aakfa.php:18\nStack trace:\n#0 /tmp/tmp0q8aakfa.php(39): int_to_mini_roman(19)\n#1 /tmp/tmp0q8aakfa.php(43): candidate(19)\n#2 /tmp/tmp0q8aakfa.php(59): test()\n#3 {main}\n  thrown in /tmp/tmp0q8aakfa.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 1;\n    while ($i <= $number) {\n        $roman_numeral = int_to_roman($i);\n        $result = $roman_numeral + $result;\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmp0yrkvyqz.php:16\nStack trace:\n#0 /tmp/tmp0yrkvyqz.php(24): int_to_mini_roman(19)\n#1 /tmp/tmp0yrkvyqz.php(28): candidate(19)\n#2 /tmp/tmp0yrkvyqz.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp0yrkvyqz.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $n = $number;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpvxj6e929.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpvxj6e929.php:21\nStack trace:\n#0 /tmp/tmpvxj6e929.php(44): int_to_mini_roman(19)\n#1 /tmp/tmpvxj6e929.php(48): candidate(19)\n#2 /tmp/tmpvxj6e929.php(64): test()\n#3 {main}\n  thrown in /tmp/tmpvxj6e929.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $i = 0;\n    while($number > 0) {\n        $i = $number % 10;\n        $roman_numeral = $roman_numeral . $roman_numeral_map[$i];\n        $number = $number / 10;\n    }\n    return $roman_numeral;\n}\n\n$roman_numeral_map = {\n    1: \"i\",\n    2: \"ii\",\n    3: \"iii\",\n    4: \"iv\",\n    5: \"v\",\n    6: \"vi\",\n    7: \"vii\",\n    8: \"viii\",\n    9: \"ix\",\n    10: \"x\",\n    11: \"xi\",\n    12: \"xii\",\n    13: \"xiii\",\n    14: \"xiv\",\n    15: \"xv\",\n    16: \"xvi\",\n    17: \"xvii\",\n    18: \"xviii\",\n    19: \"xix\",\n    20: \"xx\",\n    30: \"xxx\",\n    40: \"xl\",\n    50: \"l\",\n    60: \"lx\",\n    70: \"lxx\",\n    80: \"lxxx\",\n    90: \"lxxxx\",\n    100: \"xc\",\n    200: \"cc\",\n    300: \"ccc\",\n    400: \"cd\",\n    500: \"d\",\n    600: \"dxc\",\n    700: \"dcc\",\n    800: \"dccc\",\n    900: \"cm\",\n    1000: \"m\"\n};\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected token \"{\" in /tmp/tmpio8xv7r4.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n == 9) {\n        $result = \"ix\";\n    } else if ($n == 4) {\n        $result = \"iv\";\n    } else if ($n == 5) {\n        $result = \"v\";\n    } else if ($n == 6) {\n        $result = \"vi\";\n    } else if ($n == 7) {\n        $result = \"vii\";\n    } else if ($n == 8) {\n        $result = \"viii\";\n    } else if ($n == 1) {\n        $result = \"i\";\n    } else if ($n == 2) {\n        $result = \"ii\";\n    } else if ($n == 3) {\n        $result = \"iii\";\n    } else if ($n == 0) {\n        $result = \"\";\n    } else {\n        $result = \"\";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmplefb58bq.php on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplefb58bq.php:51\nStack trace:\n#0 /tmp/tmplefb58bq.php(67): test()\n#1 {main}\n  thrown in /tmp/tmplefb58bq.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i * 10;\n        $result = $result + $roman_numerals[$n] + $i;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    \"\",\n    \"i\",\n    \"ii\",\n    \"iii\",\n    \"iv\",\n    \"v\",\n    \"vi\",\n    \"vii\",\n    \"viii\",\n    \"ix\",\n    \"x\",\n    \"xi\",\n    \"xii\",\n    \"xiii\",\n    \"xiv\",\n    \"xv\",\n    \"xvi\",\n    \"xvii\",\n    \"xviii\",\n    \"xix\",\n    \"xx\",\n    \"xxi\",\n    \"xxii\",\n    \"xxiii\",\n    \"xxiv\",\n    \"xxv\",\n    \"xxvi\",\n    \"xxvii\",\n    \"xxviii\",\n    \"xxix\",\n    \"xxx\",\n    \"xxxi\",\n    \"xxxii\",\n    \"xxxiii\",\n    \"xxxiv\",\n    \"xxxv\",\n    \"xxxvi\",\n    \"xxxvii\",\n    \"xxxviii\",\n    \"xxxix\",\n    \"xxxx\",\n    \"xxxxi\",\n    \"xxxxii\",\n    \"xxxxiii\",\n    \"xxxxiv\",\n    \"xxxxv\",\n    \"xxxxvi\",\n    \"xxxxvii\",\n    \"xxxxviii\",\n    \"xxxxix\",\n    \"xxxxx\",\n    \"xxxxxi\",\n    \"xxxxxii\",\n    \"xxxxxiii\",\n    \"xxxxxiv\",\n    \"xxxxxv\",\n    \"xxxxxvi\",\n    \"xxxxxvii\",\n    \"xxxxxviii\",\n    \"xxxxxix\",\n    \"xxxxxx\",\n    \"xxxxxxi\",\n    \"xxxxxxii\",\n    \"xxxxxxiii\",\n    \"xxxxxxiv\",\n    \"xxxxxxv\",\n    \"xxxxxxvi\",\n    \"xxxxxxvii\",\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmps5ntbmiq.php on line 93\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    if ($n == 9) {\n        $result = \"ix\";\n    } else if ($n == 4) {\n        $result = \"iv\";\n    } else if ($n == 5) {\n        $result = \"v\";\n    } else if ($n == 6) {\n        $result = \"vi\";\n    } else if ($n == 7) {\n        $result = \"vii\";\n    } else if ($n == 8) {\n        $result = \"viii\";\n    } else if ($n == 1) {\n        $result = \"i\";\n    } else if ($n == 2) {\n        $result = \"ii\";\n    } else if ($n == 3) {\n        $result = \"iii\";\n    } else if ($n == 0) {\n        $result = \"\";\n    } else if ($n == 11) {\n        $result = \"x\";\n    } else if ($n == 12) {\n        $result = \"xx\";\n    } else if ($n == 13) {\n        $result = \"xxx\";\n    } else if ($n == 14) {\n        $result = \"l\";\n    } else if ($n == 15) {\n        $result = \"lx\";\n    } else if ($n == 16) {\n        $result = \"lxx\";\n    } else if ($n == 17) {\n        $result = \"lxxx\";\n    } else if ($n == 18) {\n        $result = \"xc\";\n    } else if ($n == 19) {\n        $result = \"cx\";\n    } else if ($n == 20) {\n        $result = \"cc\";\n    } else if ($n == 21) {\n        $result = \"ccx\";\n    } else if ($n == 22) {\n        $result = \"ccc\";\n    } else if ($n == 23) {\n        $result = \"cccc\";\n    } else if\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpvw2ej1p9.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $result = $n + $result;\n    $result = \"m\" + $result;\n    $result = \"c\" + $result;\n    $result = \"d\" + $result;\n    $result = \"x\" + $result;\n    $result = \"l\" + $result;\n    $result = \"v\" + $result;\n    $result = \"i\" + $result;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292590,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpk09acctc.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: int + string in /tmp/tmpk09acctc.php:21\nStack trace:\n#0 /tmp/tmpk09acctc.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpk09acctc.php(37): candidate(19)\n#2 /tmp/tmpk09acctc.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpk09acctc.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while ($n > 0) {\n        $n -= 1;\n        $i += 1;\n        if ($n >= 1000) {\n            $result += \"m\";\n            $n -= 1000;\n        }\n        if ($n >= 900) {\n            $result += \"cm\";\n            $n -= 900;\n        }\n        if ($n >= 500) {\n            $result += \"d\";\n            $n -= 500;\n        }\n        if ($n >= 400) {\n            $result += \"cd\";\n            $n -= 400;\n        }\n        if ($n >= 100) {\n            $result += \"c\";\n            $n -= 100;\n        }\n        if ($n >= 90) {\n            $result += \"xc\";\n            $n -= 90;\n        }\n        if ($n >= 50) {\n            $result += \"l\";\n            $n -= 50;\n        }\n        if ($n >= 40) {\n            $result += \"xl\";\n            $n -= 40;\n        }\n        if ($n >= 10) {\n            $result += \"x\";\n            $n -= 10;\n        }\n        if ($n >= 9) {\n            $result += \"ix\";\n            $n -= 9;\n        }\n        if ($n >= 5) {\n            $result += \"v\";\n            $n -= 5;\n        }\n        if ($n >= 4) {\n            $result += \"iv\";\n            $n -= 4;\n        }\n        if ($n >= 1) {\n            $result += \"i\";\n            $n -= 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7pui4ono.php:52\nStack trace:\n#0 /tmp/tmp7pui4ono.php(76): int_to_mini_roman(19)\n#1 /tmp/tmp7pui4ono.php(80): candidate(19)\n#2 /tmp/tmp7pui4ono.php(96): test()\n#3 {main}\n  thrown in /tmp/tmp7pui4ono.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= $i;\n        $i = $i + 1;\n        $result = $result + $roman_numerals[$i];\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    'I' => 1,\n    'V' => 5,\n    'X' => 10,\n    'L' => 50,\n    'C' => 100,\n    'D' => 500,\n    'M' => 1000\n);\n\n$n = 19;\necho int_to_mini_roman($n);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmp4ptpxxot.php on line 19\n\nWarning: Trying to access array offset on value of type null in /tmp/tmp4ptpxxot.php on line 19\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmp4ptpxxot.php:19\nStack trace:\n#0 /tmp/tmp4ptpxxot.php(35): int_to_mini_roman(19)\n#1 {main}\n  thrown in /tmp/tmp4ptpxxot.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 0;\n    while($n > 0) {\n        $n -= 1;\n        $i += 1;\n        if($n >= 1000) {\n            $result = $result + \"m\" + int_to_roman($i);\n            $n -= 1000;\n        } else if($n >= 900) {\n            $result = $result + \"cm\" + int_to_roman($i);\n            $n -= 900;\n        } else if($n >= 500) {\n            $result = $result + \"d\" + int_to_roman($i);\n            $n -= 500;\n        } else if($n >= 400) {\n            $result = $result + \"cd\" + int_to_roman($i);\n            $n -= 400;\n        } else if($n >= 100) {\n            $result = $result + \"c\" + int_to_roman($i);\n            $n -= 100;\n        } else if($n >= 90) {\n            $result = $result + \"xc\" + int_to_roman($i);\n            $n -= 90;\n        } else if($n >= 50) {\n            $result = $result + \"l\" + int_to_roman($i);\n            $n -= 50;\n        } else if($n >= 40) {\n            $result = $result + \"xl\" + int_to_roman($i);\n            $n -= 40;\n        } else if($n >= 10) {\n            $result = $result + \"x\" + int_to_roman($i);\n            $n -= 10;\n        } else if($n >= 9) {\n            $result = $result + \"ix\" + int_to_roman($i);\n            $n -= 9;\n        } else if($n >= 5) {\n            $result = $result + \"v\" + int_to_roman($i);\n            $n -= 5;\n        } else if($n >= 4) {\n            $result = $result + \"iv\" + int_to_roman($i);\n            $n -= 4;\n        } else if($n >= 1) {\n            \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nParse error: Unclosed '{' on line 55 in /tmp/tmp3wpan25p.php on line 78\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while ($number > 0) {\n        $digit = $number % 10;\n        if ($digit == 9) {\n            $result = \"ix\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 4) {\n            $result = \"iv\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 5) {\n            $result = \"v\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 6) {\n            $result = \"vi\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 7) {\n            $result = \"vii\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 8) {\n            $result = \"viii\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 1) {\n            $result = \"i\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 2) {\n            $result = \"ii\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 3) {\n            $result = \"iii\" + $result;\n            $number = $number / 10;\n            $i = $i + 1;\n        } else if ($digit == 0) {\n            $result = \"\";\n            $number = $number / 10;\n            $i = $i + 1;\n        } else {\n            $result = \"\";\n            $number = $number / 10;\n            $i = $i + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp85jyr9se.php:18\nStack trace:\n#0 /tmp/tmp85jyr9se.php(67): int_to_mini_roman(19)\n#1 /tmp/tmp85jyr9se.php(71): candidate(19)\n#2 /tmp/tmp85jyr9se.php(87): test()\n#3 {main}\n  thrown in /tmp/tmp85jyr9se.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    for($i = 1; $i <= $number; $i++) {\n        if($i < 4 || $i % 4 == 0) {\n            $result += \"i\";\n        } else if($i < 9 || $i % 9 == 0) {\n            $result += \"v\";\n        } else if($i < 40 || $i % 40 == 0) {\n            $result += \"x\";\n        } else if($i < 90 || $i % 90 == 0) {\n            $result += \"l\";\n        } else if($i < 400 || $i % 400 == 0) {\n            $result += \"c\";\n        } else {\n            $result += \"d\";\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmpd9sxy3k7.php:16\nStack trace:\n#0 /tmp/tmpd9sxy3k7.php(33): int_to_mini_roman(19)\n#1 /tmp/tmpd9sxy3k7.php(37): candidate(19)\n#2 /tmp/tmpd9sxy3k7.php(53): test()\n#3 {main}\n  thrown in /tmp/tmpd9sxy3k7.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    $n = $number;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 1;\n    $roman = $roman + $n;\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp9w3pmwp5.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + int in /tmp/tmp9w3pmwp5.php:21\nStack trace:\n#0 /tmp/tmp9w3pmwp5.php(47): int_to_mini_roman(19)\n#1 /tmp/tmp9w3pmwp5.php(51): candidate(19)\n#2 /tmp/tmp9w3pmwp5.php(67): test()\n#3 {main}\n  thrown in /tmp/tmp9w3pmwp5.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $i = 0;\n    while($number > 0) {\n        $i = $number % 10;\n        $result = $result + $roman_numerals[$i];\n        $number = $number / 10;\n    }\n    return $result;\n}\n\n$roman_numerals = array(\n    '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'\n);\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numerals in /tmp/tmpy4izfhui.php on line 17\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpy4izfhui.php on line 17\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpy4izfhui.php:17\nStack trace:\n#0 /tmp/tmpy4izfhui.php(28): int_to_mini_roman(19)\n#1 /tmp/tmpy4izfhui.php(32): candidate(19)\n#2 /tmp/tmpy4izfhui.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpy4izfhui.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $roman_numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    for ($i = 0; $i < $number; $i++) {\n        $result += $roman_numerals[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined array key 0 in /tmp/tmpicfuhfyr.php on line 30\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpicfuhfyr.php:30\nStack trace:\n#0 /tmp/tmpicfuhfyr.php(36): int_to_mini_roman(19)\n#1 /tmp/tmpicfuhfyr.php(40): candidate(19)\n#2 /tmp/tmpicfuhfyr.php(56): test()\n#3 {main}\n  thrown in /tmp/tmpicfuhfyr.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $n = $n % 1000;\n    $n = $n / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 48;\n    $result = $result . chr($n);\n    $n = $number / 100;\n    $n = $n % 100;\n    $n = $n / 10;\n    $n = $n % 10;\n    $n = $n + 48;\n    $result = $result . chr($n);\n    $n = $number / 10;\n    $n = $n % 10;\n    $n = $n + 48;\n    $result = $result . chr($n);\n    $n = $number % 10;\n    $n = $n + 48;\n    $result = $result . chr($n);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpuz5jd0xk.php on line 17\n\nDeprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpuz5jd0xk.php on line 23\n\nDeprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpuz5jd0xk.php on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuz5jd0xk.php:43\nStack trace:\n#0 /tmp/tmpuz5jd0xk.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpuz5jd0xk.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n    $n = $number;\n    $i = 1;\n    while ($n > 0) {\n        if ($n >= $i) {\n            $result = $result + \"x\" + $i;\n            $n -= $i;\n        } else {\n            $result = $result + $i;\n            $n -= $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught TypeError: Unsupported operand types: string + string in /tmp/tmp7eohlupe.php:18\nStack trace:\n#0 /tmp/tmp7eohlupe.php(30): int_to_mini_roman(19)\n#1 /tmp/tmp7eohlupe.php(34): candidate(19)\n#2 /tmp/tmp7eohlupe.php(50): test()\n#3 {main}\n  thrown in /tmp/tmp7eohlupe.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $i = 1;\n    while($i <= $number) {\n        $roman = $roman + int_to_roman($i);\n        $i++;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int_to_roman() in /tmp/tmpl5pmg3ry.php:16\nStack trace:\n#0 /tmp/tmpl5pmg3ry.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpl5pmg3ry.php(27): candidate(19)\n#2 /tmp/tmpl5pmg3ry.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpl5pmg3ry.php on line 16\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numeral = \"\";\n    $n = $number;\n    $i = 1;\n    while($n > 0) {\n        $n -= $i;\n        $roman_numeral += $roman_numeral_table[$i];\n        $i += $i;\n    }\n    return $roman_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nWarning: Undefined variable $roman_numeral_table in /tmp/tmpg9of12x1.php on line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpg9of12x1.php on line 18\n\nFatal error: Uncaught TypeError: Unsupported operand types: string + null in /tmp/tmpg9of12x1.php:18\nStack trace:\n#0 /tmp/tmpg9of12x1.php(25): int_to_mini_roman(19)\n#1 /tmp/tmpg9of12x1.php(29): candidate(19)\n#2 /tmp/tmpg9of12x1.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpg9of12x1.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix'\n    );\n    $result = '';\n    for ($i = 0; $i < $number; $i++) {\n        $result = $roman_numerals[$i] . $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jh8rbv0.php:47\nStack trace:\n#0 /tmp/tmp3jh8rbv0.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp3jh8rbv0.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}