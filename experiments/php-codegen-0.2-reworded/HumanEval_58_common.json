{
  "name": "HumanEval_58_common",
  "language": "php",
  "prompt": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n",
  "tests": "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "completions": [
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l2);\n    $l",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_uniq($l1);\n\treturn $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n\treturn $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1, array_flip($l1));\n    $l1 = array_intersect_ukey($l1, array_flip($l1));\n    $l1 = array_intersect_key($l1,",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return array_diff($l1, $l1);\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $result = array();\n    $i = 0;\n    while ($i < min($l1.length, $l2.length)) {\n        if ($l1[$i] == $l2[$i]) {\n            $result[$i] = $l1[$i];\n            $i++;\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, $l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec_as_set_rec_as_set_rec_as_set_rec($l1, $l2);\n    return $l1;\n}\n",
    "\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n\treturn $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip(array_keys($l1)));\n    $l1 = array_diff($l1, array_flip(array_keys($l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l2, $l1)));\n    $l1 = array_diff($l1, array_flip(array_intersect($l1, $l2)));\n    $l1 = array_diff($l1, array_flip(array_",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $l = [];\n    var $i = 0;\n    var $j = 0;\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $l.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $l;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect($l1, array_keys(array_intersect($l1, $l2)));\n\treturn $l1;\n}",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    $l1 = array_intersect($l1, array(''));\n    $l1 = array_intersect($l1, array());\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase_alnum($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_ignorecase_ignorecase_ignorecase_alnum_ignorecase($l1, $l2);\n    $l1 = array_intersect",
    "    $result = array();\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1]) && $l2[$i1] == $l1[$i1]) {\n            $result[] = $i1;\n        }\n    }\n    return $result;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $l = [];\n    var $i = 0;\n    var $j = 0;\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $l.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $l;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    $l1 = $l1.filter(function($i) {\n        return $l2.indexOf($i) !== -1;\n    });\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $result = array();\n    $i = 0;\n    while ($i < $l1.length && $i < $l2.length) {\n        if ($l1[$i] == $l2[$i]) {\n            $result[$i] = $l1[$i];\n            $i++;\n        } else {\n            break;\n        }\n    }\n    return $result;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_intersect($l1, $l2);\n    return array_diff($l1, $l2);\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set($l1, $l2);\n    $l1 = array_intersect_ukey_as_set_rec_as_set_rec($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    return array_flip($l1);\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $result = array();\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1])) {\n            $result[] = $l2[$i1];\n        }\n    }\n    return array_flip($result);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as($l1, $l2);\n    $l1 = array_intersect_ukey_rec_rec_rec_rec_as_rec($l1, $l2);\n    $l1 = array_intersect_ukey_rec_",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_diff($l1, $l2);\n\treturn $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_unique($l1);\n\treturn $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip($l1, $l2);\n    $l1 = array_intersect_ukey_flip",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    return array_flip($l1);\n}",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    return array_flip($l1);\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_sort($l1);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g_h($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_e_f_g_h_i($l1, $l2);\n    $l1 = array_intersect_ukey_as_sorted_s_k_c_d_",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unique($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys($l2));\n    return $l1;\n}\n",
    "    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $i = 0, $j = 0, $c = [];\n    while ($i < $l1.length && $j < $l2.length) {\n        if ($l1[$i] == $l2[$j]) {\n            $c.push($l1[$i]);\n            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $c;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_sort($l1);\n    $l1 = array_unshift($l1, 0);\n    $l1 = array_flip($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys($l2));\n    $l1 = array_intersect($l1, array_keys($l1));\n    return $l1;\n}",
    "\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1 = array_keys($l1);\n\t$l2 = array_keys($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_intersect_key($l1, $l2);\n\t$l1 = array_intersect_ukey($l1, $l2);\n\t$l1 = array_intersect_ukey_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key($l1, $l2);\n\t$l1 = array_intersect_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_key_unique_key_unique_key_unique($l1, $l2);\n\t$l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);",
    "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1, $l2);\n\t$l1 = array_unique($l1);\n\treturn $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_diff($l1, $l2));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    return $l1;\n}\n",
    "\t$result = array();\n\t$i = 0;\n\twhile ($i < $l1.length) {\n\t\tif ($l2.indexOf($l1[$i]) > -1) {\n\t\t\t$result[$i] = $l1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_as($l1, $l2);\n    $l1 = array_intersect_ukey_as_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u_u($l1, $l2);\n    $l1 = array_intersect_ukey_as_u_u_u_u_u_u_u_u_u_u_u",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_intersect($l1, $l1);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_asort($l1, $l2);\n    return array_flip($l1);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff_key($l1, $l2);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l1 = array_diff_key($l1, $l1);\n    $l",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $result = array();\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    foreach($l1 as $i1) {\n        if (isset($l2[$i1])) {\n            $result[] = $l2[$i1];\n        }\n    }\n    return array_flip($result);\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l2));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_keys($l2));\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1",
    "    $l1 = array_sort($l1);\n    $l2 = array_sort($l2);\n    $l1 = array_intersect($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_uniq($l1);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array(0));\n    $l1 = array_intersect($l1, array(''));\n    $l1 = array_intersect($l1, array());\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_keys($l1));\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    return array_flip($l1);\n}\n",
    "    $l1 = $l1 || [];\n    $l2 = $l2 || [];\n    $l1 = $l1.sort();\n    $l2 = $l2.sort();\n    var $i1 = 0, $i2 = 0, $c = [];\n    while ($i1 < $l1.length && $i2 < $l2.length) {\n        if ($l1[$i1] == $l2[$i2]) {\n            $c.push($l1[$i1]);\n            $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else {\n            $i2++;\n        }\n    }\n    return $c;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n    $l1 = array_intersect($l1, array_flip($l1));\n    $l1 = array_intersect($l1, array_flip($l2));\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    return $l1;\n}\n",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_ukey_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique($l1, $l2);\n    $l1 = array_intersect_ukey_unique_key_unique_key_unique_key_unique_key_unique_key_unique_key",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_ukey($l1, $l2);\n    $l1 = array_intersect_key($l1, $l1);\n    $l1 = array_intersect_ukey($l1, $l1);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_intersect_",
    "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, $l1);\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_intersect($l1, array_keys(array_diff($l1, $l2)));\n    return $l1;\n}\n",
    "    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_unshift($l1, \"\");\n    $l2 = array_unshift($l2, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_unshift($l1, \"\");\n    $l1 = array_intersect($l1",
    "    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_keys($l1);\n    $l2 = array_keys($l2);\n    $l1 = array_intersect($l1, $l2);\n    $l1 = array_diff($l1, $l2);\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l1 = array_diff($l1, array_flip($l1));\n    $l"
  ],
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ]
}