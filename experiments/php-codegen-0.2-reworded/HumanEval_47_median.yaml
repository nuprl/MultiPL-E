name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the array l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($l);\n    if ($n == 0) {\n        return null;\n   \
    \ }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 =\
    \ $m1 < 0 ? 0 : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n\
    \    $m2 = $l[$m2];\n    if ($m1 > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n\
    \        $m2 = $t;\n    }\n    $m = ($m1 + $m2) / 2.0;\n    if ($n % 2 == 0) {\n\
    \        return $m;\n    }\n    return $m;\n}\n", "    if (is_array($l)) {\n \
    \       $l = array_values($l);\n    }\n    if (count($l) == 0) {\n        return\
    \ null;\n    }\n    $l = array_sort($l);\n    if (count($l) % 2 == 1) {\n    \
    \    return $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2\
    \ - 1] + $l[count($l) / 2]) / 2;\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m\
    \ - 1;\n    $m2 = $m + 1;\n    $a = array();\n    $a[0] = $l[0];\n    $a[$m1]\
    \ = $l[$m1];\n    $a[$m2] = $l[$m2];\n    $a[$n] = $l[$n];\n    $n = count($a);\n\
    \    $n1 = floor($n / 2);\n    $n2 = $n - $n1;\n    $n3 = $n1 + 1;\n    $n4 =\
    \ $n2 + 1;\n    $n5 = $n3 + 1;\n    $n6 = $n4 + 1;\n    $n7 = $n5 + 1;\n    $n8\
    \ = $n6 + 1;\n    $n9 = $n7 + 1;\n    $n10 = $n8 + 1;\n    $n11 = $n9 + 1;\n \
    \   $n12 = $n10 + 1;\n    $n13 = $n11 + 1;\n    $n14 = $n12 + 1;\n    $n15 = $n13\
    \ + 1;\n    $n16 = $n14 + 1;\n    $n17 = $n15 + 1;\n    $n18 = $n16 + 1;\n   \
    \ $n19 = $n17 + 1;\n    $n20 = $n18 + 1;\n    $n21 = $n19 + 1;\n    $n22 = $n20\
    \ + 1;\n    $n23 = $n21 + 1;\n    $n24 = $n22 + 1;\n    $n25 = $n23 + 1;\n   \
    \ $n26 = $n24 + 1;\n    $n27 = $n25 + 1;\n    $n28 = $n26 + 1;\n    $n29 = $n27\
    \ + 1;\n    $n30 = $n28 + 1;\n    $n31 = $n29 + 1;\n    $", "    if ($l.length\
    \ == 0) {\n        return null;\n    }\n    var l = $l.sort(function(a, b) {\n\
    \        return a - b;\n    });\n    var half = Math.floor(l.length / 2);\n  \
    \  if (l.length % 2 == 1) {\n        return l[half];\n    } else {\n        return\
    \ (l[half-1] + l[half]) / 2.0;\n    }\n}\n", "    $n = count($l);\n    $m = $n\
    \ / 2;\n    $m = floor($m);\n    $m = $m + ($n % 2);\n    $m = $l[$m];\n    return\
    \ $m;\n}\n", "    $l = array_flip($l);\n    $n = count($l);\n    if ($n == 0)\
    \ {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n\
    \    $m2 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($n % 2 ==\
    \ 0) {\n        return ($l1 + $l2) / 2.0;\n    }\n    return $l1;\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n\
    \    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $a = array($l[$m1], $l[$m2]);\n \
    \   $b = array_sort($a);\n    $c = $b[floor($b.length / 2)];\n    return $c;\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n\
    \    $m = $n / 2;\n    $m1 = floor($m);\n    $m2 = ceil($m);\n    $m1 = $l[$m1];\n\
    \    $m2 = $l[$m2];\n    if ($m1 == $m2) {\n        return $m1;\n    }\n    return\
    \ (($m1 + $m2) / 2.0);\n}\n", "    $n = $l.length;\n    if ($n == 0) {\n     \
    \   return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n  \
    \  $m = floor($n / 2);\n    $l1 = $l[0:$m];\n    $l2 = $l[$m:$n];\n    $m1 = median($l1);\n\
    \    $m2 = median($l2);\n    if ($m1 > $m2) {\n        return $m1;\n    }\n  \
    \  return $m2;\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 ==\
    \ 0) {\n        return (round($l[$m - 1] + $l[$m]) / 2);\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l", "    $l = array_flip($l);\n    $l =\
    \ array_sort($l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n\
    \    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    $m = floor($n / 2);\n    $p = $n % 2;\n    $m1 = $m - 1;\n\
    \    $m2 = $m;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($p == 0) {\n \
    \       return $l1;\n    } else {\n        return ($l1 + $l2) / 2.0;\n    }\n\
    }\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n    }\n    $l =\
    \ array_flip($l);\n    $l = array_sort($l);\n    if (count($l) % 2 == 0) {\n \
    \       return (count($l) / 2) - 1;\n    } else {\n        return count($l) /\
    \ 2;\n    }\n}\n", "    if (!is_array($l)) {\n        return null;\n    }\n  \
    \  $l = array_flip($l);\n    $l = array_sort($l);\n    if (count($l) % 2 == 0)\
    \ {\n        return (float) array_get_median($l);\n    } else {\n        return\
    \ (float) array_get_median($l);\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return null;\n    }\n    $m = $n / 2;\n    $m = floor($m);\n\
    \    $m = $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    }\n    return\
    \ $m + ($m - $l[$m - 1]);\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    $p\
    \ = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v\
    \ = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b\
    \ = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h\
    \ = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = array_values($l);\n  \
    \  $m = count($l);\n    $n = $m / 2;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n\
    \    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n\
    \    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n\
    \    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $l = array_values($l);\n    $m = count($l);\n    $n = $m / 2;\n\
    \    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n\
    \    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n\
    \    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ $n / 2;\n    $m1 = floor($m);\n    $m2 = ceil($m);\n    $m1 = $l[$m1];\n   \
    \ $m2 = $l[$m2];\n    if ($m1 == $m2) {\n        return $m1;\n    }\n    return\
    \ (($m1 + $m2) / 2);\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n    $m\
    \ = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n\
    \        return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n\
    \    }\n    $a = array();\n    $a[0] = $l[0];\n    $a[1] = $l[$m1];\n    $a[2]\
    \ = $l[$m2];\n    $a[3] = $l[$n - 1];\n    $s = 0;\n    for ($i = 0; $i < 4; $i++)\
    \ {\n        $s += $a[$i];\n    }\n    $s /= 4;\n    $s = floor($s);\n    if ($s\
    \ == 0) {\n        return $a[1];\n    }\n    if ($s == 1) {\n        return $a[2];\n\
    \    }\n    return $a[1] + ($a[2] - $a[1]) * (1 - $s);\n}\n", "    if ($l.length\
    \ == 0) {\n        return null;\n    }\n    if ($l.length == 1) {\n        return\
    \ $l[0];\n    }\n    var sorted = $l.sort();\n    var middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2.0;\n    }\n    return sorted[middle];\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    $a = array();\n    $a[0] = $l[0];\n \
    \   $a[1] = $l[$m1];\n    $a[2] = $l[$m2];\n    $a[3] = $l[$n - 1];\n    $a[4]\
    \ = $l[$n];\n    $a[5] = $l[$n + 1];\n    $a[6] = $l[$n + 2];\n    $a[7] = $l[$n\
    \ + 3];\n    $a[8] = $l[$n + 4];\n    $a[9] = $l[$n + 5];\n    $a[10] = $l[$n\
    \ + 6];\n    $a[11] = $l[$n + 7];\n    $a[12] = $l[$n + 8];\n    $a[13] = $l[$n\
    \ + 9];\n    $a[14] = $l[$n + 10];\n    $a[15] = $l[$n + 11];\n    $a[16] = $l[$n\
    \ + 12];\n    $a[17] = $l[$n + 13];\n    $a[18] = $l[$n + 14];\n    $a[19] = $l[$n\
    \ + 15];\n    $a[20] = $l[$n + 16];\n    $a[21] = $l[$n + 17];\n    $a[22] = $l[$n\
    \ + 18];\n    $a[23] = $l[$n + 19];\n    $a[24] = $l[$n + 20];\n    $a[25] = $l[$n\
    \ + 21];\n    $a[26] = $l[$n + 22];\n    $a[27] = $l[$n + 23];\n    $a[28", " \
    \   $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n    }\n    $l = array_flip($l);\n    $l = array_sort($l);\n\
    \    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    ", "    if (is_array($l)) {\n        $l = array_flip($l);\n    }\n\
    \    $l = array_flip($l);\n    $l = array_sort($l);\n    if (count($l) % 2 ==\
    \ 1) {\n        return $l[count($l) / 2];\n    } else {\n        return ($l[count($l)\
    \ / 2 - 1] + $l[count($l) / 2]) / 2;\n    }\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_values($l);\n    }\n    if (count($l) == 0) {\n        return\
    \ null;\n    }\n    $l = array_sort($l);\n    if (count($l) % 2 == 1) {\n    \
    \    return $l[count($l) / 2];\n    } else {\n        $m = $l[count($l) / 2 -\
    \ 1];\n        $m += $l[count($l) / 2];\n        return $m / 2;\n    }\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n \
    \       return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n\
    \    }\n    $a = array();\n    $a[0] = $l[0];\n    $a[1] = $l[$m1];\n    $a[2]\
    \ = $l[$m2];\n    $a[3] = $l[$n - 1];\n    $s = 0;\n    for ($i = 0; $i < 4; $i++)\
    \ {\n        $s += $a[$i];\n    }\n    $s /= 4;\n    $s = floor($s);\n    if ($s\
    \ == $m1 || $s == $m2) {\n        return $s;\n    }\n    if ($s < $m1) {\n   \
    \     return $a[0];\n    }\n    if ($s > $m2) {\n        return $a[3];\n    }\n\
    \    $s1 = $m1 - $s;\n    $s2 = $m2 - $s;\n    $s3 = $s - $m1;\n    $s4 = $s -\
    \ $m2;\n    $s5 = $m1 - $m2;\n    $s6 = $m2 - $m1;\n    $s7 = $m1 - $m2;\n   \
    \ $s8 = $m2 - $m1;\n    $s9 = $m1 - $m2;\n    $s10 = $m2 - $m1;\n    $s11 = $m1\
    \ - $m2;\n    $s12 = $m2 - $m1;\n    $s13 = $m1 - $m2;\n    $s14 = $m2 - $m1;\n\
    \    $s15 = $m1 - $m2;\n    $s16 = $m2 -", "    $n = sizeof($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    $m = $n / 2;\n    $m = floor($m);\n \
    \   $m = $l[$m];\n    if ($n % 2 == 1) {\n        return $m;\n    }\n    $m1 =\
    \ $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2 > $n\
    \ - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    $m = ($m1 +\
    \ $m2) / 2.0;\n    return $m;\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    $m = floor($n / 2);\n    $p = array_copy($l);\n\
    \    sort($p);\n    if ($n % 2 == 1) {\n        return $p[$m];\n    }\n    return\
    \ (float)($p[$m] + $p[$m - 1]) / 2.0;\n}\n", "    if (is_array($l)) {\n      \
    \  $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l) %\
    \ 2 == 1) {\n            return $l[count($l) / 2];\n        } else {\n       \
    \     return (float)($l[count($l) / 2 - 1] + $l[count($l) / 2]) / 2;\n       \
    \ }\n    } else {\n        return 0;\n    }\n}\n", "    $n = count($l);\n    $m\
    \ = $n / 2;\n    $p = array_fill(0, $m, 0);\n    $q = array_fill(0, $m, 0);\n\
    \    $r = array_fill(0, $m, 0);\n    $s = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $s += $l[$i];\n        $p[$i] = $s / $m;\n    }\n    $s = 0;\n  \
    \  for ($i = $n - 1; $i >= 0; $i--) {\n        $s += $l[$i];\n        $q[$i] =\
    \ $s / $m;\n    }\n    $s = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s\
    \ += abs($p[$i] - $q[$i]);\n        $r[$i] = $s;\n    }\n    $m = array_fill(0,\
    \ $m, 0);\n    $s = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s += $r[$i];\n\
    \        $m[$i] = $s / $m;\n    }\n    return $m[$m - 1];\n}\n", "    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(", "    $n = count($l);\n    $m = 0;\n    $p =\
    \ 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v\
    \ = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b\
    \ = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h\
    \ = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n\
    \ = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t\
    \ = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z\
    \ = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f\
    \ = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l\
    \ = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r\
    \ = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x\
    \ = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d\
    \ = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;", "    $n = count($l);\n\
    \    $m = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n\
    \    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n\
    \    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n\
    \    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n\
    \    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n\
    \    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n\
    \    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n\
    \    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n\
    \    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n\
    \    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n\
    \    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n \
    \   $l2 = $l[$m2];\n    if ($n % 2 == 0) {\n        return ($l1 + $l2) / 2.0;\n\
    \    }\n    return $l1;\n}\n", "    $l = array_flip($l);\n    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 =\
    \ $m;\n    $m3 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    $l3 = $l[$m3];\n\
    \    if ($l1 < $l2) {\n        if ($l2 < $l3) {\n            return $l2;\n   \
    \     } else if ($l1 < $l3) {\n            return $l3;\n        } else {\n   \
    \         return $l1;\n        }\n    } else if ($l1 > $l2) {\n        if ($l1\
    \ < $l3) {\n            return $l1;\n        } else if ($l2 < $l3) {\n       \
    \     return $l3;\n        } else {\n            return $l2;\n        }\n    }\
    \ else {\n        return $l1;\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = floor($m\
    \ / 2);\n    $m2 = $m - $m1;\n    if ($m % 2 == 0) {\n        return ($l[$m1]\
    \ + $l[$m2]) / 2;\n    } else {\n        return $l[$m1];\n    }\n}\n", "    $l\
    \ = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l, 0);\n\
    \    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);", "    $l = array_flip($l);\n    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = floor($n / 2);\n    $m1 = floor($m - 1);\n  \
    \  $m2 = floor($m);\n    $m3 = floor($m + 1);\n    $a1 = $l[$m1];\n    $a2 = $l[$m2];\n\
    \    $a3 = $l[$m3];\n    if ($a1 > $a2) {\n        $t = $a1;\n        $a1 = $a2;\n\
    \        $a2 = $t;\n    }\n    if ($a2 > $a3) {\n        $t = $a2;\n        $a2\
    \ = $a3;\n        $a3 = $t;\n    }\n    if ($a1 > $a2) {\n        $t = $a1;\n\
    \        $a1 = $a2;\n        $a2 = $t;\n    }\n    $m = $a2;\n    if ($a3 > $a2)\
    \ {\n        $m = $a3;\n    }\n    return $m;\n}\n", "    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(", "    $n = count($l);\n    if ($n == 0) {\n \
    \       return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n\
    \    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n\
    \    $l2 = $l[$m2];\n    if ($l1 > $l2) {\n        $l1 = $l2;\n        $l2 = $l1;\n\
    \        $m1 = $m2;\n        $m2 = $m1;\n    }\n    $m1 = $l1 + $m2;\n    $m2\
    \ = $l1 - $m2;\n    $m1 = round($m1);\n    $m2 = round($m2);\n    if ($m1 == $m2)\
    \ {\n        return $m1;\n    }\n    $m = $m1 + $m2;\n    $m = round($m);\n  \
    \  return $m;\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n   \
    \ $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    $n\
    \ = count($l);\n    $m = $n / 2;\n    $m = floor($m);\n    $m = $m - 1;\n    $m\
    \ = $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    } else {\n      \
    \  return $m + 0.5 * ($l[$m + 1] - $m);\n    }\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_values($l);\n    }\n    $l = array_sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return (float)($l[count($l) / 2] + $l[count($l) / 2 - 1])\
    \ / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n", "    $l\
    \ = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n\
    \    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2) - 1;\n        } else {\n   \
    \         return count($l) / 2;\n        }\n    } else {\n        return 0;\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = $n / 2;\n    $m = floor($m);\n    $m = $m * 2 - $n;\n    $m =\
    \ $m / 2;\n    $m = $m + $n % 2;\n    return $l[$m];\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n        return $l[0];\n\
    \    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n    }\n    $m1 = $l[$m1];\n\
    \    $m2 = $l[$m2];\n    if ($m1 > $m2) {\n        $tmp = $m1;\n        $m1 =\
    \ $m2;\n        $m2 = $tmp;\n    }\n    $m = $m1 + ($m2 - $m1) / 2.0;\n    return\
    \ $m;\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if\
    \ ($m1 < 0) {\n        $m1 = 0;\n    }\n    if ($m2 > $n - 1) {\n        $m2 =\
    \ $n - 1;\n    }\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    if ($m1 > $m2) {\n\
    \        $t = $m1;\n        $m1 = $m2;\n        $m2 = $t;\n    }\n    $m = $m1\
    \ + $m2;\n    $m /= 2;\n    return $m;\n}\n", "    if (is_array($l)) {\n     \
    \   $l = array_flip($l);\n    }\n    if (empty($l)) {\n        return null;\n\
    \    }\n    $m = array_flip(array_sort($l));\n    if (count($m) % 2) {\n     \
    \   return $m[count($m) / 2];\n    } else {\n        return ($m[count($m) / 2]\
    \ + $m[count($m) / 2 - 1]) / 2;\n    }\n}\n", "    if (is_array($l)) {\n     \
    \   $l = array_flip($l);\n    }\n    if (empty($l)) {\n        return null;\n\
    \    }\n    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0", "    $n = sizeof($l);\n    if ($n == 0)\
    \ {\n        return null;\n    }\n    $m = $n / 2;\n    $m = floor($m);\n    $m\
    \ = $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    }\n    return $m\
    \ + ($m - $l[$m - 1]);\n}\n", "    $n = count($l);\n    if ($n == 0) {\n     \
    \   return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 =\
    \ $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n\
    \    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    if ($m1 > $m2) {\n        $t = $m1;\n\
    \        $m1 = $m2;\n        $m2 = $t;\n    }\n    $m = $m1 + ($m2 - $m1) / 2.0;\n\
    \    return $m;\n}\n", "    $n = $l.length;\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m;\n    $m3 = $m + 1;\n    $m4 = $m + 2;\n\
    \    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    $l3 = $l[$m3];\n    $l4 = $l[$m4];\n\
    \    $l1 = $l1 == null ? 0 : $l1;\n    $l2 = $l2 == null ? 0 : $l2;\n    $l3 =\
    \ $l3 == null ? 0 : $l3;\n    $l4 = $l4 == null ? 0 : $l4;\n    if ($l1 > $l2)\
    \ {\n        $t = $l1;\n        $l1 = $l2;\n        $l2 = $t;\n    }\n    if ($l2\
    \ > $l3) {\n        $t = $l2;\n        $l2 = $l3;\n        $l3 = $t;\n    }\n\
    \    if ($l3 > $l4) {\n        $t = $l3;\n        $l3 = $l4;\n        $l4 = $t;\n\
    \    }\n    if ($l1 > $l2) {\n        $t = $l1;\n        $l1 = $l2;\n        $l2\
    \ = $t;\n    }\n    if ($l2 > $l3) {\n        $t = $l2;\n        $l2 = $l3;\n\
    \        $l3 = $t;\n    }\n    if ($l3 > $l4) {\n        $t = $l3;\n        $l3\
    \ = $l4;\n        $l4 = $t;\n    }\n    if ($l1 > $l2) {\n        $t = $l1;\n\
    \        $l1 = $l2;", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n\
    \    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($n % 2 == 0) {\n        return\
    \ ($l1 + $l2) / 2.0;\n    }\n    return $l1;\n}\n", "    $n = count($l);\n   \
    \ if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n        return\
    \ $l[0];\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n\
    \    $m1_val = $l[$m1];\n    $m2_val = $l[$m2];\n    if ($m1_val > $m2_val) {\n\
    \        $tmp = $m1_val;\n        $m1_val = $m2_val;\n        $m2_val = $tmp;\n\
    \    }\n    return (($m1_val + $m2_val) / 2.0);\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n\
    \    if ($n % 2 == 0) {\n        return (($l1 + $l2) / 2);\n    }\n    return\
    \ $l1;\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n    }\n    if (count($l) == 0) {\n        return\
    \ null;\n    }\n    $m = array_flip(sort($l));\n    if (count($m) % 2 == 1) {\n\
    \        return $m[count($m) / 2];\n    } else {\n        return ($m[count($m)\
    \ / 2] + $m[count($m) / 2 - 1]) / 2.0;\n    }\n}\n", "    $n = $l.length;\n  \
    \  if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n        return\
    \ $l[0];\n    }\n    if ($n % 2 == 0) {\n        return (median($l[0:$n/2]) +\
    \ median($l[$n/2:])) / 2.0;\n    }\n    return $l[$n/2];\n}\n", "    $n = $l.length;\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = floor($n / 2);\n    $l1 = $l[0:$m];\n    $l2\
    \ = $l[$m:$n];\n    $m1 = median($l1);\n    $m2 = median($l2);\n    if ($m1 >\
    \ $m2) {\n        return $m1;\n    } else {\n        return $m2;\n    }\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0\
    \ : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n    $m2\
    \ = $l[$m2];\n    if ($m1 > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n  \
    \      $m2 = $t;\n    }\n    $m = $m1 + ($m2 - $m1) / 2.0;\n    return $m;\n}\n",
  "    $n = count($l);\n    $m = $n / 2;\n    $m = floor($m);\n    $m = $l[$m];\n\
    \    if ($n % 2 == 0) {\n        return $m;\n    } else {\n        return $m +\
    \ ($m - $l[$m - 1]);\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        if (count($l) % 2 == 0) {\n           \
    \ return (count($l) / 2) - 1;\n        } else {\n            return count($l)\
    \ / 2;\n        }\n    } else {\n        return 0;\n    }\n}\n", "    if (!$l)\
    \ {\n        return null;\n    }\n    if ($l.length == 1) {\n        return $l[0];\n\
    \    }\n    var $l_sorted = $l.sort();\n    var $l_length = $l_sorted.length;\n\
    \    var $l_middle = $l_length / 2;\n    if ($l_length % 2 == 1) {\n        return\
    \ $l_sorted[$l_middle];\n    } else {\n        return ($l_sorted[$l_middle - 1]\
    \ + $l_sorted[$l_middle]) / 2.0;\n    }\n}\n", "    $l = array_flip($l);\n   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n\
    \    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n\
    \    if ($m1 > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n        $m2 = $t;\n\
    \    }\n    $m = $m1 + ($m2 - $m1) / 2.0;\n    return $m;\n}\n", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n    }\n    if (count($l) == 0) {\n        return\
    \ null;\n    }\n    $l = array_sort($l);\n    if (count($l) % 2 == 1) {\n    \
    \    return $l[count($l) / 2];\n    }\n    $l = array_flip($l);\n    return (float)($l[count($l)\
    \ / 2 - 1] + $l[count($l) / 2]) / 2;\n}\n", "    if (is_array($l)) {\n       \
    \ $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l) %\
    \ 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n   \
    \     } else {\n            return $l[count($l) / 2];\n        }\n    } else {\n\
    \        return 0;\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_values($l);\n\
    \    }\n    if (count($l) == 0) {\n        return null;\n    }\n    $l = array_sort($l);\n\
    \    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    }\n   \
    \ $l = array_values($l);\n    $l = array_sort($l);\n    return ($l[count($l) /\
    \ 2] + $l[count($l) / 2 - 1]) / 2.0;\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n\
    \    }\n    $m = floor($n / 2);\n    $l_s = array_slice($l, 0, $m + 1);\n    $l_e\
    \ = array_slice($l, $m + 1, $n);\n    sort($l_s);\n    sort($l_e);\n    if ($n\
    \ % 2 == 0) {\n        return (float)(($l_s[$m] + $l_e[$m]) / 2);\n    }\n   \
    \ return $l_s[$m];\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    $m = floor($m);\n\
    \    $m = $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    } else {\n\
    \        return $m + ($l[$m + 1] - $l[$m]) / 2;\n    }\n}\n", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n        $l = array_sort($l);\n        $l =\
    \ array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l",
  "    $n = $l.length;\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    if ($n % 2 == 0) {\n        return (min($l[$m - 1], $l[$m])\
    \ + max($l[$m], $l[$m + 1])) / 2.0;\n    }\n    return $l[$m];\n}\n", "    $n\
    \ = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n\
    \    if ($n % 2 == 0) {\n        return (($l1 + $l2) / 2);\n    }\n    return\
    \ $l1;\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if\
    \ ($m1 < 0) {\n        return $l[0];\n    }\n    if ($m2 >= $n) {\n        return\
    \ $l[$n - 1];\n    }\n    $a = array();\n    $a = array_merge($a, $l);\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    ", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = floor($m / 2);\n    $m2 = $m - $m1;\n    $m1 = $l[$m1];\n\
    \    $m2 = $l[$m2];\n    if ($m % 2 == 0) {\n        return ($m1 + $m2) / 2.0;\n\
    \    } else {\n        return $m1;\n    }\n}\n", "    $l = array_flip($l);\n \
    \   $l = array_sort($l);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $", "    if ($l.length == 0) {\n\
    \        return null;\n    }\n    var l = $l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    var middle = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[middle] + l[middle - 1]) / 2.0;\n    } else {\n\
    \        return l[middle];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0)\
    \ {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n\
    \    $m2 = $m + 1;\n    if ($m1 < 0) {\n        return $l[0];\n    }\n    if ($m2\
    \ >= $n) {\n        return $l[$n - 1];\n    }\n    $a = array();\n    $a[0] =\
    \ $l[0];\n    $a[1] = $l[$m1];\n    $a[2] = $l[$m2];\n    $a[3] = $l[$n - 1];\n\
    \    $a[4] = $l[$m];\n    $a[5] = $l[$m1];\n    $a[6] = $l[$m2];\n    $a[7] =\
    \ $l[0];\n    $a[8] = $l[$m1];\n    $a[9] = $l[$m2];\n    $a[10] = $l[$n - 1];\n\
    \    $a[11] = $l[$m];\n    $a[12] = $l[$m1];\n    $a[13] = $l[$m2];\n    $a[14]\
    \ = $l[0];\n    $a[15] = $l[$m];\n    $a[16] = $l[$m1];\n    $a[17] = $l[$m2];\n\
    \    $a[18] = $l[$n - 1];\n    $a[19] = $l[$m];\n    $a[20] = $l[$m1];\n    $a[21]\
    \ = $l[$m2];\n    $a[22] = $l[0];\n    $a[23] = $l[$m];\n    $a[24] = $l[$m1];\n\
    \    $a[25] = $l[$m2];\n    $a[26] = $l[$n - 1];\n    $a[", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n    }\n    $l = array_sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return (float)($l[count($l) / 2 - 1] + $l[count($l) / 2])\
    \ / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n", "    if\
    \ (is_array($l)) {\n        $l = array_flip($l);\n    }\n    if (empty($l)) {\n\
    \        return null;\n    }\n    $l = array_flip($l);\n    $l = array_sort($l,\
    \ function($a, $b) {\n        return $a - $b;\n    });\n    $l = array_flip($l);\n\
    \    if (count($l) % 2 == 0) {\n        return (count($l) / 2) - 1;\n    } else\
    \ {\n        return $l[count($l) / 2];\n    }\n}\n", "    $n = count($l);\n  \
    \  if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $s\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s += $l[$i];\n    }\n    return\
    \ $s / $m;\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n   \
    \ }\n    if (empty($l)) {\n        return null;\n    }\n    $m = array_flip(array_sort($l));\n\
    \    if (count($m) % 2) {\n        return $m[count($m) / 2];\n    } else {\n \
    \       return ($m[count($m) / 2] + $m[count($m) / 2 - 1]) / 2;\n    }\n}\n",
  "    if (is_array($l)) {\n        $l = array_values($l);\n    }\n    $l = array_sort($l);\n\
    \    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    } else\
    \ {\n        return ($l[count($l) / 2 - 1] + $l[count($l) / 2]) / 2.0;\n    }\n\
    }\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    if (count($l) %\
    \ 2 == 1) {\n        return $l[count($l) / 2];\n    } else {\n        return (float)($l[count($l)\
    \ / 2 - 1] + $l[count($l) / 2]) / 2;\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 =\
    \ $m - 1;\n    $m2 = $m + 1;\n    $l1 = array_slice($l, 0, $m1 + 1);\n    $l2\
    \ = array_slice($l, $m1 + 1, $n);\n    if ($n % 2 == 0) {\n        return (float)(($l1[$m1]\
    \ + $l2[$m]) / 2);\n    } else {\n        return $l[$m];\n    }\n}\n", "    $l\
    \ = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n\
    \    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(", "    $n = count($l);\n  \
    \  $m = $n / 2;\n    $m = floor($m);\n    $m = $m - 1;\n    $m = $m * 2;\n   \
    \ $m = $m - 1;\n    $m = $m - $n;\n    $m = $m / 2;\n    $m = $m + 1;\n    $m\
    \ = $m * $n;\n    $m = $m / 2;\n    return $m;\n}\n", "    if (!$l) {\n      \
    \  return null;\n    }\n    if ($l.length == 0) {\n        return null;\n    }\n\
    \    if ($l.length == 1) {\n        return $l[0];\n    }\n    var l = $l.sort();\n\
    \    var mid = Math.floor(l.length / 2);\n    if (l.length % 2 == 1) {\n     \
    \   return l[mid];\n    }\n    return (l[mid] + l[mid - 1]) / 2;\n}\n", "    $n\
    \ = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return (min($l[$m - 1], $l[$m]) + max($l[$m],\
    \ $l[$m + 1])) / 2;\n    }\n    return $l[$m];\n}\n", "    if ($l.length == 0)\
    \ {\n        return null;\n    }\n    var l = $l.sort(function(a, b) {\n     \
    \   return a - b;\n    });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[half] + l[half - 1]) / 2.0;\n    }\n    return\
    \ l[half];\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    $m = floor($m);\n\
    \    $m = $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    } else {\n\
    \        return $m + ($l[$m + 1] - $l[$m]) / 2;\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $s = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s += $l[$i];\n    }\n\
    \    $s = $s / $n;\n    if ($n % 2 == 0) {\n        return $s;\n    } else {\n\
    \        return $s + $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n\
    \    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m;\n    $m3 = $m\
    \ + 1;\n    $a = array();\n    $a[0] = $l[$m1];\n    $a[1] = $l[$m2];\n    $a[2]\
    \ = $l[$m3];\n    sort($a);\n    if ($n % 2 == 0) {\n        return ($a[1] + $a[2])\
    \ / 2.0;\n    }\n    return $a[1];\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 ==\
    \ 0) {\n        return (min($l[$m - 1], $l[$m]) + max($l[$m], $l[$m + 1])) / 2;\n\
    \    } else {\n        return $l[$m];\n    }\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 1) {\n            return $l[count($l) / 2];\n        } else {\n     \
    \       $m = $l[count($l) / 2 - 1];\n            $m += $l[count($l) / 2];\n  \
    \          return $m / 2;\n        }\n    } else {\n        return 0;\n    }\n\
    }\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n        return $l[0];\n\
    \    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n    }\n    $a = array();\n\
    \    $a[0] = $l[0];\n    $a[1] = $l[$m1];\n    $a[2] = $l[$m2];\n    $a[3] = $l[$n\
    \ - 1];\n    $a = array_sort($a);\n    $m = floor(count($a) / 2);\n    return\
    \ $a[$m];\n}\n", "    if (is_array($l)) {\n        $l = array_values($l);\n  \
    \  }\n    if (count($l) == 0) {\n        return null;\n    }\n    $l = array_sort($l);\n\
    \    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    } else\
    \ {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n\
    }\n", "    $n = $l.length;\n    if ($n == 0) {\n        return null;\n    }\n\
    \    if ($n == 1) {\n        return $l[0];\n    }\n    if ($n % 2 == 0) {\n  \
    \      return ( $l[($n / 2) - 1] + $l[$n / 2] ) / 2.0;\n    }\n    return $l[$n\
    \ / 2];\n}\n", "    if (!is_array($l)) {\n        return null;\n    }\n    $l\
    \ = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l, 0);\n\
    \    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift",
  "    $n = $l.length;\n    if ($n == 0) {\n        return null;\n    }\n    if ($n\
    \ == 1) {\n        return $l[0];\n    }\n    $m = floor($n / 2);\n    $m1 = $m\
    \ - 1;\n    $m2 = $m;\n    $m3 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n\
    \    $l3 = $l[$m3];\n    if ($l1 < $l2) {\n        if ($l2 < $l3) {\n        \
    \    return $l2;\n        } else if ($l1 < $l3) {\n            return $l3;\n \
    \       } else {\n            return $l1;\n        }\n    } else if ($l1 > $l2)\
    \ {\n        if ($l1 < $l3) {\n            return $l1;\n        } else if ($l2\
    \ < $l3) {\n            return $l3;\n        } else {\n            return $l2;\n\
    \        }\n    } else {\n        return $l1;\n    }\n}\n", "    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(", "    $n = count($l);\n    if ($n == 0) {\n \
    \       return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2\
    \ = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n\
    \    $a = array();\n    $a = array_merge($a, $l);\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array", "    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n     \
    \   return (float)($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $l = array_flip($l);\n    $n = count($l);\n \
    \   if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n   \
    \ $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2\
    \ > $n - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    if ($m1\
    \ > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n        $m2 = $t;\n    }\n\
    \    $m = $m1 + ($m2 - $m1) / 2.0;\n    return $m;\n}\n", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n \
    \       } else {\n            return $l[count($l) / 2];\n        }\n    }\n  \
    \  return 0;\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1\
    \ = array_slice($l, 0, $m1 + 1);\n    $l2 = array_slice($l, $m1 + 1, $n);\n  \
    \  if ($n % 2 == 0) {\n        return (max($l1) + min($l2)) / 2.0;\n    }\n  \
    \  return max($l1, $l2);\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        if (count($l) % 2 == 0) {\n           \
    \ return (count($l) / 2 - 1) * $l[count($l) / 2];\n        } else {\n        \
    \    return $l[count($l) / 2];\n        }\n    } else {\n        return 0;\n \
    \   }\n}\n", "    $n = $l.length;\n    if ($n == 0) {\n        return null;\n\
    \    }\n    if ($n == 1) {\n        return $l[0];\n    }\n    if ($n % 2 == 0)\
    \ {\n        return (\n            $l[($n / 2) - 1] +\n            $l[($n / 2)]\n\
    \        ) / 2.0;\n    }\n    return $l[($n - 1) / 2];\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  if ($n % 2 == 1) {\n        return $l[$m];\n    }\n    $m = $m - 1;\n    $l1\
    \ = $l[$m];\n    $l2 = $l[$m + 1];\n    return (float)($l1 + $l2) / 2;\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0\
    \ : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $m1 = $l[$m1];\n    $m2\
    \ = $l[$m2];\n    if ($m1 > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n  \
    \      $m2 = $t;\n    }\n    $m = ($m1 + $m2) / 2.0;\n    return $m;\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n \
    \       return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n\
    \    }\n    $a = array();\n    $a[0] = $l[0];\n    $a[1] = $l[$m1];\n    $a[2]\
    \ = $l[$m2];\n    $a[3] = $l[$n - 1];\n    sort($a);\n    if ($a[1] == $a[2])\
    \ {\n        return $a[1];\n    }\n    if ($a[0] == $a[1]) {\n        return $a[0];\n\
    \    }\n    if ($a[0] == $a[2]) {\n        return $a[0];\n    }\n    if ($a[1]\
    \ == $a[3]) {\n        return $a[1];\n    }\n    if ($a[2] == $a[3]) {\n     \
    \   return $a[2];\n    }\n    return (($a[0] + $a[1]) / 2) + (($a[1] + $a[2])\
    \ / 2) + (($a[2] + $a[3]) / 2);\n}\n", "    if (is_array($l)) {\n        $l =\
    \ array_flip($l);\n        $l = array_sort($l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l", "    if\
    \ (!is_array($l)) {\n        return false;\n    }\n    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    if (count($l) % 2 == 0) {\n        return (float)($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n        return $l[count($l)\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n\
    \    if ($m1 < 0) {\n        return $l[0];\n    }\n    if ($m2 >= $n) {\n    \
    \    return $l[$n - 1];\n    }\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    if\
    \ ($m1 > $m2) {\n        $t = $m1;\n        $m1 = $m2;\n        $m2 = $t;\n  \
    \  }\n    $m = $m1 + (($m2 - $m1) / 2);\n    return $m;\n}\n", "    if (!$l) {\n\
    \        return null;\n    }\n    if ($l.length == 0) {\n        return null;\n\
    \    }\n    if ($l.length == 1) {\n        return $l[0];\n    }\n    var $l_len\
    \ = $l.length;\n    var $l_half = Math.floor($l_len / 2);\n    var $l_median =\
    \ $l[$l_half];\n    var $l_low = $l[0];\n    var $l_high = $l[$l_len - 1];\n \
    \   if ($l_half == $l_len / 2) {\n        return $l_median;\n    }\n    if ($l_half\
    \ < $l_len / 2) {\n        return $l_low;\n    }\n    return $l_high;\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $s = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $s += $l[$i];\n    }\n    $s /= $n;\n    if ($m\
    \ == 0) {\n        return $s;\n    }\n    if ($m1 == 0) {\n        return $s;\n\
    \    }\n    if ($m2 == 0) {\n        return $s;\n    }\n    $m1 = $m1 * 2;\n \
    \   $m2 = $m2 * 2;\n    $m1 = floor($m1);\n    $m2 = floor($m2);\n    $m3 = $m1\
    \ + $m2;\n    $m4 = $m1 - $m2;\n    $m5 = $m3 / 2;\n    $m6 = $m4 / 2;\n    $m7\
    \ = $m5 + $m6;\n    $m8 = $m5 - $m6;\n    if ($m7 == 0) {\n        return $s;\n\
    \    }\n    if ($m8 == 0) {\n        return $s;\n    }\n    if ($m7 > 0) {\n \
    \       return $m7;\n    }\n    if ($m8 > 0) {\n        return $m8;\n    }\n \
    \   return $s;\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n\
    \        $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n    \
    \    $l = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l\
    \ = array_unshift(0, $l);\n        $l = array_unshift(0, $l);\n        $l = array_unshift(0,\
    \ $l);\n        $l = array_unshift(0, $l", "    if ($l.length == 0) {\n      \
    \  return null;\n    }\n    var l = $l.sort(function(a, b) {\n        return a\
    \ - b;\n    });\n    var mid = Math.floor(l.length / 2);\n    if (l.length % 2\
    \ == 1) {\n        return l[mid];\n    } else {\n        return (l[mid] + l[mid\
    \ - 1]) / 2.0;\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n      \
    \  return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 =\
    \ $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($n % 2 == 0) {\n  \
    \      return ($l1 + $l2) / 2.0;\n    }\n    return $l1;\n}\n", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n        $l = array_sort($l);\n        $l =\
    \ array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = floor($n / 2);\n    $p = $m;\n    $q = $n - $m;\n\
    \    $m = $l[$p];\n    $l[$p] = $l[$q];\n    $l[$q] = $m;\n    $m = $l[$p];\n\
    \    $l[$p] = $l[0];\n    $l[0] = $m;\n    $m = $l[$q];\n    $l[$q] = $l[$n -\
    \ 1];\n    $l[$n - 1] = $m;\n    $m = $l[$p];\n    $l[$p] = $l[$n - 1];\n    $l[$n\
    \ - 1] = $m;\n    $m = $l[$p];\n    $l[$p] = $l[0];\n    $l[0] = $m;\n    $m =\
    \ $l[$q];\n    $l[$q] = $l[$n - 1];\n    $l[$n - 1] = $m;\n    $m = $l[$p];\n\
    \    $l[$p] = $l[0];\n    $l[0] = $m;\n    $m = $l[$q];\n    $l[$q] = $l[$n -\
    \ 1];\n    $l[$n - 1] = $m;\n    $m = $l[$p];\n    $l[$p] = $l[0];\n    $l[0]\
    \ = $m;\n    $m = $l[$q];\n    $l[$q] = $l[$n - 1];\n    $l[$n - 1] = $m;\n  \
    \  $m = $l[$p];\n    $l[$p] = $l[0];\n    $l[0] = $m;\n    $m = $l[$", "    $l\
    \ = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n\
    \    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(", "    $n = count($l);\n  \
    \  if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1\
    \ = $m - 1;\n    $m2 = $m + 1;\n    $l1 = array_slice($l, 0, $m1 + 1);\n    $l2\
    \ = array_slice($l, $m1 + 1, $n);\n    $l3 = array_slice($l, $m2, $n);\n    $l4\
    \ = array_slice($l, 0, $m2);\n    $l5 = array_slice($l, $m, $m);\n    $l6 = array_slice($l,\
    \ $m, $m2);\n    $l7 = array_slice($l, $m2, $n);\n    $l8 = array_slice($l, $m1,\
    \ $m);\n    $l9 = array_slice($l, $m1, $m2);\n    $l10 = array_slice($l, $m1,\
    \ $n);\n    $l11 = array_slice($l, $m, $n);\n    $l12 = array_slice($l, $m2, $n);\n\
    \    $l13 = array_slice($l, $m1, $n);\n    $l14 = array_slice($l, $m, $m1);\n\
    \    $l15 = array_slice($l, $m, $m2);\n    $l16 = array_slice($l, $m2, $m);\n\
    \    $l17 = array_slice($l, $m1, $m);\n    $l18 = array_slice($l, $m, $m1);\n\
    \    $l19 = array_slice($l, $m, $m2);\n    $l20 = array_slice($l, $m2, $m);\n\
    \    $l21 = array_slice($l, $m1, $m2);\n    $l22 = array_slice($l, $m2, $m1);\n\
    \    $l23 = array_slice($l, $m, $m1);\n    $l24 = array_slice($l, $m", "    if\
    \ (is_array($l)) {\n        $l = array_flip($l);\n    }\n    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    ", "    if (is_array($l)) {\n     \
    \   $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n \
    \       } else {\n            return $l[count($l) / 2];\n        }\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    $m = $n / 2;\n    $m = floor($m);\n    $m =\
    \ $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    }\n    return $m +\
    \ ($m - $l[$m - 1]);\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    $m = floor($n / 2);\n    $s = 0;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $s += $l[$i];\n    }\n    $s /= $n;\n    if ($n %\
    \ 2 == 1) {\n        return $s;\n    }\n    $m++;\n    $e = $m / 2;\n    $b =\
    \ $e - 1;\n    $a = $e + 1;\n    $s = $s - $l[$b] - $l[$a];\n    $s /= 2;\n  \
    \  return $s;\n}\n", "    if (!$l) {\n        return null;\n    }\n    if ($l.length\
    \ == 0) {\n        return null;\n    }\n    if ($l.length == 1) {\n        return\
    \ $l[0];\n    }\n    var l = $l.sort(function(a, b) {\n        return a - b;\n\
    \    });\n    var mid = Math.floor(l.length / 2);\n    if (l.length % 2 == 0)\
    \ {\n        return (l[mid] + l[mid - 1]) / 2;\n    } else {\n        return l[mid];\n\
    \    }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n       \
    \ $l = array_sort($l);\n        if (count($l) % 2 == 1) {\n            return\
    \ $l[count($l) / 2];\n        } else {\n            return ($l[count($l) / 2 -\
    \ 1] + $l[count($l) / 2]) / 2.0;\n        }\n    } else {\n        return 0;\n\
    \    }\n}\n", "    if (is_array($l)) {\n        $l = array_values($l);\n    }\n\
    \    if (empty($l)) {\n        return null;\n    }\n    $l = array_sort($l);\n\
    \    if (count($l) % 2 == 1) {\n        return $l[count($l) / 2];\n    }\n   \
    \ $l = array_values($l);\n    $l = array_sort($l);\n    $l = array_unshift($l,\
    \ 0);\n    return (float)($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m =\
    \ floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m3 = $m + 2;\n  \
    \  $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    $l3 = $l[$m3];\n    if ($n % 2 == 0)\
    \ {\n        return (($l1 + $l2) / 2);\n    } else {\n        return $l3;\n  \
    \  }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n        $l\
    \ = array_sort($l);\n        if (count($l) % 2 == 0) {\n            return (count($l)\
    \ / 2) - 1;\n        } else {\n            return count($l) / 2;\n        }\n\
    \    } else {\n        return 0;\n    }\n}\n", "    if (!$l) {\n        return\
    \ null;\n    }\n    $l.sort(function(a, b) {\n        return a - b;\n    });\n\
    \    var n = $l.length;\n    if (n % 2 == 1) {\n        return $l[n / 2];\n  \
    \  }\n    return ($l[n / 2] + $l[n / 2 - 1]) / 2.0;\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2\
    \ > $n - 1 ? $n - 1 : $m2;\n    $a = array();\n    $a = array_merge($a, $l);\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = $n / 2;\n    $m = floor($m);\n    $m = $l[$m];\n    if ($n %\
    \ 2 == 0) {\n        return $m;\n    }\n    return $m + ($m - $l[$m - 1]);\n}\n",
  "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0, $l);\n\
    \    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (float)($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n        } else {\n            return $l[count($l) / 2];\n      \
    \  }\n    } else {\n        return 0;\n    }\n}\n", "    $l = array_flip($l);\n\
    \    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m\
    \ = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 < 0) {\n\
    \        return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n - 1];\n\
    \    }\n    $a = $l[$m1];\n    $b = $l[$m2];\n    $c = $a + $b;\n    $d = $a -\
    \ $b;\n    if ($c - $d == 0) {\n        return $a;\n    }\n    if ($c - $d < 0)\
    \ {\n        return $b;\n    }\n    return $c;\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $",
  "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    $l = array_flip($l);\n\
    \    $l = array_sort($l);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    $m = floor($n / 2);\n    $p = array_copy($l);\n   \
    \ sort($p);\n    if ($n % 2 == 1) {\n        return $p[$m];\n    } else {\n  \
    \      return (float) $p[$m] + ((float) $p[$m + 1] - (float) $p[$m]) / 2.0;\n\
    \    }\n}\n", "    if (!$l) {\n        return null;\n    }\n    if ($l.length\
    \ == 0) {\n        return null;\n    }\n    if ($l.length == 1) {\n        return\
    \ $l[0];\n    }\n    var l = $l.sort(function(a, b) {\n        return a - b;\n\
    \    });\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2 == 0)\
    \ {\n        return (l[half] + l[half - 1]) / 2;\n    }\n    return l[half];\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n\
    \    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 <\
    \ 0) {\n        return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n\
    \ - 1];\n    }\n    $a = array();\n    $a = array_merge($a, $l);\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    ", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = floor($n / 2);\n    $m1 = floor($m);\n    $m2\
    \ = $m - $m1;\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n    if ($m1 > $m2) {\n\
    \        $t = $m1;\n        $m1 = $m2;\n        $m2 = $t;\n    }\n    return $m1\
    \ + $m2 / 2;\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    $n\
    \ = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = array_slice($l, 0, $m1\
    \ + 1);\n    $l2 = array_slice($l, $m1 + 1, $n);\n    if ($n % 2 == 0) {\n   \
    \     return (float)(($l1[$m1] + $l2[$m]) / 2);\n    }\n    return $l2[$m];\n\
    }\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m3 = $m2 - 1;\n    $m4 = $m2 + 1;\n\
    \    $m5 = $m4 - 1;\n    $m6 = $m4 + 1;\n    $m7 = $m6 - 1;\n    $m8 = $m6 + 1;\n\
    \    $m9 = $m8 - 1;\n    $m10 = $m8 + 1;\n    $m11 = $m10 - 1;\n    $m12 = $m10\
    \ + 1;\n    $m13 = $m12 - 1;\n    $m14 = $m12 + 1;\n    $m15 = $m14 - 1;\n   \
    \ $m16 = $m14 + 1;\n    $m17 = $m16 - 1;\n    $m18 = $m16 + 1;\n    $m19 = $m18\
    \ - 1;\n    $m20 = $m18 + 1;\n    $m21 = $m20 - 1;\n    $m22 = $m20 + 1;\n   \
    \ $m23 = $m22 - 1;\n    $m24 = $m22 + 1;\n    $m25 = $m24 - 1;\n    $m26 = $m24\
    \ + 1;\n    $m27 = $m26 - 1;\n    $m28 = $m26 + 1;\n    $m29 = $m28 - 1;\n   \
    \ $m30 = $m28 + 1;\n    $m31 = $m30 - 1;\n    $m32 = $m30 + 1;\n    $m33 = $m32\
    \ - 1;\n    $m34 = $m32 + 1;\n    $m35 = $m34 - 1;\n    $m36 = $m34 + 1;\n   \
    \ $m37 = $m36 - 1;\n    $m38 = $m36 + 1;\n    $m39 = $m38 - 1;\n    $m40 = $m38\
    \ +", "    $l = array_flip($l);\n    $l = array_sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return (float)($l[$n / 2] + $l[$n / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n  \
    \  $s = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $s += $l[$i];\n    }\n\
    \    $s /= $n;\n    if ($n % 2 == 0) {\n        return $s;\n    }\n    return\
    \ $s + $l[$m];\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 ==\
    \ 0) {\n        return (array_sum($l[0:$m]) + array_sum($l[$m:$n])) / 2.0;\n \
    \   } else {\n        return array_sum($l[0:$m]) / 2.0;\n    }\n}\n", "    $n\
    \ = $l.length;\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $a = $l[$m1];\n    $b = $l[$m2];\n\
    \    if ($n % 2 == 1) {\n        return $a;\n    }\n    return ($a + $b) / 2.0;\n\
    }\n", "    $l = array_flip($l);\n    $n = count($l);\n    if ($n == 0) {\n   \
    \     return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n\
    \    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    if ($m1 <\
    \ 0) {\n        return $l[0];\n    }\n    if ($m2 >= $n) {\n        return $l[$n\
    \ - 1];\n    }\n    $a = $l[$m1];\n    $b = $l[$m2];\n    $c = $a + $b;\n    $c\
    \ = $c / 2;\n    return $c;\n}\n", "    $n = count($l);\n    $m = 0;\n    $p =\
    \ 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v\
    \ = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b\
    \ = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h\
    \ = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n\
    \ = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t\
    \ = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z\
    \ = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f\
    \ = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l\
    \ = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r\
    \ = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x\
    \ = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d\
    \ = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;", "    if (!is_array($l))\
    \ {\n        throw new Exception('median() expects parameter 1 to be array');\n\
    \    }\n    if (empty($l)) {\n        throw new Exception('median() expects parameter\
    \ 1 to have at least one element');\n    }\n    $l = array_flip($l);\n    $l =\
    \ array_sort($l);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift", "    $n = $l.length;\n   \
    \ if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n        return\
    \ $l[0];\n    }\n    $m = $n / 2;\n    $m1 = $m - 1;\n    $m2 = $m;\n    $m3 =\
    \ $m + 1;\n    $a = $l[$m1];\n    $b = $l[$m2];\n    $c = $l[$m3];\n    if ($a\
    \ > $b) {\n        if ($a > $c) {\n            return $a;\n        } else {\n\
    \            return $c;\n        }\n    } else {\n        if ($b > $c) {\n   \
    \         return $b;\n        } else {\n            return $c;\n        }\n  \
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n \
    \   }\n    $m = $n / 2;\n    $m = floor($m);\n    $m = $l[$m];\n    if ($n % 2\
    \ == 0) {\n        return $m;\n    }\n    return $m + ($l[$m + 1] - $l[$m]) /\
    \ 2;\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return (float)($l[count($l) / 2] + $l[count($l) / 2 - 1])\
    \ / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n", "    $l\
    \ = array_flip($l);\n    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1\
    \ = $m1 < 0 ? 0 : $m1;\n    $m2 = $m2 > $n - 1 ? $n - 1 : $m2;\n    $a = array_slice($l,\
    \ $m1, $m2 + 1);\n    $a = array_flip($a);\n    $a = array_sort($a);\n    if ($n\
    \ % 2 == 0) {\n        return (count($a) % 2 == 0) ? $a[floor($n / 2)] : ($a[floor($n\
    \ / 2)] + $a[floor($n / 2) - 1]) / 2.0;\n    } else {\n        return $a[floor($n\
    \ / 2)];\n    }\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n \
    \   $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0,\
    \ $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l\
    \ = array_unshift(0, $l);\n    $l = array_unshift(0, $l);\n    $l = array_unshift(",
  "    $l = array_flip($l);\n    $l = array_sort($l);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    if (is_array($l))\
    \ {\n        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n \
    \       } else {\n            return $l[count($l) / 2];\n        }\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    $m = $n / 2;\n    $m = floor($m);\n    $m =\
    \ $l[$m];\n    if ($n % 2 == 0) {\n        return $m;\n    } else {\n        return\
    \ $m + ($l[$m + 1] - $l[$m]) / 2;\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m\
    \ - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($n\
    \ % 2 == 0) {\n        return ($l1 + $l2) / 2.0;\n    } else {\n        return\
    \ $l1;\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \    }\n    $l = array_flip($l);\n    $l = array_sort($l);\n    if (count($l)\
    \ % 2 == 0) {\n        return (float)($l[count($l) / 2 - 1] + $l[count($l) / 2])\
    \ / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n", "    $n\
    \ = $l.length;\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m3 = $m + 2;\n    $l1 = $l[$m1];\n\
    \    $l2 = $l[$m2];\n    $l3 = $l[$m3];\n    if ($n % 2 == 1) {\n        return\
    \ $l1;\n    }\n    return (($l1 + $l2) / 2);\n}\n", "    $n = count($l);\n   \
    \ if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1\
    \ = $m - 1;\n    $m2 = $m + 1;\n    $m3 = $m2 - 1;\n    $m4 = $m2 + 1;\n    $m5\
    \ = $m4 - 1;\n    $m6 = $m4 + 1;\n    $m7 = $m6 - 1;\n    $m8 = $m6 + 1;\n   \
    \ $m9 = $m8 - 1;\n    $m10 = $m8 + 1;\n    $m11 = $m10 - 1;\n    $m12 = $m10 +\
    \ 1;\n    $m13 = $m12 - 1;\n    $m14 = $m12 + 1;\n    $m15 = $m14 - 1;\n    $m16\
    \ = $m14 + 1;\n    $m17 = $m16 - 1;\n    $m18 = $m16 + 1;\n    $m19 = $m18 - 1;\n\
    \    $m20 = $m18 + 1;\n    $m21 = $m20 - 1;\n    $m22 = $m20 + 1;\n    $m23 =\
    \ $m22 - 1;\n    $m24 = $m22 + 1;\n    $m25 = $m24 - 1;\n    $m26 = $m24 + 1;\n\
    \    $m27 = $m26 - 1;\n    $m28 = $m26 + 1;\n    $m29 = $m28 - 1;\n    $m30 =\
    \ $m28 + 1;\n    $m31 = $m30 - 1;\n    $m32 = $m30 + 1;\n    $m33 = $m32 - 1;\n\
    \    $m34 = $m32 + 1;\n    $m35 = $m34 - 1;\n    $m36 = $m34 + 1;\n    $m37 =\
    \ $m36 - 1;\n    $m38 = $m36 + 1;\n    $m39 = $m38 - 1;\n    $m40 = $m38 +", " \
    \   $n = sizeof($l);\n    $m = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n   \
    \ $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n \
    \   $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n\
    \    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n\
    \    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n\
    \    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n\
    \    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n\
    \    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n    $e = 0;\n\
    \    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n\
    \    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n\
    \    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n\
    \    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n\
    \    $d = 0;\n    $e = 0;", "    $l = array_flip($l);\n    $l = array_sort($l);\n\
    \    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    if\
    \ ($l === null || $l === undefined) {\n        return null;\n    }\n    if ($l.length\
    \ === 0) {\n        return null;\n    }\n    if ($l.length === 1) {\n        return\
    \ $l[0];\n    }\n    var $sorted = $l.sort();\n    var $middle = Math.floor($sorted.length\
    \ / 2);\n    if ($sorted.length % 2 === 0) {\n        return ($sorted[$middle]\
    \ + $sorted[$middle - 1]) / 2.0;\n    } else {\n        return $sorted[$middle];\n\
    \    }\n}\n", "    $n = $l.length;\n    if ($n == 0) {\n        return null;\n\
    \    }\n    if ($n == 1) {\n        return $l[0];\n    }\n    if ($n % 2 == 0)\
    \ {\n        return (median($l[0:$n/2]) + median($l[$n/2:$n])) / 2;\n    }\n \
    \   return $l[$n/2];\n}\n", "    $n = $l.length;\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    if ($n == 1) {\n        return $l[0];\n    }\n    $m\
    \ = $n / 2;\n    $m = floor($m);\n    $m = $l[$m];\n    $l = $l[0:$m];\n    $l\
    \ = $l + $l[$n - $m:$n];\n    $l = $l / 2;\n    return $l;\n}\n", "    $n = $l.length;\n\
    \    if ($n == 0) {\n        return null;\n    }\n    if ($n == 1) {\n       \
    \ return $l[0];\n    }\n    $m = $n / 2;\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n\
    \    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n    if ($l1 > $l2) {\n        $l1 = $l2;\n\
    \        $l2 = $l1;\n        $m1 = $m2;\n        $m2 = $m1;\n    }\n    return\
    \ ($l1 + $l2) / 2.0;\n}\n", "    $l = array_flip($l);\n    $l = array_sort($l);\n\
    \    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l\
    \ = array_unshift($l, 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l,\
    \ 0);\n    $l = array_unshift($l, 0);\n    $l = array_unshift($l, 0);", "    if\
    \ (is_array($l)) {\n        $l = array_flip($l);\n        $l = array_sort($l);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $", "    if (is_array($l)) {\n        $l = array_flip($l);\n  \
    \      $l = array_sort($l);\n        $l = array_unshift($l, 0);\n        $l =\
    \ array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 =\
    \ $m - 1;\n    $m2 = $m + 1;\n    $a = array();\n    $a[0] = $l[0];\n    $a[$m1]\
    \ = $l[$m1];\n    $a[$m2] = $l[$m2];\n    $a = sort($a);\n    if ($n % 2 == 0)\
    \ {\n        return $a[$m];\n    } else {\n        return $a[floor($m - 0.5)];\n\
    \    }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    $m = floor($m);\n  \
    \  $m = $l[$m];\n    if ($n % 2 == 1) {\n        return $m;\n    } else {\n  \
    \      $m = ($m + $l[$m - 1]) / 2;\n        return $m;\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $m = floor($n\
    \ / 2);\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $l1 = $l[$m1];\n    $l2 = $l[$m2];\n\
    \    if ($n % 2 == 0) {\n        return ($l1 + $l2) / 2.0;\n    }\n    return\
    \ $l1;\n}\n", "    $l = array_flip($l);\n    $n = count($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2) {\n        return $l[$m];\n    } else {\n        return\
    \ (float)($l[$m] + $l[$m + 1]) / 2.0;\n    }\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n \
    \       } else {\n            return $l[count($l) / 2];\n        }\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n\
    \    $m = floor($m);\n    $m = $m + 1;\n    $m = $m - 1;\n    $m = $m * 2;\n \
    \   $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m\
    \ = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m\
    \ - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n\
    \    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m\
    \ = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m\
    \ - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n\
    \    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m\
    \ = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m\
    \ - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n\
    \    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m = $m - 1;\n    $m\
    \ = $m - 1;\n    $m = $m - 1;\n    $m =", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n\
    \    $m2 = $m + 1;\n    $a = array();\n    $a = array_merge($a, $l);\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n\
    \    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n  \
    \  $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a\
    \ = array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a =\
    \ array_merge($a, array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a,\
    \ array(0));\n    $a = array_merge($a, array(0));\n    $a = array_merge($a, array(0));",
  "    $n = sizeof($l);\n    if ($n == 0) {\n        return 0;\n    }\n    $m = $n\
    \ / 2;\n    $m = floor($m);\n    $m = $l[$m];\n    if ($n % 2 == 1) {\n      \
    \  return $m;\n    }\n    $m1 = $m - 1;\n    $m2 = $m + 1;\n    $m1 = $l[$m1];\n\
    \    $m2 = $l[$m2];\n    return (($m1 > $m2) ? $m1 : $m2);\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $m = $n / 2;\n    $m1 =\
    \ floor($m);\n    $m2 = ceil($m);\n    $m1 = $l[$m1];\n    $m2 = $l[$m2];\n  \
    \  if ($m1 > $m2) {\n        $m = $m2;\n    } else {\n        $m = $m1;\n    }\n\
    \    return $m;\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $", "    if (is_array($l)) {\n  \
    \      $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (float)($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n        } else {\n            return $l[count($l) / 2];\n      \
    \  }\n    } else {\n        return 0;\n    }\n}\n", "    $n = count($l);\n   \
    \ if ($n == 0) {\n        return null;\n    }\n    $m = floor($n / 2);\n    $s\
    \ = 0;\n    for ($i = 0; $i < $m; $i++) {\n        $s += $l[$i];\n    }\n    if\
    \ ($n % 2 == 1) {\n        return $s;\n    }\n    $m++;\n    $s += $l[$m - 1];\n\
    \    return $s / 2;\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        if (count($l) % 2 == 1) {\n           \
    \ return $l[count($l) / 2];\n        } else {\n            $l = array_sort($l);\n\
    \            return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n       \
    \ }\n    } else {\n        return 0;\n    }\n}\n", "    if (is_array($l)) {\n\
    \        $l = array_flip($l);\n        $l = array_sort($l);\n        if (count($l)\
    \ % 2 == 0) {\n            return (count($l) / 2 - 1) * $l[count($l) / 2];\n \
    \       } else {\n            return $l[count($l) / 2];\n        }\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    $m = floor($n / 2);\n    $m1 = $m - 1;\n   \
    \ $m2 = $m + 1;\n    if ($m1 < 0) {\n        return $l[0];\n    }\n    if ($m2\
    \ >= $n) {\n        return $l[$n - 1];\n    }\n    $a = array();\n    $a[0] =\
    \ $l[0];\n    $a[1] = $l[$m1];\n    $a[2] = $l[$m2];\n    $a[3] = $l[$n - 1];\n\
    \    sort($a);\n    if ($a[1] == $a[2]) {\n        return $a[1];\n    }\n    if\
    \ ($a[0] == $a[1]) {\n        return $a[0];\n    }\n    if ($a[0] == $a[2]) {\n\
    \        return $a[0];\n    }\n    if ($a[1] == $a[2]) {\n        return $a[1];\n\
    \    }\n    return (($a[0] + $a[1]) / 2);\n}\n", "    if (is_array($l)) {\n  \
    \      $l = array_flip($l);\n        $l = array_sort($l);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $",
  "    if (is_array($l)) {\n        $l = array_values($l);\n    }\n    if (count($l)\
    \ == 0) {\n        return null;\n    }\n    $l = array_sort($l);\n    if (count($l)\
    \ % 2 == 1) {\n        return $l[count($l) / 2];\n    }\n    return ($l[count($l)\
    \ / 2 - 1] + $l[count($l) / 2]) / 2.0;\n}\n", "    if (is_array($l)) {\n     \
    \   $l = array_values($l);\n    }\n    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $l = array_sort($l);\n    if (count($l) % 2 == 1) {\n        return\
    \ $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2 - 1] + $l[count($l)\
    \ / 2]) / 2.0;\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_values($l);\n\
    \    }\n    $l = array_sort($l);\n    if (count($l) % 2 == 0) {\n        return\
    \ (count($l) / 2 - 1) + $l[count($l) / 2];\n    } else {\n        return $l[count($l)\
    \ / 2];\n    }\n}\n", "    if (is_array($l)) {\n        $l = array_flip($l);\n\
    \        $l = array_sort($l);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n    \
    \    $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l\
    \ = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l,\
    \ 0);\n        $l = array_unshift($l, 0);\n        $l = array_unshift($l, 0);\n\
    \        $l = array_unshift($l, 0);\n        $"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
